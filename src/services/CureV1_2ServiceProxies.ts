/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class CureScheduleServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析排床 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureScheduleGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureBedPatientDetailResultEntry> {
        let url_ = this.baseUrl + "/api/CureSchedule/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureScheduleGET(_response));
        });
    }

    protected processCureScheduleGET(response: AxiosResponse): Promise<CureBedPatientDetailResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureBedPatientDetailResultEntry.fromJS(resultData200);
            return Promise.resolve<CureBedPatientDetailResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureBedPatientDetailResultEntry>(null as any);
    }

    /**
     * 透析排床 -- 更新数据
     * @param type (optional)
     * @param body (optional)
     * @return Success
     */
    cureSchedulePOST(id: string, type: number | undefined, body: CureScheduleEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchedulePOST(_response));
        });
    }

    protected processCureSchedulePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 根据患者id查询上一次排床图标和颜色
     * @param patientId 患者编号
     * @param dialysisMode (optional) 透析方式
     * @return Success
     */
    lost(patientId: string, dialysisMode: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureBedPatientDetailResultEntry> {
        let url_ = this.baseUrl + "/api/CureSchedule/Lost/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (dialysisMode === null)
            throw new Error("The parameter 'dialysisMode' cannot be null.");
        else if (dialysisMode !== undefined)
            url_ += "dialysisMode=" + encodeURIComponent("" + dialysisMode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLost(_response));
        });
    }

    protected processLost(response: AxiosResponse): Promise<CureBedPatientDetailResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureBedPatientDetailResultEntry.fromJS(resultData200);
            return Promise.resolve<CureBedPatientDetailResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureBedPatientDetailResultEntry>(null as any);
    }

    /**
     * 透析排床 -- 根据日期查询数据
     * @param areaId 透析室标识
     * @param date (optional) 起始日期
     * @return Success
     */
    byAreaId(areaId: string, date: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureSchedule/ByAreaId/{areaId}?";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByAreaId(_response));
        });
    }

    protected processByAreaId(response: AxiosResponse): Promise<CureScheduleDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureScheduleDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleDetailViewResultEntry>(null as any);
    }

    /**
     * 透析排床 -- 根据日期、班次、透析区间查询数据
     * @param areaId (optional)
     * @param date (optional)
     * @param cureShifts (optional)
     * @param areas (optional) 透析区间，逗号分隔
     * @param key (optional)
     * @param filter (optional)
     * @return Success
     */
    queryPatient(areaId: string | undefined, date: string | undefined, cureShifts: string | undefined, areas: string | undefined, key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/QueryPatient?";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (cureShifts === null)
            throw new Error("The parameter 'cureShifts' cannot be null.");
        else if (cureShifts !== undefined)
            url_ += "cureShifts=" + encodeURIComponent("" + cureShifts) + "&";
        if (areas === null)
            throw new Error("The parameter 'areas' cannot be null.");
        else if (areas !== undefined)
            url_ += "areas=" + encodeURIComponent("" + areas) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryPatient(_response));
        });
    }

    protected processQueryPatient(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 详情
     * @param date (optional)
     * @return Success
     */
    queryPatientScheduleDetails(patientId: string, date: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/QueryPatientScheduleDetails/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryPatientScheduleDetails(_response));
        });
    }

    protected processQueryPatientScheduleDetails(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班 -- 根据日期查询数据
     * @param areaId 透析室标识
     * @param date (optional) 起始日期
     * @param key (optional)
     * @param filter (optional)
     * @return Success
     */
    queryShift(areaId: string, date: string | undefined, key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleShiftViewResult> {
        let url_ = this.baseUrl + "/api/CureSchedule/QueryShift/{areaId}?";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryShift(_response));
        });
    }

    protected processQueryShift(response: AxiosResponse): Promise<CureScheduleShiftViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleShiftViewResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleShiftViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleShiftViewResult>(null as any);
    }

    /**
     * 透析排床 -- 根据日期、班次、透析区间查询数据
     * @param areaId (optional)
     * @param date (optional)
     * @param shifts (optional) 班次，逗号分隔
     * @param areas (optional) 透析区间，逗号分隔
     * @return Success
     */
    byAreas(areaId: string | undefined, date: string | undefined, shifts: string | undefined, areas: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureSchedule/ByAreas?";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (shifts === null)
            throw new Error("The parameter 'shifts' cannot be null.");
        else if (shifts !== undefined)
            url_ += "shifts=" + encodeURIComponent("" + shifts) + "&";
        if (areas === null)
            throw new Error("The parameter 'areas' cannot be null.");
        else if (areas !== undefined)
            url_ += "areas=" + encodeURIComponent("" + areas) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByAreas(_response));
        });
    }

    protected processByAreas(response: AxiosResponse): Promise<CureScheduleDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureScheduleDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleDetailViewResultEntry>(null as any);
    }

    /**
     * 透析排床 -- 根据日期、班次、透析区间查询数据 - 导出数据
     * @param areaId (optional)
     * @param date (optional)
     * @param shifts (optional) 班次，逗号分隔
     * @param areas (optional) 透析区间，逗号分隔
     * @param choice (optional)
     * @param today (optional)
     * @return Success
     */
    toExcel(areaId: string | undefined, date: string | undefined, shifts: string | undefined, areas: string | undefined, choice: number[] | undefined, today: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/ToExcel?";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (shifts === null)
            throw new Error("The parameter 'shifts' cannot be null.");
        else if (shifts !== undefined)
            url_ += "shifts=" + encodeURIComponent("" + shifts) + "&";
        if (areas === null)
            throw new Error("The parameter 'areas' cannot be null.");
        else if (areas !== undefined)
            url_ += "areas=" + encodeURIComponent("" + areas) + "&";
        if (choice === null)
            throw new Error("The parameter 'choice' cannot be null.");
        else if (choice !== undefined)
            choice && choice.forEach(item => { url_ += "choice=" + encodeURIComponent("" + item) + "&"; });
        if (today === null)
            throw new Error("The parameter 'today' cannot be null.");
        else if (today !== undefined)
            url_ += "today=" + encodeURIComponent("" + today) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processToExcel(_response));
        });
    }

    protected processToExcel(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 根据日期、班次、透析区间查询数据 - 导入数据 - 提交Excel文件 - 返回校验结果
     * @param fileId (optional)
     * @return Success
     */
    validateSchedule(fileId: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/ValidateSchedule?";
        if (fileId === null)
            throw new Error("The parameter 'fileId' cannot be null.");
        else if (fileId !== undefined)
            url_ += "fileId=" + encodeURIComponent("" + fileId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processValidateSchedule(_response));
        });
    }

    protected processValidateSchedule(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 排床统计 -- 根据日期查询当天排床数量
     * @param date (optional) 日期
     * @param deptDialysisAreaId (optional) 透析区间
     * @param shiftId (optional) 透析班次
     * @return Success
     */
    bedScheduleCount(date: string | undefined, deptDialysisAreaId: string | undefined, shiftId: string | undefined , cancelToken?: CancelToken | undefined): Promise<BedScheduleCountViewResult> {
        let url_ = this.baseUrl + "/api/CureSchedule/BedScheduleCount?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (deptDialysisAreaId === null)
            throw new Error("The parameter 'deptDialysisAreaId' cannot be null.");
        else if (deptDialysisAreaId !== undefined)
            url_ += "deptDialysisAreaId=" + encodeURIComponent("" + deptDialysisAreaId) + "&";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBedScheduleCount(_response));
        });
    }

    protected processBedScheduleCount(response: AxiosResponse): Promise<BedScheduleCountViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BedScheduleCountViewResult.fromJS(resultData200);
            return Promise.resolve<BedScheduleCountViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BedScheduleCountViewResult>(null as any);
    }

    /**
     * 透析排床 -- 根据日期查询数据
     * @param areaId 透析室标识
     * @param date (optional) 起始日期
     * @return Success
     */
    supper(areaId: string, date: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleDetailViewSupperResult> {
        let url_ = this.baseUrl + "/api/CureSchedule/Supper/{areaId}?";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSupper(_response));
        });
    }

    protected processSupper(response: AxiosResponse): Promise<CureScheduleDetailViewSupperResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleDetailViewSupperResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleDetailViewSupperResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleDetailViewSupperResult>(null as any);
    }

    /**
     * 透析排床 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureSchedulePOST2(body: CureScheduleEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchedulePOST2(_response));
        });
    }

    protected processCureSchedulePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 根据排班生成排床数据
     * @param date (optional)
     * @return Success
     */
    postByShift(date: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/PostByShift?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPostByShift(_response));
        });
    }

    protected processPostByShift(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床另存为模板
     * @param body (optional)
     * @return Success
     */
    save(body: CureScheduleSaveEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSave(_response));
        });
    }

    protected processSave(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    isValidateDataIntoStroge(body: TempDisplayCureScheduleValidate[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/IsValidateDataIntoStroge";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIsValidateDataIntoStroge(_response));
        });
    }

    protected processIsValidateDataIntoStroge(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 自动排床
     * @param date (optional)
     * @param areaId (optional)
     * @return Success
     */
    autoSchedule(date: string | undefined, areaId: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/AutoSchedule?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAutoSchedule(_response));
        });
    }

    protected processAutoSchedule(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 换床
     * @param body (optional) 拖动的源信息和目的信息
     * @return Success
     */
    drag(body: CureScheduleDragEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/Drag";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrag(_response));
        });
    }

    protected processDrag(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 批量换床
     * @param body (optional) 拖动的源信息和目的信息
     * @return Success
     */
    batch(body: CureScheduleDragEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/Drag/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch(_response));
        });
    }

    protected processBatch(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 取消排班
     * @return Success
     */
    delete(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 取消排床
     * @param id (optional)
     * @return Success
     */
    cancelShift(id: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/CancelShift?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCancelShift(_response));
        });
    }

    protected processCancelShift(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 判断是做新增还是换床
     * @param id (optional)
     * @param body (optional)
     * @return Success
     */
    getOption(id: string | undefined, body: CureScheduleEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/GetOption?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetOption(_response));
        });
    }

    protected processGetOption(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureScheduleConsumableServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析排床耗材 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureScheduleConsumableGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureScheduleConsumableResultEntry> {
        let url_ = this.baseUrl + "/api/CureScheduleConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureScheduleConsumableGET(_response));
        });
    }

    protected processCureScheduleConsumableGET(response: AxiosResponse): Promise<CureScheduleConsumableResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleConsumableResultEntry.fromJS(resultData200);
            return Promise.resolve<CureScheduleConsumableResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleConsumableResultEntry>(null as any);
    }

    /**
     * 透析排床耗材 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureScheduleConsumablePOST(id: string, body: CureScheduleConsumableViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheduleConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureScheduleConsumablePOST(_response));
        });
    }

    protected processCureScheduleConsumablePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床耗材 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleConsumableResult> {
        let url_ = this.baseUrl + "/api/CureScheduleConsumable/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter(_response));
        });
    }

    protected processFilter(response: AxiosResponse): Promise<CureScheduleConsumableResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleConsumableResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleConsumableResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleConsumableResult>(null as any);
    }

    /**
     * 透析排床耗材 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureScheduleConsumablePOST2(body: CureScheduleConsumableViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheduleConsumable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureScheduleConsumablePOST2(_response));
        });
    }

    protected processCureScheduleConsumablePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床耗材 -- 根据Id删除数据
     * @return Success
     */
    delete2(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheduleConsumable/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete2(_response));
        });
    }

    protected processDelete2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureSchemeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 治疗方案 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureSchemeGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureSchemeResultEntry> {
        let url_ = this.baseUrl + "/api/CureScheme/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchemeGET(_response));
        });
    }

    protected processCureSchemeGET(response: AxiosResponse): Promise<CureSchemeResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureSchemeResultEntry.fromJS(resultData200);
            return Promise.resolve<CureSchemeResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureSchemeResultEntry>(null as any);
    }

    /**
     * 治疗方案 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureSchemePOST(id: string, body: CureSchemeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheme/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchemePOST(_response));
        });
    }

    protected processCureSchemePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗方案 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter2(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureSchemeResult> {
        let url_ = this.baseUrl + "/api/CureScheme/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter2(_response));
        });
    }

    protected processFilter2(response: AxiosResponse): Promise<CureSchemeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureSchemeResult.fromJS(resultData200);
            return Promise.resolve<CureSchemeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureSchemeResult>(null as any);
    }

    /**
     * 治疗方案 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureSchemePOST2(body: CureSchemeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheme";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchemePOST2(_response));
        });
    }

    protected processCureSchemePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗方案 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForCureScheme(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheme/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForCureScheme(_response));
        });
    }

    protected processMoveNodeForCureScheme(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗方案 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForCureScheme(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheme/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForCureScheme(_response));
        });
    }

    protected processUpNodeForCureScheme(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗方案 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForCureScheme(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheme/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForCureScheme(_response));
        });
    }

    protected processDownNodeForCureScheme(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗方案 -- 根据Id删除数据
     * @return Success
     */
    delete3(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheme/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete3(_response));
        });
    }

    protected processDelete3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureShiftServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析班次 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureShiftGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureShiftResultEntry> {
        let url_ = this.baseUrl + "/api/CureShift/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureShiftGET(_response));
        });
    }

    protected processCureShiftGET(response: AxiosResponse): Promise<CureShiftResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureShiftResultEntry.fromJS(resultData200);
            return Promise.resolve<CureShiftResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureShiftResultEntry>(null as any);
    }

    /**
     * 透析班次 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureShiftPOST(id: string, body: CureShiftViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureShift/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureShiftPOST(_response));
        });
    }

    protected processCureShiftPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析班次 -- 查询当前时间所在的透析班次
     * @return Success
     */
    current(  cancelToken?: CancelToken | undefined): Promise<CureShiftResultEntry> {
        let url_ = this.baseUrl + "/api/CureShift/Current";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurrent(_response));
        });
    }

    protected processCurrent(response: AxiosResponse): Promise<CureShiftResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureShiftResultEntry.fromJS(resultData200);
            return Promise.resolve<CureShiftResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureShiftResultEntry>(null as any);
    }

    /**
     * 透析班次 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter3(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureShiftResult> {
        let url_ = this.baseUrl + "/api/CureShift/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter3(_response));
        });
    }

    protected processFilter3(response: AxiosResponse): Promise<CureShiftResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureShiftResult.fromJS(resultData200);
            return Promise.resolve<CureShiftResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureShiftResult>(null as any);
    }

    /**
     * 透析班次 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureShiftPOST2(body: CureShiftViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureShift";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureShiftPOST2(_response));
        });
    }

    protected processCureShiftPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析班次 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForCureShift(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureShift/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForCureShift(_response));
        });
    }

    protected processMoveNodeForCureShift(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析班次 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForCureShift(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureShift/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForCureShift(_response));
        });
    }

    protected processUpNodeForCureShift(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析班次 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForCureShift(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureShift/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForCureShift(_response));
        });
    }

    protected processDownNodeForCureShift(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析班次 -- 根据Id删除数据
     * @return Success
     */
    delete4(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureShift/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete4(_response));
        });
    }

    protected processDelete4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureTemperatureRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 体温记录单 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureTemperatureRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordGET(_response));
        });
    }

    protected processCureTemperatureRecordGET(response: AxiosResponse): Promise<CureTemperatureRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordViewResultEntry>(null as any);
    }

    /**
     * 体温记录单 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureTemperatureRecordPOST(id: string, body: CureTemperatureRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordPOST(_response));
        });
    }

    protected processCureTemperatureRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 体温记录单 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter4(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordViewResult> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter4(_response));
        });
    }

    protected processFilter4(response: AxiosResponse): Promise<CureTemperatureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordViewResult>(null as any);
    }

    /**
     * 体温记录单 -- 打印
     * @param id (optional)
     * @param beginDate (optional)
     * @param endDate (optional)
     * @return Success
     */
    print(id: string | undefined, beginDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecord/Print?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (beginDate === null)
            throw new Error("The parameter 'beginDate' cannot be null.");
        else if (beginDate !== undefined)
            url_ += "beginDate=" + encodeURIComponent(beginDate ? "" + beginDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrint(_response));
        });
    }

    protected processPrint(response: AxiosResponse): Promise<CureTemperatureRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordViewResultEntry>(null as any);
    }

    /**
     * 体温记录单 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureTemperatureRecordPOST2(body: CureTemperatureRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordPOST2(_response));
        });
    }

    protected processCureTemperatureRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 体温记录单 -- 根据Id删除数据
     * @return Success
     */
    delete5(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete5(_response));
        });
    }

    protected processDelete5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureTemperatureRecordDetailServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 体温记录单明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureTemperatureRecordDetailGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordDetailGET(_response));
        });
    }

    protected processCureTemperatureRecordDetailGET(response: AxiosResponse): Promise<CureTemperatureRecordDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordDetailViewResultEntry>(null as any);
    }

    /**
     * 体温记录单明细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureTemperatureRecordDetailPOST(id: string, body: CureTemperatureRecordDetailEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordDetailPOST(_response));
        });
    }

    protected processCureTemperatureRecordDetailPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 新增体温记录单明细——默认数据
     * @param temperatureRecordId (optional)
     * @return Success
     */
    getNew(temperatureRecordId: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail/GetNew?";
        if (temperatureRecordId === null)
            throw new Error("The parameter 'temperatureRecordId' cannot be null.");
        else if (temperatureRecordId !== undefined)
            url_ += "temperatureRecordId=" + encodeURIComponent("" + temperatureRecordId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetNew(_response));
        });
    }

    protected processGetNew(response: AxiosResponse): Promise<CureTemperatureRecordDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordDetailViewResultEntry>(null as any);
    }

    /**
     * 自动计算住院、手术、分娩天数
     * @param tempRecordId (optional)
     * @param targetDate (optional)
     * @return Success
     */
    getDays(tempRecordId: string | undefined, targetDate: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail/GetDays?";
        if (tempRecordId === null)
            throw new Error("The parameter 'tempRecordId' cannot be null.");
        else if (tempRecordId !== undefined)
            url_ += "tempRecordId=" + encodeURIComponent("" + tempRecordId) + "&";
        if (targetDate === null)
            throw new Error("The parameter 'targetDate' cannot be null.");
        else if (targetDate !== undefined)
            url_ += "targetDate=" + encodeURIComponent(targetDate ? "" + targetDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDays(_response));
        });
    }

    protected processGetDays(response: AxiosResponse): Promise<CureTemperatureRecordDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordDetailViewResultEntry>(null as any);
    }

    /**
     * 体温记录单明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter5(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordDetailViewResult> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter5(_response));
        });
    }

    protected processFilter5(response: AxiosResponse): Promise<CureTemperatureRecordDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordDetailViewResult.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordDetailViewResult>(null as any);
    }

    /**
     * 体温记录单明细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureTemperatureRecordDetailPOST2(body: CureTemperatureRecordDetailEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordDetailPOST2(_response));
        });
    }

    protected processCureTemperatureRecordDetailPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 体温记录单明细 -- 根据Id删除数据
     * @return Success
     */
    delete6(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete6(_response));
        });
    }

    protected processDelete6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureTemperatureRecordDetailStatusServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 体温记录单明细患者状态 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureTemperatureRecordDetailStatusGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordDetailStatusViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetailStatus/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordDetailStatusGET(_response));
        });
    }

    protected processCureTemperatureRecordDetailStatusGET(response: AxiosResponse): Promise<CureTemperatureRecordDetailStatusViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordDetailStatusViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordDetailStatusViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordDetailStatusViewResultEntry>(null as any);
    }

    /**
     * 体温记录单明细患者状态 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureTemperatureRecordDetailStatusPOST(id: string, body: CureTemperatureRecordDetailStatusEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetailStatus/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordDetailStatusPOST(_response));
        });
    }

    protected processCureTemperatureRecordDetailStatusPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 体温记录单明细患者状态 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter6(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordDetailStatusViewResult> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetailStatus/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter6(_response));
        });
    }

    protected processFilter6(response: AxiosResponse): Promise<CureTemperatureRecordDetailStatusViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordDetailStatusViewResult.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordDetailStatusViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordDetailStatusViewResult>(null as any);
    }

    /**
     * 体温记录单明细患者状态 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureTemperatureRecordDetailStatusPOST2(body: CureTemperatureRecordDetailStatusEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetailStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordDetailStatusPOST2(_response));
        });
    }

    protected processCureTemperatureRecordDetailStatusPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 体温记录单明细患者状态 -- 根据Id删除数据
     * @return Success
     */
    delete7(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetailStatus/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete7(_response));
        });
    }

    protected processDelete7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

/** 总排床统计 */
export class BedScheduleCountView implements IBedScheduleCountView {
    /** 班次 */
    shiftName?: string | undefined;
    /** 已排床 */
    usedCount?: number;
    /** 可用排床 */
    enableCount?: number;
    /** 总床位 */
    totalCount?: number;

    constructor(data?: IBedScheduleCountView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shiftName = _data["shiftName"];
            this.usedCount = _data["usedCount"];
            this.enableCount = _data["enableCount"];
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): BedScheduleCountView {
        data = typeof data === 'object' ? data : {};
        let result = new BedScheduleCountView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shiftName"] = this.shiftName;
        data["usedCount"] = this.usedCount;
        data["enableCount"] = this.enableCount;
        data["totalCount"] = this.totalCount;
        return data;
    }
}

/** 总排床统计 */
export interface IBedScheduleCountView {
    /** 班次 */
    shiftName?: string | undefined;
    /** 已排床 */
    usedCount?: number;
    /** 可用排床 */
    enableCount?: number;
    /** 总床位 */
    totalCount?: number;
}

/** Reponse */
export class BedScheduleCountViewResult implements IBedScheduleCountViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: BedScheduleCountView[] | undefined;

    constructor(data?: IBedScheduleCountViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(BedScheduleCountView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BedScheduleCountViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new BedScheduleCountViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IBedScheduleCountViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: BedScheduleCountView[] | undefined;
}

/** 患者排床床位信息 */
export class CureBedItem implements ICureBedItem {
    /** 透析床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 透析床位名称 */
    deptDialysisBedName?: string | undefined;
    /** 序列 */
    deptDialysisBedSequence?: number;
    /** 科室设备标识 */
    devId?: string | undefined;
    /** 科室设备编号 */
    devCode?: string | undefined;
    /** 科室设备类型 */
    devType?: string | undefined;
    /** 科室设备型号 */
    devModel?: string | undefined;
    /** 是否阳性 *如阳性不可改为阴性* */
    devPositive?: number;
    /** 科室设备是否可用 */
    devAvailable?: number;
    /** 启用状态0,1 */
    deptDialysisBedEnabled?: number;
    /** 患者排床床位上的患者信息 */
    patients?: CurePatient[] | undefined;

    constructor(data?: ICureBedItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.deptDialysisBedName = _data["deptDialysisBedName"];
            this.deptDialysisBedSequence = _data["deptDialysisBedSequence"];
            this.devId = _data["devId"];
            this.devCode = _data["devCode"];
            this.devType = _data["devType"];
            this.devModel = _data["devModel"];
            this.devPositive = _data["devPositive"];
            this.devAvailable = _data["devAvailable"];
            this.deptDialysisBedEnabled = _data["deptDialysisBedEnabled"];
            if (Array.isArray(_data["patients"])) {
                this.patients = [] as any;
                for (let item of _data["patients"])
                    this.patients!.push(CurePatient.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBedItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureBedItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["deptDialysisBedName"] = this.deptDialysisBedName;
        data["deptDialysisBedSequence"] = this.deptDialysisBedSequence;
        data["devId"] = this.devId;
        data["devCode"] = this.devCode;
        data["devType"] = this.devType;
        data["devModel"] = this.devModel;
        data["devPositive"] = this.devPositive;
        data["devAvailable"] = this.devAvailable;
        data["deptDialysisBedEnabled"] = this.deptDialysisBedEnabled;
        if (Array.isArray(this.patients)) {
            data["patients"] = [];
            for (let item of this.patients)
                data["patients"].push(item.toJSON());
        }
        return data;
    }
}

/** 患者排床床位信息 */
export interface ICureBedItem {
    /** 透析床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 透析床位名称 */
    deptDialysisBedName?: string | undefined;
    /** 序列 */
    deptDialysisBedSequence?: number;
    /** 科室设备标识 */
    devId?: string | undefined;
    /** 科室设备编号 */
    devCode?: string | undefined;
    /** 科室设备类型 */
    devType?: string | undefined;
    /** 科室设备型号 */
    devModel?: string | undefined;
    /** 是否阳性 *如阳性不可改为阴性* */
    devPositive?: number;
    /** 科室设备是否可用 */
    devAvailable?: number;
    /** 启用状态0,1 */
    deptDialysisBedEnabled?: number;
    /** 患者排床床位上的患者信息 */
    patients?: CurePatient[] | undefined;
}

/** 床位患者明细 */
export class CureBedPatientDetail implements ICureBedPatientDetail {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 区间标识 */
    dialysisAreaId?: string | undefined;
    /** 床位 */
    dialysisAreaName?: string | undefined;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    dossierNum?: string | undefined;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者是否阳性0,1 */
    patientPositive?: number;
    /** 透析方式 `DIC.DIALYSIS.MODE`  *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义颜色 */
    fontColor?: string | undefined;
    /** 字体颜色名称 */
    fontColorName?: string | undefined;
    /** 透析器标识 */
    dialyzerId?: string | undefined;
    /** 透析器名称 */
    dialyzerName?: string | undefined;
    /** 透析器数量 */
    dialyzerCount?: string | undefined;
    /** 血滤器标识 */
    filterId?: string | undefined;
    /** 血滤器名称 */
    filterName?: string | undefined;
    /** 血滤器数量 */
    filterCount?: string | undefined;
    /** 灌流器标识 */
    perfusionId?: string | undefined;
    /** 灌流器名称 */
    perfusionName?: string | undefined;
    /** 灌流器数量 */
    perfusionCount?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 抗凝剂类型 */
    anticoagulantName?: string | undefined;
    /** 剂量 */
    anticoagulantTotal?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;

    constructor(data?: ICureBedPatientDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.weekdayName = _data["weekdayName"];
            this.dossierNum = _data["dossierNum"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientPositive = _data["patientPositive"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeName = _data["dialysisModeName"];
            this.color = _data["color"];
            this.colorName = _data["colorName"];
            this.fontColor = _data["fontColor"];
            this.fontColorName = _data["fontColorName"];
            this.dialyzerId = _data["dialyzerId"];
            this.dialyzerName = _data["dialyzerName"];
            this.dialyzerCount = _data["dialyzerCount"];
            this.filterId = _data["filterId"];
            this.filterName = _data["filterName"];
            this.filterCount = _data["filterCount"];
            this.perfusionId = _data["perfusionId"];
            this.perfusionName = _data["perfusionName"];
            this.perfusionCount = _data["perfusionCount"];
            this.icon = _data["icon"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.remark = _data["remark"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.anticoagulantTotal = _data["anticoagulantTotal"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(CureCostGroupView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBedPatientDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureBedPatientDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["weekday"] = this.weekday;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["weekdayName"] = this.weekdayName;
        data["dossierNum"] = this.dossierNum;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientPositive"] = this.patientPositive;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeName"] = this.dialysisModeName;
        data["color"] = this.color;
        data["colorName"] = this.colorName;
        data["fontColor"] = this.fontColor;
        data["fontColorName"] = this.fontColorName;
        data["dialyzerId"] = this.dialyzerId;
        data["dialyzerName"] = this.dialyzerName;
        data["dialyzerCount"] = this.dialyzerCount;
        data["filterId"] = this.filterId;
        data["filterName"] = this.filterName;
        data["filterCount"] = this.filterCount;
        data["perfusionId"] = this.perfusionId;
        data["perfusionName"] = this.perfusionName;
        data["perfusionCount"] = this.perfusionCount;
        data["icon"] = this.icon;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["remark"] = this.remark;
        data["anticoagulantName"] = this.anticoagulantName;
        data["anticoagulantTotal"] = this.anticoagulantTotal;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        return data;
    }
}

/** 床位患者明细 */
export interface ICureBedPatientDetail {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 区间标识 */
    dialysisAreaId?: string | undefined;
    /** 床位 */
    dialysisAreaName?: string | undefined;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    dossierNum?: string | undefined;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者是否阳性0,1 */
    patientPositive?: number;
    /** 透析方式 `DIC.DIALYSIS.MODE`  *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义颜色 */
    fontColor?: string | undefined;
    /** 字体颜色名称 */
    fontColorName?: string | undefined;
    /** 透析器标识 */
    dialyzerId?: string | undefined;
    /** 透析器名称 */
    dialyzerName?: string | undefined;
    /** 透析器数量 */
    dialyzerCount?: string | undefined;
    /** 血滤器标识 */
    filterId?: string | undefined;
    /** 血滤器名称 */
    filterName?: string | undefined;
    /** 血滤器数量 */
    filterCount?: string | undefined;
    /** 灌流器标识 */
    perfusionId?: string | undefined;
    /** 灌流器名称 */
    perfusionName?: string | undefined;
    /** 灌流器数量 */
    perfusionCount?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 抗凝剂类型 */
    anticoagulantName?: string | undefined;
    /** 剂量 */
    anticoagulantTotal?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
}

/** Reponse */
export class CureBedPatientDetailResultEntry implements ICureBedPatientDetailResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureBedPatientDetail;

    constructor(data?: ICureBedPatientDetailResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureBedPatientDetail.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureBedPatientDetailResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureBedPatientDetailResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureBedPatientDetailResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureBedPatientDetail;
}

export class CureCostGroupView implements ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 批号管理 */
    batchManage!: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: ICureCostGroupView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.batchManage = _data["batchManage"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.devBarCode = _data["devBarCode"];
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.sequence = _data["sequence"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.spec = _data["spec"];
            this.sellingPrice = _data["sellingPrice"];
            this.unit = _data["unit"];
            this.unitLabel = _data["unitLabel"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Label = _data["unitLevel1Label"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.enabled = _data["enabled"];
            this.inventoryCount = _data["inventoryCount"];
            this.batchNo = _data["batchNo"];
            if (Array.isArray(_data["batchItems"])) {
                this.batchItems = [] as any;
                for (let item of _data["batchItems"])
                    this.batchItems!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCostGroupView {
        data = typeof data === 'object' ? data : {};
        let result = new CureCostGroupView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["batchManage"] = this.batchManage;
        data["code"] = this.code;
        data["name"] = this.name;
        data["devBarCode"] = this.devBarCode;
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["sequence"] = this.sequence;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["spec"] = this.spec;
        data["sellingPrice"] = this.sellingPrice;
        data["unit"] = this.unit;
        data["unitLabel"] = this.unitLabel;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Label"] = this.unitLevel1Label;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["enabled"] = this.enabled;
        data["inventoryCount"] = this.inventoryCount;
        data["batchNo"] = this.batchNo;
        if (Array.isArray(this.batchItems)) {
            data["batchItems"] = [];
            for (let item of this.batchItems)
                data["batchItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 批号管理 */
    batchManage: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;
}

/** 透析区间信息 */
export class CureDialysisItem implements ICureDialysisItem {
    /** 透析区间标识 */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    deptDialysisAreaType?: string | undefined;
    /** 类型名称 */
    deptDialysisAreaTypeName?: string | undefined;
    /** 图标 */
    deptDialysisAreaIcon?: string | undefined;
    /** 图标 */
    deptDialysisAreaIconLabel?: string | undefined;
    /** 是否阳性分区0,1 */
    deptDialysisAreaPositive?: number;
    /** 序列 */
    deptDialysisAreaSequence?: number;
    /** 启用状态0,1 */
    deptDialysisAreaEnabled?: number;
    /** 患者排床床位信息 */
    bedItems?: CureBedItem[] | undefined;

    constructor(data?: ICureDialysisItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.deptDialysisAreaType = _data["deptDialysisAreaType"];
            this.deptDialysisAreaTypeName = _data["deptDialysisAreaTypeName"];
            this.deptDialysisAreaIcon = _data["deptDialysisAreaIcon"];
            this.deptDialysisAreaIconLabel = _data["deptDialysisAreaIconLabel"];
            this.deptDialysisAreaPositive = _data["deptDialysisAreaPositive"];
            this.deptDialysisAreaSequence = _data["deptDialysisAreaSequence"];
            this.deptDialysisAreaEnabled = _data["deptDialysisAreaEnabled"];
            if (Array.isArray(_data["bedItems"])) {
                this.bedItems = [] as any;
                for (let item of _data["bedItems"])
                    this.bedItems!.push(CureBedItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDialysisItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["deptDialysisAreaType"] = this.deptDialysisAreaType;
        data["deptDialysisAreaTypeName"] = this.deptDialysisAreaTypeName;
        data["deptDialysisAreaIcon"] = this.deptDialysisAreaIcon;
        data["deptDialysisAreaIconLabel"] = this.deptDialysisAreaIconLabel;
        data["deptDialysisAreaPositive"] = this.deptDialysisAreaPositive;
        data["deptDialysisAreaSequence"] = this.deptDialysisAreaSequence;
        data["deptDialysisAreaEnabled"] = this.deptDialysisAreaEnabled;
        if (Array.isArray(this.bedItems)) {
            data["bedItems"] = [];
            for (let item of this.bedItems)
                data["bedItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析区间信息 */
export interface ICureDialysisItem {
    /** 透析区间标识 */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    deptDialysisAreaType?: string | undefined;
    /** 类型名称 */
    deptDialysisAreaTypeName?: string | undefined;
    /** 图标 */
    deptDialysisAreaIcon?: string | undefined;
    /** 图标 */
    deptDialysisAreaIconLabel?: string | undefined;
    /** 是否阳性分区0,1 */
    deptDialysisAreaPositive?: number;
    /** 序列 */
    deptDialysisAreaSequence?: number;
    /** 启用状态0,1 */
    deptDialysisAreaEnabled?: number;
    /** 患者排床床位信息 */
    bedItems?: CureBedItem[] | undefined;
}

/** 患者排床详细信息 */
export class CurePatient implements ICurePatient {
    isShift?: boolean;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次颜色 */
    shiftColor?: string | undefined;
    /** 班次序列 */
    sequence?: number;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endTime?: string | undefined;
    patient?: CureBedPatientDetail;

    constructor(data?: ICurePatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isShift = _data["isShift"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
            this.weekdayName = _data["weekdayName"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.shiftColor = _data["shiftColor"];
            this.sequence = _data["sequence"];
            this.beginTime = _data["beginTime"];
            this.endTime = _data["endTime"];
            this.patient = _data["patient"] ? CureBedPatientDetail.fromJS(_data["patient"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePatient {
        data = typeof data === 'object' ? data : {};
        let result = new CurePatient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isShift"] = this.isShift;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["weekday"] = this.weekday;
        data["weekdayName"] = this.weekdayName;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["shiftColor"] = this.shiftColor;
        data["sequence"] = this.sequence;
        data["beginTime"] = this.beginTime;
        data["endTime"] = this.endTime;
        data["patient"] = this.patient ? this.patient.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者排床详细信息 */
export interface ICurePatient {
    isShift?: boolean;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次颜色 */
    shiftColor?: string | undefined;
    /** 班次序列 */
    sequence?: number;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endTime?: string | undefined;
    patient?: CureBedPatientDetail;
}

/** 透析耗材 */
export class CureRecordConsumableItemView implements ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount!: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordConsumableItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.roomRecordInId = _data["roomRecordInId"];
            this.batchCount = _data["batchCount"];
            this.batchNo = _data["batchNo"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.surplusCount = _data["surplusCount"];
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordConsumableItemView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["roomRecordInId"] = this.roomRecordInId;
        data["batchCount"] = this.batchCount;
        data["batchNo"] = this.batchNo;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["surplusCount"] = this.surplusCount;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析耗材 */
export interface ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
}

/** 透析排床 */
export class CureSchedule implements ICureSchedule {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](透析班次) */
    cureShiftId?: string | undefined;
    /** [透析床位标识](透析床位) */
    deptDialysisBedId?: string | undefined;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 排床院区 */
    sysHospitalAreaId?: string | undefined;
    patients?: Patient;
    cureShifts?: CureShift;
    deptDialysisBeds?: DeptDialysisBed;

    constructor(data?: ICureSchedule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisMode = _data["dialysisMode"];
            this.cureShiftId = _data["cureShiftId"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.color = _data["color"];
            this.fontColor = _data["fontColor"];
            this.icon = _data["icon"];
            this.cureRecordId = _data["cureRecordId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.cureShifts = _data["cureShifts"] ? CureShift.fromJS(_data["cureShifts"]) : <any>undefined;
            this.deptDialysisBeds = _data["deptDialysisBeds"] ? DeptDialysisBed.fromJS(_data["deptDialysisBeds"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureSchedule {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchedule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["dialysisMode"] = this.dialysisMode;
        data["cureShiftId"] = this.cureShiftId;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["color"] = this.color;
        data["fontColor"] = this.fontColor;
        data["icon"] = this.icon;
        data["cureRecordId"] = this.cureRecordId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["cureShifts"] = this.cureShifts ? this.cureShifts.toJSON() : <any>undefined;
        data["deptDialysisBeds"] = this.deptDialysisBeds ? this.deptDialysisBeds.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析排床 */
export interface ICureSchedule {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](透析班次) */
    cureShiftId?: string | undefined;
    /** [透析床位标识](透析床位) */
    deptDialysisBedId?: string | undefined;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 排床院区 */
    sysHospitalAreaId?: string | undefined;
    patients?: Patient;
    cureShifts?: CureShift;
    deptDialysisBeds?: DeptDialysisBed;
}

/** 透析排床耗材 */
export class CureScheduleConsumable implements ICureScheduleConsumable {
    /** 标识 */
    id?: string | undefined;
    /** [透析排床标识](透析排床) */
    cureScheduleId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 耗材数量 */
    count?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureSchedules?: CureSchedule;
    roomItemLists?: RoomItemList;

    constructor(data?: ICureScheduleConsumable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureScheduleId = _data["cureScheduleId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureSchedules = _data["cureSchedules"] ? CureSchedule.fromJS(_data["cureSchedules"]) : <any>undefined;
            this.roomItemLists = _data["roomItemLists"] ? RoomItemList.fromJS(_data["roomItemLists"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheduleConsumable {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleConsumable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureScheduleId"] = this.cureScheduleId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["cureSchedules"] = this.cureSchedules ? this.cureSchedules.toJSON() : <any>undefined;
        data["roomItemLists"] = this.roomItemLists ? this.roomItemLists.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析排床耗材 */
export interface ICureScheduleConsumable {
    /** 标识 */
    id?: string | undefined;
    /** [透析排床标识](透析排床) */
    cureScheduleId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 耗材数量 */
    count?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureSchedules?: CureSchedule;
    roomItemLists?: RoomItemList;
}

/** Reponse */
export class CureScheduleConsumableResult implements ICureScheduleConsumableResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleConsumable[] | undefined;

    constructor(data?: ICureScheduleConsumableResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureScheduleConsumable.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleConsumableResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleConsumableResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureScheduleConsumableResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleConsumable[] | undefined;
}

/** Reponse */
export class CureScheduleConsumableResultEntry implements ICureScheduleConsumableResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheduleConsumable;

    constructor(data?: ICureScheduleConsumableResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureScheduleConsumable.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheduleConsumableResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleConsumableResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureScheduleConsumableResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheduleConsumable;
}

/** 透析排床耗材 (ViewModel) */
export class CureScheduleConsumableViewModel implements ICureScheduleConsumableViewModel {
    /** [透析排床标识](透析排床Id) */
    cureScheduleId!: string;
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureScheduleConsumableViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureScheduleId = _data["cureScheduleId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureScheduleConsumableViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleConsumableViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureScheduleId"] = this.cureScheduleId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析排床耗材 (ViewModel) */
export interface ICureScheduleConsumableViewModel {
    /** [透析排床标识](透析排床Id) */
    cureScheduleId: string;
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析排床 */
export class CureScheduleDetailView implements ICureScheduleDetailView {
    /** 班次 */
    sysHospitalAreas?: SysHospitalArea[] | undefined;
    /** 透析区间 */
    deptDialysisAreas?: DeptDialysisArea[] | undefined;
    /** 班次 */
    cureShifts?: CureShift[] | undefined;
    /** 患者排床透析区间信息 */
    dialysisItems?: CureDialysisItem[] | undefined;

    constructor(data?: ICureScheduleDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sysHospitalAreas"])) {
                this.sysHospitalAreas = [] as any;
                for (let item of _data["sysHospitalAreas"])
                    this.sysHospitalAreas!.push(SysHospitalArea.fromJS(item));
            }
            if (Array.isArray(_data["deptDialysisAreas"])) {
                this.deptDialysisAreas = [] as any;
                for (let item of _data["deptDialysisAreas"])
                    this.deptDialysisAreas!.push(DeptDialysisArea.fromJS(item));
            }
            if (Array.isArray(_data["cureShifts"])) {
                this.cureShifts = [] as any;
                for (let item of _data["cureShifts"])
                    this.cureShifts!.push(CureShift.fromJS(item));
            }
            if (Array.isArray(_data["dialysisItems"])) {
                this.dialysisItems = [] as any;
                for (let item of _data["dialysisItems"])
                    this.dialysisItems!.push(CureDialysisItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sysHospitalAreas)) {
            data["sysHospitalAreas"] = [];
            for (let item of this.sysHospitalAreas)
                data["sysHospitalAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.deptDialysisAreas)) {
            data["deptDialysisAreas"] = [];
            for (let item of this.deptDialysisAreas)
                data["deptDialysisAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.cureShifts)) {
            data["cureShifts"] = [];
            for (let item of this.cureShifts)
                data["cureShifts"].push(item.toJSON());
        }
        if (Array.isArray(this.dialysisItems)) {
            data["dialysisItems"] = [];
            for (let item of this.dialysisItems)
                data["dialysisItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析排床 */
export interface ICureScheduleDetailView {
    /** 班次 */
    sysHospitalAreas?: SysHospitalArea[] | undefined;
    /** 透析区间 */
    deptDialysisAreas?: DeptDialysisArea[] | undefined;
    /** 班次 */
    cureShifts?: CureShift[] | undefined;
    /** 患者排床透析区间信息 */
    dialysisItems?: CureDialysisItem[] | undefined;
}

/** Reponse */
export class CureScheduleDetailViewResultEntry implements ICureScheduleDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheduleDetailView;

    constructor(data?: ICureScheduleDetailViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureScheduleDetailView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheduleDetailViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDetailViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureScheduleDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheduleDetailView;
}

export class CureScheduleDetailViewSupper implements ICureScheduleDetailViewSupper {
    dialysis?: CureDialysisItem;
    bed?: CureBedItem;
    shift?: CurePatient;
    monday?: CureBedPatientDetail;
    tuesday?: CureBedPatientDetail;
    wednesday?: CureBedPatientDetail;
    thursday?: CureBedPatientDetail;
    friday?: CureBedPatientDetail;
    saturday?: CureBedPatientDetail;
    sunday?: CureBedPatientDetail;

    constructor(data?: ICureScheduleDetailViewSupper) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysis = _data["dialysis"] ? CureDialysisItem.fromJS(_data["dialysis"]) : <any>undefined;
            this.bed = _data["bed"] ? CureBedItem.fromJS(_data["bed"]) : <any>undefined;
            this.shift = _data["shift"] ? CurePatient.fromJS(_data["shift"]) : <any>undefined;
            this.monday = _data["monday"] ? CureBedPatientDetail.fromJS(_data["monday"]) : <any>undefined;
            this.tuesday = _data["tuesday"] ? CureBedPatientDetail.fromJS(_data["tuesday"]) : <any>undefined;
            this.wednesday = _data["wednesday"] ? CureBedPatientDetail.fromJS(_data["wednesday"]) : <any>undefined;
            this.thursday = _data["thursday"] ? CureBedPatientDetail.fromJS(_data["thursday"]) : <any>undefined;
            this.friday = _data["friday"] ? CureBedPatientDetail.fromJS(_data["friday"]) : <any>undefined;
            this.saturday = _data["saturday"] ? CureBedPatientDetail.fromJS(_data["saturday"]) : <any>undefined;
            this.sunday = _data["sunday"] ? CureBedPatientDetail.fromJS(_data["sunday"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheduleDetailViewSupper {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDetailViewSupper();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysis"] = this.dialysis ? this.dialysis.toJSON() : <any>undefined;
        data["bed"] = this.bed ? this.bed.toJSON() : <any>undefined;
        data["shift"] = this.shift ? this.shift.toJSON() : <any>undefined;
        data["monday"] = this.monday ? this.monday.toJSON() : <any>undefined;
        data["tuesday"] = this.tuesday ? this.tuesday.toJSON() : <any>undefined;
        data["wednesday"] = this.wednesday ? this.wednesday.toJSON() : <any>undefined;
        data["thursday"] = this.thursday ? this.thursday.toJSON() : <any>undefined;
        data["friday"] = this.friday ? this.friday.toJSON() : <any>undefined;
        data["saturday"] = this.saturday ? this.saturday.toJSON() : <any>undefined;
        data["sunday"] = this.sunday ? this.sunday.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICureScheduleDetailViewSupper {
    dialysis?: CureDialysisItem;
    bed?: CureBedItem;
    shift?: CurePatient;
    monday?: CureBedPatientDetail;
    tuesday?: CureBedPatientDetail;
    wednesday?: CureBedPatientDetail;
    thursday?: CureBedPatientDetail;
    friday?: CureBedPatientDetail;
    saturday?: CureBedPatientDetail;
    sunday?: CureBedPatientDetail;
}

/** Reponse */
export class CureScheduleDetailViewSupperResult implements ICureScheduleDetailViewSupperResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleDetailViewSupper[] | undefined;

    constructor(data?: ICureScheduleDetailViewSupperResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureScheduleDetailViewSupper.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleDetailViewSupperResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDetailViewSupperResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureScheduleDetailViewSupperResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleDetailViewSupper[] | undefined;
}

/** 透析排床明细拖动 */
export class CureScheduleDragEditModel implements ICureScheduleDragEditModel {
    from?: CureUpdateItemModel;
    to?: CureUpdateItemModel;
    /** 原因 *如果是因为故障，反写到设备上* */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureScheduleDragEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from = _data["from"] ? CureUpdateItemModel.fromJS(_data["from"]) : <any>undefined;
            this.to = _data["to"] ? CureUpdateItemModel.fromJS(_data["to"]) : <any>undefined;
            this.cause = _data["cause"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureScheduleDragEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDragEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from ? this.from.toJSON() : <any>undefined;
        data["to"] = this.to ? this.to.toJSON() : <any>undefined;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析排床明细拖动 */
export interface ICureScheduleDragEditModel {
    from?: CureUpdateItemModel;
    to?: CureUpdateItemModel;
    /** 原因 *如果是因为故障，反写到设备上* */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

export class CureScheduleEditModel implements ICureScheduleEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 透析日期 */
    dialysisDate!: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](#透析班次) */
    cureShiftId!: string;
    /** [透析床位标识](#透析床位) */
    deptDialysisBedId!: string;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 排床院区 */
    sysHospitalAreaId!: string;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;

    constructor(data?: ICureScheduleEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisMode = _data["dialysisMode"];
            this.cureShiftId = _data["cureShiftId"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.color = _data["color"];
            this.icon = _data["icon"];
            this.cureRecordId = _data["cureRecordId"];
            this.remark = _data["remark"];
            this.fontColor = _data["fontColor"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(RoomRecordItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["dialysisMode"] = this.dialysisMode;
        data["cureShiftId"] = this.cureShiftId;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["color"] = this.color;
        data["icon"] = this.icon;
        data["cureRecordId"] = this.cureRecordId;
        data["remark"] = this.remark;
        data["fontColor"] = this.fontColor;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICureScheduleEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 透析日期 */
    dialysisDate: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](#透析班次) */
    cureShiftId: string;
    /** [透析床位标识](#透析床位) */
    deptDialysisBedId: string;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 排床院区 */
    sysHospitalAreaId: string;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;
}

export class CureScheduleSaveEditModel implements ICureScheduleSaveEditModel {
    /** 模板标识 */
    tmplId!: string;
    /** 科室标识 */
    arearId!: string;
    /** 日期(eg. 2018/11/26 ~ 2018/12/02) */
    date!: string;

    constructor(data?: ICureScheduleSaveEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tmplId = _data["tmplId"];
            this.arearId = _data["arearId"];
            this.date = _data["date"];
        }
    }

    static fromJS(data: any): CureScheduleSaveEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleSaveEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tmplId"] = this.tmplId;
        data["arearId"] = this.arearId;
        data["date"] = this.date;
        return data;
    }
}

export interface ICureScheduleSaveEditModel {
    /** 模板标识 */
    tmplId: string;
    /** 科室标识 */
    arearId: string;
    /** 日期(eg. 2018/11/26 ~ 2018/12/02) */
    date: string;
}

/** 透析排班 */
export class CureScheduleShiftView implements ICureScheduleShiftView {
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者标签（阴/阳） */
    positive?: number | undefined;
    /** 排班详情 */
    items?: WeekItem[] | undefined;

    constructor(data?: ICureScheduleShiftView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.positive = _data["positive"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(WeekItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleShiftView {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleShiftView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["positive"] = this.positive;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析排班 */
export interface ICureScheduleShiftView {
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者标签（阴/阳） */
    positive?: number | undefined;
    /** 排班详情 */
    items?: WeekItem[] | undefined;
}

/** Reponse */
export class CureScheduleShiftViewResult implements ICureScheduleShiftViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleShiftView[] | undefined;

    constructor(data?: ICureScheduleShiftViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureScheduleShiftView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleShiftViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleShiftViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureScheduleShiftViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleShiftView[] | undefined;
}

/** 治疗方案 */
export class CureScheme implements ICureScheme {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 频率 *1按日,2按周* */
    frequency?: number;
    /** 周期 */
    period?: number;
    /** 次数 *按日:1,按周:2* */
    count?: number;
    /** 首次透析日期 *当频率按日需要使用* */
    firstDialysisDate?: dayjs.Dayjs | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: ICureScheme) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.dialysisMode = _data["dialysisMode"];
            this.frequency = _data["frequency"];
            this.period = _data["period"];
            this.count = _data["count"];
            this.firstDialysisDate = _data["firstDialysisDate"] ? dayjs(_data["firstDialysisDate"].toString()) : <any>undefined;
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheme {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheme();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["dialysisMode"] = this.dialysisMode;
        data["frequency"] = this.frequency;
        data["period"] = this.period;
        data["count"] = this.count;
        data["firstDialysisDate"] = this.firstDialysisDate ? this.firstDialysisDate.toISOString() : <any>undefined;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 治疗方案 */
export interface ICureScheme {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 频率 *1按日,2按周* */
    frequency?: number;
    /** 周期 */
    period?: number;
    /** 次数 *按日:1,按周:2* */
    count?: number;
    /** 首次透析日期 *当频率按日需要使用* */
    firstDialysisDate?: dayjs.Dayjs | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** Reponse */
export class CureSchemeResult implements ICureSchemeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheme[] | undefined;

    constructor(data?: ICureSchemeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureScheme.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureSchemeResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchemeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureSchemeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheme[] | undefined;
}

/** Reponse */
export class CureSchemeResultEntry implements ICureSchemeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheme;

    constructor(data?: ICureSchemeResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureScheme.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureSchemeResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchemeResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureSchemeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheme;
}

/** 治疗方案 (ViewModel) */
export class CureSchemeViewModel implements ICureSchemeViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 透析方式 */
    dialysisMode!: string;
    /** 频率 *1按日,2按周* */
    frequency!: number;
    /** 周期 */
    period!: number;
    /** 次数 *按日:1,按周:2* */
    count!: number;
    /** 首次透析日期 *当频率按日需要使用* */
    firstDialysisDate?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: ICureSchemeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dialysisMode = _data["dialysisMode"];
            this.frequency = _data["frequency"];
            this.period = _data["period"];
            this.count = _data["count"];
            this.firstDialysisDate = _data["firstDialysisDate"] ? dayjs(_data["firstDialysisDate"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): CureSchemeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchemeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dialysisMode"] = this.dialysisMode;
        data["frequency"] = this.frequency;
        data["period"] = this.period;
        data["count"] = this.count;
        data["firstDialysisDate"] = this.firstDialysisDate ? this.firstDialysisDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 治疗方案 (ViewModel) */
export interface ICureSchemeViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 透析方式 */
    dialysisMode: string;
    /** 频率 *1按日,2按周* */
    frequency: number;
    /** 周期 */
    period: number;
    /** 次数 *按日:1,按周:2* */
    count: number;
    /** 首次透析日期 *当频率按日需要使用* */
    firstDialysisDate?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 透析班次 */
export class CureShift implements ICureShift {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endDate?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureShift) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.beginTime = _data["beginTime"];
            this.endDate = _data["endDate"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureShift {
        data = typeof data === 'object' ? data : {};
        let result = new CureShift();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["beginTime"] = this.beginTime;
        data["endDate"] = this.endDate;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析班次 */
export interface ICureShift {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endDate?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureShiftResult implements ICureShiftResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureShift[] | undefined;

    constructor(data?: ICureShiftResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureShift.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureShiftResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureShiftResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureShiftResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureShift[] | undefined;
}

/** Reponse */
export class CureShiftResultEntry implements ICureShiftResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureShift;

    constructor(data?: ICureShiftResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureShift.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureShiftResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureShiftResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureShiftResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureShift;
}

/** 透析班次 (ViewModel) */
export class CureShiftViewModel implements ICureShiftViewModel {
    /** 名称 *○不允许重复* */
    name!: string;
    /** 简称 *○不允许重复* */
    shortName!: string;
    /** 开始时间 *HH:mm:ss* */
    beginTime!: string;
    /** 结束时间 *HH:mm:ss* */
    endDate!: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: ICureShiftViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.beginTime = _data["beginTime"];
            this.endDate = _data["endDate"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): CureShiftViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureShiftViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["beginTime"] = this.beginTime;
        data["endDate"] = this.endDate;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 透析班次 (ViewModel) */
export interface ICureShiftViewModel {
    /** 名称 *○不允许重复* */
    name: string;
    /** 简称 *○不允许重复* */
    shortName: string;
    /** 开始时间 *HH:mm:ss* */
    beginTime: string;
    /** 结束时间 *HH:mm:ss* */
    endDate: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 体温记录单明细 */
export class CureTemperatureRecordDetailEditModel implements ICureTemperatureRecordDetailEditModel {
    /** [体温记录单标识](#体温记录单信息) */
    cureTemperatureRecordId!: string;
    /** 记录日期 */
    recordDate!: dayjs.Dayjs;
    /** 脉搏测量时间 */
    pulseTime?: dayjs.Dayjs | undefined;
    /** 脉搏 */
    pulse?: number | undefined;
    /** 体温测量时间 */
    temperatureTime?: dayjs.Dayjs | undefined;
    /** 体温 */
    temperature?: number | undefined;
    /** 疼痛评估时间 */
    painTime?: dayjs.Dayjs | undefined;
    /** 疼痛级别 */
    pain?: number | undefined;
    /** 呼吸测量时间 */
    breatheTime?: dayjs.Dayjs | undefined;
    /** 呼吸 */
    breathe?: number | undefined;
    /** 大便次数 */
    poop?: number | undefined;
    /** 尿量ml */
    pee?: number | undefined;
    /** 痰量ml */
    sputum?: number | undefined;
    /** 引流量ml */
    diversion?: number | undefined;
    /** 呕吐量ml */
    vomit?: number | undefined;
    /** 总量ml */
    total?: number | undefined;
    /** 入量ml */
    input?: number | undefined;
    /** BMR(%) */
    bmr?: number | undefined;
    /** 早班收缩压 */
    amSbp?: number | undefined;
    /** 早班舒张压 */
    amDbp?: number | undefined;
    /** 中班收缩压 */
    pmSbp?: number | undefined;
    /** 中班舒张压 */
    pmDbp?: number | undefined;
    /** 体重kg */
    weight?: string | undefined;
    /** 手术后天数 */
    surgeryDays?: number | undefined;
    /** 分娩后天数 */
    childbirthDays?: number | undefined;
    /** 住院天数 */
    hospitalizedDays?: number | undefined;
    /** 患者状态 */
    cureTempDetailStatus?: CureTemperatureRecordDetailStatusEditModel[] | undefined;

    constructor(data?: ICureTemperatureRecordDetailEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureTemperatureRecordId = _data["cureTemperatureRecordId"];
            this.recordDate = _data["recordDate"] ? dayjs(_data["recordDate"].toString()) : <any>undefined;
            this.pulseTime = _data["pulseTime"] ? dayjs(_data["pulseTime"].toString()) : <any>undefined;
            this.pulse = _data["pulse"];
            this.temperatureTime = _data["temperatureTime"] ? dayjs(_data["temperatureTime"].toString()) : <any>undefined;
            this.temperature = _data["temperature"];
            this.painTime = _data["painTime"] ? dayjs(_data["painTime"].toString()) : <any>undefined;
            this.pain = _data["pain"];
            this.breatheTime = _data["breatheTime"] ? dayjs(_data["breatheTime"].toString()) : <any>undefined;
            this.breathe = _data["breathe"];
            this.poop = _data["poop"];
            this.pee = _data["pee"];
            this.sputum = _data["sputum"];
            this.diversion = _data["diversion"];
            this.vomit = _data["vomit"];
            this.total = _data["total"];
            this.input = _data["input"];
            this.bmr = _data["bmr"];
            this.amSbp = _data["amSbp"];
            this.amDbp = _data["amDbp"];
            this.pmSbp = _data["pmSbp"];
            this.pmDbp = _data["pmDbp"];
            this.weight = _data["weight"];
            this.surgeryDays = _data["surgeryDays"];
            this.childbirthDays = _data["childbirthDays"];
            this.hospitalizedDays = _data["hospitalizedDays"];
            if (Array.isArray(_data["cureTempDetailStatus"])) {
                this.cureTempDetailStatus = [] as any;
                for (let item of _data["cureTempDetailStatus"])
                    this.cureTempDetailStatus!.push(CureTemperatureRecordDetailStatusEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureTemperatureRecordId"] = this.cureTemperatureRecordId;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>undefined;
        data["pulseTime"] = this.pulseTime ? this.pulseTime.toISOString() : <any>undefined;
        data["pulse"] = this.pulse;
        data["temperatureTime"] = this.temperatureTime ? this.temperatureTime.toISOString() : <any>undefined;
        data["temperature"] = this.temperature;
        data["painTime"] = this.painTime ? this.painTime.toISOString() : <any>undefined;
        data["pain"] = this.pain;
        data["breatheTime"] = this.breatheTime ? this.breatheTime.toISOString() : <any>undefined;
        data["breathe"] = this.breathe;
        data["poop"] = this.poop;
        data["pee"] = this.pee;
        data["sputum"] = this.sputum;
        data["diversion"] = this.diversion;
        data["vomit"] = this.vomit;
        data["total"] = this.total;
        data["input"] = this.input;
        data["bmr"] = this.bmr;
        data["amSbp"] = this.amSbp;
        data["amDbp"] = this.amDbp;
        data["pmSbp"] = this.pmSbp;
        data["pmDbp"] = this.pmDbp;
        data["weight"] = this.weight;
        data["surgeryDays"] = this.surgeryDays;
        data["childbirthDays"] = this.childbirthDays;
        data["hospitalizedDays"] = this.hospitalizedDays;
        if (Array.isArray(this.cureTempDetailStatus)) {
            data["cureTempDetailStatus"] = [];
            for (let item of this.cureTempDetailStatus)
                data["cureTempDetailStatus"].push(item.toJSON());
        }
        return data;
    }
}

/** 体温记录单明细 */
export interface ICureTemperatureRecordDetailEditModel {
    /** [体温记录单标识](#体温记录单信息) */
    cureTemperatureRecordId: string;
    /** 记录日期 */
    recordDate: dayjs.Dayjs;
    /** 脉搏测量时间 */
    pulseTime?: dayjs.Dayjs | undefined;
    /** 脉搏 */
    pulse?: number | undefined;
    /** 体温测量时间 */
    temperatureTime?: dayjs.Dayjs | undefined;
    /** 体温 */
    temperature?: number | undefined;
    /** 疼痛评估时间 */
    painTime?: dayjs.Dayjs | undefined;
    /** 疼痛级别 */
    pain?: number | undefined;
    /** 呼吸测量时间 */
    breatheTime?: dayjs.Dayjs | undefined;
    /** 呼吸 */
    breathe?: number | undefined;
    /** 大便次数 */
    poop?: number | undefined;
    /** 尿量ml */
    pee?: number | undefined;
    /** 痰量ml */
    sputum?: number | undefined;
    /** 引流量ml */
    diversion?: number | undefined;
    /** 呕吐量ml */
    vomit?: number | undefined;
    /** 总量ml */
    total?: number | undefined;
    /** 入量ml */
    input?: number | undefined;
    /** BMR(%) */
    bmr?: number | undefined;
    /** 早班收缩压 */
    amSbp?: number | undefined;
    /** 早班舒张压 */
    amDbp?: number | undefined;
    /** 中班收缩压 */
    pmSbp?: number | undefined;
    /** 中班舒张压 */
    pmDbp?: number | undefined;
    /** 体重kg */
    weight?: string | undefined;
    /** 手术后天数 */
    surgeryDays?: number | undefined;
    /** 分娩后天数 */
    childbirthDays?: number | undefined;
    /** 住院天数 */
    hospitalizedDays?: number | undefined;
    /** 患者状态 */
    cureTempDetailStatus?: CureTemperatureRecordDetailStatusEditModel[] | undefined;
}

/** 体温记录单明细患者状态 */
export class CureTemperatureRecordDetailStatusEditModel implements ICureTemperatureRecordDetailStatusEditModel {
    /** [体温记录单明细标识](#体温记录单明细信息) */
    cureTemperatureRecordDetailId!: string;
    /** 记录时间 */
    statusTime!: dayjs.Dayjs;
    /** 患者状态 */
    patientStatus!: string;
    /** 标识 */
    id?: string | undefined;

    constructor(data?: ICureTemperatureRecordDetailStatusEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureTemperatureRecordDetailId = _data["cureTemperatureRecordDetailId"];
            this.statusTime = _data["statusTime"] ? dayjs(_data["statusTime"].toString()) : <any>undefined;
            this.patientStatus = _data["patientStatus"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailStatusEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailStatusEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureTemperatureRecordDetailId"] = this.cureTemperatureRecordDetailId;
        data["statusTime"] = this.statusTime ? this.statusTime.toISOString() : <any>undefined;
        data["patientStatus"] = this.patientStatus;
        data["id"] = this.id;
        return data;
    }
}

/** 体温记录单明细患者状态 */
export interface ICureTemperatureRecordDetailStatusEditModel {
    /** [体温记录单明细标识](#体温记录单明细信息) */
    cureTemperatureRecordDetailId: string;
    /** 记录时间 */
    statusTime: dayjs.Dayjs;
    /** 患者状态 */
    patientStatus: string;
    /** 标识 */
    id?: string | undefined;
}

/** 体温记录单明细患者状态 */
export class CureTemperatureRecordDetailStatusView implements ICureTemperatureRecordDetailStatusView {
    /** [体温记录单明细标识](#体温记录单明细信息) */
    cureTemperatureRecordDetailId!: string;
    /** 记录时间 */
    statusTime!: dayjs.Dayjs;
    /** 患者状态 */
    patientStatus!: string;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 打印显示的内容 */
    printStatus?: string | undefined;

    constructor(data?: ICureTemperatureRecordDetailStatusView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureTemperatureRecordDetailId = _data["cureTemperatureRecordDetailId"];
            this.statusTime = _data["statusTime"] ? dayjs(_data["statusTime"].toString()) : <any>undefined;
            this.patientStatus = _data["patientStatus"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.printStatus = _data["printStatus"];
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailStatusView {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailStatusView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureTemperatureRecordDetailId"] = this.cureTemperatureRecordDetailId;
        data["statusTime"] = this.statusTime ? this.statusTime.toISOString() : <any>undefined;
        data["patientStatus"] = this.patientStatus;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["printStatus"] = this.printStatus;
        return data;
    }
}

/** 体温记录单明细患者状态 */
export interface ICureTemperatureRecordDetailStatusView {
    /** [体温记录单明细标识](#体温记录单明细信息) */
    cureTemperatureRecordDetailId: string;
    /** 记录时间 */
    statusTime: dayjs.Dayjs;
    /** 患者状态 */
    patientStatus: string;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 打印显示的内容 */
    printStatus?: string | undefined;
}

/** Reponse */
export class CureTemperatureRecordDetailStatusViewResult implements ICureTemperatureRecordDetailStatusViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemperatureRecordDetailStatusView[] | undefined;

    constructor(data?: ICureTemperatureRecordDetailStatusViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureTemperatureRecordDetailStatusView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailStatusViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailStatusViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureTemperatureRecordDetailStatusViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemperatureRecordDetailStatusView[] | undefined;
}

/** Reponse */
export class CureTemperatureRecordDetailStatusViewResultEntry implements ICureTemperatureRecordDetailStatusViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureTemperatureRecordDetailStatusView;

    constructor(data?: ICureTemperatureRecordDetailStatusViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureTemperatureRecordDetailStatusView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailStatusViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailStatusViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureTemperatureRecordDetailStatusViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureTemperatureRecordDetailStatusView;
}

/** 体温记录单明细 */
export class CureTemperatureRecordDetailView implements ICureTemperatureRecordDetailView {
    /** [体温记录单标识](#体温记录单信息) */
    cureTemperatureRecordId!: string;
    /** 记录日期 */
    recordDate!: dayjs.Dayjs;
    /** 脉搏测量时间 */
    pulseTime?: dayjs.Dayjs | undefined;
    /** 脉搏 */
    pulse?: number | undefined;
    /** 体温测量时间 */
    temperatureTime?: dayjs.Dayjs | undefined;
    /** 体温 */
    temperature?: number | undefined;
    /** 疼痛评估时间 */
    painTime?: dayjs.Dayjs | undefined;
    /** 疼痛级别 */
    pain?: number | undefined;
    /** 呼吸测量时间 */
    breatheTime?: dayjs.Dayjs | undefined;
    /** 呼吸 */
    breathe?: number | undefined;
    /** 大便次数 */
    poop?: number | undefined;
    /** 尿量ml */
    pee?: number | undefined;
    /** 痰量ml */
    sputum?: number | undefined;
    /** 引流量ml */
    diversion?: number | undefined;
    /** 呕吐量ml */
    vomit?: number | undefined;
    /** 总量ml */
    total?: number | undefined;
    /** 入量ml */
    input?: number | undefined;
    /** BMR(%) */
    bmr?: number | undefined;
    /** 早班收缩压 */
    amSbp?: number | undefined;
    /** 早班舒张压 */
    amDbp?: number | undefined;
    /** 中班收缩压 */
    pmSbp?: number | undefined;
    /** 中班舒张压 */
    pmDbp?: number | undefined;
    /** 体重kg */
    weight?: string | undefined;
    /** 手术后天数 */
    surgeryDays?: number | undefined;
    /** 分娩后天数 */
    childbirthDays?: number | undefined;
    /** 住院天数 */
    hospitalizedDays?: number | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者状态 */
    cureTempDetailStatus?: CureTemperatureRecordDetailStatusView[] | undefined;

    constructor(data?: ICureTemperatureRecordDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureTemperatureRecordId = _data["cureTemperatureRecordId"];
            this.recordDate = _data["recordDate"] ? dayjs(_data["recordDate"].toString()) : <any>undefined;
            this.pulseTime = _data["pulseTime"] ? dayjs(_data["pulseTime"].toString()) : <any>undefined;
            this.pulse = _data["pulse"];
            this.temperatureTime = _data["temperatureTime"] ? dayjs(_data["temperatureTime"].toString()) : <any>undefined;
            this.temperature = _data["temperature"];
            this.painTime = _data["painTime"] ? dayjs(_data["painTime"].toString()) : <any>undefined;
            this.pain = _data["pain"];
            this.breatheTime = _data["breatheTime"] ? dayjs(_data["breatheTime"].toString()) : <any>undefined;
            this.breathe = _data["breathe"];
            this.poop = _data["poop"];
            this.pee = _data["pee"];
            this.sputum = _data["sputum"];
            this.diversion = _data["diversion"];
            this.vomit = _data["vomit"];
            this.total = _data["total"];
            this.input = _data["input"];
            this.bmr = _data["bmr"];
            this.amSbp = _data["amSbp"];
            this.amDbp = _data["amDbp"];
            this.pmSbp = _data["pmSbp"];
            this.pmDbp = _data["pmDbp"];
            this.weight = _data["weight"];
            this.surgeryDays = _data["surgeryDays"];
            this.childbirthDays = _data["childbirthDays"];
            this.hospitalizedDays = _data["hospitalizedDays"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["cureTempDetailStatus"])) {
                this.cureTempDetailStatus = [] as any;
                for (let item of _data["cureTempDetailStatus"])
                    this.cureTempDetailStatus!.push(CureTemperatureRecordDetailStatusView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureTemperatureRecordId"] = this.cureTemperatureRecordId;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>undefined;
        data["pulseTime"] = this.pulseTime ? this.pulseTime.toISOString() : <any>undefined;
        data["pulse"] = this.pulse;
        data["temperatureTime"] = this.temperatureTime ? this.temperatureTime.toISOString() : <any>undefined;
        data["temperature"] = this.temperature;
        data["painTime"] = this.painTime ? this.painTime.toISOString() : <any>undefined;
        data["pain"] = this.pain;
        data["breatheTime"] = this.breatheTime ? this.breatheTime.toISOString() : <any>undefined;
        data["breathe"] = this.breathe;
        data["poop"] = this.poop;
        data["pee"] = this.pee;
        data["sputum"] = this.sputum;
        data["diversion"] = this.diversion;
        data["vomit"] = this.vomit;
        data["total"] = this.total;
        data["input"] = this.input;
        data["bmr"] = this.bmr;
        data["amSbp"] = this.amSbp;
        data["amDbp"] = this.amDbp;
        data["pmSbp"] = this.pmSbp;
        data["pmDbp"] = this.pmDbp;
        data["weight"] = this.weight;
        data["surgeryDays"] = this.surgeryDays;
        data["childbirthDays"] = this.childbirthDays;
        data["hospitalizedDays"] = this.hospitalizedDays;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.cureTempDetailStatus)) {
            data["cureTempDetailStatus"] = [];
            for (let item of this.cureTempDetailStatus)
                data["cureTempDetailStatus"].push(item.toJSON());
        }
        return data;
    }
}

/** 体温记录单明细 */
export interface ICureTemperatureRecordDetailView {
    /** [体温记录单标识](#体温记录单信息) */
    cureTemperatureRecordId: string;
    /** 记录日期 */
    recordDate: dayjs.Dayjs;
    /** 脉搏测量时间 */
    pulseTime?: dayjs.Dayjs | undefined;
    /** 脉搏 */
    pulse?: number | undefined;
    /** 体温测量时间 */
    temperatureTime?: dayjs.Dayjs | undefined;
    /** 体温 */
    temperature?: number | undefined;
    /** 疼痛评估时间 */
    painTime?: dayjs.Dayjs | undefined;
    /** 疼痛级别 */
    pain?: number | undefined;
    /** 呼吸测量时间 */
    breatheTime?: dayjs.Dayjs | undefined;
    /** 呼吸 */
    breathe?: number | undefined;
    /** 大便次数 */
    poop?: number | undefined;
    /** 尿量ml */
    pee?: number | undefined;
    /** 痰量ml */
    sputum?: number | undefined;
    /** 引流量ml */
    diversion?: number | undefined;
    /** 呕吐量ml */
    vomit?: number | undefined;
    /** 总量ml */
    total?: number | undefined;
    /** 入量ml */
    input?: number | undefined;
    /** BMR(%) */
    bmr?: number | undefined;
    /** 早班收缩压 */
    amSbp?: number | undefined;
    /** 早班舒张压 */
    amDbp?: number | undefined;
    /** 中班收缩压 */
    pmSbp?: number | undefined;
    /** 中班舒张压 */
    pmDbp?: number | undefined;
    /** 体重kg */
    weight?: string | undefined;
    /** 手术后天数 */
    surgeryDays?: number | undefined;
    /** 分娩后天数 */
    childbirthDays?: number | undefined;
    /** 住院天数 */
    hospitalizedDays?: number | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者状态 */
    cureTempDetailStatus?: CureTemperatureRecordDetailStatusView[] | undefined;
}

/** Reponse */
export class CureTemperatureRecordDetailViewResult implements ICureTemperatureRecordDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemperatureRecordDetailView[] | undefined;

    constructor(data?: ICureTemperatureRecordDetailViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureTemperatureRecordDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureTemperatureRecordDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemperatureRecordDetailView[] | undefined;
}

/** Reponse */
export class CureTemperatureRecordDetailViewResultEntry implements ICureTemperatureRecordDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureTemperatureRecordDetailView;

    constructor(data?: ICureTemperatureRecordDetailViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureTemperatureRecordDetailView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureTemperatureRecordDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureTemperatureRecordDetailView;
}

/** 体温记录单 */
export class CureTemperatureRecordEditModel implements ICureTemperatureRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 年龄 */
    age?: number | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 入院日期 */
    admissionDate!: dayjs.Dayjs;
    /** 住院号 */
    hospitalNumber!: string;
    /** 床号 */
    bedNo!: string;

    constructor(data?: ICureTemperatureRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.age = _data["age"];
            this.department = _data["department"];
            this.admissionDate = _data["admissionDate"] ? dayjs(_data["admissionDate"].toString()) : <any>undefined;
            this.hospitalNumber = _data["hospitalNumber"];
            this.bedNo = _data["bedNo"];
        }
    }

    static fromJS(data: any): CureTemperatureRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["age"] = this.age;
        data["department"] = this.department;
        data["admissionDate"] = this.admissionDate ? this.admissionDate.toISOString() : <any>undefined;
        data["hospitalNumber"] = this.hospitalNumber;
        data["bedNo"] = this.bedNo;
        return data;
    }
}

/** 体温记录单 */
export interface ICureTemperatureRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 年龄 */
    age?: number | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 入院日期 */
    admissionDate: dayjs.Dayjs;
    /** 住院号 */
    hospitalNumber: string;
    /** 床号 */
    bedNo: string;
}

/** 体温记录单 */
export class CureTemperatureRecordView implements ICureTemperatureRecordView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 年龄 */
    age?: number | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 入院日期 */
    admissionDate!: dayjs.Dayjs;
    /** 住院号 */
    hospitalNumber!: string;
    /** 床号 */
    bedNo!: string;
    /** 标识 */
    id!: string;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别 */
    genderName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 体温单明细 */
    cureTempDetail?: CureTemperatureRecordDetailView[] | undefined;

    constructor(data?: ICureTemperatureRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.age = _data["age"];
            this.department = _data["department"];
            this.admissionDate = _data["admissionDate"] ? dayjs(_data["admissionDate"].toString()) : <any>undefined;
            this.hospitalNumber = _data["hospitalNumber"];
            this.bedNo = _data["bedNo"];
            this.id = _data["id"];
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.genderName = _data["genderName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["cureTempDetail"])) {
                this.cureTempDetail = [] as any;
                for (let item of _data["cureTempDetail"])
                    this.cureTempDetail!.push(CureTemperatureRecordDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTemperatureRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["age"] = this.age;
        data["department"] = this.department;
        data["admissionDate"] = this.admissionDate ? this.admissionDate.toISOString() : <any>undefined;
        data["hospitalNumber"] = this.hospitalNumber;
        data["bedNo"] = this.bedNo;
        data["id"] = this.id;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["genderName"] = this.genderName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.cureTempDetail)) {
            data["cureTempDetail"] = [];
            for (let item of this.cureTempDetail)
                data["cureTempDetail"].push(item.toJSON());
        }
        return data;
    }
}

/** 体温记录单 */
export interface ICureTemperatureRecordView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 年龄 */
    age?: number | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 入院日期 */
    admissionDate: dayjs.Dayjs;
    /** 住院号 */
    hospitalNumber: string;
    /** 床号 */
    bedNo: string;
    /** 标识 */
    id: string;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别 */
    genderName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 体温单明细 */
    cureTempDetail?: CureTemperatureRecordDetailView[] | undefined;
}

/** Reponse */
export class CureTemperatureRecordViewResult implements ICureTemperatureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemperatureRecordView[] | undefined;

    constructor(data?: ICureTemperatureRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureTemperatureRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTemperatureRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureTemperatureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemperatureRecordView[] | undefined;
}

/** Reponse */
export class CureTemperatureRecordViewResultEntry implements ICureTemperatureRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureTemperatureRecordView;

    constructor(data?: ICureTemperatureRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureTemperatureRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureTemperatureRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureTemperatureRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureTemperatureRecordView;
}

/** 透析排床明细拖动 - 单元格信息 */
export class CureUpdateItemModel implements ICureUpdateItemModel {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 透析床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 透析排床标识 */
    cureScheduleId?: string | undefined;

    constructor(data?: ICureUpdateItemModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.cureScheduleId = _data["cureScheduleId"];
        }
    }

    static fromJS(data: any): CureUpdateItemModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureUpdateItemModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["cureScheduleId"] = this.cureScheduleId;
        return data;
    }
}

/** 透析排床明细拖动 - 单元格信息 */
export interface ICureUpdateItemModel {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 透析床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 透析排床标识 */
    cureScheduleId?: string | undefined;
}

/** 透析区间 */
export class DeptDialysisArea implements IDeptDialysisArea {
    /** 标识 */
    id?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 阳性分区0,1 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysHospitalAreas?: SysHospitalArea;

    constructor(data?: IDeptDialysisArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.positive = _data["positive"];
            this.bedMax = _data["bedMax"];
            this.bedCount = _data["bedCount"];
            this.build = _data["build"];
            this.floor = _data["floor"];
            this.color = _data["color"];
            this.icon = _data["icon"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysHospitalAreas = _data["sysHospitalAreas"] ? SysHospitalArea.fromJS(_data["sysHospitalAreas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisArea {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["positive"] = this.positive;
        data["bedMax"] = this.bedMax;
        data["bedCount"] = this.bedCount;
        data["build"] = this.build;
        data["floor"] = this.floor;
        data["color"] = this.color;
        data["icon"] = this.icon;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["sysHospitalAreas"] = this.sysHospitalAreas ? this.sysHospitalAreas.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析区间 */
export interface IDeptDialysisArea {
    /** 标识 */
    id?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 阳性分区0,1 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysHospitalAreas?: SysHospitalArea;
}

/** 透析床位 */
export class DeptDialysisBed implements IDeptDialysisBed {
    /** 标识 */
    id?: string | undefined;
    /** [透析区间](透析区间) */
    deptDialysisAreaId?: string | undefined;
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    deptDialysisAreas?: DeptDialysisArea;

    constructor(data?: IDeptDialysisBed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.name = _data["name"];
            this.serialNo = _data["serialNo"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.deptDialysisAreas = _data["deptDialysisAreas"] ? DeptDialysisArea.fromJS(_data["deptDialysisAreas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisBed {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["name"] = this.name;
        data["serialNo"] = this.serialNo;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["deptDialysisAreas"] = this.deptDialysisAreas ? this.deptDialysisAreas.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析床位 */
export interface IDeptDialysisBed {
    /** 标识 */
    id?: string | undefined;
    /** [透析区间](透析区间) */
    deptDialysisAreaId?: string | undefined;
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    deptDialysisAreas?: DeptDialysisArea;
}

export class LabelModel implements ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;

    constructor(data?: ILabelModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LabelModel {
        data = typeof data === 'object' ? data : {};
        let result = new LabelModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data;
    }
}

export interface ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;
}

/** 患者信息 */
export class Patient implements IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;

    constructor(data?: IPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.surnameCode = _data["surnameCode"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.photo = _data["photo"];
            this.face = _data["face"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.department = _data["department"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.archiveNumber = _data["archiveNumber"];
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.rh = _data["rh"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.educationalLevel = _data["educationalLevel"];
            this.profession = _data["profession"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisStateTransition = _data["dialysisStateTransition"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.prognosisState = _data["prognosisState"];
            this.positive = _data["positive"];
            this.complication = _data["complication"];
            this.doctor = _data["doctor"];
            this.nurse = _data["nurse"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisPathological = _data["diagnosisPathological"];
            this.diagnosisComplication = _data["diagnosisComplication"];
            this.diagnosisInfectiousDiseases = _data["diagnosisInfectiousDiseases"];
            this.diagnosisTumor = _data["diagnosisTumor"];
            this.diagnosisAllergy = _data["diagnosisAllergy"];
            this.remark = _data["remark"];
            this.initialSource = _data["initialSource"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.finger = _data["finger"];
            this.dossierNumber = _data["dossierNumber"];
            this.medicareCondition = _data["medicareCondition"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
        }
    }

    static fromJS(data: any): Patient {
        data = typeof data === 'object' ? data : {};
        let result = new Patient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["surnameCode"] = this.surnameCode;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["photo"] = this.photo;
        data["face"] = this.face;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["department"] = this.department;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["archiveNumber"] = this.archiveNumber;
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["rh"] = this.rh;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["educationalLevel"] = this.educationalLevel;
        data["profession"] = this.profession;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toISOString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisStateTransition"] = this.dialysisStateTransition;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["prognosisState"] = this.prognosisState;
        data["positive"] = this.positive;
        data["complication"] = this.complication;
        data["doctor"] = this.doctor;
        data["nurse"] = this.nurse;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisPathological"] = this.diagnosisPathological;
        data["diagnosisComplication"] = this.diagnosisComplication;
        data["diagnosisInfectiousDiseases"] = this.diagnosisInfectiousDiseases;
        data["diagnosisTumor"] = this.diagnosisTumor;
        data["diagnosisAllergy"] = this.diagnosisAllergy;
        data["remark"] = this.remark;
        data["initialSource"] = this.initialSource;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["finger"] = this.finger;
        data["dossierNumber"] = this.dossierNumber;
        data["medicareCondition"] = this.medicareCondition;
        data["nextDate"] = this.nextDate ? this.nextDate.toISOString() : <any>undefined;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        return data;
    }
}

/** 患者信息 */
export interface IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

/** 项目清单 */
export class RoomItemList implements IRoomItemList {
    /** 标识 */
    id?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomItemTypes?: RoomItemType;

    constructor(data?: IRoomItemList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.name = _data["name"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.shortName = _data["shortName"];
            this.nameGoods = _data["nameGoods"];
            this.model = _data["model"];
            this.spec = _data["spec"];
            this.origin = _data["origin"];
            this.dealer = _data["dealer"];
            this.warningDay = _data["warningDay"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.conversionRate = _data["conversionRate"];
            this.sellingPrice = _data["sellingPrice"];
            this.batchManage = _data["batchManage"];
            this.afterCharge = _data["afterCharge"];
            this.inCharge = _data["inCharge"];
            this.costType = _data["costType"];
            this.deductionSource = _data["deductionSource"];
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
            this.usageMode = _data["usageMode"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.inventory = _data["inventory"];
            this.enabled = _data["enabled"];
            this.commonTerms = _data["commonTerms"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemTypes = _data["roomItemTypes"] ? RoomItemType.fromJS(_data["roomItemTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemList {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["name"] = this.name;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["shortName"] = this.shortName;
        data["nameGoods"] = this.nameGoods;
        data["model"] = this.model;
        data["spec"] = this.spec;
        data["origin"] = this.origin;
        data["dealer"] = this.dealer;
        data["warningDay"] = this.warningDay;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["conversionRate"] = this.conversionRate;
        data["sellingPrice"] = this.sellingPrice;
        data["batchManage"] = this.batchManage;
        data["afterCharge"] = this.afterCharge;
        data["inCharge"] = this.inCharge;
        data["costType"] = this.costType;
        data["deductionSource"] = this.deductionSource;
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        data["usageMode"] = this.usageMode;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["inventory"] = this.inventory;
        data["enabled"] = this.enabled;
        data["commonTerms"] = this.commonTerms;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["roomItemTypes"] = this.roomItemTypes ? this.roomItemTypes.toJSON() : <any>undefined;
        return data;
    }
}

/** 项目清单 */
export interface IRoomItemList {
    /** 标识 */
    id?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomItemTypes?: RoomItemType;
}

/** 项目分类 */
export class RoomItemType implements IRoomItemType {
    /** 标识 */
    id?: string | undefined;
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomItemType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.system = _data["system"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemType {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["system"] = this.system;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 项目分类 */
export interface IRoomItemType {
    /** 标识 */
    id?: string | undefined;
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 费用项目 */
export class RoomRecordItem implements IRoomRecordItem {
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 批号管理 */
    batchManage!: number;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 患者编号 */
    patientId?: string | undefined;
    /** 批次明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: IRoomRecordItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.batchManage = _data["batchManage"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.devBarCode = _data["devBarCode"];
            this.patientId = _data["patientId"];
            if (Array.isArray(_data["batchItems"])) {
                this.batchItems = [] as any;
                for (let item of _data["batchItems"])
                    this.batchItems!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["batchManage"] = this.batchManage;
        data["code"] = this.code;
        data["name"] = this.name;
        data["devBarCode"] = this.devBarCode;
        data["patientId"] = this.patientId;
        if (Array.isArray(this.batchItems)) {
            data["batchItems"] = [];
            for (let item of this.batchItems)
                data["batchItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 费用项目 */
export interface IRoomRecordItem {
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 批号管理 */
    batchManage: number;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 患者编号 */
    patientId?: string | undefined;
    /** 批次明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;
}

/** 透析室 */
export class SysHospitalArea implements ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospitalArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalArea {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析室 */
export interface ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 前端展示数据结构 */
export class TempDisplayCureScheduleValidate implements ITempDisplayCureScheduleValidate {
    /** 透析区间ID */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析床位名称 */
    bedName?: string | undefined;
    /** 透析床位Id */
    bedId?: string | undefined;
    /** 数据子项 */
    items?: TempDisplayCureScheduleValidateItem[] | undefined;

    constructor(data?: ITempDisplayCureScheduleValidate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedName = _data["bedName"];
            this.bedId = _data["bedId"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TempDisplayCureScheduleValidateItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TempDisplayCureScheduleValidate {
        data = typeof data === 'object' ? data : {};
        let result = new TempDisplayCureScheduleValidate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedName"] = this.bedName;
        data["bedId"] = this.bedId;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 前端展示数据结构 */
export interface ITempDisplayCureScheduleValidate {
    /** 透析区间ID */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析床位名称 */
    bedName?: string | undefined;
    /** 透析床位Id */
    bedId?: string | undefined;
    /** 数据子项 */
    items?: TempDisplayCureScheduleValidateItem[] | undefined;
}

/** 前端展示数据结构子项 */
export class TempDisplayCureScheduleValidateItem implements ITempDisplayCureScheduleValidateItem {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者ID */
    patientId?: string | undefined;
    /** 透析方式名称 */
    dialysisTypeLabel?: string | undefined;
    /** 透析方式值 */
    dialysisType?: string | undefined;
    /** 透析日期 */
    dislysisDate?: dayjs.Dayjs;
    /** 透析班次名称 */
    shiftName?: string | undefined;
    /** 班次Id */
    shiftId?: string | undefined;
    /** 数据是否合法 */
    isCorrect?: boolean;
    /** 错误消息 */
    errorInfo?: string | undefined;
    /** Excel中患者位置 */
    position?: string | undefined;
    /** 单元格是否是空的 */
    isEmptyCell?: boolean;
    /** 列 */
    col?: number;
    /** 行 */
    row?: number;

    constructor(data?: ITempDisplayCureScheduleValidateItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.patientId = _data["patientId"];
            this.dialysisTypeLabel = _data["dialysisTypeLabel"];
            this.dialysisType = _data["dialysisType"];
            this.dislysisDate = _data["dislysisDate"] ? dayjs(_data["dislysisDate"].toString()) : <any>undefined;
            this.shiftName = _data["shiftName"];
            this.shiftId = _data["shiftId"];
            this.isCorrect = _data["isCorrect"];
            this.errorInfo = _data["errorInfo"];
            this.position = _data["position"];
            this.isEmptyCell = _data["isEmptyCell"];
            this.col = _data["col"];
            this.row = _data["row"];
        }
    }

    static fromJS(data: any): TempDisplayCureScheduleValidateItem {
        data = typeof data === 'object' ? data : {};
        let result = new TempDisplayCureScheduleValidateItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["patientId"] = this.patientId;
        data["dialysisTypeLabel"] = this.dialysisTypeLabel;
        data["dialysisType"] = this.dialysisType;
        data["dislysisDate"] = this.dislysisDate ? this.dislysisDate.toISOString() : <any>undefined;
        data["shiftName"] = this.shiftName;
        data["shiftId"] = this.shiftId;
        data["isCorrect"] = this.isCorrect;
        data["errorInfo"] = this.errorInfo;
        data["position"] = this.position;
        data["isEmptyCell"] = this.isEmptyCell;
        data["col"] = this.col;
        data["row"] = this.row;
        return data;
    }
}

/** 前端展示数据结构子项 */
export interface ITempDisplayCureScheduleValidateItem {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者ID */
    patientId?: string | undefined;
    /** 透析方式名称 */
    dialysisTypeLabel?: string | undefined;
    /** 透析方式值 */
    dialysisType?: string | undefined;
    /** 透析日期 */
    dislysisDate?: dayjs.Dayjs;
    /** 透析班次名称 */
    shiftName?: string | undefined;
    /** 班次Id */
    shiftId?: string | undefined;
    /** 数据是否合法 */
    isCorrect?: boolean;
    /** 错误消息 */
    errorInfo?: string | undefined;
    /** Excel中患者位置 */
    position?: string | undefined;
    /** 单元格是否是空的 */
    isEmptyCell?: boolean;
    /** 列 */
    col?: number;
    /** 行 */
    row?: number;
}

/** 排班详情 */
export class WeekItem implements IWeekItem {
    /** 排班日期 */
    date?: dayjs.Dayjs | undefined;
    /** 星期 */
    weekDay?: number;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析方式 */
    modeLabel?: string | undefined;

    constructor(data?: IWeekItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.weekDay = _data["weekDay"];
            this.shiftName = _data["shiftName"];
            this.modeLabel = _data["modeLabel"];
        }
    }

    static fromJS(data: any): WeekItem {
        data = typeof data === 'object' ? data : {};
        let result = new WeekItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["weekDay"] = this.weekDay;
        data["shiftName"] = this.shiftName;
        data["modeLabel"] = this.modeLabel;
        return data;
    }
}

/** 排班详情 */
export interface IWeekItem {
    /** 排班日期 */
    date?: dayjs.Dayjs | undefined;
    /** 星期 */
    weekDay?: number;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析方式 */
    modeLabel?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}