/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class DeptDialysisAreaServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析区间 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptDialysisAreaGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptDialysisAreaViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisAreaGET(_response));
        });
    }

    protected processDeptDialysisAreaGET(response: AxiosResponse): Promise<DeptDialysisAreaViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisAreaViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptDialysisAreaViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisAreaViewResultEntry>(null as any);
    }

    /**
     * 透析区间 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptDialysisAreaPOST(id: string, body: DeptDialysisAreaViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisAreaPOST(_response));
        });
    }

    protected processDeptDialysisAreaPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析区间 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisAreaViewResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter(_response));
        });
    }

    protected processFilter(response: AxiosResponse): Promise<DeptDialysisAreaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisAreaViewResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisAreaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisAreaViewResult>(null as any);
    }

    /**
     * 透析区间(向下递归查询所有子项) -- 根据条件查询数据
     * @param sysHospitalAreaId [院区标识](院区Id)
     * @param filter (optional) 查询条件
     * @param isCurrent (optional) 是否当前院区Id
     * @return Success
     */
    getDeptDialysisAreaBySysHospitalAreaId(sysHospitalAreaId: string, filter: string | undefined, isCurrent: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisAreaViewResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/BySysHospitalAreaId/{sysHospitalAreaId}?";
        if (sysHospitalAreaId === undefined || sysHospitalAreaId === null)
            throw new Error("The parameter 'sysHospitalAreaId' must be defined.");
        url_ = url_.replace("{sysHospitalAreaId}", encodeURIComponent("" + sysHospitalAreaId));
        if (isCurrent === null)
            throw new Error("The parameter 'isCurrent' cannot be null.");
        else if (isCurrent !== undefined)
            url_ += "IsCurrent=" + encodeURIComponent("" + isCurrent) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDeptDialysisAreaBySysHospitalAreaId(_response));
        });
    }

    protected processGetDeptDialysisAreaBySysHospitalAreaId(response: AxiosResponse): Promise<DeptDialysisAreaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisAreaViewResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisAreaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisAreaViewResult>(null as any);
    }

    /**
     * 透析区间  -- 根据科室查询透析分区，是否显示没有床位的透析分区
     * @param sysHospitalAreaId 透析室标识
     * @param show (optional) 是否显示没有床位的透析分区(0 不显示;1 显示)
     * @return Success
     */
    tree(sysHospitalAreaId: string, show: number | undefined , cancelToken?: CancelToken | undefined): Promise<DialysisTreeViewResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/Tree/{sysHospitalAreaId}?";
        if (sysHospitalAreaId === undefined || sysHospitalAreaId === null)
            throw new Error("The parameter 'sysHospitalAreaId' must be defined.");
        url_ = url_.replace("{sysHospitalAreaId}", encodeURIComponent("" + sysHospitalAreaId));
        if (show === null)
            throw new Error("The parameter 'show' cannot be null.");
        else if (show !== undefined)
            url_ += "show=" + encodeURIComponent("" + show) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTree(_response));
        });
    }

    protected processTree(response: AxiosResponse): Promise<DialysisTreeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DialysisTreeViewResult.fromJS(resultData200);
            return Promise.resolve<DialysisTreeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DialysisTreeViewResult>(null as any);
    }

    /**
     * 透析区间 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptDialysisAreaPOST2(body: DeptDialysisAreaViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisAreaPOST2(_response));
        });
    }

    protected processDeptDialysisAreaPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析区间 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForDeptDialysisArea(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForDeptDialysisArea(_response));
        });
    }

    protected processMoveNodeForDeptDialysisArea(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析区间 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForDeptDialysisArea(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForDeptDialysisArea(_response));
        });
    }

    protected processUpNodeForDeptDialysisArea(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析区间 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForDeptDialysisArea(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForDeptDialysisArea(_response));
        });
    }

    protected processDownNodeForDeptDialysisArea(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析区间 -- 根据Id删除数据
     * @return Success
     */
    delete(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptDialysisBedServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析床位 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptDialysisBedGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptDialysisBedResultEntry> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisBedGET(_response));
        });
    }

    protected processDeptDialysisBedGET(response: AxiosResponse): Promise<DeptDialysisBedResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisBedResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptDialysisBedResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisBedResultEntry>(null as any);
    }

    /**
     * 透析床位 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptDialysisBedPOST(id: string, body: DeptDialysisBedEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisBedPOST(_response));
        });
    }

    protected processDeptDialysisBedPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter2(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisBedResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter2(_response));
        });
    }

    protected processFilter2(response: AxiosResponse): Promise<DeptDialysisBedResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisBedResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisBedResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisBedResult>(null as any);
    }

    /**
     * 透析床位(向下递归查询所有子项) -- 根据院区Id查询床位信息
     * @param sysHospitalAreaId [院区标识](院区Id)
     * @param filter (optional) 查询条件
     * @param isCurrent (optional) 是否启用当前用户
     * @return Success
     */
    getDeptDialysisBedBySysHospitalAreaId(sysHospitalAreaId: string, filter: string | undefined, isCurrent: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisBedInfoDataViewResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/BySysHospitalAreaId/{sysHospitalAreaId}?";
        if (sysHospitalAreaId === undefined || sysHospitalAreaId === null)
            throw new Error("The parameter 'sysHospitalAreaId' must be defined.");
        url_ = url_.replace("{sysHospitalAreaId}", encodeURIComponent("" + sysHospitalAreaId));
        if (isCurrent === null)
            throw new Error("The parameter 'isCurrent' cannot be null.");
        else if (isCurrent !== undefined)
            url_ += "isCurrent=" + encodeURIComponent("" + isCurrent) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDeptDialysisBedBySysHospitalAreaId(_response));
        });
    }

    protected processGetDeptDialysisBedBySysHospitalAreaId(response: AxiosResponse): Promise<DeptDialysisBedInfoDataViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisBedInfoDataViewResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisBedInfoDataViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisBedInfoDataViewResult>(null as any);
    }

    /**
     * 透析床位 -- 根据透析区间ID查询床位信息
     * @param deptDialysisAreaId [透析区间](透析区间Id)
     * @param filter (optional) 查询条件
     * @return Success
     */
    getDeptDialysisBedByDeptDialysisAreaId(deptDialysisAreaId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisBedInfoDataViewResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/ByDeptDialysisAreaId/{deptDialysisAreaId}";
        if (deptDialysisAreaId === undefined || deptDialysisAreaId === null)
            throw new Error("The parameter 'deptDialysisAreaId' must be defined.");
        url_ = url_.replace("{deptDialysisAreaId}", encodeURIComponent("" + deptDialysisAreaId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDeptDialysisBedByDeptDialysisAreaId(_response));
        });
    }

    protected processGetDeptDialysisBedByDeptDialysisAreaId(response: AxiosResponse): Promise<DeptDialysisBedInfoDataViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisBedInfoDataViewResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisBedInfoDataViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisBedInfoDataViewResult>(null as any);
    }

    /**
     * 透析床位 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptDialysisBedPOST2(body: DeptDialysisBedEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisBedPOST2(_response));
        });
    }

    protected processDeptDialysisBedPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForDeptDialysisBed(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForDeptDialysisBed(_response));
        });
    }

    protected processMoveNodeForDeptDialysisBed(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForDeptDialysisBed(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForDeptDialysisBed(_response));
        });
    }

    protected processUpNodeForDeptDialysisBed(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForDeptDialysisBed(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForDeptDialysisBed(_response));
        });
    }

    protected processDownNodeForDeptDialysisBed(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位 -- 根据Id删除数据
     * @return Success
     */
    delete2(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete2(_response));
        });
    }

    protected processDelete2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptDialysisBedDevServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析床位绑定设备记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptDialysisBedDevGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptDialysisBedDevResultEntry> {
        let url_ = this.baseUrl + "/api/DeptDialysisBedDev/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisBedDevGET(_response));
        });
    }

    protected processDeptDialysisBedDevGET(response: AxiosResponse): Promise<DeptDialysisBedDevResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisBedDevResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptDialysisBedDevResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisBedDevResultEntry>(null as any);
    }

    /**
     * 透析床位绑定设备记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptDialysisBedDevPOST(id: string, body: DeptDialysisBedDevViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBedDev/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisBedDevPOST(_response));
        });
    }

    protected processDeptDialysisBedDevPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位绑定设备记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter3(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisBedDevResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisBedDev/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter3(_response));
        });
    }

    protected processFilter3(response: AxiosResponse): Promise<DeptDialysisBedDevResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisBedDevResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisBedDevResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisBedDevResult>(null as any);
    }

    /**
     * 透析床位绑定设备记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptDialysisBedDevPOST2(body: DeptDialysisBedDevViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBedDev";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisBedDevPOST2(_response));
        });
    }

    protected processDeptDialysisBedDevPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位绑定设备记录 -- 根据Id删除数据
     * @return Success
     */
    delete3(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBedDev/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete3(_response));
        });
    }

    protected processDelete3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptMedicalPersonnelServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医护人员信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter4(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelViewResult> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter4(_response));
        });
    }

    protected processFilter4(response: AxiosResponse): Promise<DeptMedicalPersonnelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelViewResult.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelViewResult>(null as any);
    }

    /**
     * 医生信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/拼音码/五笔码/id *选填
     * @return Success
     */
    filter5(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelViewResult> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Doctor/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter5(_response));
        });
    }

    protected processFilter5(response: AxiosResponse): Promise<DeptMedicalPersonnelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelViewResult.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelViewResult>(null as any);
    }

    /**
     * 医生信息 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/拼音码/五笔码/id *选填
     * @return Success
     */
    export(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Doctor/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport(_response));
        });
    }

    protected processExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/拼音码/五笔码/id *选填
     * @return Success
     */
    filter6(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelViewResult> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Nurse/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter6(_response));
        });
    }

    protected processFilter6(response: AxiosResponse): Promise<DeptMedicalPersonnelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelViewResult.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelViewResult>(null as any);
    }

    /**
     * 护士信息 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/拼音码/五笔码/id *选填
     * @return Success
     */
    export2(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Nurse/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport2(_response));
        });
    }

    protected processExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他用户信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/拼音码/五笔码/id *选填
     * @return Success
     */
    filter7(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelViewResult> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Other/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter7(_response));
        });
    }

    protected processFilter7(response: AxiosResponse): Promise<DeptMedicalPersonnelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelViewResult.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelViewResult>(null as any);
    }

    /**
     * 根据用户SysUserId查询用户签名信息
     * @return Success
     */
    getDeptMedicalPersonnelSignature(sysUserId: string , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelSignatureViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/GetDeptMedicalPersonnelSignature/{SysUserId}";
        if (sysUserId === undefined || sysUserId === null)
            throw new Error("The parameter 'sysUserId' must be defined.");
        url_ = url_.replace("{SysUserId}", encodeURIComponent("" + sysUserId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDeptMedicalPersonnelSignature(_response));
        });
    }

    protected processGetDeptMedicalPersonnelSignature(response: AxiosResponse): Promise<DeptMedicalPersonnelSignatureViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelSignatureViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelSignatureViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelSignatureViewResultEntry>(null as any);
    }

    /**
     * 医护人员信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptMedicalPersonnel(body: DeptMedicalPersonnelViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptMedicalPersonnel(_response));
        });
    }

    protected processDeptMedicalPersonnel(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护人员信息 - 更新签名信息
     * @param sysUserId 用户ID
     * @param body (optional)
     * @return Success
     */
    editDeptMedicalPersonnelSignature(sysUserId: string, body: DeptMedicalPersonnelSignatureEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/EditDeptMedicalPersonnelSignature/{SysUserId}";
        if (sysUserId === undefined || sysUserId === null)
            throw new Error("The parameter 'sysUserId' must be defined.");
        url_ = url_.replace("{SysUserId}", encodeURIComponent("" + sysUserId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEditDeptMedicalPersonnelSignature(_response));
        });
    }

    protected processEditDeptMedicalPersonnelSignature(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护人员信息 -- 根据Id删除数据
     * @return Success
     */
    delete4(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete4(_response));
        });
    }

    protected processDelete4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptMedicalPersonnelFileServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医护人员证书 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptMedicalPersonnelFileGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelFileResultEntry> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnelFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptMedicalPersonnelFileGET(_response));
        });
    }

    protected processDeptMedicalPersonnelFileGET(response: AxiosResponse): Promise<DeptMedicalPersonnelFileResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelFileResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelFileResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelFileResultEntry>(null as any);
    }

    /**
     * 医护人员证书 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter8(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelFileViewResult> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnelFile/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter8(_response));
        });
    }

    protected processFilter8(response: AxiosResponse): Promise<DeptMedicalPersonnelFileViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelFileViewResult.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelFileViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelFileViewResult>(null as any);
    }

    /**
     * 医护人员证书 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptMedicalPersonnelFilePOST(body: DeptMedicalPersonnelFileViewModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnelFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptMedicalPersonnelFilePOST(_response));
        });
    }

    protected processDeptMedicalPersonnelFilePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护人员证书 -- 根据Id删除数据
     * @return Success
     */
    delete5(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnelFile/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete5(_response));
        });
    }

    protected processDelete5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleChangeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医护换班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleChangeGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleChangeViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleChange/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleChangeGET(_response));
        });
    }

    protected processDeptScheduleChangeGET(response: AxiosResponse): Promise<DeptScheduleChangeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleChangeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleChangeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleChangeViewResultEntry>(null as any);
    }

    /**
     * 医护换班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleChangePOST(id: string, body: DeptScheduleChangeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleChange/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleChangePOST(_response));
        });
    }

    protected processDeptScheduleChangePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护换班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional)
     * @return Success
     */
    filter9(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleChangeViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleChange/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter9(_response));
        });
    }

    protected processFilter9(response: AxiosResponse): Promise<DeptScheduleChangeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleChangeViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleChangeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleChangeViewResult>(null as any);
    }

    /**
     * 医护换班 -- 导出
     * @param filter (optional) 查询条件
     * @param key (optional)
     * @return Success
     */
    export3(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleChange/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport3(_response));
        });
    }

    protected processExport3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护换班 -- 新增数据
     * @param role (optional) doctor/nurse
     * @param body (optional)
     * @return Success
     */
    deptScheduleChangePOST2(role: string | undefined, body: DeptScheduleChangeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleChange?";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleChangePOST2(_response));
        });
    }

    protected processDeptScheduleChangePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护换班 -- 根据Id删除数据
     * @return Success
     */
    delete6(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleChange/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete6(_response));
        });
    }

    protected processDelete6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleDoctorServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医生排班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleDoctorGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleDoctorResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleDoctorGET(_response));
        });
    }

    protected processDeptScheduleDoctorGET(response: AxiosResponse): Promise<DeptScheduleDoctorResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleDoctorResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleDoctorResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleDoctorResultEntry>(null as any);
    }

    /**
     * 医生排班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleDoctorPOST(id: string, body: DeptScheduleDoctorViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleDoctorPOST(_response));
        });
    }

    protected processDeptScheduleDoctorPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生排班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter10(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleDoctorResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter10(_response));
        });
    }

    protected processFilter10(response: AxiosResponse): Promise<DeptScheduleDoctorResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleDoctorResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleDoctorResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleDoctorResult>(null as any);
    }

    /**
     * 医生排班 -- 根据日期查询
     * @param areaId 院区ID
     * @param date (optional) 时间段(e.g. 2018-11-19 ~ 2018-11-25)
     * @param filter (optional) 查询条件
     * @return Success
     */
    bySysHospitalAreaId(areaId: string, date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleDoctorViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/BySysHospitalAreaId/{areaId}?";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBySysHospitalAreaId(_response));
        });
    }

    protected processBySysHospitalAreaId(response: AxiosResponse): Promise<DeptScheduleDoctorViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleDoctorViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleDoctorViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleDoctorViewResult>(null as any);
    }

    /**
     * 根据日期范围查询已经排班的班次
     * @param startTime (optional)
     * @param endTime (optional)
     * @param filter (optional)
     * @return Success
     */
    byTimes(doctorid: string, startTime: string | undefined, endTime: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleRecordViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/ByTimes/{doctorid}?";
        if (doctorid === undefined || doctorid === null)
            throw new Error("The parameter 'doctorid' must be defined.");
        url_ = url_.replace("{doctorid}", encodeURIComponent("" + doctorid));
        if (startTime === null)
            throw new Error("The parameter 'startTime' cannot be null.");
        else if (startTime !== undefined)
            url_ += "startTime=" + encodeURIComponent("" + startTime) + "&";
        if (endTime === null)
            throw new Error("The parameter 'endTime' cannot be null.");
        else if (endTime !== undefined)
            url_ += "endTime=" + encodeURIComponent("" + endTime) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByTimes(_response));
        });
    }

    protected processByTimes(response: AxiosResponse): Promise<CureScheduleRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleRecordViewResult>(null as any);
    }

    /**
     * 医生排班 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleDoctorPOST2(body: DeptScheduleDoctorViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleDoctorPOST2(_response));
        });
    }

    protected processDeptScheduleDoctorPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生排班 -- 复制排班
     * @param body (optional)
     * @return Success
     */
    copy(body: ScheduleCopyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/Copy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCopy(_response));
        });
    }

    protected processCopy(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生排班 -- 同步排班
     * @param body (optional)
     * @return Success
     */
    sync(body: ScheduleSyncEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/Sync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSync(_response));
        });
    }

    protected processSync(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生排班 -- 根据Id删除数据
     * @return Success
     */
    delete7(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete7(_response));
        });
    }

    protected processDelete7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生排班 -- 根据Id删除数据(批量)
     * @param ids 英文分号分隔
     * @return Success
     */
    batch(ids: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/Delete/Batch/{ids}";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined.");
        url_ = url_.replace("{ids}", encodeURIComponent("" + ids));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch(_response));
        });
    }

    protected processBatch(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleNurseServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 护士排班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleNurseGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleNurseResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleNurseGET(_response));
        });
    }

    protected processDeptScheduleNurseGET(response: AxiosResponse): Promise<DeptScheduleNurseResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleNurseResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleNurseResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleNurseResultEntry>(null as any);
    }

    /**
     * 护士排班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleNursePOST(id: string, body: DeptScheduleNurseViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleNursePOST(_response));
        });
    }

    protected processDeptScheduleNursePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士排班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter11(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleNurseResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter11(_response));
        });
    }

    protected processFilter11(response: AxiosResponse): Promise<DeptScheduleNurseResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleNurseResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleNurseResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleNurseResult>(null as any);
    }

    /**
     * 护士排班 -- 根据日期查询
     * @param areaId 院区ID
     * @param date (optional) 时间段(e.g. 2018-11-19 ~ 2018-11-25)
     * @param filter (optional) 查询条件
     * @return Success
     */
    bySysHospitalAreaId2(areaId: string, date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleNurseViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/BySysHospitalAreaId/{areaId}?";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBySysHospitalAreaId2(_response));
        });
    }

    protected processBySysHospitalAreaId2(response: AxiosResponse): Promise<DeptScheduleNurseViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleNurseViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleNurseViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleNurseViewResult>(null as any);
    }

    /**
     * 根据日期范围查询已经排班的班次
     * @param startTime (optional)
     * @param endTime (optional)
     * @param filter (optional)
     * @return Success
     */
    byTimes2(nurseId: string, startTime: string | undefined, endTime: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleRecordViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/ByTimes/{nurseId}?";
        if (nurseId === undefined || nurseId === null)
            throw new Error("The parameter 'nurseId' must be defined.");
        url_ = url_.replace("{nurseId}", encodeURIComponent("" + nurseId));
        if (startTime === null)
            throw new Error("The parameter 'startTime' cannot be null.");
        else if (startTime !== undefined)
            url_ += "startTime=" + encodeURIComponent("" + startTime) + "&";
        if (endTime === null)
            throw new Error("The parameter 'endTime' cannot be null.");
        else if (endTime !== undefined)
            url_ += "endTime=" + encodeURIComponent("" + endTime) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByTimes2(_response));
        });
    }

    protected processByTimes2(response: AxiosResponse): Promise<CureScheduleRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleRecordViewResult>(null as any);
    }

    /**
     * 护士排班 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleNursePOST2(body: DeptScheduleNurseViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleNursePOST2(_response));
        });
    }

    protected processDeptScheduleNursePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士排班 -- 复制排班
     * @param body (optional)
     * @return Success
     */
    copy2(body: ScheduleCopyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/Copy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCopy2(_response));
        });
    }

    protected processCopy2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士排班 -- 同步排班
     * @param body (optional)
     * @return Success
     */
    sync2(body: ScheduleSyncEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/Sync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSync2(_response));
        });
    }

    protected processSync2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士排班 -- 根据Id删除数据
     * @return Success
     */
    delete8(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete8(_response));
        });
    }

    protected processDelete8(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士排班 -- 根据Id删除数据(批量)
     * @param ids 英文分号分隔
     * @return Success
     */
    batch2(ids: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/Delete/Batch/{ids}";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined.");
        url_ = url_.replace("{ids}", encodeURIComponent("" + ids));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch2(_response));
        });
    }

    protected processBatch2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleOtherServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 其他排班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleOtherGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleOtherResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleOtherGET(_response));
        });
    }

    protected processDeptScheduleOtherGET(response: AxiosResponse): Promise<DeptScheduleOtherResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleOtherResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleOtherResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleOtherResultEntry>(null as any);
    }

    /**
     * 其他排班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleOtherPOST(id: string, body: DeptScheduleOtherEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleOtherPOST(_response));
        });
    }

    protected processDeptScheduleOtherPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他排班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter12(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleOtherResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter12(_response));
        });
    }

    protected processFilter12(response: AxiosResponse): Promise<DeptScheduleOtherResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleOtherResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleOtherResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleOtherResult>(null as any);
    }

    /**
     * 其他排班 -- 根据日期查询
     * @param areaId 院区ID
     * @param date (optional) 时间段(e.g. 2018-11-19 ~ 2018-11-25)
     * @param filter (optional) 查询条件
     * @return Success
     */
    bySysHospitalAreaId3(areaId: string, date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleOtherViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/BySysHospitalAreaId/{areaId}?";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBySysHospitalAreaId3(_response));
        });
    }

    protected processBySysHospitalAreaId3(response: AxiosResponse): Promise<DeptScheduleOtherViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleOtherViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleOtherViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleOtherViewResult>(null as any);
    }

    /**
     * 根据日期范围查询已经排班的班次
     * @param startTime (optional)
     * @param endTime (optional)
     * @param filter (optional)
     * @return Success
     */
    byTimes3(userId: string, startTime: string | undefined, endTime: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleRecordViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/ByTimes/{userId}?";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (startTime === null)
            throw new Error("The parameter 'startTime' cannot be null.");
        else if (startTime !== undefined)
            url_ += "startTime=" + encodeURIComponent("" + startTime) + "&";
        if (endTime === null)
            throw new Error("The parameter 'endTime' cannot be null.");
        else if (endTime !== undefined)
            url_ += "endTime=" + encodeURIComponent("" + endTime) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByTimes3(_response));
        });
    }

    protected processByTimes3(response: AxiosResponse): Promise<CureScheduleRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleRecordViewResult>(null as any);
    }

    /**
     * 其他排班 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleOtherPOST2(body: DeptScheduleOtherEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleOtherPOST2(_response));
        });
    }

    protected processDeptScheduleOtherPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他排班 -- 复制排班
     * @param body (optional)
     * @return Success
     */
    copy3(body: ScheduleCopyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/Copy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCopy3(_response));
        });
    }

    protected processCopy3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他排班 -- 同步排班
     * @param body (optional)
     * @return Success
     */
    sync3(body: ScheduleSyncEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/Sync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSync3(_response));
        });
    }

    protected processSync3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他排班 -- 根据Id删除数据
     * @return Success
     */
    delete9(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete9(_response));
        });
    }

    protected processDelete9(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他排班 -- 根据Id删除数据(批量)
     * @param ids 英文分号分隔
     * @return Success
     */
    batch3(ids: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/Delete/Batch/{ids}";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined.");
        url_ = url_.replace("{ids}", encodeURIComponent("" + ids));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch3(_response));
        });
    }

    protected processBatch3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleOvertimeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医护加班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleOvertimeGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleOvertimeViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleOvertimeGET(_response));
        });
    }

    protected processDeptScheduleOvertimeGET(response: AxiosResponse): Promise<DeptScheduleOvertimeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleOvertimeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleOvertimeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleOvertimeViewResultEntry>(null as any);
    }

    /**
     * 医护加班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleOvertimePOST(id: string, body: DeptScheduleOvertimeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleOvertimePOST(_response));
        });
    }

    protected processDeptScheduleOvertimePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护加班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter13(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleOvertimeViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter13(_response));
        });
    }

    protected processFilter13(response: AxiosResponse): Promise<DeptScheduleOvertimeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleOvertimeViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleOvertimeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleOvertimeViewResult>(null as any);
    }

    /**
     * 查询审批记录
     * @param hased (optional) 0:未审批/1:已经审批
     * @param filter (optional)
     * @return Success
     */
    approverRecord(hased: number | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ApproverRecordViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/ApproverRecord?";
        if (hased === null)
            throw new Error("The parameter 'hased' cannot be null.");
        else if (hased !== undefined)
            url_ += "hased=" + encodeURIComponent("" + hased) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processApproverRecord(_response));
        });
    }

    protected processApproverRecord(response: AxiosResponse): Promise<ApproverRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ApproverRecordViewResult.fromJS(resultData200);
            return Promise.resolve<ApproverRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApproverRecordViewResult>(null as any);
    }

    /**
     * 申请/审批记录导出
     * @param hased (optional) 0:已经审批/1:未审批
     * @param filter (optional) 过滤条件
     * @return Success
     */
    export4(hased: number | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/Export?";
        if (hased === null)
            throw new Error("The parameter 'hased' cannot be null.");
        else if (hased !== undefined)
            url_ += "hased=" + encodeURIComponent("" + hased) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport4(_response));
        });
    }

    protected processExport4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护加班 -- 新增数据
     * @param role (optional) doctor/nurse
     * @param body (optional)
     * @return Success
     */
    deptScheduleOvertimePOST2(role: string | undefined, body: DeptScheduleOvertimeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime?";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleOvertimePOST2(_response));
        });
    }

    protected processDeptScheduleOvertimePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护加班 -- 审批结果
     * @param approvered (optional)
     * @param refuseReason (optional)
     * @return Success
     */
    overtime(id: string, approvered: number | undefined, refuseReason: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/Overtime/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (approvered === null)
            throw new Error("The parameter 'approvered' cannot be null.");
        else if (approvered !== undefined)
            url_ += "approvered=" + encodeURIComponent("" + approvered) + "&";
        if (refuseReason === null)
            throw new Error("The parameter 'refuseReason' cannot be null.");
        else if (refuseReason !== undefined)
            url_ += "refuseReason=" + encodeURIComponent("" + refuseReason) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOvertime(_response));
        });
    }

    protected processOvertime(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护加班 -- 撤销审批
     * @param id (optional)
     * @param role (optional)
     * @return Success
     */
    cancel(id: string | undefined, role: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/Cancel?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCancel(_response));
        });
    }

    protected processCancel(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护加班 -- 根据Id删除数据
     * @return Success
     */
    delete10(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete10(_response));
        });
    }

    protected processDelete10(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleSubstituteServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医护顶班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleSubstituteGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleSubstituteViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleSubstitute/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleSubstituteGET(_response));
        });
    }

    protected processDeptScheduleSubstituteGET(response: AxiosResponse): Promise<DeptScheduleSubstituteViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleSubstituteViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleSubstituteViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleSubstituteViewResultEntry>(null as any);
    }

    /**
     * 医护顶班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleSubstitutePOST(id: string, body: DeptScheduleSubstituteEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleSubstitute/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleSubstitutePOST(_response));
        });
    }

    protected processDeptScheduleSubstitutePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护顶班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional)
     * @return Success
     */
    filter14(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleSubstituteViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleSubstitute/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter14(_response));
        });
    }

    protected processFilter14(response: AxiosResponse): Promise<DeptScheduleSubstituteViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleSubstituteViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleSubstituteViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleSubstituteViewResult>(null as any);
    }

    /**
     * 医护顶班 - 导出
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    export5(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleSubstitute/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport5(_response));
        });
    }

    protected processExport5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护顶班 -- 新增数据
     * @param role (optional) doctor/nurse
     * @param body (optional)
     * @return Success
     */
    deptScheduleSubstitutePOST2(role: string | undefined, body: DeptScheduleSubstituteEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleSubstitute?";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleSubstitutePOST2(_response));
        });
    }

    protected processDeptScheduleSubstitutePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护顶班 -- 根据Id删除数据
     * @return Success
     */
    delete11(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleSubstitute/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete11(_response));
        });
    }

    protected processDelete11(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleTakeOffServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医护调休 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleTakeOffGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleTakeOffViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleTakeOffGET(_response));
        });
    }

    protected processDeptScheduleTakeOffGET(response: AxiosResponse): Promise<DeptScheduleTakeOffViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleTakeOffViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleTakeOffViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleTakeOffViewResultEntry>(null as any);
    }

    /**
     * 医护调休 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleTakeOffPOST(id: string, body: DeptScheduleTakeOffEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleTakeOffPOST(_response));
        });
    }

    protected processDeptScheduleTakeOffPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护调休 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter15(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleTakeOffViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter15(_response));
        });
    }

    protected processFilter15(response: AxiosResponse): Promise<DeptScheduleTakeOffViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleTakeOffViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleTakeOffViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleTakeOffViewResult>(null as any);
    }

    /**
     * 医护调休 -- 新增数据
     * @param role (optional)
     * @param body (optional)
     * @return Success
     */
    deptScheduleTakeOffPOST2(role: string | undefined, body: DeptScheduleTakeOffEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff?";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleTakeOffPOST2(_response));
        });
    }

    protected processDeptScheduleTakeOffPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护调休 -- 审批结果
     * @param approvered (optional)
     * @param refuseReason (optional)
     * @return Success
     */
    takeoff(id: string, approvered: number | undefined, refuseReason: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff/Takeoff/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (approvered === null)
            throw new Error("The parameter 'approvered' cannot be null.");
        else if (approvered !== undefined)
            url_ += "approvered=" + encodeURIComponent("" + approvered) + "&";
        if (refuseReason === null)
            throw new Error("The parameter 'refuseReason' cannot be null.");
        else if (refuseReason !== undefined)
            url_ += "refuseReason=" + encodeURIComponent("" + refuseReason) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTakeoff(_response));
        });
    }

    protected processTakeoff(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护调休 -- 撤销审批
     * @param role (optional)
     * @return Success
     */
    cancel2(id: string, role: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff/Cancel/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCancel2(_response));
        });
    }

    protected processCancel2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护调休 -- 根据Id删除数据
     * @return Success
     */
    delete12(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete12(_response));
        });
    }

    protected processDelete12(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptShiftDoctorServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医生班次 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptShiftDoctorGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptShiftDoctorResultEntry> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftDoctorGET(_response));
        });
    }

    protected processDeptShiftDoctorGET(response: AxiosResponse): Promise<DeptShiftDoctorResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShiftDoctorResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptShiftDoctorResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShiftDoctorResultEntry>(null as any);
    }

    /**
     * 医生班次 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptShiftDoctorPOST(id: string, body: DeptShiftDoctorViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftDoctorPOST(_response));
        });
    }

    protected processDeptShiftDoctorPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生班次 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter16(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptShiftDoctorResult> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter16(_response));
        });
    }

    protected processFilter16(response: AxiosResponse): Promise<DeptShiftDoctorResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShiftDoctorResult.fromJS(resultData200);
            return Promise.resolve<DeptShiftDoctorResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShiftDoctorResult>(null as any);
    }

    /**
     * 医生班次 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptShiftDoctorPOST2(body: DeptShiftDoctorViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftDoctorPOST2(_response));
        });
    }

    protected processDeptShiftDoctorPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生班次 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForDeptShiftDoctor(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForDeptShiftDoctor(_response));
        });
    }

    protected processMoveNodeForDeptShiftDoctor(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生班次 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForDeptShiftDoctor(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForDeptShiftDoctor(_response));
        });
    }

    protected processUpNodeForDeptShiftDoctor(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生班次 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForDeptShiftDoctor(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForDeptShiftDoctor(_response));
        });
    }

    protected processDownNodeForDeptShiftDoctor(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生班次 -- 根据Id删除数据
     * @return Success
     */
    delete13(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete13(_response));
        });
    }

    protected processDelete13(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptShiftNurseServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 护士班次 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptShiftNurseGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptShiftNurseResultEntry> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftNurseGET(_response));
        });
    }

    protected processDeptShiftNurseGET(response: AxiosResponse): Promise<DeptShiftNurseResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShiftNurseResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptShiftNurseResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShiftNurseResultEntry>(null as any);
    }

    /**
     * 护士班次 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptShiftNursePOST(id: string, body: DeptShiftNurseViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftNursePOST(_response));
        });
    }

    protected processDeptShiftNursePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士班次 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter17(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptShiftNurseResult> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter17(_response));
        });
    }

    protected processFilter17(response: AxiosResponse): Promise<DeptShiftNurseResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShiftNurseResult.fromJS(resultData200);
            return Promise.resolve<DeptShiftNurseResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShiftNurseResult>(null as any);
    }

    /**
     * 护士班次 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptShiftNursePOST2(body: DeptShiftNurseViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftNursePOST2(_response));
        });
    }

    protected processDeptShiftNursePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士班次 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForDeptShiftNurse(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForDeptShiftNurse(_response));
        });
    }

    protected processMoveNodeForDeptShiftNurse(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士班次 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForDeptShiftNurse(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForDeptShiftNurse(_response));
        });
    }

    protected processUpNodeForDeptShiftNurse(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士班次 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForDeptShiftNurse(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForDeptShiftNurse(_response));
        });
    }

    protected processDownNodeForDeptShiftNurse(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士班次 -- 根据Id删除数据
     * @return Success
     */
    delete14(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete14(_response));
        });
    }

    protected processDelete14(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptShiftOtherServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 其他班次 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptShiftOtherGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptShiftOtherViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptShiftOther/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftOtherGET(_response));
        });
    }

    protected processDeptShiftOtherGET(response: AxiosResponse): Promise<DeptShiftOtherViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShiftOtherViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptShiftOtherViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShiftOtherViewResultEntry>(null as any);
    }

    /**
     * 其他班次 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptShiftOtherPOST(id: string, body: DeptShiftOtherEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftOther/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftOtherPOST(_response));
        });
    }

    protected processDeptShiftOtherPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他班次 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter18(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptShiftOtherViewResult> {
        let url_ = this.baseUrl + "/api/DeptShiftOther/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter18(_response));
        });
    }

    protected processFilter18(response: AxiosResponse): Promise<DeptShiftOtherViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShiftOtherViewResult.fromJS(resultData200);
            return Promise.resolve<DeptShiftOtherViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShiftOtherViewResult>(null as any);
    }

    /**
     * 其他班次 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptShiftOtherPOST2(body: DeptShiftOtherEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftOther";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftOtherPOST2(_response));
        });
    }

    protected processDeptShiftOtherPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他班次 -- 根据Id删除数据
     * @return Success
     */
    delete15(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftOther/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete15(_response));
        });
    }

    protected processDelete15(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptShrServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 交班记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptShrGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptShrResultEntry> {
        let url_ = this.baseUrl + "/api/DeptShr/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShrGET(_response));
        });
    }

    protected processDeptShrGET(response: AxiosResponse): Promise<DeptShrResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShrResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptShrResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShrResultEntry>(null as any);
    }

    /**
     * 交班记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptShrPOST(id: string, body: DeptShrViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShr/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShrPOST(_response));
        });
    }

    protected processDeptShrPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 交班记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter19(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptShrResult> {
        let url_ = this.baseUrl + "/api/DeptShr/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter19(_response));
        });
    }

    protected processFilter19(response: AxiosResponse): Promise<DeptShrResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShrResult.fromJS(resultData200);
            return Promise.resolve<DeptShrResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShrResult>(null as any);
    }

    /**
     * 交班记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptShrPOST2(body: DeptShrViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShr";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShrPOST2(_response));
        });
    }

    protected processDeptShrPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 交班记录 -- 根据Id删除数据
     * @return Success
     */
    delete16(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShr/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete16(_response));
        });
    }

    protected processDelete16(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

/** 审批记录 */
export class ApproverRecordView implements IApproverRecordView {
    /** 记录ID */
    id?: string | undefined;
    /** 记录类型 */
    type?: string | undefined;
    /** 审批状态 */
    checked?: number;
    /** 原因 */
    reason?: string | undefined;
    /** 时长 */
    times?: number;
    /** 审批结果展示值 */
    approvedLabel?: string | undefined;
    /** 审批结果 */
    approved?: number;
    /** 申请用户ID */
    applyUserId?: string | undefined;
    /** 申请用户名称 */
    applyUserName?: string | undefined;
    /** 申请日期 */
    applicaTime?: string | undefined;
    /** 开始时间 */
    beginTime?: dayjs.Dayjs;
    /** 结束时间 */
    endTime?: dayjs.Dayjs;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;

    constructor(data?: IApproverRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.checked = _data["checked"];
            this.reason = _data["reason"];
            this.times = _data["times"];
            this.approvedLabel = _data["approvedLabel"];
            this.approved = _data["approved"];
            this.applyUserId = _data["applyUserId"];
            this.applyUserName = _data["applyUserName"];
            this.applicaTime = _data["applicaTime"];
            this.beginTime = _data["beginTime"] ? dayjs(_data["beginTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? dayjs(_data["endTime"].toString()) : <any>undefined;
            this.refuseReason = _data["refuseReason"];
        }
    }

    static fromJS(data: any): ApproverRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new ApproverRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["checked"] = this.checked;
        data["reason"] = this.reason;
        data["times"] = this.times;
        data["approvedLabel"] = this.approvedLabel;
        data["approved"] = this.approved;
        data["applyUserId"] = this.applyUserId;
        data["applyUserName"] = this.applyUserName;
        data["applicaTime"] = this.applicaTime;
        data["beginTime"] = this.beginTime ? this.beginTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["refuseReason"] = this.refuseReason;
        return data;
    }
}

/** 审批记录 */
export interface IApproverRecordView {
    /** 记录ID */
    id?: string | undefined;
    /** 记录类型 */
    type?: string | undefined;
    /** 审批状态 */
    checked?: number;
    /** 原因 */
    reason?: string | undefined;
    /** 时长 */
    times?: number;
    /** 审批结果展示值 */
    approvedLabel?: string | undefined;
    /** 审批结果 */
    approved?: number;
    /** 申请用户ID */
    applyUserId?: string | undefined;
    /** 申请用户名称 */
    applyUserName?: string | undefined;
    /** 申请日期 */
    applicaTime?: string | undefined;
    /** 开始时间 */
    beginTime?: dayjs.Dayjs;
    /** 结束时间 */
    endTime?: dayjs.Dayjs;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
}

/** Reponse */
export class ApproverRecordViewResult implements IApproverRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ApproverRecordView[] | undefined;

    constructor(data?: IApproverRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ApproverRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApproverRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new ApproverRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IApproverRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ApproverRecordView[] | undefined;
}

export class CureScheduleRecordView implements ICureScheduleRecordView {
    /** 用户标识 */
    id?: string | undefined;
    /** [医生标识](用户信息) */
    userId?: string | undefined;
    /** 用户姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次简称 */
    shiftShortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureScheduleRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.shiftShortName = _data["shiftShortName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheduleRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["shiftShortName"] = this.shiftShortName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICureScheduleRecordView {
    /** 用户标识 */
    id?: string | undefined;
    /** [医生标识](用户信息) */
    userId?: string | undefined;
    /** 用户姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次简称 */
    shiftShortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureScheduleRecordViewResult implements ICureScheduleRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleRecordView[] | undefined;

    constructor(data?: ICureScheduleRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureScheduleRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureScheduleRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleRecordView[] | undefined;
}

/** 透析班次 */
export class CureShift implements ICureShift {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endDate?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureShift) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.beginTime = _data["beginTime"];
            this.endDate = _data["endDate"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureShift {
        data = typeof data === 'object' ? data : {};
        let result = new CureShift();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["beginTime"] = this.beginTime;
        data["endDate"] = this.endDate;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析班次 */
export interface ICureShift {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endDate?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 透析区间 */
export class DeptDialysisArea implements IDeptDialysisArea {
    /** 标识 */
    id?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 阳性分区0,1 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysHospitalAreas?: SysHospitalArea;

    constructor(data?: IDeptDialysisArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.positive = _data["positive"];
            this.bedMax = _data["bedMax"];
            this.bedCount = _data["bedCount"];
            this.build = _data["build"];
            this.floor = _data["floor"];
            this.color = _data["color"];
            this.icon = _data["icon"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysHospitalAreas = _data["sysHospitalAreas"] ? SysHospitalArea.fromJS(_data["sysHospitalAreas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisArea {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["positive"] = this.positive;
        data["bedMax"] = this.bedMax;
        data["bedCount"] = this.bedCount;
        data["build"] = this.build;
        data["floor"] = this.floor;
        data["color"] = this.color;
        data["icon"] = this.icon;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["sysHospitalAreas"] = this.sysHospitalAreas ? this.sysHospitalAreas.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析区间 */
export interface IDeptDialysisArea {
    /** 标识 */
    id?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 阳性分区0,1 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysHospitalAreas?: SysHospitalArea;
}

/** 透析区间 - 前端展现增加组织名称 */
export class DeptDialysisAreaView implements IDeptDialysisAreaView {
    /** [院区标识](院区Id) */
    sysHospitalAreaId?: string | undefined;
    /** 组织名称 */
    sysHospitalAreaNameFull?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    typeLabel?: string | undefined;
    /** 类型名称 */
    typeName?: string | undefined;
    /** 阳性分区 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色名称 */
    colorName?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 图标显示值 */
    iconLabel?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptDialysisAreaView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.sysHospitalAreaNameFull = _data["sysHospitalAreaNameFull"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.typeName = _data["typeName"];
            this.positive = _data["positive"];
            this.bedMax = _data["bedMax"];
            this.bedCount = _data["bedCount"];
            this.build = _data["build"];
            this.floor = _data["floor"];
            this.color = _data["color"];
            this.colorName = _data["colorName"];
            this.icon = _data["icon"];
            this.iconLabel = _data["iconLabel"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisAreaView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisAreaView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["sysHospitalAreaNameFull"] = this.sysHospitalAreaNameFull;
        data["name"] = this.name;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["typeName"] = this.typeName;
        data["positive"] = this.positive;
        data["bedMax"] = this.bedMax;
        data["bedCount"] = this.bedCount;
        data["build"] = this.build;
        data["floor"] = this.floor;
        data["color"] = this.color;
        data["colorName"] = this.colorName;
        data["icon"] = this.icon;
        data["iconLabel"] = this.iconLabel;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析区间 - 前端展现增加组织名称 */
export interface IDeptDialysisAreaView {
    /** [院区标识](院区Id) */
    sysHospitalAreaId?: string | undefined;
    /** 组织名称 */
    sysHospitalAreaNameFull?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    typeLabel?: string | undefined;
    /** 类型名称 */
    typeName?: string | undefined;
    /** 阳性分区 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色名称 */
    colorName?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 图标显示值 */
    iconLabel?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 透析区间 (ViewModel) */
export class DeptDialysisAreaViewModel implements IDeptDialysisAreaViewModel {
    /** [归属透析室标识](透析室Id) */
    sysHospitalAreaId!: string;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name!: string;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type!: string;
    /** 阳性分区0,1 */
    positive!: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IDeptDialysisAreaViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.positive = _data["positive"];
            this.bedMax = _data["bedMax"];
            this.bedCount = _data["bedCount"];
            this.build = _data["build"];
            this.floor = _data["floor"];
            this.color = _data["color"];
            this.icon = _data["icon"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): DeptDialysisAreaViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisAreaViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["positive"] = this.positive;
        data["bedMax"] = this.bedMax;
        data["bedCount"] = this.bedCount;
        data["build"] = this.build;
        data["floor"] = this.floor;
        data["color"] = this.color;
        data["icon"] = this.icon;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 透析区间 (ViewModel) */
export interface IDeptDialysisAreaViewModel {
    /** [归属透析室标识](透析室Id) */
    sysHospitalAreaId: string;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name: string;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type: string;
    /** 阳性分区0,1 */
    positive: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** Reponse */
export class DeptDialysisAreaViewResult implements IDeptDialysisAreaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisAreaView[] | undefined;

    constructor(data?: IDeptDialysisAreaViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptDialysisAreaView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptDialysisAreaViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisAreaViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisAreaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisAreaView[] | undefined;
}

/** Reponse */
export class DeptDialysisAreaViewResultEntry implements IDeptDialysisAreaViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptDialysisAreaView;

    constructor(data?: IDeptDialysisAreaViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptDialysisAreaView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisAreaViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisAreaViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisAreaViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptDialysisAreaView;
}

/** 透析床位 */
export class DeptDialysisBed implements IDeptDialysisBed {
    /** 标识 */
    id?: string | undefined;
    /** [透析区间](透析区间) */
    deptDialysisAreaId?: string | undefined;
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    deptDialysisAreas?: DeptDialysisArea;

    constructor(data?: IDeptDialysisBed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.name = _data["name"];
            this.serialNo = _data["serialNo"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.deptDialysisAreas = _data["deptDialysisAreas"] ? DeptDialysisArea.fromJS(_data["deptDialysisAreas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisBed {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["name"] = this.name;
        data["serialNo"] = this.serialNo;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["deptDialysisAreas"] = this.deptDialysisAreas ? this.deptDialysisAreas.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析床位 */
export interface IDeptDialysisBed {
    /** 标识 */
    id?: string | undefined;
    /** [透析区间](透析区间) */
    deptDialysisAreaId?: string | undefined;
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    deptDialysisAreas?: DeptDialysisArea;
}

/** 透析床位绑定设备记录 */
export class DeptDialysisBedDev implements IDeptDialysisBedDev {
    /** 标识 */
    id?: string | undefined;
    /** [透析床位标识](透析床位) */
    deptDialysisBedId?: string | undefined;
    /** [设备标识](科室设备) */
    devInfoId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    deptDialysisBeds?: DeptDialysisBed;
    devInfos?: DevInfo;

    constructor(data?: IDeptDialysisBedDev) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.devInfoId = _data["devInfoId"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.deptDialysisBeds = _data["deptDialysisBeds"] ? DeptDialysisBed.fromJS(_data["deptDialysisBeds"]) : <any>undefined;
            this.devInfos = _data["devInfos"] ? DevInfo.fromJS(_data["devInfos"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisBedDev {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedDev();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["devInfoId"] = this.devInfoId;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["deptDialysisBeds"] = this.deptDialysisBeds ? this.deptDialysisBeds.toJSON() : <any>undefined;
        data["devInfos"] = this.devInfos ? this.devInfos.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析床位绑定设备记录 */
export interface IDeptDialysisBedDev {
    /** 标识 */
    id?: string | undefined;
    /** [透析床位标识](透析床位) */
    deptDialysisBedId?: string | undefined;
    /** [设备标识](科室设备) */
    devInfoId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    deptDialysisBeds?: DeptDialysisBed;
    devInfos?: DevInfo;
}

/** Reponse */
export class DeptDialysisBedDevResult implements IDeptDialysisBedDevResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBedDev[] | undefined;

    constructor(data?: IDeptDialysisBedDevResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptDialysisBedDev.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptDialysisBedDevResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedDevResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisBedDevResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBedDev[] | undefined;
}

/** Reponse */
export class DeptDialysisBedDevResultEntry implements IDeptDialysisBedDevResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptDialysisBedDev;

    constructor(data?: IDeptDialysisBedDevResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptDialysisBedDev.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisBedDevResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedDevResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisBedDevResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptDialysisBedDev;
}

/** 透析床位绑定设备记录 (ViewModel) */
export class DeptDialysisBedDevViewModel implements IDeptDialysisBedDevViewModel {
    /** [透析床位标识](透析床位Id) */
    deptDialysisBedId!: string;
    /** [设备标识](科室设备Id) */
    devInfoId!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IDeptDialysisBedDevViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.devInfoId = _data["devInfoId"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): DeptDialysisBedDevViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedDevViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["devInfoId"] = this.devInfoId;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 透析床位绑定设备记录 (ViewModel) */
export interface IDeptDialysisBedDevViewModel {
    /** [透析床位标识](透析床位Id) */
    deptDialysisBedId: string;
    /** [设备标识](科室设备Id) */
    devInfoId: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 透析床位绑定设备记录 */
export class DeptDialysisBedEditModel implements IDeptDialysisBedEditModel {
    /** [透析区间](#透析区间) */
    deptDialysisAreaId!: string;
    /** [设备标识](科室设备Id) */
    devInfoId?: string | undefined;
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;

    constructor(data?: IDeptDialysisBedEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.devInfoId = _data["devInfoId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.boxIp = _data["boxIp"];
            this.bluetoothBpId = _data["bluetoothBpId"];
            this.serialNo = _data["serialNo"];
        }
    }

    static fromJS(data: any): DeptDialysisBedEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["devInfoId"] = this.devInfoId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["boxIp"] = this.boxIp;
        data["bluetoothBpId"] = this.bluetoothBpId;
        data["serialNo"] = this.serialNo;
        return data;
    }
}

/** 透析床位绑定设备记录 */
export interface IDeptDialysisBedEditModel {
    /** [透析区间](#透析区间) */
    deptDialysisAreaId: string;
    /** [设备标识](科室设备Id) */
    devInfoId?: string | undefined;
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;
}

/** 透析床位-前端展现扩展 */
export class DeptDialysisBedInfoDataView implements IDeptDialysisBedInfoDataView {
    /** 透析床位名称 */
    name?: string | undefined;
    /** 透析床位备注 */
    remark?: string | undefined;
    /** 透析床位启用状态 */
    enabled?: number;
    /** 科室设备Id */
    devInfoId?: string | undefined;
    /** 科室设备编号 */
    devInfoCode?: string | undefined;
    /** 设备状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    devInfoStatus?: string | undefined;
    /** 设备状态显示值 */
    devInfoStatusLabel?: string | undefined;
    /** 透析区间Id */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 阳性分区 */
    deptDialysisAreaPositive?: number | undefined;
    /** 院区标识 */
    sysHospitalAreaId?: string | undefined;
    /** 院区名称 */
    sysHospitalAreaNameFull?: string | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 序列 */
    sequence?: number | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;

    constructor(data?: IDeptDialysisBedInfoDataView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.devInfoId = _data["devInfoId"];
            this.devInfoCode = _data["devInfoCode"];
            this.devInfoStatus = _data["devInfoStatus"];
            this.devInfoStatusLabel = _data["devInfoStatusLabel"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.deptDialysisAreaPositive = _data["deptDialysisAreaPositive"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.sysHospitalAreaNameFull = _data["sysHospitalAreaNameFull"];
            this.build = _data["build"];
            this.floor = _data["floor"];
            this.sequence = _data["sequence"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.boxIp = _data["boxIp"];
            this.bluetoothBpId = _data["bluetoothBpId"];
            this.serialNo = _data["serialNo"];
        }
    }

    static fromJS(data: any): DeptDialysisBedInfoDataView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedInfoDataView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["devInfoId"] = this.devInfoId;
        data["devInfoCode"] = this.devInfoCode;
        data["devInfoStatus"] = this.devInfoStatus;
        data["devInfoStatusLabel"] = this.devInfoStatusLabel;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["deptDialysisAreaPositive"] = this.deptDialysisAreaPositive;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["sysHospitalAreaNameFull"] = this.sysHospitalAreaNameFull;
        data["build"] = this.build;
        data["floor"] = this.floor;
        data["sequence"] = this.sequence;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["boxIp"] = this.boxIp;
        data["bluetoothBpId"] = this.bluetoothBpId;
        data["serialNo"] = this.serialNo;
        return data;
    }
}

/** 透析床位-前端展现扩展 */
export interface IDeptDialysisBedInfoDataView {
    /** 透析床位名称 */
    name?: string | undefined;
    /** 透析床位备注 */
    remark?: string | undefined;
    /** 透析床位启用状态 */
    enabled?: number;
    /** 科室设备Id */
    devInfoId?: string | undefined;
    /** 科室设备编号 */
    devInfoCode?: string | undefined;
    /** 设备状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    devInfoStatus?: string | undefined;
    /** 设备状态显示值 */
    devInfoStatusLabel?: string | undefined;
    /** 透析区间Id */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 阳性分区 */
    deptDialysisAreaPositive?: number | undefined;
    /** 院区标识 */
    sysHospitalAreaId?: string | undefined;
    /** 院区名称 */
    sysHospitalAreaNameFull?: string | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 序列 */
    sequence?: number | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;
}

/** Reponse */
export class DeptDialysisBedInfoDataViewResult implements IDeptDialysisBedInfoDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBedInfoDataView[] | undefined;

    constructor(data?: IDeptDialysisBedInfoDataViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptDialysisBedInfoDataView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptDialysisBedInfoDataViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedInfoDataViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisBedInfoDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBedInfoDataView[] | undefined;
}

/** Reponse */
export class DeptDialysisBedResult implements IDeptDialysisBedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBed[] | undefined;

    constructor(data?: IDeptDialysisBedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptDialysisBed.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptDialysisBedResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisBedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBed[] | undefined;
}

/** Reponse */
export class DeptDialysisBedResultEntry implements IDeptDialysisBedResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptDialysisBed;

    constructor(data?: IDeptDialysisBedResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptDialysisBed.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisBedResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisBedResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptDialysisBed;
}

/** 医护人员信息 */
export class DeptMedicalPersonnel implements IDeptMedicalPersonnel {
    /** 标识 */
    id?: string | undefined;
    /** [绑定系统用户标识](用户信息) */
    sysUserId?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 籍贯 */
    birthplace?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 职务 医生`DIC.MEDICAL.DOCTOR.TITLE` 护士`DIC.MEDICAL.NURSE.TITLE` *主任,副主任,医生,护士长,护士,实习生* */
    title?: string | undefined;
    /** 职称 医生`DIC.MEDICAL.DOCTOR.PROFESSIONALTITLE` 护士`DIC.MEDICAL.NURSE.PROFESSIONALTITLE` */
    professionalTitle?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 参加工作日期 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入职日期 */
    hiredate?: dayjs.Dayjs | undefined;
    /** 资格证书编码 */
    credential?: string | undefined;
    /** 执业证书编码 */
    practice?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
    /** 毕业院校 */
    university?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 政治面貌 `DIC.PEOPLE.POLITICAL` *群众,团员,党员* */
    political?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysUsers?: SysUser;

    constructor(data?: IDeptMedicalPersonnel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysUserId = _data["sysUserId"];
            this.nationality = _data["nationality"];
            this.birthplace = _data["birthplace"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.title = _data["title"];
            this.professionalTitle = _data["professionalTitle"];
            this.educationalLevel = _data["educationalLevel"];
            this.workdate = _data["workdate"] ? dayjs(_data["workdate"].toString()) : <any>undefined;
            this.hiredate = _data["hiredate"] ? dayjs(_data["hiredate"].toString()) : <any>undefined;
            this.credential = _data["credential"];
            this.practice = _data["practice"];
            this.signature = _data["signature"];
            this.university = _data["university"];
            this.marital = _data["marital"];
            this.political = _data["political"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysUsers = _data["sysUsers"] ? SysUser.fromJS(_data["sysUsers"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptMedicalPersonnel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysUserId"] = this.sysUserId;
        data["nationality"] = this.nationality;
        data["birthplace"] = this.birthplace;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["title"] = this.title;
        data["professionalTitle"] = this.professionalTitle;
        data["educationalLevel"] = this.educationalLevel;
        data["workdate"] = this.workdate ? this.workdate.toISOString() : <any>undefined;
        data["hiredate"] = this.hiredate ? this.hiredate.toISOString() : <any>undefined;
        data["credential"] = this.credential;
        data["practice"] = this.practice;
        data["signature"] = this.signature;
        data["university"] = this.university;
        data["marital"] = this.marital;
        data["political"] = this.political;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["sysUsers"] = this.sysUsers ? this.sysUsers.toJSON() : <any>undefined;
        return data;
    }
}

/** 医护人员信息 */
export interface IDeptMedicalPersonnel {
    /** 标识 */
    id?: string | undefined;
    /** [绑定系统用户标识](用户信息) */
    sysUserId?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 籍贯 */
    birthplace?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 职务 医生`DIC.MEDICAL.DOCTOR.TITLE` 护士`DIC.MEDICAL.NURSE.TITLE` *主任,副主任,医生,护士长,护士,实习生* */
    title?: string | undefined;
    /** 职称 医生`DIC.MEDICAL.DOCTOR.PROFESSIONALTITLE` 护士`DIC.MEDICAL.NURSE.PROFESSIONALTITLE` */
    professionalTitle?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 参加工作日期 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入职日期 */
    hiredate?: dayjs.Dayjs | undefined;
    /** 资格证书编码 */
    credential?: string | undefined;
    /** 执业证书编码 */
    practice?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
    /** 毕业院校 */
    university?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 政治面貌 `DIC.PEOPLE.POLITICAL` *群众,团员,党员* */
    political?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysUsers?: SysUser;
}

/** 医护人员证书 */
export class DeptMedicalPersonnelFile implements IDeptMedicalPersonnelFile {
    /** 标识 */
    id?: string | undefined;
    /** [医护人员信息标识](医护人员信息) */
    deptMedicalPersonnelId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    deptMedicalPersonnels?: DeptMedicalPersonnel;
    hfsFiless?: HfsFiles;

    constructor(data?: IDeptMedicalPersonnelFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deptMedicalPersonnelId = _data["deptMedicalPersonnelId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.deptMedicalPersonnels = _data["deptMedicalPersonnels"] ? DeptMedicalPersonnel.fromJS(_data["deptMedicalPersonnels"]) : <any>undefined;
            this.hfsFiless = _data["hfsFiless"] ? HfsFiles.fromJS(_data["hfsFiless"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelFile {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deptMedicalPersonnelId"] = this.deptMedicalPersonnelId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["deptMedicalPersonnels"] = this.deptMedicalPersonnels ? this.deptMedicalPersonnels.toJSON() : <any>undefined;
        data["hfsFiless"] = this.hfsFiless ? this.hfsFiless.toJSON() : <any>undefined;
        return data;
    }
}

/** 医护人员证书 */
export interface IDeptMedicalPersonnelFile {
    /** 标识 */
    id?: string | undefined;
    /** [医护人员信息标识](医护人员信息) */
    deptMedicalPersonnelId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    deptMedicalPersonnels?: DeptMedicalPersonnel;
    hfsFiless?: HfsFiles;
}

/** Reponse */
export class DeptMedicalPersonnelFileResultEntry implements IDeptMedicalPersonnelFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptMedicalPersonnelFile;

    constructor(data?: IDeptMedicalPersonnelFileResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptMedicalPersonnelFile.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelFileResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelFileResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptMedicalPersonnelFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptMedicalPersonnelFile;
}

export class DeptMedicalPersonnelFileView implements IDeptMedicalPersonnelFileView {
    /** [医护人员信息标识](#医护人员信息) */
    deptMedicalPersonnelId?: string | undefined;
    /** [文件标识](#文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 医护人员全名 */
    deptMedicalPersonnelName?: string | undefined;
    /** 医护人员姓名 */
    deptMedicalPersonnelName1?: string | undefined;
    /** 医护人员别名 */
    deptMedicalPersonnelName2?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 文件名 */
    fileName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptMedicalPersonnelFileView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptMedicalPersonnelId = _data["deptMedicalPersonnelId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
            this.deptMedicalPersonnelName = _data["deptMedicalPersonnelName"];
            this.deptMedicalPersonnelName1 = _data["deptMedicalPersonnelName1"];
            this.deptMedicalPersonnelName2 = _data["deptMedicalPersonnelName2"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.fileName = _data["fileName"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelFileView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelFileView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptMedicalPersonnelId"] = this.deptMedicalPersonnelId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        data["deptMedicalPersonnelName"] = this.deptMedicalPersonnelName;
        data["deptMedicalPersonnelName1"] = this.deptMedicalPersonnelName1;
        data["deptMedicalPersonnelName2"] = this.deptMedicalPersonnelName2;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["fileName"] = this.fileName;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IDeptMedicalPersonnelFileView {
    /** [医护人员信息标识](#医护人员信息) */
    deptMedicalPersonnelId?: string | undefined;
    /** [文件标识](#文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 医护人员全名 */
    deptMedicalPersonnelName?: string | undefined;
    /** 医护人员姓名 */
    deptMedicalPersonnelName1?: string | undefined;
    /** 医护人员别名 */
    deptMedicalPersonnelName2?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 文件名 */
    fileName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
}

/** 医护人员证书 (ViewModel) */
export class DeptMedicalPersonnelFileViewModel implements IDeptMedicalPersonnelFileViewModel {
    /** [医护人员信息标识](医护人员信息Id) */
    deptMedicalPersonnelId!: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptMedicalPersonnelFileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptMedicalPersonnelId = _data["deptMedicalPersonnelId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelFileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelFileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptMedicalPersonnelId"] = this.deptMedicalPersonnelId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医护人员证书 (ViewModel) */
export interface IDeptMedicalPersonnelFileViewModel {
    /** [医护人员信息标识](医护人员信息Id) */
    deptMedicalPersonnelId: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId: string;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DeptMedicalPersonnelFileViewResult implements IDeptMedicalPersonnelFileViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptMedicalPersonnelFileView[] | undefined;

    constructor(data?: IDeptMedicalPersonnelFileViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptMedicalPersonnelFileView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelFileViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelFileViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptMedicalPersonnelFileViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptMedicalPersonnelFileView[] | undefined;
}

/** 医护人员签名信息 */
export class DeptMedicalPersonnelSignatureEditModel implements IDeptMedicalPersonnelSignatureEditModel {
    /** 电子签名路径 */
    signature?: string | undefined;

    constructor(data?: IDeptMedicalPersonnelSignatureEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.signature = _data["signature"];
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelSignatureEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelSignatureEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["signature"] = this.signature;
        return data;
    }
}

/** 医护人员签名信息 */
export interface IDeptMedicalPersonnelSignatureEditModel {
    /** 电子签名路径 */
    signature?: string | undefined;
}

export class DeptMedicalPersonnelSignatureView implements IDeptMedicalPersonnelSignatureView {
    /** 标识 */
    id?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;

    constructor(data?: IDeptMedicalPersonnelSignatureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.signature = _data["signature"];
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelSignatureView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelSignatureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["signature"] = this.signature;
        return data;
    }
}

export interface IDeptMedicalPersonnelSignatureView {
    /** 标识 */
    id?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
}

/** Reponse */
export class DeptMedicalPersonnelSignatureViewResultEntry implements IDeptMedicalPersonnelSignatureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptMedicalPersonnelSignatureView;

    constructor(data?: IDeptMedicalPersonnelSignatureViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptMedicalPersonnelSignatureView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelSignatureViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelSignatureViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptMedicalPersonnelSignatureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptMedicalPersonnelSignatureView;
}

/** 医护人员信息-展现医护人员信息 */
export class DeptMedicalPersonnelView implements IDeptMedicalPersonnelView {
    /** 标签(字典值)集合 */
    tagValues?: string[] | undefined;
    /** 标签名称集合 */
    tagNames?: string[] | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 归属用户登录名 *可以与工号同时使用* */
    loginName!: string;
    /** 归属用户电话 */
    tel?: string | undefined;
    /** 归属用户启用0,1 */
    enabled?: number;
    /** 归属用户删除状态0,1 */
    sysUserDeleted?: number;
    /** 归属用户标识 */
    sysUserId?: string | undefined;
    /** 全名称 */
    fullName?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 医护人员别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 民族名称 */
    nationalityName?: string | undefined;
    /** 籍贯 */
    birthplace?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件类型名称 */
    idTypeName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别 */
    genderName?: string | undefined;
    /** 职务 `DIC.PEOPLE.MEDICAL.TITLE` *主任,副主任,医生,护士长,护士* */
    title?: string | undefined;
    /** 行政职务 */
    titleName?: string | undefined;
    /** 职称 `DIC.MEDICAL.PROFESSIONALTITLE` *主任医师,副主任医师,主治医师,住院医师* */
    professionalTitle?: string | undefined;
    /** 技术职称 */
    professionalTitleName?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 文化程度 */
    educationalLevelName?: string | undefined;
    /** 参工时间 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入院时间 */
    hiredate?: dayjs.Dayjs | undefined;
    /** 资格证书编码 */
    credential?: string | undefined;
    /** 执业证书编码名称 */
    practice?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
    /** 毕业院校 */
    university?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 婚否名称 */
    maritalName?: string | undefined;
    /** 政治面貌 `DIC.PEOPLE.POLITICAL` *群众,团员,党员* */
    political?: string | undefined;
    /** 政治面貌名称 */
    politicalName?: string | undefined;
    /** 医护信息备注 */
    remark?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptMedicalPersonnelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["tagValues"])) {
                this.tagValues = [] as any;
                for (let item of _data["tagValues"])
                    this.tagValues!.push(item);
            }
            if (Array.isArray(_data["tagNames"])) {
                this.tagNames = [] as any;
                for (let item of _data["tagNames"])
                    this.tagNames!.push(item);
            }
            this.jobNumber = _data["jobNumber"];
            this.loginName = _data["loginName"];
            this.tel = _data["tel"];
            this.enabled = _data["enabled"];
            this.sysUserDeleted = _data["sysUserDeleted"];
            this.sysUserId = _data["sysUserId"];
            this.fullName = _data["fullName"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.nationality = _data["nationality"];
            this.nationalityName = _data["nationalityName"];
            this.birthplace = _data["birthplace"];
            this.idType = _data["idType"];
            this.idTypeName = _data["idTypeName"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.genderName = _data["genderName"];
            this.title = _data["title"];
            this.titleName = _data["titleName"];
            this.professionalTitle = _data["professionalTitle"];
            this.professionalTitleName = _data["professionalTitleName"];
            this.educationalLevel = _data["educationalLevel"];
            this.educationalLevelName = _data["educationalLevelName"];
            this.workdate = _data["workdate"] ? dayjs(_data["workdate"].toString()) : <any>undefined;
            this.hiredate = _data["hiredate"] ? dayjs(_data["hiredate"].toString()) : <any>undefined;
            this.credential = _data["credential"];
            this.practice = _data["practice"];
            this.signature = _data["signature"];
            this.university = _data["university"];
            this.marital = _data["marital"];
            this.maritalName = _data["maritalName"];
            this.political = _data["political"];
            this.politicalName = _data["politicalName"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.tagValues)) {
            data["tagValues"] = [];
            for (let item of this.tagValues)
                data["tagValues"].push(item);
        }
        if (Array.isArray(this.tagNames)) {
            data["tagNames"] = [];
            for (let item of this.tagNames)
                data["tagNames"].push(item);
        }
        data["jobNumber"] = this.jobNumber;
        data["loginName"] = this.loginName;
        data["tel"] = this.tel;
        data["enabled"] = this.enabled;
        data["sysUserDeleted"] = this.sysUserDeleted;
        data["sysUserId"] = this.sysUserId;
        data["fullName"] = this.fullName;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["nationality"] = this.nationality;
        data["nationalityName"] = this.nationalityName;
        data["birthplace"] = this.birthplace;
        data["idType"] = this.idType;
        data["idTypeName"] = this.idTypeName;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["genderName"] = this.genderName;
        data["title"] = this.title;
        data["titleName"] = this.titleName;
        data["professionalTitle"] = this.professionalTitle;
        data["professionalTitleName"] = this.professionalTitleName;
        data["educationalLevel"] = this.educationalLevel;
        data["educationalLevelName"] = this.educationalLevelName;
        data["workdate"] = this.workdate ? this.workdate.toISOString() : <any>undefined;
        data["hiredate"] = this.hiredate ? this.hiredate.toISOString() : <any>undefined;
        data["credential"] = this.credential;
        data["practice"] = this.practice;
        data["signature"] = this.signature;
        data["university"] = this.university;
        data["marital"] = this.marital;
        data["maritalName"] = this.maritalName;
        data["political"] = this.political;
        data["politicalName"] = this.politicalName;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 医护人员信息-展现医护人员信息 */
export interface IDeptMedicalPersonnelView {
    /** 标签(字典值)集合 */
    tagValues?: string[] | undefined;
    /** 标签名称集合 */
    tagNames?: string[] | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 归属用户登录名 *可以与工号同时使用* */
    loginName: string;
    /** 归属用户电话 */
    tel?: string | undefined;
    /** 归属用户启用0,1 */
    enabled?: number;
    /** 归属用户删除状态0,1 */
    sysUserDeleted?: number;
    /** 归属用户标识 */
    sysUserId?: string | undefined;
    /** 全名称 */
    fullName?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 医护人员别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 民族名称 */
    nationalityName?: string | undefined;
    /** 籍贯 */
    birthplace?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件类型名称 */
    idTypeName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别 */
    genderName?: string | undefined;
    /** 职务 `DIC.PEOPLE.MEDICAL.TITLE` *主任,副主任,医生,护士长,护士* */
    title?: string | undefined;
    /** 行政职务 */
    titleName?: string | undefined;
    /** 职称 `DIC.MEDICAL.PROFESSIONALTITLE` *主任医师,副主任医师,主治医师,住院医师* */
    professionalTitle?: string | undefined;
    /** 技术职称 */
    professionalTitleName?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 文化程度 */
    educationalLevelName?: string | undefined;
    /** 参工时间 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入院时间 */
    hiredate?: dayjs.Dayjs | undefined;
    /** 资格证书编码 */
    credential?: string | undefined;
    /** 执业证书编码名称 */
    practice?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
    /** 毕业院校 */
    university?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 婚否名称 */
    maritalName?: string | undefined;
    /** 政治面貌 `DIC.PEOPLE.POLITICAL` *群众,团员,党员* */
    political?: string | undefined;
    /** 政治面貌名称 */
    politicalName?: string | undefined;
    /** 医护信息备注 */
    remark?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 医护人员信息 (ViewModel) */
export class DeptMedicalPersonnelViewModel implements IDeptMedicalPersonnelViewModel {
    /** [绑定系统用户标识](用户信息Id) */
    sysUserId!: string;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 籍贯 */
    birthplace?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 职务 医生`DIC.MEDICAL.DOCTOR.TITLE` 护士`DIC.MEDICAL.NURSE.TITLE` *主任,副主任,医生,护士长,护士,实习生* */
    title?: string | undefined;
    /** 职称 医生`DIC.MEDICAL.DOCTOR.PROFESSIONALTITLE` 护士`DIC.MEDICAL.NURSE.PROFESSIONALTITLE` */
    professionalTitle?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 参加工作日期 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入职日期 */
    hiredate?: dayjs.Dayjs | undefined;
    /** 资格证书编码 */
    credential?: string | undefined;
    /** 执业证书编码 */
    practice?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
    /** 毕业院校 */
    university?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 政治面貌 `DIC.PEOPLE.POLITICAL` *群众,团员,党员* */
    political?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptMedicalPersonnelViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysUserId = _data["sysUserId"];
            this.nationality = _data["nationality"];
            this.birthplace = _data["birthplace"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.title = _data["title"];
            this.professionalTitle = _data["professionalTitle"];
            this.educationalLevel = _data["educationalLevel"];
            this.workdate = _data["workdate"] ? dayjs(_data["workdate"].toString()) : <any>undefined;
            this.hiredate = _data["hiredate"] ? dayjs(_data["hiredate"].toString()) : <any>undefined;
            this.credential = _data["credential"];
            this.practice = _data["practice"];
            this.signature = _data["signature"];
            this.university = _data["university"];
            this.marital = _data["marital"];
            this.political = _data["political"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysUserId"] = this.sysUserId;
        data["nationality"] = this.nationality;
        data["birthplace"] = this.birthplace;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["title"] = this.title;
        data["professionalTitle"] = this.professionalTitle;
        data["educationalLevel"] = this.educationalLevel;
        data["workdate"] = this.workdate ? this.workdate.toISOString() : <any>undefined;
        data["hiredate"] = this.hiredate ? this.hiredate.toISOString() : <any>undefined;
        data["credential"] = this.credential;
        data["practice"] = this.practice;
        data["signature"] = this.signature;
        data["university"] = this.university;
        data["marital"] = this.marital;
        data["political"] = this.political;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医护人员信息 (ViewModel) */
export interface IDeptMedicalPersonnelViewModel {
    /** [绑定系统用户标识](用户信息Id) */
    sysUserId: string;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 籍贯 */
    birthplace?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 职务 医生`DIC.MEDICAL.DOCTOR.TITLE` 护士`DIC.MEDICAL.NURSE.TITLE` *主任,副主任,医生,护士长,护士,实习生* */
    title?: string | undefined;
    /** 职称 医生`DIC.MEDICAL.DOCTOR.PROFESSIONALTITLE` 护士`DIC.MEDICAL.NURSE.PROFESSIONALTITLE` */
    professionalTitle?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 参加工作日期 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入职日期 */
    hiredate?: dayjs.Dayjs | undefined;
    /** 资格证书编码 */
    credential?: string | undefined;
    /** 执业证书编码 */
    practice?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
    /** 毕业院校 */
    university?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 政治面貌 `DIC.PEOPLE.POLITICAL` *群众,团员,党员* */
    political?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DeptMedicalPersonnelViewResult implements IDeptMedicalPersonnelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptMedicalPersonnelView[] | undefined;

    constructor(data?: IDeptMedicalPersonnelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptMedicalPersonnelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptMedicalPersonnelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptMedicalPersonnelView[] | undefined;
}

/** 医护换班 */
export class DeptScheduleChangeEditModel implements IDeptScheduleChangeEditModel {
    /** 医护人员类型 */
    type!: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId!: string;
    /** [换班医护人员ID](#用户信息) */
    toUserId!: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 换班医护姓名 */
    toUserName?: string | undefined;
    fromCureShiftId!: string;
    /** 排班班次名称 */
    fromCureShiftName?: string | undefined;
    toCureShiftId!: string;
    /** 换班班次名称 */
    toCureShiftName?: string | undefined;
    /** 排班日期 */
    fromTime!: dayjs.Dayjs;
    /** 换班日期 */
    toTime!: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleChangeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.fromUserId = _data["fromUserId"];
            this.toUserId = _data["toUserId"];
            this.fromUserName = _data["fromUserName"];
            this.toUserName = _data["toUserName"];
            this.fromCureShiftId = _data["fromCureShiftId"];
            this.fromCureShiftName = _data["fromCureShiftName"];
            this.toCureShiftId = _data["toCureShiftId"];
            this.toCureShiftName = _data["toCureShiftName"];
            this.fromTime = _data["fromTime"] ? dayjs(_data["fromTime"].toString()) : <any>undefined;
            this.toTime = _data["toTime"] ? dayjs(_data["toTime"].toString()) : <any>undefined;
            this.supplementary = _data["supplementary"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleChangeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleChangeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["fromUserId"] = this.fromUserId;
        data["toUserId"] = this.toUserId;
        data["fromUserName"] = this.fromUserName;
        data["toUserName"] = this.toUserName;
        data["fromCureShiftId"] = this.fromCureShiftId;
        data["fromCureShiftName"] = this.fromCureShiftName;
        data["toCureShiftId"] = this.toCureShiftId;
        data["toCureShiftName"] = this.toCureShiftName;
        data["fromTime"] = this.fromTime ? this.fromTime.toISOString() : <any>undefined;
        data["toTime"] = this.toTime ? this.toTime.toISOString() : <any>undefined;
        data["supplementary"] = this.supplementary;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医护换班 */
export interface IDeptScheduleChangeEditModel {
    /** 医护人员类型 */
    type: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId: string;
    /** [换班医护人员ID](#用户信息) */
    toUserId: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 换班医护姓名 */
    toUserName?: string | undefined;
    fromCureShiftId: string;
    /** 排班班次名称 */
    fromCureShiftName?: string | undefined;
    toCureShiftId: string;
    /** 换班班次名称 */
    toCureShiftName?: string | undefined;
    /** 排班日期 */
    fromTime: dayjs.Dayjs;
    /** 换班日期 */
    toTime: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 医护换班 */
export class DeptScheduleChangeView implements IDeptScheduleChangeView {
    /** 医护人员类型 */
    type!: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId!: string;
    /** [换班医护人员ID](#用户信息) */
    toUserId!: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 换班医护姓名 */
    toUserName?: string | undefined;
    fromCureShiftId!: string;
    /** 排班班次名称 */
    fromCureShiftName?: string | undefined;
    toCureShiftId!: string;
    /** 换班班次名称 */
    toCureShiftName?: string | undefined;
    /** 排班日期 */
    fromTime!: dayjs.Dayjs;
    /** 换班日期 */
    toTime!: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptScheduleChangeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.fromUserId = _data["fromUserId"];
            this.toUserId = _data["toUserId"];
            this.fromUserName = _data["fromUserName"];
            this.toUserName = _data["toUserName"];
            this.fromCureShiftId = _data["fromCureShiftId"];
            this.fromCureShiftName = _data["fromCureShiftName"];
            this.toCureShiftId = _data["toCureShiftId"];
            this.toCureShiftName = _data["toCureShiftName"];
            this.fromTime = _data["fromTime"] ? dayjs(_data["fromTime"].toString()) : <any>undefined;
            this.toTime = _data["toTime"] ? dayjs(_data["toTime"].toString()) : <any>undefined;
            this.supplementary = _data["supplementary"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleChangeView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleChangeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["fromUserId"] = this.fromUserId;
        data["toUserId"] = this.toUserId;
        data["fromUserName"] = this.fromUserName;
        data["toUserName"] = this.toUserName;
        data["fromCureShiftId"] = this.fromCureShiftId;
        data["fromCureShiftName"] = this.fromCureShiftName;
        data["toCureShiftId"] = this.toCureShiftId;
        data["toCureShiftName"] = this.toCureShiftName;
        data["fromTime"] = this.fromTime ? this.fromTime.toISOString() : <any>undefined;
        data["toTime"] = this.toTime ? this.toTime.toISOString() : <any>undefined;
        data["supplementary"] = this.supplementary;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 医护换班 */
export interface IDeptScheduleChangeView {
    /** 医护人员类型 */
    type: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId: string;
    /** [换班医护人员ID](#用户信息) */
    toUserId: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 换班医护姓名 */
    toUserName?: string | undefined;
    fromCureShiftId: string;
    /** 排班班次名称 */
    fromCureShiftName?: string | undefined;
    toCureShiftId: string;
    /** 换班班次名称 */
    toCureShiftName?: string | undefined;
    /** 排班日期 */
    fromTime: dayjs.Dayjs;
    /** 换班日期 */
    toTime: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptScheduleChangeViewResult implements IDeptScheduleChangeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleChangeView[] | undefined;

    constructor(data?: IDeptScheduleChangeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleChangeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleChangeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleChangeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleChangeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleChangeView[] | undefined;
}

/** Reponse */
export class DeptScheduleChangeViewResultEntry implements IDeptScheduleChangeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleChangeView;

    constructor(data?: IDeptScheduleChangeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleChangeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleChangeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleChangeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleChangeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleChangeView;
}

/** 医生排班 */
export class DeptScheduleDoctor implements IDeptScheduleDoctor {
    /** 标识 */
    id?: string | undefined;
    /** [医生标识](用户信息) */
    doctorId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    doctors?: SysUser;

    constructor(data?: IDeptScheduleDoctor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.doctorId = _data["doctorId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.doctors = _data["doctors"] ? SysUser.fromJS(_data["doctors"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleDoctor {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleDoctor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["doctorId"] = this.doctorId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["doctors"] = this.doctors ? this.doctors.toJSON() : <any>undefined;
        return data;
    }
}

/** 医生排班 */
export interface IDeptScheduleDoctor {
    /** 标识 */
    id?: string | undefined;
    /** [医生标识](用户信息) */
    doctorId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    doctors?: SysUser;
}

/** Reponse */
export class DeptScheduleDoctorResult implements IDeptScheduleDoctorResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleDoctor[] | undefined;

    constructor(data?: IDeptScheduleDoctorResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleDoctor.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleDoctorResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleDoctorResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleDoctorResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleDoctor[] | undefined;
}

/** Reponse */
export class DeptScheduleDoctorResultEntry implements IDeptScheduleDoctorResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleDoctor;

    constructor(data?: IDeptScheduleDoctorResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleDoctor.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleDoctorResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleDoctorResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleDoctorResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleDoctor;
}

/** 医生排班展现 */
export class DeptScheduleDoctorView implements IDeptScheduleDoctorView {
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 *○如果有重名需要填写别名* */
    doctorName?: string | undefined;
    /** 医生别名 */
    doctorName2?: string | undefined;
    /** 医生全名 */
    doctorNameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;

    constructor(data?: IDeptScheduleDoctorView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.doctorName2 = _data["doctorName2"];
            this.doctorNameFull = _data["doctorNameFull"];
            this.monday = _data["monday"] ? IndexScheduleViewItem.fromJS(_data["monday"]) : <any>undefined;
            this.tuesday = _data["tuesday"] ? IndexScheduleViewItem.fromJS(_data["tuesday"]) : <any>undefined;
            this.wednesday = _data["wednesday"] ? IndexScheduleViewItem.fromJS(_data["wednesday"]) : <any>undefined;
            this.thursday = _data["thursday"] ? IndexScheduleViewItem.fromJS(_data["thursday"]) : <any>undefined;
            this.friday = _data["friday"] ? IndexScheduleViewItem.fromJS(_data["friday"]) : <any>undefined;
            this.saturday = _data["saturday"] ? IndexScheduleViewItem.fromJS(_data["saturday"]) : <any>undefined;
            this.sunday = _data["sunday"] ? IndexScheduleViewItem.fromJS(_data["sunday"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleDoctorView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleDoctorView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["doctorName2"] = this.doctorName2;
        data["doctorNameFull"] = this.doctorNameFull;
        data["monday"] = this.monday ? this.monday.toJSON() : <any>undefined;
        data["tuesday"] = this.tuesday ? this.tuesday.toJSON() : <any>undefined;
        data["wednesday"] = this.wednesday ? this.wednesday.toJSON() : <any>undefined;
        data["thursday"] = this.thursday ? this.thursday.toJSON() : <any>undefined;
        data["friday"] = this.friday ? this.friday.toJSON() : <any>undefined;
        data["saturday"] = this.saturday ? this.saturday.toJSON() : <any>undefined;
        data["sunday"] = this.sunday ? this.sunday.toJSON() : <any>undefined;
        return data;
    }
}

/** 医生排班展现 */
export interface IDeptScheduleDoctorView {
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 *○如果有重名需要填写别名* */
    doctorName?: string | undefined;
    /** 医生别名 */
    doctorName2?: string | undefined;
    /** 医生全名 */
    doctorNameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;
}

/** 医生排班 (ViewModel) */
export class DeptScheduleDoctorViewModel implements IDeptScheduleDoctorViewModel {
    /** [医生标识](用户信息Id) */
    doctorId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 班次 */
    shiftId!: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00Id)* */
    shiftName!: string;
    /** 开始时间 *HH:mm* */
    begin1Time!: string;
    /** 结束时间 *HH:mm* */
    end1Date!: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleDoctorViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.doctorId = _data["doctorId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleDoctorViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleDoctorViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["doctorId"] = this.doctorId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医生排班 (ViewModel) */
export interface IDeptScheduleDoctorViewModel {
    /** [医生标识](用户信息Id) */
    doctorId: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 班次 */
    shiftId: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00Id)* */
    shiftName: string;
    /** 开始时间 *HH:mm* */
    begin1Time: string;
    /** 结束时间 *HH:mm* */
    end1Date: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DeptScheduleDoctorViewResult implements IDeptScheduleDoctorViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleDoctorView[] | undefined;

    constructor(data?: IDeptScheduleDoctorViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleDoctorView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleDoctorViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleDoctorViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleDoctorViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleDoctorView[] | undefined;
}

/** 护士排班 */
export class DeptScheduleNurse implements IDeptScheduleNurse {
    /** 标识 */
    id?: string | undefined;
    /** [护士标识](用户信息) */
    nurseId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    nurses?: SysUser;

    constructor(data?: IDeptScheduleNurse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nurseId = _data["nurseId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.nurses = _data["nurses"] ? SysUser.fromJS(_data["nurses"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleNurse {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleNurse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nurseId"] = this.nurseId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["nurses"] = this.nurses ? this.nurses.toJSON() : <any>undefined;
        return data;
    }
}

/** 护士排班 */
export interface IDeptScheduleNurse {
    /** 标识 */
    id?: string | undefined;
    /** [护士标识](用户信息) */
    nurseId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    nurses?: SysUser;
}

/** Reponse */
export class DeptScheduleNurseResult implements IDeptScheduleNurseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleNurse[] | undefined;

    constructor(data?: IDeptScheduleNurseResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleNurse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleNurseResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleNurseResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleNurseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleNurse[] | undefined;
}

/** Reponse */
export class DeptScheduleNurseResultEntry implements IDeptScheduleNurseResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleNurse;

    constructor(data?: IDeptScheduleNurseResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleNurse.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleNurseResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleNurseResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleNurseResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleNurse;
}

/** 护士排班展现 */
export class DeptScheduleNurseView implements IDeptScheduleNurseView {
    /** 护士标识 */
    nurseId?: string | undefined;
    /** 护士姓名 *○如果有重名需要填写别名* */
    nurseName?: string | undefined;
    /** 护士别名 */
    nurseName2?: string | undefined;
    /** 护士全名 */
    nurseNameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;

    constructor(data?: IDeptScheduleNurseView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.nurseName2 = _data["nurseName2"];
            this.nurseNameFull = _data["nurseNameFull"];
            this.monday = _data["monday"] ? IndexScheduleViewItem.fromJS(_data["monday"]) : <any>undefined;
            this.tuesday = _data["tuesday"] ? IndexScheduleViewItem.fromJS(_data["tuesday"]) : <any>undefined;
            this.wednesday = _data["wednesday"] ? IndexScheduleViewItem.fromJS(_data["wednesday"]) : <any>undefined;
            this.thursday = _data["thursday"] ? IndexScheduleViewItem.fromJS(_data["thursday"]) : <any>undefined;
            this.friday = _data["friday"] ? IndexScheduleViewItem.fromJS(_data["friday"]) : <any>undefined;
            this.saturday = _data["saturday"] ? IndexScheduleViewItem.fromJS(_data["saturday"]) : <any>undefined;
            this.sunday = _data["sunday"] ? IndexScheduleViewItem.fromJS(_data["sunday"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleNurseView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleNurseView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["nurseName2"] = this.nurseName2;
        data["nurseNameFull"] = this.nurseNameFull;
        data["monday"] = this.monday ? this.monday.toJSON() : <any>undefined;
        data["tuesday"] = this.tuesday ? this.tuesday.toJSON() : <any>undefined;
        data["wednesday"] = this.wednesday ? this.wednesday.toJSON() : <any>undefined;
        data["thursday"] = this.thursday ? this.thursday.toJSON() : <any>undefined;
        data["friday"] = this.friday ? this.friday.toJSON() : <any>undefined;
        data["saturday"] = this.saturday ? this.saturday.toJSON() : <any>undefined;
        data["sunday"] = this.sunday ? this.sunday.toJSON() : <any>undefined;
        return data;
    }
}

/** 护士排班展现 */
export interface IDeptScheduleNurseView {
    /** 护士标识 */
    nurseId?: string | undefined;
    /** 护士姓名 *○如果有重名需要填写别名* */
    nurseName?: string | undefined;
    /** 护士别名 */
    nurseName2?: string | undefined;
    /** 护士全名 */
    nurseNameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;
}

/** 护士排班 (ViewModel) */
export class DeptScheduleNurseViewModel implements IDeptScheduleNurseViewModel {
    /** [护士标识](用户信息Id) */
    nurseId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 班次 */
    shiftId!: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00Id)* */
    shiftName!: string;
    /** 开始时间 *HH:mm:ss* */
    begin1Time!: string;
    /** 结束时间 *HH:mm:ss* */
    end1Date!: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleNurseViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nurseId = _data["nurseId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleNurseViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleNurseViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nurseId"] = this.nurseId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 护士排班 (ViewModel) */
export interface IDeptScheduleNurseViewModel {
    /** [护士标识](用户信息Id) */
    nurseId: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 班次 */
    shiftId: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00Id)* */
    shiftName: string;
    /** 开始时间 *HH:mm:ss* */
    begin1Time: string;
    /** 结束时间 *HH:mm:ss* */
    end1Date: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DeptScheduleNurseViewResult implements IDeptScheduleNurseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleNurseView[] | undefined;

    constructor(data?: IDeptScheduleNurseViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleNurseView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleNurseViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleNurseViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleNurseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleNurseView[] | undefined;
}

/** 其他排班 */
export class DeptScheduleOther implements IDeptScheduleOther {
    /** 标识 */
    id?: string | undefined;
    /** [用户标识](用户信息) */
    userId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    users?: SysUser;

    constructor(data?: IDeptScheduleOther) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.users = _data["users"] ? SysUser.fromJS(_data["users"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleOther {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOther();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["users"] = this.users ? this.users.toJSON() : <any>undefined;
        return data;
    }
}

/** 其他排班 */
export interface IDeptScheduleOther {
    /** 标识 */
    id?: string | undefined;
    /** [用户标识](用户信息) */
    userId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    users?: SysUser;
}

/** 其他排班 */
export class DeptScheduleOtherEditModel implements IDeptScheduleOtherEditModel {
    /** [用户标识](#用户信息) */
    userId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 班次 */
    shiftId!: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName!: string;
    /** 开始时间 *HH:mm:ss* */
    begin1Time!: string;
    /** 结束时间 *HH:mm:ss* */
    end1Date!: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleOtherEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleOtherEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOtherEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 其他排班 */
export interface IDeptScheduleOtherEditModel {
    /** [用户标识](#用户信息) */
    userId: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 班次 */
    shiftId: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName: string;
    /** 开始时间 *HH:mm:ss* */
    begin1Time: string;
    /** 结束时间 *HH:mm:ss* */
    end1Date: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DeptScheduleOtherResult implements IDeptScheduleOtherResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleOther[] | undefined;

    constructor(data?: IDeptScheduleOtherResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleOther.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleOtherResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOtherResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleOtherResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleOther[] | undefined;
}

/** Reponse */
export class DeptScheduleOtherResultEntry implements IDeptScheduleOtherResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleOther;

    constructor(data?: IDeptScheduleOtherResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleOther.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleOtherResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOtherResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleOtherResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleOther;
}

/** 其他排班 */
export class DeptScheduleOtherView implements IDeptScheduleOtherView {
    /** [用户标识](#用户信息) */
    userId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 班次 */
    shiftId!: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName!: string;
    /** 开始时间 *HH:mm:ss* */
    begin1Time!: string;
    /** 结束时间 *HH:mm:ss* */
    end1Date!: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 用户标识 */
    otherId?: string | undefined;
    /** 用户姓名 *○如果有重名需要填写别名* */
    otherName?: string | undefined;
    /** 用户别名 */
    otherName2?: string | undefined;
    /** 用户全名 */
    otherNameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;

    constructor(data?: IDeptScheduleOtherView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.otherId = _data["otherId"];
            this.otherName = _data["otherName"];
            this.otherName2 = _data["otherName2"];
            this.otherNameFull = _data["otherNameFull"];
            this.monday = _data["monday"] ? IndexScheduleViewItem.fromJS(_data["monday"]) : <any>undefined;
            this.tuesday = _data["tuesday"] ? IndexScheduleViewItem.fromJS(_data["tuesday"]) : <any>undefined;
            this.wednesday = _data["wednesday"] ? IndexScheduleViewItem.fromJS(_data["wednesday"]) : <any>undefined;
            this.thursday = _data["thursday"] ? IndexScheduleViewItem.fromJS(_data["thursday"]) : <any>undefined;
            this.friday = _data["friday"] ? IndexScheduleViewItem.fromJS(_data["friday"]) : <any>undefined;
            this.saturday = _data["saturday"] ? IndexScheduleViewItem.fromJS(_data["saturday"]) : <any>undefined;
            this.sunday = _data["sunday"] ? IndexScheduleViewItem.fromJS(_data["sunday"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleOtherView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOtherView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["otherId"] = this.otherId;
        data["otherName"] = this.otherName;
        data["otherName2"] = this.otherName2;
        data["otherNameFull"] = this.otherNameFull;
        data["monday"] = this.monday ? this.monday.toJSON() : <any>undefined;
        data["tuesday"] = this.tuesday ? this.tuesday.toJSON() : <any>undefined;
        data["wednesday"] = this.wednesday ? this.wednesday.toJSON() : <any>undefined;
        data["thursday"] = this.thursday ? this.thursday.toJSON() : <any>undefined;
        data["friday"] = this.friday ? this.friday.toJSON() : <any>undefined;
        data["saturday"] = this.saturday ? this.saturday.toJSON() : <any>undefined;
        data["sunday"] = this.sunday ? this.sunday.toJSON() : <any>undefined;
        return data;
    }
}

/** 其他排班 */
export interface IDeptScheduleOtherView {
    /** [用户标识](#用户信息) */
    userId: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 班次 */
    shiftId: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName: string;
    /** 开始时间 *HH:mm:ss* */
    begin1Time: string;
    /** 结束时间 *HH:mm:ss* */
    end1Date: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 用户标识 */
    otherId?: string | undefined;
    /** 用户姓名 *○如果有重名需要填写别名* */
    otherName?: string | undefined;
    /** 用户别名 */
    otherName2?: string | undefined;
    /** 用户全名 */
    otherNameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;
}

/** Reponse */
export class DeptScheduleOtherViewResult implements IDeptScheduleOtherViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleOtherView[] | undefined;

    constructor(data?: IDeptScheduleOtherViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleOtherView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleOtherViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOtherViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleOtherViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleOtherView[] | undefined;
}

/** 医护加班 */
export class DeptScheduleOvertimeEditModel implements IDeptScheduleOvertimeEditModel {
    /** 医护人员类型 */
    type!: string;
    /** [加班申请医护人员ID](#用户信息) */
    overtimeUserId!: string;
    /** 加班申请医护姓名 */
    overtimeUserName?: string | undefined;
    /** 开始时间 */
    timeSignin!: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout!: dayjs.Dayjs;
    /** 加班时长 */
    overtimeTimes!: number;
    /** 加班原因 */
    overtimeReason?: string | undefined;
    overtimeCureShiftId!: string;
    /** 加班班次名称 */
    overtimeCureShiftName?: string | undefined;
    /** 审批状态0,1 */
    checked!: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered!: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleOvertimeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.overtimeUserId = _data["overtimeUserId"];
            this.overtimeUserName = _data["overtimeUserName"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.overtimeTimes = _data["overtimeTimes"];
            this.overtimeReason = _data["overtimeReason"];
            this.overtimeCureShiftId = _data["overtimeCureShiftId"];
            this.overtimeCureShiftName = _data["overtimeCureShiftName"];
            this.checked = _data["checked"];
            this.approvered = _data["approvered"];
            this.refuseReason = _data["refuseReason"];
            this.checkedUserId = _data["checkedUserId"];
            this.checkedUserName = _data["checkedUserName"];
            this.checkedTime = _data["checkedTime"] ? dayjs(_data["checkedTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleOvertimeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOvertimeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["overtimeUserId"] = this.overtimeUserId;
        data["overtimeUserName"] = this.overtimeUserName;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["overtimeTimes"] = this.overtimeTimes;
        data["overtimeReason"] = this.overtimeReason;
        data["overtimeCureShiftId"] = this.overtimeCureShiftId;
        data["overtimeCureShiftName"] = this.overtimeCureShiftName;
        data["checked"] = this.checked;
        data["approvered"] = this.approvered;
        data["refuseReason"] = this.refuseReason;
        data["checkedUserId"] = this.checkedUserId;
        data["checkedUserName"] = this.checkedUserName;
        data["checkedTime"] = this.checkedTime ? this.checkedTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医护加班 */
export interface IDeptScheduleOvertimeEditModel {
    /** 医护人员类型 */
    type: string;
    /** [加班申请医护人员ID](#用户信息) */
    overtimeUserId: string;
    /** 加班申请医护姓名 */
    overtimeUserName?: string | undefined;
    /** 开始时间 */
    timeSignin: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout: dayjs.Dayjs;
    /** 加班时长 */
    overtimeTimes: number;
    /** 加班原因 */
    overtimeReason?: string | undefined;
    overtimeCureShiftId: string;
    /** 加班班次名称 */
    overtimeCureShiftName?: string | undefined;
    /** 审批状态0,1 */
    checked: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 医护加班 */
export class DeptScheduleOvertimeView implements IDeptScheduleOvertimeView {
    /** 医护人员类型 */
    type!: string;
    /** [加班申请医护人员ID](#用户信息) */
    overtimeUserId!: string;
    /** 加班申请医护姓名 */
    overtimeUserName?: string | undefined;
    /** 开始时间 */
    timeSignin!: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout!: dayjs.Dayjs;
    /** 加班时长 */
    overtimeTimes!: number;
    /** 加班原因 */
    overtimeReason?: string | undefined;
    overtimeCureShiftId!: string;
    /** 加班班次名称 */
    overtimeCureShiftName?: string | undefined;
    /** 审批状态0,1 */
    checked!: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered!: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptScheduleOvertimeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.overtimeUserId = _data["overtimeUserId"];
            this.overtimeUserName = _data["overtimeUserName"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.overtimeTimes = _data["overtimeTimes"];
            this.overtimeReason = _data["overtimeReason"];
            this.overtimeCureShiftId = _data["overtimeCureShiftId"];
            this.overtimeCureShiftName = _data["overtimeCureShiftName"];
            this.checked = _data["checked"];
            this.approvered = _data["approvered"];
            this.refuseReason = _data["refuseReason"];
            this.checkedUserId = _data["checkedUserId"];
            this.checkedUserName = _data["checkedUserName"];
            this.checkedTime = _data["checkedTime"] ? dayjs(_data["checkedTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleOvertimeView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOvertimeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["overtimeUserId"] = this.overtimeUserId;
        data["overtimeUserName"] = this.overtimeUserName;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["overtimeTimes"] = this.overtimeTimes;
        data["overtimeReason"] = this.overtimeReason;
        data["overtimeCureShiftId"] = this.overtimeCureShiftId;
        data["overtimeCureShiftName"] = this.overtimeCureShiftName;
        data["checked"] = this.checked;
        data["approvered"] = this.approvered;
        data["refuseReason"] = this.refuseReason;
        data["checkedUserId"] = this.checkedUserId;
        data["checkedUserName"] = this.checkedUserName;
        data["checkedTime"] = this.checkedTime ? this.checkedTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 医护加班 */
export interface IDeptScheduleOvertimeView {
    /** 医护人员类型 */
    type: string;
    /** [加班申请医护人员ID](#用户信息) */
    overtimeUserId: string;
    /** 加班申请医护姓名 */
    overtimeUserName?: string | undefined;
    /** 开始时间 */
    timeSignin: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout: dayjs.Dayjs;
    /** 加班时长 */
    overtimeTimes: number;
    /** 加班原因 */
    overtimeReason?: string | undefined;
    overtimeCureShiftId: string;
    /** 加班班次名称 */
    overtimeCureShiftName?: string | undefined;
    /** 审批状态0,1 */
    checked: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptScheduleOvertimeViewResult implements IDeptScheduleOvertimeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleOvertimeView[] | undefined;

    constructor(data?: IDeptScheduleOvertimeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleOvertimeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleOvertimeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOvertimeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleOvertimeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleOvertimeView[] | undefined;
}

/** Reponse */
export class DeptScheduleOvertimeViewResultEntry implements IDeptScheduleOvertimeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleOvertimeView;

    constructor(data?: IDeptScheduleOvertimeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleOvertimeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleOvertimeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOvertimeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleOvertimeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleOvertimeView;
}

/** 医护顶班 */
export class DeptScheduleSubstituteEditModel implements IDeptScheduleSubstituteEditModel {
    /** 医护人员类型 */
    type!: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId!: string;
    /** [顶班医护人员ID](#用户信息) */
    toUserId!: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 顶班医护姓名 */
    toUserName?: string | undefined;
    cureShiftId!: string;
    /** 排班班次 */
    cureShiftName?: string | undefined;
    /** 顶班日期 */
    time!: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleSubstituteEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.fromUserId = _data["fromUserId"];
            this.toUserId = _data["toUserId"];
            this.fromUserName = _data["fromUserName"];
            this.toUserName = _data["toUserName"];
            this.cureShiftId = _data["cureShiftId"];
            this.cureShiftName = _data["cureShiftName"];
            this.time = _data["time"] ? dayjs(_data["time"].toString()) : <any>undefined;
            this.supplementary = _data["supplementary"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleSubstituteEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleSubstituteEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["fromUserId"] = this.fromUserId;
        data["toUserId"] = this.toUserId;
        data["fromUserName"] = this.fromUserName;
        data["toUserName"] = this.toUserName;
        data["cureShiftId"] = this.cureShiftId;
        data["cureShiftName"] = this.cureShiftName;
        data["time"] = this.time ? this.time.toISOString() : <any>undefined;
        data["supplementary"] = this.supplementary;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医护顶班 */
export interface IDeptScheduleSubstituteEditModel {
    /** 医护人员类型 */
    type: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId: string;
    /** [顶班医护人员ID](#用户信息) */
    toUserId: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 顶班医护姓名 */
    toUserName?: string | undefined;
    cureShiftId: string;
    /** 排班班次 */
    cureShiftName?: string | undefined;
    /** 顶班日期 */
    time: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 医护顶班 */
export class DeptScheduleSubstituteView implements IDeptScheduleSubstituteView {
    /** 医护人员类型 */
    type!: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId!: string;
    /** [顶班医护人员ID](#用户信息) */
    toUserId!: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 顶班医护姓名 */
    toUserName?: string | undefined;
    cureShiftId!: string;
    /** 排班班次 */
    cureShiftName?: string | undefined;
    /** 顶班日期 */
    time!: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptScheduleSubstituteView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.fromUserId = _data["fromUserId"];
            this.toUserId = _data["toUserId"];
            this.fromUserName = _data["fromUserName"];
            this.toUserName = _data["toUserName"];
            this.cureShiftId = _data["cureShiftId"];
            this.cureShiftName = _data["cureShiftName"];
            this.time = _data["time"] ? dayjs(_data["time"].toString()) : <any>undefined;
            this.supplementary = _data["supplementary"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleSubstituteView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleSubstituteView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["fromUserId"] = this.fromUserId;
        data["toUserId"] = this.toUserId;
        data["fromUserName"] = this.fromUserName;
        data["toUserName"] = this.toUserName;
        data["cureShiftId"] = this.cureShiftId;
        data["cureShiftName"] = this.cureShiftName;
        data["time"] = this.time ? this.time.toISOString() : <any>undefined;
        data["supplementary"] = this.supplementary;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 医护顶班 */
export interface IDeptScheduleSubstituteView {
    /** 医护人员类型 */
    type: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId: string;
    /** [顶班医护人员ID](#用户信息) */
    toUserId: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 顶班医护姓名 */
    toUserName?: string | undefined;
    cureShiftId: string;
    /** 排班班次 */
    cureShiftName?: string | undefined;
    /** 顶班日期 */
    time: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptScheduleSubstituteViewResult implements IDeptScheduleSubstituteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleSubstituteView[] | undefined;

    constructor(data?: IDeptScheduleSubstituteViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleSubstituteView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleSubstituteViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleSubstituteViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleSubstituteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleSubstituteView[] | undefined;
}

/** Reponse */
export class DeptScheduleSubstituteViewResultEntry implements IDeptScheduleSubstituteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleSubstituteView;

    constructor(data?: IDeptScheduleSubstituteViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleSubstituteView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleSubstituteViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleSubstituteViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleSubstituteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleSubstituteView;
}

/** 医护调休 */
export class DeptScheduleTakeOffEditModel implements IDeptScheduleTakeOffEditModel {
    /** 医护人员类型 */
    type!: string;
    /** [调休申请医护人员ID](#用户信息) */
    applyUserId!: string;
    /** 调休申请医护姓名 */
    applyUserName?: string | undefined;
    /** 开始时间 */
    timeSignin!: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout!: dayjs.Dayjs;
    /** 调休原因 */
    applyReason?: string | undefined;
    /** 调休时长 */
    applyTimes!: number;
    /** 审批状态0,1 */
    checked!: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered!: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleTakeOffEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.applyUserId = _data["applyUserId"];
            this.applyUserName = _data["applyUserName"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.applyReason = _data["applyReason"];
            this.applyTimes = _data["applyTimes"];
            this.checked = _data["checked"];
            this.approvered = _data["approvered"];
            this.refuseReason = _data["refuseReason"];
            this.checkedUserId = _data["checkedUserId"];
            this.checkedUserName = _data["checkedUserName"];
            this.checkedTime = _data["checkedTime"] ? dayjs(_data["checkedTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleTakeOffEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleTakeOffEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["applyUserId"] = this.applyUserId;
        data["applyUserName"] = this.applyUserName;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["applyReason"] = this.applyReason;
        data["applyTimes"] = this.applyTimes;
        data["checked"] = this.checked;
        data["approvered"] = this.approvered;
        data["refuseReason"] = this.refuseReason;
        data["checkedUserId"] = this.checkedUserId;
        data["checkedUserName"] = this.checkedUserName;
        data["checkedTime"] = this.checkedTime ? this.checkedTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医护调休 */
export interface IDeptScheduleTakeOffEditModel {
    /** 医护人员类型 */
    type: string;
    /** [调休申请医护人员ID](#用户信息) */
    applyUserId: string;
    /** 调休申请医护姓名 */
    applyUserName?: string | undefined;
    /** 开始时间 */
    timeSignin: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout: dayjs.Dayjs;
    /** 调休原因 */
    applyReason?: string | undefined;
    /** 调休时长 */
    applyTimes: number;
    /** 审批状态0,1 */
    checked: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 医护调休 */
export class DeptScheduleTakeOffView implements IDeptScheduleTakeOffView {
    /** 医护人员类型 */
    type!: string;
    /** [调休申请医护人员ID](#用户信息) */
    applyUserId!: string;
    /** 调休申请医护姓名 */
    applyUserName?: string | undefined;
    /** 开始时间 */
    timeSignin!: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout!: dayjs.Dayjs;
    /** 调休原因 */
    applyReason?: string | undefined;
    /** 调休时长 */
    applyTimes!: number;
    /** 审批状态0,1 */
    checked!: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered!: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptScheduleTakeOffView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.applyUserId = _data["applyUserId"];
            this.applyUserName = _data["applyUserName"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.applyReason = _data["applyReason"];
            this.applyTimes = _data["applyTimes"];
            this.checked = _data["checked"];
            this.approvered = _data["approvered"];
            this.refuseReason = _data["refuseReason"];
            this.checkedUserId = _data["checkedUserId"];
            this.checkedUserName = _data["checkedUserName"];
            this.checkedTime = _data["checkedTime"] ? dayjs(_data["checkedTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleTakeOffView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleTakeOffView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["applyUserId"] = this.applyUserId;
        data["applyUserName"] = this.applyUserName;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["applyReason"] = this.applyReason;
        data["applyTimes"] = this.applyTimes;
        data["checked"] = this.checked;
        data["approvered"] = this.approvered;
        data["refuseReason"] = this.refuseReason;
        data["checkedUserId"] = this.checkedUserId;
        data["checkedUserName"] = this.checkedUserName;
        data["checkedTime"] = this.checkedTime ? this.checkedTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 医护调休 */
export interface IDeptScheduleTakeOffView {
    /** 医护人员类型 */
    type: string;
    /** [调休申请医护人员ID](#用户信息) */
    applyUserId: string;
    /** 调休申请医护姓名 */
    applyUserName?: string | undefined;
    /** 开始时间 */
    timeSignin: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout: dayjs.Dayjs;
    /** 调休原因 */
    applyReason?: string | undefined;
    /** 调休时长 */
    applyTimes: number;
    /** 审批状态0,1 */
    checked: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptScheduleTakeOffViewResult implements IDeptScheduleTakeOffViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleTakeOffView[] | undefined;

    constructor(data?: IDeptScheduleTakeOffViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleTakeOffView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleTakeOffViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleTakeOffViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleTakeOffViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleTakeOffView[] | undefined;
}

/** Reponse */
export class DeptScheduleTakeOffViewResultEntry implements IDeptScheduleTakeOffViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleTakeOffView;

    constructor(data?: IDeptScheduleTakeOffViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleTakeOffView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleTakeOffViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleTakeOffViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleTakeOffViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleTakeOffView;
}

/** 医生班次 */
export class DeptShiftDoctor implements IDeptShiftDoctor {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end1Date?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin2Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end2Date?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptShiftDoctor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.begin2Time = _data["begin2Time"];
            this.end2Date = _data["end2Date"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShiftDoctor {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftDoctor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["begin2Time"] = this.begin2Time;
        data["end2Date"] = this.end2Date;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 医生班次 */
export interface IDeptShiftDoctor {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end1Date?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin2Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end2Date?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptShiftDoctorResult implements IDeptShiftDoctorResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShiftDoctor[] | undefined;

    constructor(data?: IDeptShiftDoctorResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptShiftDoctor.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptShiftDoctorResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftDoctorResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptShiftDoctorResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShiftDoctor[] | undefined;
}

/** Reponse */
export class DeptShiftDoctorResultEntry implements IDeptShiftDoctorResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShiftDoctor;

    constructor(data?: IDeptShiftDoctorResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptShiftDoctor.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShiftDoctorResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftDoctorResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptShiftDoctorResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShiftDoctor;
}

/** 医生班次 (ViewModel) */
export class DeptShiftDoctorViewModel implements IDeptShiftDoctorViewModel {
    /** 名称 *○不允许重复* */
    name!: string;
    /** 简称 */
    shortName!: string;
    /** 开始时间 *HH:mm* */
    begin1Time!: string;
    /** 结束时间 *HH:mm* */
    end1Date!: string;
    /** 开始时间 *HH:mm* */
    begin2Time!: string;
    /** 结束时间 *HH:mm* */
    end2Date!: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IDeptShiftDoctorViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.begin2Time = _data["begin2Time"];
            this.end2Date = _data["end2Date"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): DeptShiftDoctorViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftDoctorViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["begin2Time"] = this.begin2Time;
        data["end2Date"] = this.end2Date;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 医生班次 (ViewModel) */
export interface IDeptShiftDoctorViewModel {
    /** 名称 *○不允许重复* */
    name: string;
    /** 简称 */
    shortName: string;
    /** 开始时间 *HH:mm* */
    begin1Time: string;
    /** 结束时间 *HH:mm* */
    end1Date: string;
    /** 开始时间 *HH:mm* */
    begin2Time: string;
    /** 结束时间 *HH:mm* */
    end2Date: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 护士班次 */
export class DeptShiftNurse implements IDeptShiftNurse {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end1Date?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin2Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end2Date?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptShiftNurse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.begin2Time = _data["begin2Time"];
            this.end2Date = _data["end2Date"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShiftNurse {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftNurse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["begin2Time"] = this.begin2Time;
        data["end2Date"] = this.end2Date;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 护士班次 */
export interface IDeptShiftNurse {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end1Date?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin2Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end2Date?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptShiftNurseResult implements IDeptShiftNurseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShiftNurse[] | undefined;

    constructor(data?: IDeptShiftNurseResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptShiftNurse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptShiftNurseResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftNurseResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptShiftNurseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShiftNurse[] | undefined;
}

/** Reponse */
export class DeptShiftNurseResultEntry implements IDeptShiftNurseResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShiftNurse;

    constructor(data?: IDeptShiftNurseResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptShiftNurse.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShiftNurseResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftNurseResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptShiftNurseResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShiftNurse;
}

/** 护士班次 (ViewModel) */
export class DeptShiftNurseViewModel implements IDeptShiftNurseViewModel {
    /** 名称 *○不允许重复* */
    name!: string;
    /** 简称 */
    shortName!: string;
    /** 开始时间 *HH:mm* */
    begin1Time!: string;
    /** 结束时间 *HH:mm* */
    end1Date!: string;
    /** 开始时间 *HH:mm* */
    begin2Time!: string;
    /** 结束时间 *HH:mm* */
    end2Date!: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IDeptShiftNurseViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.begin2Time = _data["begin2Time"];
            this.end2Date = _data["end2Date"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): DeptShiftNurseViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftNurseViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["begin2Time"] = this.begin2Time;
        data["end2Date"] = this.end2Date;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 护士班次 (ViewModel) */
export interface IDeptShiftNurseViewModel {
    /** 名称 *○不允许重复* */
    name: string;
    /** 简称 */
    shortName: string;
    /** 开始时间 *HH:mm* */
    begin1Time: string;
    /** 结束时间 *HH:mm* */
    end1Date: string;
    /** 开始时间 *HH:mm* */
    begin2Time: string;
    /** 结束时间 *HH:mm* */
    end2Date: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 其他班次 */
export class DeptShiftOtherEditModel implements IDeptShiftOtherEditModel {
    /** 名称 *○不允许重复* */
    name!: string;
    /** 班次类型 */
    type!: string;
    /** 简称 */
    shortName!: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 开始时间 *HH:mm* */
    begin1Time!: string;
    /** 结束时间 *HH:mm* */
    end1Time!: string;
    /** 开始时间 *HH:mm* */
    begin2Time!: string;
    /** 结束时间 *HH:mm* */
    end2Time!: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IDeptShiftOtherEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.shortName = _data["shortName"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.begin1Time = _data["begin1Time"];
            this.end1Time = _data["end1Time"];
            this.begin2Time = _data["begin2Time"];
            this.end2Time = _data["end2Time"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): DeptShiftOtherEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftOtherEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["shortName"] = this.shortName;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["begin1Time"] = this.begin1Time;
        data["end1Time"] = this.end1Time;
        data["begin2Time"] = this.begin2Time;
        data["end2Time"] = this.end2Time;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 其他班次 */
export interface IDeptShiftOtherEditModel {
    /** 名称 *○不允许重复* */
    name: string;
    /** 班次类型 */
    type: string;
    /** 简称 */
    shortName: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 开始时间 *HH:mm* */
    begin1Time: string;
    /** 结束时间 *HH:mm* */
    end1Time: string;
    /** 开始时间 *HH:mm* */
    begin2Time: string;
    /** 结束时间 *HH:mm* */
    end2Time: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 其他班次 */
export class DeptShiftOtherView implements IDeptShiftOtherView {
    /** 名称 *○不允许重复* */
    name!: string;
    /** 班次类型 */
    type!: string;
    /** 简称 */
    shortName!: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 开始时间 *HH:mm* */
    begin1Time!: string;
    /** 结束时间 *HH:mm* */
    end1Time!: string;
    /** 开始时间 *HH:mm* */
    begin2Time!: string;
    /** 结束时间 *HH:mm* */
    end2Time!: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptShiftOtherView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.shortName = _data["shortName"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.begin1Time = _data["begin1Time"];
            this.end1Time = _data["end1Time"];
            this.begin2Time = _data["begin2Time"];
            this.end2Time = _data["end2Time"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShiftOtherView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftOtherView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["shortName"] = this.shortName;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["begin1Time"] = this.begin1Time;
        data["end1Time"] = this.end1Time;
        data["begin2Time"] = this.begin2Time;
        data["end2Time"] = this.end2Time;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 其他班次 */
export interface IDeptShiftOtherView {
    /** 名称 *○不允许重复* */
    name: string;
    /** 班次类型 */
    type: string;
    /** 简称 */
    shortName: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 开始时间 *HH:mm* */
    begin1Time: string;
    /** 结束时间 *HH:mm* */
    end1Time: string;
    /** 开始时间 *HH:mm* */
    begin2Time: string;
    /** 结束时间 *HH:mm* */
    end2Time: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptShiftOtherViewResult implements IDeptShiftOtherViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShiftOtherView[] | undefined;

    constructor(data?: IDeptShiftOtherViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptShiftOtherView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptShiftOtherViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftOtherViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptShiftOtherViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShiftOtherView[] | undefined;
}

/** Reponse */
export class DeptShiftOtherViewResultEntry implements IDeptShiftOtherViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShiftOtherView;

    constructor(data?: IDeptShiftOtherViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptShiftOtherView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShiftOtherViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftOtherViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptShiftOtherViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShiftOtherView;
}

/** 交班记录 */
export class DeptShr implements IDeptShr {
    /** 标识 */
    id?: string | undefined;
    /** [交班用户标识](用户信息) */
    handoverUserId?: string | undefined;
    /** 类型 `DIC.DEPT.SHTYPE` */
    type?: string | undefined;
    /** [透析区间](透析区间) */
    deptDialysisAreaId?: string | undefined;
    /** [透析班次](透析班次) */
    cureShiftId?: string | undefined;
    /** 交班时间 */
    time?: dayjs.Dayjs;
    /** [提及到的患者标识](患者信息) *不填则是整个透析区间* */
    patientId?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士* *数据库存* `sysuserid,sysuserid` */
    mentionUser?: string | undefined;
    /** 级别 *一般,重要* */
    level?: string | undefined;
    /** 交班内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    handoverUsers?: SysUser;
    deptDialysisAreas?: DeptDialysisArea;
    cureShifts?: CureShift;
    patients?: Patient;

    constructor(data?: IDeptShr) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.handoverUserId = _data["handoverUserId"];
            this.type = _data["type"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.cureShiftId = _data["cureShiftId"];
            this.time = _data["time"] ? dayjs(_data["time"].toString()) : <any>undefined;
            this.patientId = _data["patientId"];
            this.mentionUser = _data["mentionUser"];
            this.level = _data["level"];
            this.content = _data["content"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.handoverUsers = _data["handoverUsers"] ? SysUser.fromJS(_data["handoverUsers"]) : <any>undefined;
            this.deptDialysisAreas = _data["deptDialysisAreas"] ? DeptDialysisArea.fromJS(_data["deptDialysisAreas"]) : <any>undefined;
            this.cureShifts = _data["cureShifts"] ? CureShift.fromJS(_data["cureShifts"]) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShr {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShr();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["handoverUserId"] = this.handoverUserId;
        data["type"] = this.type;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["cureShiftId"] = this.cureShiftId;
        data["time"] = this.time ? this.time.toISOString() : <any>undefined;
        data["patientId"] = this.patientId;
        data["mentionUser"] = this.mentionUser;
        data["level"] = this.level;
        data["content"] = this.content;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["handoverUsers"] = this.handoverUsers ? this.handoverUsers.toJSON() : <any>undefined;
        data["deptDialysisAreas"] = this.deptDialysisAreas ? this.deptDialysisAreas.toJSON() : <any>undefined;
        data["cureShifts"] = this.cureShifts ? this.cureShifts.toJSON() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 交班记录 */
export interface IDeptShr {
    /** 标识 */
    id?: string | undefined;
    /** [交班用户标识](用户信息) */
    handoverUserId?: string | undefined;
    /** 类型 `DIC.DEPT.SHTYPE` */
    type?: string | undefined;
    /** [透析区间](透析区间) */
    deptDialysisAreaId?: string | undefined;
    /** [透析班次](透析班次) */
    cureShiftId?: string | undefined;
    /** 交班时间 */
    time?: dayjs.Dayjs;
    /** [提及到的患者标识](患者信息) *不填则是整个透析区间* */
    patientId?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士* *数据库存* `sysuserid,sysuserid` */
    mentionUser?: string | undefined;
    /** 级别 *一般,重要* */
    level?: string | undefined;
    /** 交班内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    handoverUsers?: SysUser;
    deptDialysisAreas?: DeptDialysisArea;
    cureShifts?: CureShift;
    patients?: Patient;
}

/** Reponse */
export class DeptShrResult implements IDeptShrResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShr[] | undefined;

    constructor(data?: IDeptShrResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptShr.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptShrResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShrResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptShrResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShr[] | undefined;
}

/** Reponse */
export class DeptShrResultEntry implements IDeptShrResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShr;

    constructor(data?: IDeptShrResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptShr.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShrResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShrResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptShrResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShr;
}

/** 交班记录 (ViewModel) */
export class DeptShrViewModel implements IDeptShrViewModel {
    /** [交班用户标识](用户信息Id) */
    handoverUserId!: string;
    /** 类型 `DIC.DEPT.SHTYPE` */
    type?: string | undefined;
    /** [透析区间](透析区间Id) */
    deptDialysisAreaId!: string;
    /** [透析班次](透析班次Id) */
    cureShiftId!: string;
    /** 交班时间 */
    time!: dayjs.Dayjs;
    /** [提及到的患者标识](患者信息Id) *不填则是整个透析区间* */
    patientId?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士* *数据库存* `sysuserid,sysuserid` */
    mentionUser?: string | undefined;
    /** 级别 *一般,重要* */
    level!: string;
    /** 交班内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptShrViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.handoverUserId = _data["handoverUserId"];
            this.type = _data["type"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.cureShiftId = _data["cureShiftId"];
            this.time = _data["time"] ? dayjs(_data["time"].toString()) : <any>undefined;
            this.patientId = _data["patientId"];
            this.mentionUser = _data["mentionUser"];
            this.level = _data["level"];
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptShrViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShrViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["handoverUserId"] = this.handoverUserId;
        data["type"] = this.type;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["cureShiftId"] = this.cureShiftId;
        data["time"] = this.time ? this.time.toISOString() : <any>undefined;
        data["patientId"] = this.patientId;
        data["mentionUser"] = this.mentionUser;
        data["level"] = this.level;
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

/** 交班记录 (ViewModel) */
export interface IDeptShrViewModel {
    /** [交班用户标识](用户信息Id) */
    handoverUserId: string;
    /** 类型 `DIC.DEPT.SHTYPE` */
    type?: string | undefined;
    /** [透析区间](透析区间Id) */
    deptDialysisAreaId: string;
    /** [透析班次](透析班次Id) */
    cureShiftId: string;
    /** 交班时间 */
    time: dayjs.Dayjs;
    /** [提及到的患者标识](患者信息Id) *不填则是整个透析区间* */
    patientId?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士* *数据库存* `sysuserid,sysuserid` */
    mentionUser?: string | undefined;
    /** 级别 *一般,重要* */
    level: string;
    /** 交班内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 科室设备 */
export class DevInfo implements IDevInfo {
    /** 标识 */
    id?: string | undefined;
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** [操作者](用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive?: number;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;
    sysHospitalAreas?: SysHospitalArea;
    sysUsers?: SysUser;

    constructor(data?: IDevInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.sn = _data["sn"];
            this.ip = _data["ip"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.dealer = _data["dealer"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.sysUserId = _data["sysUserId"];
            this.dateUsed = _data["dateUsed"] ? dayjs(_data["dateUsed"].toString()) : <any>undefined;
            this.dateWarranty = _data["dateWarranty"] ? dayjs(_data["dateWarranty"].toString()) : <any>undefined;
            this.positive = _data["positive"];
            this.sphygmomanometerCuff = _data["sphygmomanometerCuff"];
            this.diseaseType = _data["diseaseType"];
            this.location = _data["location"];
            this.remark = _data["remark"];
            this.status = _data["status"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.isNew = _data["isNew"];
            this.sequence = _data["sequence"];
            this.sysHospitalAreas = _data["sysHospitalAreas"] ? SysHospitalArea.fromJS(_data["sysHospitalAreas"]) : <any>undefined;
            this.sysUsers = _data["sysUsers"] ? SysUser.fromJS(_data["sysUsers"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["sn"] = this.sn;
        data["ip"] = this.ip;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toISOString() : <any>undefined;
        data["dealer"] = this.dealer;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["sysUserId"] = this.sysUserId;
        data["dateUsed"] = this.dateUsed ? this.dateUsed.toISOString() : <any>undefined;
        data["dateWarranty"] = this.dateWarranty ? this.dateWarranty.toISOString() : <any>undefined;
        data["positive"] = this.positive;
        data["sphygmomanometerCuff"] = this.sphygmomanometerCuff;
        data["diseaseType"] = this.diseaseType;
        data["location"] = this.location;
        data["remark"] = this.remark;
        data["status"] = this.status;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["isNew"] = this.isNew;
        data["sequence"] = this.sequence;
        data["sysHospitalAreas"] = this.sysHospitalAreas ? this.sysHospitalAreas.toJSON() : <any>undefined;
        data["sysUsers"] = this.sysUsers ? this.sysUsers.toJSON() : <any>undefined;
        return data;
    }
}

/** 科室设备 */
export interface IDevInfo {
    /** 标识 */
    id?: string | undefined;
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** [操作者](用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive?: number;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;
    sysHospitalAreas?: SysHospitalArea;
    sysUsers?: SysUser;
}

/** 级联查询展现 */
export class DialysisTreeView implements IDialysisTreeView {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 是否阳性分区0,1 */
    positive?: number;

    constructor(data?: IDialysisTreeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.sequence = _data["sequence"];
            this.positive = _data["positive"];
        }
    }

    static fromJS(data: any): DialysisTreeView {
        data = typeof data === 'object' ? data : {};
        let result = new DialysisTreeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["sequence"] = this.sequence;
        data["positive"] = this.positive;
        return data;
    }
}

/** 级联查询展现 */
export interface IDialysisTreeView {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 是否阳性分区0,1 */
    positive?: number;
}

/** Reponse */
export class DialysisTreeViewResult implements IDialysisTreeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DialysisTreeView[] | undefined;

    constructor(data?: IDialysisTreeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DialysisTreeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DialysisTreeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DialysisTreeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDialysisTreeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DialysisTreeView[] | undefined;
}

/** 文件列表 */
export class HfsFiles implements IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHfsFiles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.status = _data["status"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HfsFiles {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["status"] = this.status;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 文件列表 */
export interface IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 医生排班详细信息 */
export class IndexScheduleViewItem implements IIndexScheduleViewItem {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 周日 */
    shifts?: IndexScheduleViewItems[] | undefined;

    constructor(data?: IIndexScheduleViewItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            if (Array.isArray(_data["shifts"])) {
                this.shifts = [] as any;
                for (let item of _data["shifts"])
                    this.shifts!.push(IndexScheduleViewItems.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IndexScheduleViewItem {
        data = typeof data === 'object' ? data : {};
        let result = new IndexScheduleViewItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        if (Array.isArray(this.shifts)) {
            data["shifts"] = [];
            for (let item of this.shifts)
                data["shifts"].push(item.toJSON());
        }
        return data;
    }
}

/** 医生排班详细信息 */
export interface IIndexScheduleViewItem {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 周日 */
    shifts?: IndexScheduleViewItems[] | undefined;
}

/** 医生排班详细信息 */
export class IndexScheduleViewItems implements IIndexScheduleViewItems {
    /** 标识 */
    id?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次简称 */
    shiftShortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 加班时长 - 如果有加班的 */
    overTimes?: number | undefined;
    /** 调休时长 */
    takeOffTimes?: number | undefined;
    /** 医护排班状态颜色 */
    contentColor?: string | undefined;
    /** 医护排班状态展示值 */
    contentLabel?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IIndexScheduleViewItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.shiftShortName = _data["shiftShortName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.overTimes = _data["overTimes"];
            this.takeOffTimes = _data["takeOffTimes"];
            this.contentColor = _data["contentColor"];
            this.contentLabel = _data["contentLabel"];
            this.color = _data["color"];
            this.colorName = _data["colorName"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): IndexScheduleViewItems {
        data = typeof data === 'object' ? data : {};
        let result = new IndexScheduleViewItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["shiftShortName"] = this.shiftShortName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["overTimes"] = this.overTimes;
        data["takeOffTimes"] = this.takeOffTimes;
        data["contentColor"] = this.contentColor;
        data["contentLabel"] = this.contentLabel;
        data["color"] = this.color;
        data["colorName"] = this.colorName;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 医生排班详细信息 */
export interface IIndexScheduleViewItems {
    /** 标识 */
    id?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次简称 */
    shiftShortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 加班时长 - 如果有加班的 */
    overTimes?: number | undefined;
    /** 调休时长 */
    takeOffTimes?: number | undefined;
    /** 医护排班状态颜色 */
    contentColor?: string | undefined;
    /** 医护排班状态展示值 */
    contentLabel?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 患者信息 */
export class Patient implements IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;

    constructor(data?: IPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.surnameCode = _data["surnameCode"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.photo = _data["photo"];
            this.face = _data["face"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.department = _data["department"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.archiveNumber = _data["archiveNumber"];
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.rh = _data["rh"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.educationalLevel = _data["educationalLevel"];
            this.profession = _data["profession"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisStateTransition = _data["dialysisStateTransition"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.prognosisState = _data["prognosisState"];
            this.positive = _data["positive"];
            this.complication = _data["complication"];
            this.doctor = _data["doctor"];
            this.nurse = _data["nurse"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisPathological = _data["diagnosisPathological"];
            this.diagnosisComplication = _data["diagnosisComplication"];
            this.diagnosisInfectiousDiseases = _data["diagnosisInfectiousDiseases"];
            this.diagnosisTumor = _data["diagnosisTumor"];
            this.diagnosisAllergy = _data["diagnosisAllergy"];
            this.remark = _data["remark"];
            this.initialSource = _data["initialSource"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.finger = _data["finger"];
            this.dossierNumber = _data["dossierNumber"];
            this.medicareCondition = _data["medicareCondition"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
        }
    }

    static fromJS(data: any): Patient {
        data = typeof data === 'object' ? data : {};
        let result = new Patient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["surnameCode"] = this.surnameCode;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["photo"] = this.photo;
        data["face"] = this.face;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["department"] = this.department;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["archiveNumber"] = this.archiveNumber;
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["rh"] = this.rh;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["educationalLevel"] = this.educationalLevel;
        data["profession"] = this.profession;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toISOString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisStateTransition"] = this.dialysisStateTransition;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["prognosisState"] = this.prognosisState;
        data["positive"] = this.positive;
        data["complication"] = this.complication;
        data["doctor"] = this.doctor;
        data["nurse"] = this.nurse;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisPathological"] = this.diagnosisPathological;
        data["diagnosisComplication"] = this.diagnosisComplication;
        data["diagnosisInfectiousDiseases"] = this.diagnosisInfectiousDiseases;
        data["diagnosisTumor"] = this.diagnosisTumor;
        data["diagnosisAllergy"] = this.diagnosisAllergy;
        data["remark"] = this.remark;
        data["initialSource"] = this.initialSource;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["finger"] = this.finger;
        data["dossierNumber"] = this.dossierNumber;
        data["medicareCondition"] = this.medicareCondition;
        data["nextDate"] = this.nextDate ? this.nextDate.toISOString() : <any>undefined;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        return data;
    }
}

/** 患者信息 */
export interface IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

export class ScheduleCopyEditModel implements IScheduleCopyEditModel {
    from!: ScheduleCopyItem;
    to!: ScheduleCopyItem;

    constructor(data?: IScheduleCopyEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.from = new ScheduleCopyItem();
            this.to = new ScheduleCopyItem();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from = _data["from"] ? ScheduleCopyItem.fromJS(_data["from"]) : new ScheduleCopyItem();
            this.to = _data["to"] ? ScheduleCopyItem.fromJS(_data["to"]) : new ScheduleCopyItem();
        }
    }

    static fromJS(data: any): ScheduleCopyEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleCopyEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from ? this.from.toJSON() : <any>undefined;
        data["to"] = this.to ? this.to.toJSON() : <any>undefined;
        return data;
    }
}

export interface IScheduleCopyEditModel {
    from: ScheduleCopyItem;
    to: ScheduleCopyItem;
}

export class ScheduleCopyItem implements IScheduleCopyItem {
    /** 用户ID */
    userId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;

    constructor(data?: IScheduleCopyItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ScheduleCopyItem {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleCopyItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data;
    }
}

export interface IScheduleCopyItem {
    /** 用户ID */
    userId: string;
    /** 日期 */
    date: dayjs.Dayjs;
}

export class ScheduleSyncEditModel implements IScheduleSyncEditModel {
    /** From (eg. 2018/11/26~2018/12/02) */
    from!: string;
    /** To (eg. 2018/11/26~2018/12/02) */
    to!: string;

    constructor(data?: IScheduleSyncEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from = _data["from"];
            this.to = _data["to"];
        }
    }

    static fromJS(data: any): ScheduleSyncEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleSyncEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from;
        data["to"] = this.to;
        return data;
    }
}

export interface IScheduleSyncEditModel {
    /** From (eg. 2018/11/26~2018/12/02) */
    from: string;
    /** To (eg. 2018/11/26~2018/12/02) */
    to: string;
}

/** 透析室 */
export class SysHospitalArea implements ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospitalArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalArea {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析室 */
export interface ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 用户信息 */
export class SysUser implements ISysUser {
    /** 标识 */
    id?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 密码 */
    pwd?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobNumber = _data["jobNumber"];
            this.loginName = _data["loginName"];
            this.pwd = _data["pwd"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.tel = _data["tel"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUser {
        data = typeof data === 'object' ? data : {};
        let result = new SysUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobNumber"] = this.jobNumber;
        data["loginName"] = this.loginName;
        data["pwd"] = this.pwd;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["tel"] = this.tel;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 用户信息 */
export interface ISysUser {
    /** 标识 */
    id?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 密码 */
    pwd?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}