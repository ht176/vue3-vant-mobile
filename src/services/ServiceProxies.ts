/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class AntiTmplTypeDrugServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 抗凝剂类型药品 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    antiTmplTypeDrugGET(id: string , cancelToken?: CancelToken | undefined): Promise<AntiTmplTypeDrugViewResultEntry> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAntiTmplTypeDrugGET(_response));
        });
    }

    protected processAntiTmplTypeDrugGET(response: AxiosResponse): Promise<AntiTmplTypeDrugViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AntiTmplTypeDrugViewResultEntry.fromJS(resultData200);
            return Promise.resolve<AntiTmplTypeDrugViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AntiTmplTypeDrugViewResultEntry>(null as any);
    }

    /**
     * 抗凝剂类型药品 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    antiTmplTypeDrugPOST(id: string, body: AntiTmplTypeDrugEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAntiTmplTypeDrugPOST(_response));
        });
    }

    protected processAntiTmplTypeDrugPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 抗凝剂类型药品 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<AntiTmplTypeDrugViewResult> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter(_response));
        });
    }

    protected processFilter(response: AxiosResponse): Promise<AntiTmplTypeDrugViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AntiTmplTypeDrugViewResult.fromJS(resultData200);
            return Promise.resolve<AntiTmplTypeDrugViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AntiTmplTypeDrugViewResult>(null as any);
    }

    /**
     * 抗凝剂类型药品 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    antiTmplTypeDrugPOST2(body: AntiTmplTypeDrugEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAntiTmplTypeDrugPOST2(_response));
        });
    }

    protected processAntiTmplTypeDrugPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 抗凝剂类型药品 -- 批量新增数据
     * @param body (optional)
     * @return Success
     */
    bulk(body: AntiTmplTypeDrugEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug/Bulk";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBulk(_response));
        });
    }

    protected processBulk(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 抗凝剂类型药品 -- 设置常用项
     * @param id 项目标识
     * @return Success
     */
    frequently(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug/Frequently/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFrequently(_response));
        });
    }

    protected processFrequently(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 抗凝剂类型药品 -- 根据Id删除数据
     * @return Success
     */
    delete(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevBacterialfilterchangeLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 细菌过滤器更换记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devBacterialfilterchangeLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevBacterialfilterchangeLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevBacterialfilterchangeLogGET(_response));
        });
    }

    protected processDevBacterialfilterchangeLogGET(response: AxiosResponse): Promise<DevBacterialfilterchangeLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevBacterialfilterchangeLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevBacterialfilterchangeLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevBacterialfilterchangeLogViewResultEntry>(null as any);
    }

    /**
     * 细菌过滤器更换记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devBacterialfilterchangeLogPOST(id: string, body: DevBacterialfilterchangeLogEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevBacterialfilterchangeLogPOST(_response));
        });
    }

    protected processDevBacterialfilterchangeLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @param key (optional)
     * @param accurate (optional)
     * @param filter (optional)
     * @return Success
     */
    filter2(key: string | undefined, accurate: boolean | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevBacterialfilterchangeLogViewResult> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter2(_response));
        });
    }

    protected processFilter2(response: AxiosResponse): Promise<DevBacterialfilterchangeLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevBacterialfilterchangeLogViewResult.fromJS(resultData200);
            return Promise.resolve<DevBacterialfilterchangeLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevBacterialfilterchangeLogViewResult>(null as any);
    }

    /**
     * 细菌过滤器更换记录 -- 根据条件查询数据导出
     * @param key (optional)
     * @param accurate (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    export(key: string | undefined, accurate: boolean | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport(_response));
        });
    }

    protected processExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 细菌过滤器更换记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devBacterialfilterchangeLogPOST2(body: DevBacterialfilterchangeLogEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevBacterialfilterchangeLogPOST2(_response));
        });
    }

    protected processDevBacterialfilterchangeLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 细菌过滤器更换记录 -- 根据Id删除数据
     * @return Success
     */
    delete2(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete2(_response));
        });
    }

    protected processDelete2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 从 Excel 读取使用记录
     * @param fileId Excel 文件 Id
     * @return Success
     */
    readFromExcel(fileId: string , cancelToken?: CancelToken | undefined): Promise<DevBacterialfilterchangeLogExcelViewResult> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/ReadFromExcel/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processReadFromExcel(_response));
        });
    }

    protected processReadFromExcel(response: AxiosResponse): Promise<DevBacterialfilterchangeLogExcelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevBacterialfilterchangeLogExcelViewResult.fromJS(resultData200);
            return Promise.resolve<DevBacterialfilterchangeLogExcelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevBacterialfilterchangeLogExcelViewResult>(null as any);
    }

    /**
     * ConvertFromExcel 从 Excel 导入/更新 设备信息
     * @param body (optional) 使用记录集合
     * @return Success
     */
    convertFromExcel(body: DevBacterialfilterchangeLogExcelView[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/ConvertFromExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processConvertFromExcel(_response));
        });
    }

    protected processConvertFromExcel(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevDisinfectLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 消毒记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devDisinfectLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevDisinfectLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevDisinfectLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevDisinfectLogGET(_response));
        });
    }

    protected processDevDisinfectLogGET(response: AxiosResponse): Promise<DevDisinfectLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevDisinfectLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevDisinfectLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevDisinfectLogViewResultEntry>(null as any);
    }

    /**
     * 消毒记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devDisinfectLogPOST(id: string, body: DevDisinfectLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevDisinfectLogPOST(_response));
        });
    }

    protected processDevDisinfectLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消毒记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    filter3(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DevDisinfectLogViewResult> {
        let url_ = this.baseUrl + "/api/DevDisinfectLog/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter3(_response));
        });
    }

    protected processFilter3(response: AxiosResponse): Promise<DevDisinfectLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevDisinfectLogViewResult.fromJS(resultData200);
            return Promise.resolve<DevDisinfectLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevDisinfectLogViewResult>(null as any);
    }

    /**
     * 消毒记录 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    export2(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectLog/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport2(_response));
        });
    }

    protected processExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消毒记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devDisinfectLogPOST2(body: DevDisinfectLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevDisinfectLogPOST2(_response));
        });
    }

    protected processDevDisinfectLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消毒记录 -- 根据Id删除数据
     * @return Success
     */
    delete3(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete3(_response));
        });
    }

    protected processDelete3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevDisinfectSettingServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 设备消毒配置 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devDisinfectSettingGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevDisinfectSettingResultEntry> {
        let url_ = this.baseUrl + "/api/DevDisinfectSetting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevDisinfectSettingGET(_response));
        });
    }

    protected processDevDisinfectSettingGET(response: AxiosResponse): Promise<DevDisinfectSettingResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevDisinfectSettingResultEntry.fromJS(resultData200);
            return Promise.resolve<DevDisinfectSettingResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevDisinfectSettingResultEntry>(null as any);
    }

    /**
     * 设备消毒配置 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devDisinfectSettingPOST(id: string, body: DevDisinfectSettingEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectSetting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevDisinfectSettingPOST(_response));
        });
    }

    protected processDevDisinfectSettingPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备消毒配置 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter4(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevDisinfectSettingViewResult> {
        let url_ = this.baseUrl + "/api/DevDisinfectSetting/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter4(_response));
        });
    }

    protected processFilter4(response: AxiosResponse): Promise<DevDisinfectSettingViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevDisinfectSettingViewResult.fromJS(resultData200);
            return Promise.resolve<DevDisinfectSettingViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevDisinfectSettingViewResult>(null as any);
    }

    /**
     * 设备消毒配置 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devDisinfectSettingPOST2(body: DevDisinfectSettingEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevDisinfectSettingPOST2(_response));
        });
    }

    protected processDevDisinfectSettingPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备消毒配置 -- 根据Id删除数据
     * @return Success
     */
    delete4(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectSetting/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete4(_response));
        });
    }

    protected processDelete4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevInfoServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 科室设备 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devInfoGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevInfoViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevInfoGET(_response));
        });
    }

    protected processDevInfoGET(response: AxiosResponse): Promise<DevInfoViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevInfoViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevInfoViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevInfoViewResultEntry>(null as any);
    }

    /**
     * 科室设备 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devInfoPOST(id: string, body: DevInfoEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevInfoPOST(_response));
        });
    }

    protected processDevInfoPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备 -- 汇总
     * @return Success
     */
    summary(  cancelToken?: CancelToken | undefined): Promise<DevInfoSummaryViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevInfo/Summary";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSummary(_response));
        });
    }

    protected processSummary(response: AxiosResponse): Promise<DevInfoSummaryViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevInfoSummaryViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevInfoSummaryViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevInfoSummaryViewResultEntry>(null as any);
    }

    /**
     * 科室设备 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    filter5(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DevInfoViewResult> {
        let url_ = this.baseUrl + "/api/DevInfo/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter5(_response));
        });
    }

    protected processFilter5(response: AxiosResponse): Promise<DevInfoViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevInfoViewResult.fromJS(resultData200);
            return Promise.resolve<DevInfoViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevInfoViewResult>(null as any);
    }

    /**
     * 科室设备 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    export3(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevInfo/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport3(_response));
        });
    }

    protected processExport3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备 -- 根据院区Id获取未绑定的设备
     * @param sysHospitalAreaId 院区ID
     * @param filter (optional) 查询条件
     * @return Success
     */
    getDevInfoBySysHospitalAreaId(sysHospitalAreaId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevInfoViewResult> {
        let url_ = this.baseUrl + "/api/DevInfo/BySysHospitalAreaId/{sysHospitalAreaId}";
        if (sysHospitalAreaId === undefined || sysHospitalAreaId === null)
            throw new Error("The parameter 'sysHospitalAreaId' must be defined.");
        url_ = url_.replace("{sysHospitalAreaId}", encodeURIComponent("" + sysHospitalAreaId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDevInfoBySysHospitalAreaId(_response));
        });
    }

    protected processGetDevInfoBySysHospitalAreaId(response: AxiosResponse): Promise<DevInfoViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevInfoViewResult.fromJS(resultData200);
            return Promise.resolve<DevInfoViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevInfoViewResult>(null as any);
    }

    /**
     * 科室设备 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devInfoPOST2(body: DevInfoEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevInfoPOST2(_response));
        });
    }

    protected processDevInfoPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备 -- 根据Id删除数据
     * @return Success
     */
    delete5(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevInfo/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete5(_response));
        });
    }

    protected processDelete5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 从 Excel 读取患者信息
     * @param fileId Excel 文件 Id
     * @return Success
     */
    readFromExcel2(fileId: string , cancelToken?: CancelToken | undefined): Promise<DevInfoExcelViewResult> {
        let url_ = this.baseUrl + "/api/DevInfo/ReadFromExcel/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processReadFromExcel2(_response));
        });
    }

    protected processReadFromExcel2(response: AxiosResponse): Promise<DevInfoExcelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevInfoExcelViewResult.fromJS(resultData200);
            return Promise.resolve<DevInfoExcelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevInfoExcelViewResult>(null as any);
    }

    /**
     * ConvertFromExcel 从 Excel 导入/更新 设备信息
     * @param body (optional) 设备集合
     * @return Success
     */
    convertFromExcel2(body: DevInfoExcelView[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevInfo/ConvertFromExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processConvertFromExcel2(_response));
        });
    }

    protected processConvertFromExcel2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevMaintenanceLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 维护记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devMaintenanceLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevMaintenanceLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevMaintenanceLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevMaintenanceLogGET(_response));
        });
    }

    protected processDevMaintenanceLogGET(response: AxiosResponse): Promise<DevMaintenanceLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevMaintenanceLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevMaintenanceLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevMaintenanceLogViewResultEntry>(null as any);
    }

    /**
     * 维护记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devMaintenanceLogPOST(id: string, body: DevMaintenanceLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevMaintenanceLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevMaintenanceLogPOST(_response));
        });
    }

    protected processDevMaintenanceLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维护记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    filter6(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DevMaintenanceLogViewResult> {
        let url_ = this.baseUrl + "/api/DevMaintenanceLog/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter6(_response));
        });
    }

    protected processFilter6(response: AxiosResponse): Promise<DevMaintenanceLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevMaintenanceLogViewResult.fromJS(resultData200);
            return Promise.resolve<DevMaintenanceLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevMaintenanceLogViewResult>(null as any);
    }

    /**
     * 维护记录 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    export4(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevMaintenanceLog/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport4(_response));
        });
    }

    protected processExport4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维护记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devMaintenanceLogPOST2(body: DevMaintenanceLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevMaintenanceLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevMaintenanceLogPOST2(_response));
        });
    }

    protected processDevMaintenanceLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维护记录 -- 根据Id删除数据
     * @return Success
     */
    delete6(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevMaintenanceLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete6(_response));
        });
    }

    protected processDelete6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevManufacturerServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 科室设备生产厂家信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devManufacturerGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevManufacturerViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevManufacturer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevManufacturerGET(_response));
        });
    }

    protected processDevManufacturerGET(response: AxiosResponse): Promise<DevManufacturerViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevManufacturerViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevManufacturerViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevManufacturerViewResultEntry>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devManufacturerPOST(id: string, body: DevManufacturerEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevManufacturer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevManufacturerPOST(_response));
        });
    }

    protected processDevManufacturerPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter7(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevManufacturerViewResult> {
        let url_ = this.baseUrl + "/api/DevManufacturer/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter7(_response));
        });
    }

    protected processFilter7(response: AxiosResponse): Promise<DevManufacturerViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevManufacturerViewResult.fromJS(resultData200);
            return Promise.resolve<DevManufacturerViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevManufacturerViewResult>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devManufacturerPOST2(body: DevManufacturerEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevManufacturer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevManufacturerPOST2(_response));
        });
    }

    protected processDevManufacturerPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForDevManufacturer(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevManufacturer/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForDevManufacturer(_response));
        });
    }

    protected processMoveNodeForDevManufacturer(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForDevManufacturer(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevManufacturer/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForDevManufacturer(_response));
        });
    }

    protected processUpNodeForDevManufacturer(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForDevManufacturer(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevManufacturer/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForDevManufacturer(_response));
        });
    }

    protected processDownNodeForDevManufacturer(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 根据Id删除数据
     * @return Success
     */
    delete7(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevManufacturer/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete7(_response));
        });
    }

    protected processDelete7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevRepairsLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 报修记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devRepairsLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevRepairsLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevRepairsLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevRepairsLogGET(_response));
        });
    }

    protected processDevRepairsLogGET(response: AxiosResponse): Promise<DevRepairsLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevRepairsLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevRepairsLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevRepairsLogViewResultEntry>(null as any);
    }

    /**
     * 报修记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devRepairsLogPOST(id: string, body: DevRepairsLogEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevRepairsLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevRepairsLogPOST(_response));
        });
    }

    protected processDevRepairsLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 报修记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter8(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevRepairsLogViewResult> {
        let url_ = this.baseUrl + "/api/DevRepairsLog/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter8(_response));
        });
    }

    protected processFilter8(response: AxiosResponse): Promise<DevRepairsLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevRepairsLogViewResult.fromJS(resultData200);
            return Promise.resolve<DevRepairsLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevRepairsLogViewResult>(null as any);
    }

    /**
     * 报修记录 -- 根据条件查询数据
     * @param devInfoId 设备标识
     * @param filter (optional)
     * @return Success
     */
    devInfoGET2(devInfoId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevRepairsLogViewResult> {
        let url_ = this.baseUrl + "/api/DevRepairsLog/DevInfo/{devInfoId}";
        if (devInfoId === undefined || devInfoId === null)
            throw new Error("The parameter 'devInfoId' must be defined.");
        url_ = url_.replace("{devInfoId}", encodeURIComponent("" + devInfoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevInfoGET2(_response));
        });
    }

    protected processDevInfoGET2(response: AxiosResponse): Promise<DevRepairsLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevRepairsLogViewResult.fromJS(resultData200);
            return Promise.resolve<DevRepairsLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevRepairsLogViewResult>(null as any);
    }

    /**
     * 报修记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devRepairsLogPOST2(body: DevRepairsLogEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevRepairsLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevRepairsLogPOST2(_response));
        });
    }

    protected processDevRepairsLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 报修记录 -- 根据Id删除数据
     * @return Success
     */
    delete8(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevRepairsLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete8(_response));
        });
    }

    protected processDelete8(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevScrapLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 报废记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devScrapLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevScrapLogResultEntry> {
        let url_ = this.baseUrl + "/api/DevScrapLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevScrapLogGET(_response));
        });
    }

    protected processDevScrapLogGET(response: AxiosResponse): Promise<DevScrapLogResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevScrapLogResultEntry.fromJS(resultData200);
            return Promise.resolve<DevScrapLogResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevScrapLogResultEntry>(null as any);
    }

    /**
     * 报废记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devScrapLogPOST(id: string, body: DevScrapLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevScrapLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevScrapLogPOST(_response));
        });
    }

    protected processDevScrapLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 报废记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter9(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevScrapLogResult> {
        let url_ = this.baseUrl + "/api/DevScrapLog/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter9(_response));
        });
    }

    protected processFilter9(response: AxiosResponse): Promise<DevScrapLogResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevScrapLogResult.fromJS(resultData200);
            return Promise.resolve<DevScrapLogResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevScrapLogResult>(null as any);
    }

    /**
     * 报废记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devScrapLogPOST2(body: DevScrapLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevScrapLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevScrapLogPOST2(_response));
        });
    }

    protected processDevScrapLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 报废记录 -- 根据Id删除数据
     * @return Success
     */
    delete9(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevScrapLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete9(_response));
        });
    }

    protected processDelete9(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevUsageLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 设备使用记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devUsageLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevUsageLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevUsageLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevUsageLogGET(_response));
        });
    }

    protected processDevUsageLogGET(response: AxiosResponse): Promise<DevUsageLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevUsageLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevUsageLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevUsageLogViewResultEntry>(null as any);
    }

    /**
     * 设备使用记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devUsageLogPOST(id: string, body: DevUsageLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevUsageLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevUsageLogPOST(_response));
        });
    }

    protected processDevUsageLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备使用记录 -- 根据条件查询数据(添加设备编号)
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    filter10(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DevUsageLogViewResult> {
        let url_ = this.baseUrl + "/api/DevUsageLog/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter10(_response));
        });
    }

    protected processFilter10(response: AxiosResponse): Promise<DevUsageLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevUsageLogViewResult.fromJS(resultData200);
            return Promise.resolve<DevUsageLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevUsageLogViewResult>(null as any);
    }

    /**
     * 设备使用记录 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    export5(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevUsageLog/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport5(_response));
        });
    }

    protected processExport5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备使用记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devUsageLogPOST2(body: DevUsageLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevUsageLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevUsageLogPOST2(_response));
        });
    }

    protected processDevUsageLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备使用记录 -- 根据Id删除数据
     * @return Success
     */
    delete10(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevUsageLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete10(_response));
        });
    }

    protected processDelete10(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevWaterProcessInfoServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 水处理设备 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devWaterProcessInfoGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevWaterProcessInfoViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevWaterProcessInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevWaterProcessInfoGET(_response));
        });
    }

    protected processDevWaterProcessInfoGET(response: AxiosResponse): Promise<DevWaterProcessInfoViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevWaterProcessInfoViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevWaterProcessInfoViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevWaterProcessInfoViewResultEntry>(null as any);
    }

    /**
     * 水处理设备 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devWaterProcessInfoPOST(id: string, body: DevWaterProcessInfoEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevWaterProcessInfoPOST(_response));
        });
    }

    protected processDevWaterProcessInfoPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理设备 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter11(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevWaterProcessInfoViewResult> {
        let url_ = this.baseUrl + "/api/DevWaterProcessInfo/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter11(_response));
        });
    }

    protected processFilter11(response: AxiosResponse): Promise<DevWaterProcessInfoViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevWaterProcessInfoViewResult.fromJS(resultData200);
            return Promise.resolve<DevWaterProcessInfoViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevWaterProcessInfoViewResult>(null as any);
    }

    /**
     * 水处理设备 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devWaterProcessInfoPOST2(body: DevWaterProcessInfoEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevWaterProcessInfoPOST2(_response));
        });
    }

    protected processDevWaterProcessInfoPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理设备 -- 根据Id删除数据
     * @return Success
     */
    delete11(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessInfo/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete11(_response));
        });
    }

    protected processDelete11(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DrugStorageArrearageServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 个人药库借药 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    unpaid(patientId: string , cancelToken?: CancelToken | undefined): Promise<DrugStorageArrearageViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageArrearage/Unpaid/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUnpaid(_response));
        });
    }

    protected processUnpaid(response: AxiosResponse): Promise<DrugStorageArrearageViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageArrearageViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageArrearageViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageArrearageViewResult>(null as any);
    }

    /**
     * 个人药库借药 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientKey (optional) 患者姓名/别名/首字母/拼音码/五笔码
     * @param itemKey (optional) 项目-分类/名称/简称/商品名/用法/厂家/拼音码/五笔码
     * @return Success
     */
    filter12(filter: string | undefined, patientKey: string | undefined, itemKey: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugStorageArrearageViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageArrearage/Filter?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (itemKey === null)
            throw new Error("The parameter 'itemKey' cannot be null.");
        else if (itemKey !== undefined)
            url_ += "itemKey=" + encodeURIComponent("" + itemKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter12(_response));
        });
    }

    protected processFilter12(response: AxiosResponse): Promise<DrugStorageArrearageViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageArrearageViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageArrearageViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageArrearageViewResult>(null as any);
    }

    /**
     * 患者借药记录 -- 借药统计
     * @param filter (optional) 查询条件
     * @param patientKey (optional) 患者姓名/别名/首字母/拼音码/五笔码
     * @return Success
     */
    summary2(filter: string | undefined, patientKey: string | undefined , cancelToken?: CancelToken | undefined): Promise<ObjectResult> {
        let url_ = this.baseUrl + "/api/DrugStorageArrearage/Summary?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSummary2(_response));
        });
    }

    protected processSummary2(response: AxiosResponse): Promise<ObjectResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ObjectResult.fromJS(resultData200);
            return Promise.resolve<ObjectResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ObjectResult>(null as any);
    }

    /**
     * 个人药库借药 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    drugStorageArrearage(body: DrugStorageArrearageEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageArrearage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrugStorageArrearage(_response));
        });
    }

    protected processDrugStorageArrearage(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 个人药库借药 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    drugStorageArrearage2(id: string, body: DrugStorageArrearageEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageArrearage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrugStorageArrearage2(_response));
        });
    }

    protected processDrugStorageArrearage2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 个人药库借药 -- 根据Id删除数据
     * @return Success
     */
    delete12(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageArrearage/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete12(_response));
        });
    }

    protected processDelete12(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DrugStorageInServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 个人药库入库 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientKey (optional)
     * @param itemKey (optional)
     * @return Success
     */
    filter13(filter: string | undefined, patientKey: string | undefined, itemKey: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugStorageInViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageIn/Filter?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (itemKey === null)
            throw new Error("The parameter 'itemKey' cannot be null.");
        else if (itemKey !== undefined)
            url_ += "itemKey=" + encodeURIComponent("" + itemKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter13(_response));
        });
    }

    protected processFilter13(response: AxiosResponse): Promise<DrugStorageInViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageInViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageInViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageInViewResult>(null as any);
    }

    /**
     * 个人药库库存 - 新增数据
     * @param body (optional)
     * @return Success
     */
    drugStorageIn(body: DrugStorageInEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageIn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrugStorageIn(_response));
        });
    }

    protected processDrugStorageIn(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DrugStorageInventoryServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 个人药库库存 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 项目-分类/名称/简称/商品名/用法/厂家/拼音码/五笔码
     * @return Success
     */
    filter14(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugStorageInventoryViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageInventory/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter14(_response));
        });
    }

    protected processFilter14(response: AxiosResponse): Promise<DrugStorageInventoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageInventoryViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageInventoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageInventoryViewResult>(null as any);
    }

    /**
     * 个人药库库存 - 根据条件查询明细
     * @param filter (optional)
     * @param type (optional)
     * @param inventoryId (optional)
     * @return Success
     */
    detail(filter: string | undefined, type: number | undefined, inventoryId: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugStorageDetailViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageInventory/Detail?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (inventoryId === null)
            throw new Error("The parameter 'inventoryId' cannot be null.");
        else if (inventoryId !== undefined)
            url_ += "inventoryId=" + encodeURIComponent("" + inventoryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail(_response));
        });
    }

    protected processDetail(response: AxiosResponse): Promise<DrugStorageDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageDetailViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageDetailViewResult>(null as any);
    }
}

export class DrugStorageOutServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 个人药库出库 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param drugInId 缴费标识
     * @return Success
     */
    drugStorageOutGET(filter: string | undefined, drugInId: string , cancelToken?: CancelToken | undefined): Promise<DrugStorageOutViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageOut/{drugInId}";
        if (drugInId === undefined || drugInId === null)
            throw new Error("The parameter 'drugInId' must be defined.");
        url_ = url_.replace("{drugInId}", encodeURIComponent("" + drugInId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrugStorageOutGET(_response));
        });
    }

    protected processDrugStorageOutGET(response: AxiosResponse): Promise<DrugStorageOutViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageOutViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageOutViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageOutViewResult>(null as any);
    }

    /**
     * 患者扣费记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientKey (optional) 患者 - 姓名/别名/首字母/拼音码/五笔码
     * @param drugKey (optional) 项目 - 分类/名称/简称/商品名/用法/厂家/拼音码/五笔码
     * @return Success
     */
    filter15(filter: string | undefined, patientKey: string | undefined, drugKey: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugStorageOutViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageOut/Filter?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (drugKey === null)
            throw new Error("The parameter 'drugKey' cannot be null.");
        else if (drugKey !== undefined)
            url_ += "drugKey=" + encodeURIComponent("" + drugKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter15(_response));
        });
    }

    protected processFilter15(response: AxiosResponse): Promise<DrugStorageOutViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageOutViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageOutViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageOutViewResult>(null as any);
    }

    /**
     * 个人药库出库 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    drugStorageOutPOST(body: DrugStorageOutEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageOut";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrugStorageOutPOST(_response));
        });
    }

    protected processDrugStorageOutPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 个人药库出库 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    drugStorageOutPOST2(id: string, body: DrugStorageOutEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageOut/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrugStorageOutPOST2(_response));
        });
    }

    protected processDrugStorageOutPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 个人药库出库 -- 根据Id删除数据
     * @return Success
     */
    delete13(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageOut/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete13(_response));
        });
    }

    protected processDelete13(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HfsFilesServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 文件列表 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hfsFilesGET(id: string , cancelToken?: CancelToken | undefined): Promise<HfsFilesResultEntry> {
        let url_ = this.baseUrl + "/api/HfsFiles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHfsFilesGET(_response));
        });
    }

    protected processHfsFilesGET(response: AxiosResponse): Promise<HfsFilesResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HfsFilesResultEntry.fromJS(resultData200);
            return Promise.resolve<HfsFilesResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HfsFilesResultEntry>(null as any);
    }

    /**
     * 文件列表 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hfsFilesPOST(id: string, body: HfsFilesViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HfsFiles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHfsFilesPOST(_response));
        });
    }

    protected processHfsFilesPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 文件列表 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter16(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HfsFilesResult> {
        let url_ = this.baseUrl + "/api/HfsFiles/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter16(_response));
        });
    }

    protected processFilter16(response: AxiosResponse): Promise<HfsFilesResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HfsFilesResult.fromJS(resultData200);
            return Promise.resolve<HfsFilesResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HfsFilesResult>(null as any);
    }

    /**
     * 文件列表 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hfsFilesPOST2(body: HfsFilesViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HfsFiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHfsFilesPOST2(_response));
        });
    }

    protected processHfsFilesPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 文件列表 -- 根据Id删除数据
     * @return Success
     */
    delete14(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HfsFiles/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete14(_response));
        });
    }

    protected processDelete14(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalEnvMoniterRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 治疗室环境监测采样 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalEnvMoniterRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalEnvMoniterRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalEnvMoniterRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalEnvMoniterRecordGET(_response));
        });
    }

    protected processHospitalEnvMoniterRecordGET(response: AxiosResponse): Promise<HospitalEnvMoniterRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalEnvMoniterRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalEnvMoniterRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalEnvMoniterRecordViewResultEntry>(null as any);
    }

    /**
     * 治疗室环境监测采样 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalEnvMoniterRecordPOST(id: string, body: HospitalEnvMoniterRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalEnvMoniterRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalEnvMoniterRecordPOST(_response));
        });
    }

    protected processHospitalEnvMoniterRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗室环境监测采样 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter17(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalEnvMoniterRecordViewResult> {
        let url_ = this.baseUrl + "/api/HospitalEnvMoniterRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter17(_response));
        });
    }

    protected processFilter17(response: AxiosResponse): Promise<HospitalEnvMoniterRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalEnvMoniterRecordViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalEnvMoniterRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalEnvMoniterRecordViewResult>(null as any);
    }

    /**
     * 治疗室环境监测采样 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalEnvMoniterRecordPOST2(body: HospitalEnvMoniterRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalEnvMoniterRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalEnvMoniterRecordPOST2(_response));
        });
    }

    protected processHospitalEnvMoniterRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗室环境监测采样 -- 根据Id删除数据
     * @return Success
     */
    delete15(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalEnvMoniterRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete15(_response));
        });
    }

    protected processDelete15(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionDialysateServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析液检测 -- 查询数据明细
     * @param year (optional)
     * @param date (optional)
     * @return Success
     */
    getDetail(year: number | undefined, date: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionDialysateDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDialysate/GetDetail?";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent(date ? "" + date.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDetail(_response));
        });
    }

    protected processGetDetail(response: AxiosResponse): Promise<HospitalInfectionDialysateDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionDialysateDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionDialysateDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionDialysateDetailViewResultEntry>(null as any);
    }

    /**
     * 透析液检测 -- 查询数据汇总
     * @param filter (optional) 查询条件
     * @return Success
     */
    getList(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionDialysateViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDialysate/GetList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetList(_response));
        });
    }

    protected processGetList(response: AxiosResponse): Promise<HospitalInfectionDialysateViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionDialysateViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionDialysateViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionDialysateViewResult>(null as any);
    }

    /**
     * 透析液检测 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionDialysate(body: HospitalInfectionDialysateEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDialysate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionDialysate(_response));
        });
    }

    protected processHospitalInfectionDialysate(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析液检测 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionDialysate2(id: string, body: HospitalInfectionDialysateEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDialysate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionDialysate2(_response));
        });
    }

    protected processHospitalInfectionDialysate2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析液检测 -- 根据Id删除数据
     * @return Success
     */
    delete16(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDialysate/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete16(_response));
        });
    }

    protected processDelete16(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析液检测 -- 根据年份删除数据
     * @return Success
     */
    deleteByYear(year: number , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDialysate/Delete/DeleteByYear/{year}";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeleteByYear(_response));
        });
    }

    protected processDeleteByYear(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionDisinfectantResidueDetectionServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 消毒液残留量检测 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionDisinfectantResidueDetectionGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionDisinfectantResidueDetectionViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDisinfectantResidueDetection/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionDisinfectantResidueDetectionGET(_response));
        });
    }

    protected processHospitalInfectionDisinfectantResidueDetectionGET(response: AxiosResponse): Promise<HospitalInfectionDisinfectantResidueDetectionViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionDisinfectantResidueDetectionViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionDisinfectantResidueDetectionViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionDisinfectantResidueDetectionViewResultEntry>(null as any);
    }

    /**
     * 消毒液残留量检测 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionDisinfectantResidueDetectionPOST(id: string, body: HospitalInfectionDisinfectantResidueDetectionEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDisinfectantResidueDetection/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionDisinfectantResidueDetectionPOST(_response));
        });
    }

    protected processHospitalInfectionDisinfectantResidueDetectionPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消毒液残留量检测 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter18(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionDisinfectantResidueDetectionViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDisinfectantResidueDetection/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter18(_response));
        });
    }

    protected processFilter18(response: AxiosResponse): Promise<HospitalInfectionDisinfectantResidueDetectionViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionDisinfectantResidueDetectionViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionDisinfectantResidueDetectionViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionDisinfectantResidueDetectionViewResult>(null as any);
    }

    /**
     * 消毒液残留量检测 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export6(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDisinfectantResidueDetection/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport6(_response));
        });
    }

    protected processExport6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消毒液残留量检测 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionDisinfectantResidueDetectionPOST2(body: HospitalInfectionDisinfectantResidueDetectionEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDisinfectantResidueDetection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionDisinfectantResidueDetectionPOST2(_response));
        });
    }

    protected processHospitalInfectionDisinfectantResidueDetectionPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消毒液残留量检测 -- 根据Id删除数据
     * @return Success
     */
    delete17(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDisinfectantResidueDetection/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete17(_response));
        });
    }

    protected processDelete17(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionElectrolyteServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 电解质检测 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionElectrolyteGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionElectrolyteViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionElectrolyte/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionElectrolyteGET(_response));
        });
    }

    protected processHospitalInfectionElectrolyteGET(response: AxiosResponse): Promise<HospitalInfectionElectrolyteViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionElectrolyteViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionElectrolyteViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionElectrolyteViewResultEntry>(null as any);
    }

    /**
     * 电解质检测 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionElectrolytePOST(id: string, body: HospitalInfectionElectrolyteEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionElectrolyte/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionElectrolytePOST(_response));
        });
    }

    protected processHospitalInfectionElectrolytePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 电解质检测 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter19(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionElectrolyteViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionElectrolyte/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter19(_response));
        });
    }

    protected processFilter19(response: AxiosResponse): Promise<HospitalInfectionElectrolyteViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionElectrolyteViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionElectrolyteViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionElectrolyteViewResult>(null as any);
    }

    /**
     * 电解质检测 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export7(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionElectrolyte/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport7(_response));
        });
    }

    protected processExport7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 电解质检测 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionElectrolytePOST2(body: HospitalInfectionElectrolyteEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionElectrolyte";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionElectrolytePOST2(_response));
        });
    }

    protected processHospitalInfectionElectrolytePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 电解质检测 -- 根据Id删除数据
     * @return Success
     */
    delete18(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionElectrolyte/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete18(_response));
        });
    }

    protected processDelete18(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionGermicultureServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 细菌培养 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionGermicultureGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionGermicultureViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermiculture/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionGermicultureGET(_response));
        });
    }

    protected processHospitalInfectionGermicultureGET(response: AxiosResponse): Promise<HospitalInfectionGermicultureViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionGermicultureViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionGermicultureViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionGermicultureViewResultEntry>(null as any);
    }

    /**
     * 细菌培养 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionGermiculturePOST(id: string, body: HospitalInfectionGermicultureEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermiculture/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionGermiculturePOST(_response));
        });
    }

    protected processHospitalInfectionGermiculturePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 细菌培养 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter20(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionGermicultureViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermiculture/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter20(_response));
        });
    }

    protected processFilter20(response: AxiosResponse): Promise<HospitalInfectionGermicultureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionGermicultureViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionGermicultureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionGermicultureViewResult>(null as any);
    }

    /**
     * 细菌培养 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export8(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermiculture/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport8(_response));
        });
    }

    protected processExport8(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 细菌培养 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionGermiculturePOST2(body: HospitalInfectionGermicultureEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermiculture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionGermiculturePOST2(_response));
        });
    }

    protected processHospitalInfectionGermiculturePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 细菌培养 -- 根据Id删除数据
     * @return Success
     */
    delete19(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermiculture/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete19(_response));
        });
    }

    protected processDelete19(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionGermicultureSurfaceServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 物体表面细菌培养 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionGermicultureSurfaceGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionGermicultureSurfaceViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionGermicultureSurfaceGET(_response));
        });
    }

    protected processHospitalInfectionGermicultureSurfaceGET(response: AxiosResponse): Promise<HospitalInfectionGermicultureSurfaceViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionGermicultureSurfaceViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionGermicultureSurfaceViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionGermicultureSurfaceViewResultEntry>(null as any);
    }

    /**
     * 物体表面细菌培养 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionGermicultureSurfacePOST(id: string, body: HospitalInfectionGermicultureSurfaceEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionGermicultureSurfacePOST(_response));
        });
    }

    protected processHospitalInfectionGermicultureSurfacePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 物体表面细菌培养 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter21(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionGermicultureSurfaceViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter21(_response));
        });
    }

    protected processFilter21(response: AxiosResponse): Promise<HospitalInfectionGermicultureSurfaceViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionGermicultureSurfaceViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionGermicultureSurfaceViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionGermicultureSurfaceViewResult>(null as any);
    }

    /**
     * 物体表面细菌培养 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export9(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport9(_response));
        });
    }

    protected processExport9(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 物体表面细菌培养 -- 根据条件查询数据
     * @param year 年份(2019)
     * @return Success
     */
    summary3(year: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionGermicultureSurfaceSummaryViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface/Summary/{year}";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSummary3(_response));
        });
    }

    protected processSummary3(response: AxiosResponse): Promise<HospitalInfectionGermicultureSurfaceSummaryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionGermicultureSurfaceSummaryViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionGermicultureSurfaceSummaryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionGermicultureSurfaceSummaryViewResult>(null as any);
    }

    /**
     * 物体表面细菌培养 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionGermicultureSurfacePOST2(body: HospitalInfectionGermicultureSurfaceEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionGermicultureSurfacePOST2(_response));
        });
    }

    protected processHospitalInfectionGermicultureSurfacePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 物体表面细菌培养 -- 根据Id删除数据
     * @return Success
     */
    delete20(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete20(_response));
        });
    }

    protected processDelete20(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionKreotoxinServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 内毒素检测 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionKreotoxinGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionKreotoxinViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionKreotoxin/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionKreotoxinGET(_response));
        });
    }

    protected processHospitalInfectionKreotoxinGET(response: AxiosResponse): Promise<HospitalInfectionKreotoxinViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionKreotoxinViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionKreotoxinViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionKreotoxinViewResultEntry>(null as any);
    }

    /**
     * 内毒素检测 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionKreotoxinPOST(id: string, body: HospitalInfectionKreotoxinEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionKreotoxin/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionKreotoxinPOST(_response));
        });
    }

    protected processHospitalInfectionKreotoxinPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 内毒素检测 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter22(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionKreotoxinViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionKreotoxin/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter22(_response));
        });
    }

    protected processFilter22(response: AxiosResponse): Promise<HospitalInfectionKreotoxinViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionKreotoxinViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionKreotoxinViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionKreotoxinViewResult>(null as any);
    }

    /**
     * 内毒素检测 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export10(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionKreotoxin/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport10(_response));
        });
    }

    protected processExport10(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 内毒素检测 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionKreotoxinPOST2(body: HospitalInfectionKreotoxinEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionKreotoxin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionKreotoxinPOST2(_response));
        });
    }

    protected processHospitalInfectionKreotoxinPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 内毒素检测 -- 根据Id删除数据
     * @return Success
     */
    delete21(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionKreotoxin/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete21(_response));
        });
    }

    protected processDelete21(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionWatertreatmentDisinfectionServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 水处理消毒 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionWatertreatmentDisinfectionGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionWatertreatmentDisinfectionViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentDisinfection/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionWatertreatmentDisinfectionGET(_response));
        });
    }

    protected processHospitalInfectionWatertreatmentDisinfectionGET(response: AxiosResponse): Promise<HospitalInfectionWatertreatmentDisinfectionViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionWatertreatmentDisinfectionViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionWatertreatmentDisinfectionViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionWatertreatmentDisinfectionViewResultEntry>(null as any);
    }

    /**
     * 水处理消毒 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionWatertreatmentDisinfectionPOST(id: string, body: HospitalInfectionWatertreatmentDisinfectionBase | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentDisinfection/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionWatertreatmentDisinfectionPOST(_response));
        });
    }

    protected processHospitalInfectionWatertreatmentDisinfectionPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理消毒 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter23(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionWatertreatmentDisinfectionViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentDisinfection/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter23(_response));
        });
    }

    protected processFilter23(response: AxiosResponse): Promise<HospitalInfectionWatertreatmentDisinfectionViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionWatertreatmentDisinfectionViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionWatertreatmentDisinfectionViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionWatertreatmentDisinfectionViewResult>(null as any);
    }

    /**
     * 水处理消毒 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export11(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentDisinfection/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport11(_response));
        });
    }

    protected processExport11(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理消毒 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionWatertreatmentDisinfectionPOST2(body: HospitalInfectionWatertreatmentDisinfectionBase | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentDisinfection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionWatertreatmentDisinfectionPOST2(_response));
        });
    }

    protected processHospitalInfectionWatertreatmentDisinfectionPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理消毒 -- 根据Id删除数据
     * @return Success
     */
    delete22(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentDisinfection/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete22(_response));
        });
    }

    protected processDelete22(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionWatertreatmentMaintenanceServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 水处理维护 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionWatertreatmentMaintenanceGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionWatertreatmentMaintenanceViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentMaintenance/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionWatertreatmentMaintenanceGET(_response));
        });
    }

    protected processHospitalInfectionWatertreatmentMaintenanceGET(response: AxiosResponse): Promise<HospitalInfectionWatertreatmentMaintenanceViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionWatertreatmentMaintenanceViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionWatertreatmentMaintenanceViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionWatertreatmentMaintenanceViewResultEntry>(null as any);
    }

    /**
     * 水处理维护 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionWatertreatmentMaintenancePOST(id: string, body: HospitalInfectionWatertreatmentMaintenanceViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentMaintenance/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionWatertreatmentMaintenancePOST(_response));
        });
    }

    protected processHospitalInfectionWatertreatmentMaintenancePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理维护 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter24(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionWatertreatmentMaintenanceViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentMaintenance/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter24(_response));
        });
    }

    protected processFilter24(response: AxiosResponse): Promise<HospitalInfectionWatertreatmentMaintenanceViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionWatertreatmentMaintenanceViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionWatertreatmentMaintenanceViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionWatertreatmentMaintenanceViewResult>(null as any);
    }

    /**
     * 水处理维护 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export12(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentMaintenance/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport12(_response));
        });
    }

    protected processExport12(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理维护 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionWatertreatmentMaintenancePOST2(body: HospitalInfectionWatertreatmentMaintenanceViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentMaintenance";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionWatertreatmentMaintenancePOST2(_response));
        });
    }

    protected processHospitalInfectionWatertreatmentMaintenancePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理维护 -- 根据Id删除数据
     * @return Success
     */
    delete23(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentMaintenance/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete23(_response));
        });
    }

    protected processDelete23(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class IndexServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 首页 - 医生
     * @return Success
     */
    doctor(  cancelToken?: CancelToken | undefined): Promise<IndexDoctorViewResultEntry> {
        let url_ = this.baseUrl + "/api/Index/Doctor";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDoctor(_response));
        });
    }

    protected processDoctor(response: AxiosResponse): Promise<IndexDoctorViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IndexDoctorViewResultEntry.fromJS(resultData200);
            return Promise.resolve<IndexDoctorViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IndexDoctorViewResultEntry>(null as any);
    }

    /**
     * 医嘱
     * @param filter (optional) 查询条件
     * @param key (optional) 名称/拼音码/五笔码
     * @return Success
     */
    cureDa(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaViewResult> {
        let url_ = this.baseUrl + "/api/Index/CureDa?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDa(_response));
        });
    }

    protected processCureDa(response: AxiosResponse): Promise<CureDaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaViewResult>(null as any);
    }

    /**
     * 排班 -- 根据日期查询
     * @param date (optional) 时间段(e.g. 2018-11-19 ~ 2018-11-25)
     * @return Success
     */
    schedule(date: string | undefined , cancelToken?: CancelToken | undefined): Promise<IndexScheduleViewResultEntry> {
        let url_ = this.baseUrl + "/api/Index/Schedule?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSchedule(_response));
        });
    }

    protected processSchedule(response: AxiosResponse): Promise<IndexScheduleViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IndexScheduleViewResultEntry.fromJS(resultData200);
            return Promise.resolve<IndexScheduleViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IndexScheduleViewResultEntry>(null as any);
    }
}

export class IotTreatmentDataServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 治疗数据 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    iotTreatmentDataGET(id: string , cancelToken?: CancelToken | undefined): Promise<IotTreatmentDataResultEntry> {
        let url_ = this.baseUrl + "/api/IotTreatmentData/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIotTreatmentDataGET(_response));
        });
    }

    protected processIotTreatmentDataGET(response: AxiosResponse): Promise<IotTreatmentDataResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IotTreatmentDataResultEntry.fromJS(resultData200);
            return Promise.resolve<IotTreatmentDataResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IotTreatmentDataResultEntry>(null as any);
    }

    /**
     * 治疗数据 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    iotTreatmentDataPOST(id: string, body: IotTreatmentDataViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/IotTreatmentData/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIotTreatmentDataPOST(_response));
        });
    }

    protected processIotTreatmentDataPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗数据 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter25(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<IotTreatmentDataResult> {
        let url_ = this.baseUrl + "/api/IotTreatmentData/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter25(_response));
        });
    }

    protected processFilter25(response: AxiosResponse): Promise<IotTreatmentDataResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IotTreatmentDataResult.fromJS(resultData200);
            return Promise.resolve<IotTreatmentDataResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IotTreatmentDataResult>(null as any);
    }

    /**
     * 治疗数据 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    iotTreatmentDataPOST2(body: IotTreatmentDataViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/IotTreatmentData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIotTreatmentDataPOST2(_response));
        });
    }

    protected processIotTreatmentDataPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗数据 -- 根据Id删除数据
     * @return Success
     */
    delete24(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/IotTreatmentData/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete24(_response));
        });
    }

    protected processDelete24(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class LisStatConfigServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 检验统计配置 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    lisStatConfigGET(id: string , cancelToken?: CancelToken | undefined): Promise<LisStatConfigViewResultEntry> {
        let url_ = this.baseUrl + "/api/LisStatConfig/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLisStatConfigGET(_response));
        });
    }

    protected processLisStatConfigGET(response: AxiosResponse): Promise<LisStatConfigViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LisStatConfigViewResultEntry.fromJS(resultData200);
            return Promise.resolve<LisStatConfigViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LisStatConfigViewResultEntry>(null as any);
    }

    /**
     * 检验统计配置 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    lisStatConfigPOST(id: string, body: LisStatConfigEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/LisStatConfig/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLisStatConfigPOST(_response));
        });
    }

    protected processLisStatConfigPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验统计配置 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter26(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<LisStatConfigViewResult> {
        let url_ = this.baseUrl + "/api/LisStatConfig/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter26(_response));
        });
    }

    protected processFilter26(response: AxiosResponse): Promise<LisStatConfigViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LisStatConfigViewResult.fromJS(resultData200);
            return Promise.resolve<LisStatConfigViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LisStatConfigViewResult>(null as any);
    }

    /**
     * 检验统计配置 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    lisStatConfigPOST2(body: LisStatConfigEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/LisStatConfig";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLisStatConfigPOST2(_response));
        });
    }

    protected processLisStatConfigPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验统计配置 -- 根据Id删除数据
     * @return Success
     */
    delete25(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/LisStatConfig/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete25(_response));
        });
    }

    protected processDelete25(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class MapFormServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 自定义表单字段映射 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    mapFormGET(id: string , cancelToken?: CancelToken | undefined): Promise<MapFormResultEntry> {
        let url_ = this.baseUrl + "/api/MapForm/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapFormGET(_response));
        });
    }

    protected processMapFormGET(response: AxiosResponse): Promise<MapFormResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapFormResultEntry.fromJS(resultData200);
            return Promise.resolve<MapFormResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapFormResultEntry>(null as any);
    }

    /**
     * 自定义表单字段映射 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    mapFormPOST(id: string, body: MapFormViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapForm/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapFormPOST(_response));
        });
    }

    protected processMapFormPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 自定义表单字段映射 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter27(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapFormResult> {
        let url_ = this.baseUrl + "/api/MapForm/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter27(_response));
        });
    }

    protected processFilter27(response: AxiosResponse): Promise<MapFormResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapFormResult.fromJS(resultData200);
            return Promise.resolve<MapFormResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapFormResult>(null as any);
    }

    /**
     * 自定义表单字段映射 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    mapFormPOST2(body: MapFormViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapForm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapFormPOST2(_response));
        });
    }

    protected processMapFormPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 自定义表单字段映射 -- 根据Id删除数据
     * @return Success
     */
    delete26(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapForm/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete26(_response));
        });
    }

    protected processDelete26(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class MapLisItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 检验报告项 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    mapLisItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<MapLisItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/MapLisItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemGET(_response));
        });
    }

    protected processMapLisItemGET(response: AxiosResponse): Promise<MapLisItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<MapLisItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemViewResultEntry>(null as any);
    }

    /**
     * 检验报告项 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    mapLisItemPOST(id: string, body: MapLisItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemPOST(_response));
        });
    }

    protected processMapLisItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告项 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 本系统编码
     * @return Success
     */
    filter28(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItem/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter28(_response));
        });
    }

    protected processFilter28(response: AxiosResponse): Promise<MapLisItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemViewResult>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 查询可以用于化验类统计的数据
     * @param mapLisTypeId (optional)
     * @return Success
     */
    forReport(mapLisTypeId: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItem/ForReport?";
        if (mapLisTypeId === null)
            throw new Error("The parameter 'mapLisTypeId' cannot be null.");
        else if (mapLisTypeId !== undefined)
            url_ += "mapLisTypeId=" + encodeURIComponent("" + mapLisTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processForReport(_response));
        });
    }

    protected processForReport(response: AxiosResponse): Promise<MapLisItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemViewResult>(null as any);
    }

    /**
     * 检验报告项 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    mapLisItemPOST2(body: MapLisItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemPOST2(_response));
        });
    }

    protected processMapLisItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告项 -- 新增数据
     * @param mapLisTypeId 检验分类标识
     * @param body (optional) iHDIS检验项明细标识
     * @return Success
     */
    batch(mapLisTypeId: string, body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItem/Batch/{mapLisTypeId}";
        if (mapLisTypeId === undefined || mapLisTypeId === null)
            throw new Error("The parameter 'mapLisTypeId' must be defined.");
        url_ = url_.replace("{mapLisTypeId}", encodeURIComponent("" + mapLisTypeId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch(_response));
        });
    }

    protected processBatch(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告项 -- 根据Id删除数据
     * @return Success
     */
    delete27(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete27(_response));
        });
    }

    protected processDelete27(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class MapLisItemDeployServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Lis检验报告项配置  -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    mapLisItemDeployGET(id: string , cancelToken?: CancelToken | undefined): Promise<MapLisItemDeployViewResultEntry> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemDeployGET(_response));
        });
    }

    protected processMapLisItemDeployGET(response: AxiosResponse): Promise<MapLisItemDeployViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemDeployViewResultEntry.fromJS(resultData200);
            return Promise.resolve<MapLisItemDeployViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemDeployViewResultEntry>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 更新数据
     * @param body (optional)
     * @return Success
     */
    mapLisItemDeployPOST(id: string, body: MapLisItemDeployEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemDeployPOST(_response));
        });
    }

    protected processMapLisItemDeployPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter29(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemDeployViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter29(_response));
        });
    }

    protected processFilter29(response: AxiosResponse): Promise<MapLisItemDeployViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemDeployViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemDeployViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemDeployViewResult>(null as any);
    }

    /**
     * 通过关键字查询支持：Name/CodeLis
     * @param filter (optional) 查询条件
     * @param mapLisTypeId (optional)
     * @param key (optional) Name/CodeLis
     * @return Success
     */
    getByKey(filter: string | undefined, mapLisTypeId: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemDeployViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/GetByKey?";
        if (mapLisTypeId === null)
            throw new Error("The parameter 'mapLisTypeId' cannot be null.");
        else if (mapLisTypeId !== undefined)
            url_ += "mapLisTypeId=" + encodeURIComponent("" + mapLisTypeId) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByKey(_response));
        });
    }

    protected processGetByKey(response: AxiosResponse): Promise<MapLisItemDeployViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemDeployViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemDeployViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemDeployViewResult>(null as any);
    }

    /**
     * 是否匹配
     * @param isMatched (optional) 查询条件
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    isMatched(isMatched: number | undefined, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemDeployViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/IsMatched?";
        if (isMatched === null)
            throw new Error("The parameter 'isMatched' cannot be null.");
        else if (isMatched !== undefined)
            url_ += "isMatched=" + encodeURIComponent("" + isMatched) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIsMatched(_response));
        });
    }

    protected processIsMatched(response: AxiosResponse): Promise<MapLisItemDeployViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemDeployViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemDeployViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemDeployViewResult>(null as any);
    }

    /**
     * 已经匹配列表
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    hasMatchedList(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapListMatchedResult> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/HasMatchedList?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHasMatchedList(_response));
        });
    }

    protected processHasMatchedList(response: AxiosResponse): Promise<MapListMatchedResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapListMatchedResult.fromJS(resultData200);
            return Promise.resolve<MapListMatchedResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapListMatchedResult>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 新增数据
     * @param body (optional)
     * @return Success
     */
    mapLisItemDeployPOST2(body: MapLisItemDeployEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemDeployPOST2(_response));
        });
    }

    protected processMapLisItemDeployPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 匹配检验项
     * @param mapLisItemIhdisId (optional) 本地检验报告项配置标识
     * @param isProcess (optional) 支持应用到历史检验数据
     * @param body (optional) Lis检验报告项配置标识
     * @return Success
     */
    match(mapLisItemIhdisId: string | undefined, isProcess: number | undefined, body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/Match?";
        if (mapLisItemIhdisId === null)
            throw new Error("The parameter 'mapLisItemIhdisId' cannot be null.");
        else if (mapLisItemIhdisId !== undefined)
            url_ += "mapLisItemIhdisId=" + encodeURIComponent("" + mapLisItemIhdisId) + "&";
        if (isProcess === null)
            throw new Error("The parameter 'isProcess' cannot be null.");
        else if (isProcess !== undefined)
            url_ += "isProcess=" + encodeURIComponent("" + isProcess) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMatch(_response));
        });
    }

    protected processMatch(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 取消匹配检验项
     * @param mapLisItemIhdisId (optional) 本地检验报告项配置标识
     * @param mapLisItemDeployId (optional) Lis检验报告项配置标识
     * @param deleteOld (optional) 是否删除Lis检验项已经生成的检验项提醒数据（0-不删除 1-删除）
     * @return Success
     */
    cancel(mapLisItemIhdisId: string | undefined, mapLisItemDeployId: string | undefined, deleteOld: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/Match/Cancel?";
        if (mapLisItemIhdisId === null)
            throw new Error("The parameter 'mapLisItemIhdisId' cannot be null.");
        else if (mapLisItemIhdisId !== undefined)
            url_ += "mapLisItemIhdisId=" + encodeURIComponent("" + mapLisItemIhdisId) + "&";
        if (mapLisItemDeployId === null)
            throw new Error("The parameter 'mapLisItemDeployId' cannot be null.");
        else if (mapLisItemDeployId !== undefined)
            url_ += "mapLisItemDeployId=" + encodeURIComponent("" + mapLisItemDeployId) + "&";
        if (deleteOld === null)
            throw new Error("The parameter 'deleteOld' cannot be null.");
        else if (deleteOld !== undefined)
            url_ += "deleteOld=" + encodeURIComponent("" + deleteOld) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCancel(_response));
        });
    }

    protected processCancel(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 自动匹配检验项
     * @return Success
     */
    auto(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/Match/Auto";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAuto(_response));
        });
    }

    protected processAuto(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 根据Id删除数据
     * @return Success
     */
    delete28(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete28(_response));
        });
    }

    protected processDelete28(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class MapLisItemIhdisServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * iHDIS检验项明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    mapLisItemIhdisGET(id: string , cancelToken?: CancelToken | undefined): Promise<MapLisItemIhdisViewResultEntry> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemIhdisGET(_response));
        });
    }

    protected processMapLisItemIhdisGET(response: AxiosResponse): Promise<MapLisItemIhdisViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemIhdisViewResultEntry.fromJS(resultData200);
            return Promise.resolve<MapLisItemIhdisViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemIhdisViewResultEntry>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    mapLisItemIhdisPOST(id: string, body: MapLisItemIhdisEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemIhdisPOST(_response));
        });
    }

    protected processMapLisItemIhdisPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter30(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemIhdisViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter30(_response));
        });
    }

    protected processFilter30(response: AxiosResponse): Promise<MapLisItemIhdisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemIhdisViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemIhdisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemIhdisViewResult>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 通过关键字查询支持：名称:Name 编码:CodeI
     * @param filter (optional) 查询条件
     * @param mapLisTypeId (optional) 检验项分类ID，如果填写，查询的结果将过滤该分类已经存在的子项
     * @param key (optional) 名称:Name 编码:CodeI
     * @return Success
     */
    getByKey2(filter: string | undefined, mapLisTypeId: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemIhdisViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/GetByKey?";
        if (mapLisTypeId === null)
            throw new Error("The parameter 'mapLisTypeId' cannot be null.");
        else if (mapLisTypeId !== undefined)
            url_ += "mapLisTypeId=" + encodeURIComponent("" + mapLisTypeId) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByKey2(_response));
        });
    }

    protected processGetByKey2(response: AxiosResponse): Promise<MapLisItemIhdisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemIhdisViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemIhdisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemIhdisViewResult>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 获取常用检验项
     * @return Success
     */
    getCommonItems(  cancelToken?: CancelToken | undefined): Promise<MapLisItemIhdisViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/GetCommonItems";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCommonItems(_response));
        });
    }

    protected processGetCommonItems(response: AxiosResponse): Promise<MapLisItemIhdisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemIhdisViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemIhdisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemIhdisViewResult>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 是否匹配
     * @param isMatched (optional) 查询条件:已经匹配:1;未匹配:2
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    isMatched2(isMatched: number | undefined, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemIhdisViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/IsMatched?";
        if (isMatched === null)
            throw new Error("The parameter 'isMatched' cannot be null.");
        else if (isMatched !== undefined)
            url_ += "isMatched=" + encodeURIComponent("" + isMatched) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIsMatched2(_response));
        });
    }

    protected processIsMatched2(response: AxiosResponse): Promise<MapLisItemIhdisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemIhdisViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemIhdisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemIhdisViewResult>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    mapLisItemIhdisPOST2(body: MapLisItemIhdisEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemIhdisPOST2(_response));
        });
    }

    protected processMapLisItemIhdisPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 根据Id删除数据
     * @return Success
     */
    delete29(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete29(_response));
        });
    }

    protected processDelete29(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class MapLisTypeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 检验报告分类 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    mapLisTypeGET(id: string , cancelToken?: CancelToken | undefined): Promise<MapLisTypeResultEntry> {
        let url_ = this.baseUrl + "/api/MapLisType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisTypeGET(_response));
        });
    }

    protected processMapLisTypeGET(response: AxiosResponse): Promise<MapLisTypeResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisTypeResultEntry.fromJS(resultData200);
            return Promise.resolve<MapLisTypeResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisTypeResultEntry>(null as any);
    }

    /**
     * 检验报告分类 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    mapLisTypePOST(id: string, body: MapLisTypeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisTypePOST(_response));
        });
    }

    protected processMapLisTypePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告分类 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter31(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisTypeResult> {
        let url_ = this.baseUrl + "/api/MapLisType/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter31(_response));
        });
    }

    protected processFilter31(response: AxiosResponse): Promise<MapLisTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisTypeResult.fromJS(resultData200);
            return Promise.resolve<MapLisTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisTypeResult>(null as any);
    }

    /**
     * 通过关键字查询支持：名称:Name
     * @param filter (optional) 查询条件
     * @param key (optional) 名称:Name
     * @return Success
     */
    getByKey3(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisTypeResult> {
        let url_ = this.baseUrl + "/api/MapLisType/GetByKey?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByKey3(_response));
        });
    }

    protected processGetByKey3(response: AxiosResponse): Promise<MapLisTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisTypeResult.fromJS(resultData200);
            return Promise.resolve<MapLisTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisTypeResult>(null as any);
    }

    /**
     * 检验报告分类 -- 查询可以用于化验类统计的数据
     * @return Success
     */
    forReport2(  cancelToken?: CancelToken | undefined): Promise<MapLisTypeResult> {
        let url_ = this.baseUrl + "/api/MapLisType/ForReport";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processForReport2(_response));
        });
    }

    protected processForReport2(response: AxiosResponse): Promise<MapLisTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisTypeResult.fromJS(resultData200);
            return Promise.resolve<MapLisTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisTypeResult>(null as any);
    }

    /**
     * 检验报告分类 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    mapLisTypePOST2(body: MapLisTypeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisTypePOST2(_response));
        });
    }

    protected processMapLisTypePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告分类 -- 根据Id删除数据
     * @return Success
     */
    delete30(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisType/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete30(_response));
        });
    }

    protected processDelete30(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PinyinWubiCodeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 根据字符串获取拼音五笔简码
     * @return Success
     */
    pinyinWubiCode(name: string , cancelToken?: CancelToken | undefined): Promise<PinyinWubiCodeViewResultEntry> {
        let url_ = this.baseUrl + "/api/PinyinWubiCode/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPinyinWubiCode(_response));
        });
    }

    protected processPinyinWubiCode(response: AxiosResponse): Promise<PinyinWubiCodeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PinyinWubiCodeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PinyinWubiCodeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PinyinWubiCodeViewResultEntry>(null as any);
    }
}

export class PrognosisFormTypeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 转归报告分类 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    prognosisFormTypeGET(id: string , cancelToken?: CancelToken | undefined): Promise<PrognosisFormTypeResultEntry> {
        let url_ = this.baseUrl + "/api/PrognosisFormType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosisFormTypeGET(_response));
        });
    }

    protected processPrognosisFormTypeGET(response: AxiosResponse): Promise<PrognosisFormTypeResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrognosisFormTypeResultEntry.fromJS(resultData200);
            return Promise.resolve<PrognosisFormTypeResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrognosisFormTypeResultEntry>(null as any);
    }

    /**
     * 转归报告分类 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    prognosisFormTypePOST(id: string, body: PrognosisFormTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisFormType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosisFormTypePOST(_response));
        });
    }

    protected processPrognosisFormTypePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 转归报告分类 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter32(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PrognosisFormTypeResult> {
        let url_ = this.baseUrl + "/api/PrognosisFormType/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter32(_response));
        });
    }

    protected processFilter32(response: AxiosResponse): Promise<PrognosisFormTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrognosisFormTypeResult.fromJS(resultData200);
            return Promise.resolve<PrognosisFormTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrognosisFormTypeResult>(null as any);
    }

    /**
     * 自定义表单分类大类 -- 根据条件查询数据
     * @return Success
     */
    getCategories(  cancelToken?: CancelToken | undefined): Promise<StringResult> {
        let url_ = this.baseUrl + "/api/PrognosisFormType/GetCategories";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCategories(_response));
        });
    }

    protected processGetCategories(response: AxiosResponse): Promise<StringResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = StringResult.fromJS(resultData200);
            return Promise.resolve<StringResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<StringResult>(null as any);
    }

    /**
     * 转归报告分类 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    prognosisFormTypePOST2(body: PrognosisFormTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisFormType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosisFormTypePOST2(_response));
        });
    }

    protected processPrognosisFormTypePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 转归报告分类 -- 根据Id删除数据
     * @return Success
     */
    delete31(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisFormType/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete31(_response));
        });
    }

    protected processDelete31(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RepositoryComplicationServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 知识库-并发症 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    repositoryComplicationGET(id: string , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationResultEntry> {
        let url_ = this.baseUrl + "/api/RepositoryComplication/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationGET(_response));
        });
    }

    protected processRepositoryComplicationGET(response: AxiosResponse): Promise<RepositoryComplicationResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationResultEntry.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationResultEntry>(null as any);
    }

    /**
     * 知识库-并发症 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    repositoryComplicationPOST(id: string, body: RepositoryComplicationViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplication/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationPOST(_response));
        });
    }

    protected processRepositoryComplicationPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter33(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationResult> {
        let url_ = this.baseUrl + "/api/RepositoryComplication/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter33(_response));
        });
    }

    protected processFilter33(response: AxiosResponse): Promise<RepositoryComplicationResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationResult.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationResult>(null as any);
    }

    /**
     * 知识库-并发症 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    repositoryComplicationPOST2(body: RepositoryComplicationViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplication";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationPOST2(_response));
        });
    }

    protected processRepositoryComplicationPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症 -- 根据Id删除数据
     * @return Success
     */
    delete32(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplication/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete32(_response));
        });
    }

    protected processDelete32(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RepositoryComplicationCauseServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 知识库-并发症原因 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    repositoryComplicationCauseGET(id: string , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationCauseViewResultEntry> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationCauseGET(_response));
        });
    }

    protected processRepositoryComplicationCauseGET(response: AxiosResponse): Promise<RepositoryComplicationCauseViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationCauseViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationCauseViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationCauseViewResultEntry>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    repositoryComplicationCausePOST(id: string, body: RepositoryComplicationCauseEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationCausePOST(_response));
        });
    }

    protected processRepositoryComplicationCausePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 根据并发症标识查询
     * @param repositoryComplicationId 并发症标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    repositoryComplicationGET2(repositoryComplicationId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationCauseViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/RepositoryComplication/{repositoryComplicationId}";
        if (repositoryComplicationId === undefined || repositoryComplicationId === null)
            throw new Error("The parameter 'repositoryComplicationId' must be defined.");
        url_ = url_.replace("{repositoryComplicationId}", encodeURIComponent("" + repositoryComplicationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationGET2(_response));
        });
    }

    protected processRepositoryComplicationGET2(response: AxiosResponse): Promise<RepositoryComplicationCauseViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationCauseViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationCauseViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationCauseViewResult>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter34(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationCauseViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter34(_response));
        });
    }

    protected processFilter34(response: AxiosResponse): Promise<RepositoryComplicationCauseViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationCauseViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationCauseViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationCauseViewResult>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    repositoryComplicationCausePOST2(body: RepositoryComplicationCauseEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationCausePOST2(_response));
        });
    }

    protected processRepositoryComplicationCausePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRepositoryComplicationCause(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRepositoryComplicationCause(_response));
        });
    }

    protected processMoveNodeForRepositoryComplicationCause(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRepositoryComplicationCause(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRepositoryComplicationCause(_response));
        });
    }

    protected processUpNodeForRepositoryComplicationCause(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRepositoryComplicationCause(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRepositoryComplicationCause(_response));
        });
    }

    protected processDownNodeForRepositoryComplicationCause(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 根据Id删除数据
     * @return Success
     */
    delete33(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete33(_response));
        });
    }

    protected processDelete33(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RepositoryComplicationDisposeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 知识库-并发症处理 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    repositoryComplicationDisposeGET(id: string , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationDisposeViewResultEntry> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationDisposeGET(_response));
        });
    }

    protected processRepositoryComplicationDisposeGET(response: AxiosResponse): Promise<RepositoryComplicationDisposeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationDisposeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationDisposeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationDisposeViewResultEntry>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    repositoryComplicationDisposePOST(id: string, body: RepositoryComplicationDisposeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationDisposePOST(_response));
        });
    }

    protected processRepositoryComplicationDisposePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 根据并发症标识查询
     * @param repositoryComplicationId 并发症标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    repositoryComplicationGET3(repositoryComplicationId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationDisposeViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/RepositoryComplication/{repositoryComplicationId}";
        if (repositoryComplicationId === undefined || repositoryComplicationId === null)
            throw new Error("The parameter 'repositoryComplicationId' must be defined.");
        url_ = url_.replace("{repositoryComplicationId}", encodeURIComponent("" + repositoryComplicationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationGET3(_response));
        });
    }

    protected processRepositoryComplicationGET3(response: AxiosResponse): Promise<RepositoryComplicationDisposeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationDisposeViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationDisposeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationDisposeViewResult>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter35(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationDisposeViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter35(_response));
        });
    }

    protected processFilter35(response: AxiosResponse): Promise<RepositoryComplicationDisposeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationDisposeViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationDisposeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationDisposeViewResult>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    repositoryComplicationDisposePOST2(body: RepositoryComplicationDisposeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationDisposePOST2(_response));
        });
    }

    protected processRepositoryComplicationDisposePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRepositoryComplicationDispose(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRepositoryComplicationDispose(_response));
        });
    }

    protected processMoveNodeForRepositoryComplicationDispose(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRepositoryComplicationDispose(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRepositoryComplicationDispose(_response));
        });
    }

    protected processUpNodeForRepositoryComplicationDispose(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRepositoryComplicationDispose(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRepositoryComplicationDispose(_response));
        });
    }

    protected processDownNodeForRepositoryComplicationDispose(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 根据Id删除数据
     * @return Success
     */
    delete34(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete34(_response));
        });
    }

    protected processDelete34(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RepositoryHealtheducationDetailServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 宣教内容明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    repositoryHealtheducationDetailGET(id: string , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationDetailGET(_response));
        });
    }

    protected processRepositoryHealtheducationDetailGET(response: AxiosResponse): Promise<RepositoryHealtheducationDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationDetailViewResultEntry>(null as any);
    }

    /**
     * 宣教内容明细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    repositoryHealtheducationDetailPOST(id: string, body: RepositoryHealtheducationDetailEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationDetailPOST(_response));
        });
    }

    protected processRepositoryHealtheducationDetailPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter36(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationDetailViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter36(_response));
        });
    }

    protected processFilter36(response: AxiosResponse): Promise<RepositoryHealtheducationDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationDetailViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationDetailViewResult>(null as any);
    }

    /**
     * 宣教内容明细 -- 根据条件查询数据
     * @param repositoryHealtheducationTypeId 宣教内容分类标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail2(repositoryHealtheducationTypeId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationDetailViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/Detail/{repositoryHealtheducationTypeId}";
        if (repositoryHealtheducationTypeId === undefined || repositoryHealtheducationTypeId === null)
            throw new Error("The parameter 'repositoryHealtheducationTypeId' must be defined.");
        url_ = url_.replace("{repositoryHealtheducationTypeId}", encodeURIComponent("" + repositoryHealtheducationTypeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail2(_response));
        });
    }

    protected processDetail2(response: AxiosResponse): Promise<RepositoryHealtheducationDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationDetailViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationDetailViewResult>(null as any);
    }

    /**
     * 宣教内容明细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    repositoryHealtheducationDetailPOST2(body: RepositoryHealtheducationDetailEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationDetailPOST2(_response));
        });
    }

    protected processRepositoryHealtheducationDetailPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRepositoryHealtheducationDetail(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRepositoryHealtheducationDetail(_response));
        });
    }

    protected processMoveNodeForRepositoryHealtheducationDetail(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRepositoryHealtheducationDetail(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRepositoryHealtheducationDetail(_response));
        });
    }

    protected processUpNodeForRepositoryHealtheducationDetail(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRepositoryHealtheducationDetail(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRepositoryHealtheducationDetail(_response));
        });
    }

    protected processDownNodeForRepositoryHealtheducationDetail(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细 -- 根据Id删除数据
     * @return Success
     */
    delete35(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete35(_response));
        });
    }

    protected processDelete35(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RepositoryHealtheducationDetailFileServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 宣教内容明细附件 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    repositoryHealtheducationDetailFileGET(id: string , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationDetailFileResultEntry> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationDetailFileGET(_response));
        });
    }

    protected processRepositoryHealtheducationDetailFileGET(response: AxiosResponse): Promise<RepositoryHealtheducationDetailFileResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationDetailFileResultEntry.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationDetailFileResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationDetailFileResultEntry>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    repositoryHealtheducationDetailFilePOST(id: string, body: RepositoryHealtheducationDetailFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationDetailFilePOST(_response));
        });
    }

    protected processRepositoryHealtheducationDetailFilePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter37(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationDetailFileResult> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter37(_response));
        });
    }

    protected processFilter37(response: AxiosResponse): Promise<RepositoryHealtheducationDetailFileResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationDetailFileResult.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationDetailFileResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationDetailFileResult>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    repositoryHealtheducationDetailFilePOST2(body: RepositoryHealtheducationDetailFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationDetailFilePOST2(_response));
        });
    }

    protected processRepositoryHealtheducationDetailFilePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRepositoryHealtheducationDetailFile(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRepositoryHealtheducationDetailFile(_response));
        });
    }

    protected processMoveNodeForRepositoryHealtheducationDetailFile(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRepositoryHealtheducationDetailFile(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRepositoryHealtheducationDetailFile(_response));
        });
    }

    protected processUpNodeForRepositoryHealtheducationDetailFile(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRepositoryHealtheducationDetailFile(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRepositoryHealtheducationDetailFile(_response));
        });
    }

    protected processDownNodeForRepositoryHealtheducationDetailFile(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 根据Id删除数据
     * @return Success
     */
    delete36(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete36(_response));
        });
    }

    protected processDelete36(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RepositoryHealtheducationTypeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 宣教内容分类 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    repositoryHealtheducationTypeGET(id: string , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationTypeViewResultEntry> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationTypeGET(_response));
        });
    }

    protected processRepositoryHealtheducationTypeGET(response: AxiosResponse): Promise<RepositoryHealtheducationTypeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationTypeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationTypeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationTypeViewResultEntry>(null as any);
    }

    /**
     * 宣教内容分类 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    repositoryHealtheducationTypePOST(id: string, body: RepositoryHealtheducationTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationTypePOST(_response));
        });
    }

    protected processRepositoryHealtheducationTypePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容分类 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter38(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationTypeViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter38(_response));
        });
    }

    protected processFilter38(response: AxiosResponse): Promise<RepositoryHealtheducationTypeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationTypeViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationTypeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationTypeViewResult>(null as any);
    }

    /**
     * 宣教内容分类 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    repositoryHealtheducationTypePOST2(body: RepositoryHealtheducationTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationTypePOST2(_response));
        });
    }

    protected processRepositoryHealtheducationTypePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容分类 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRepositoryHealtheducationType(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRepositoryHealtheducationType(_response));
        });
    }

    protected processMoveNodeForRepositoryHealtheducationType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容分类 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRepositoryHealtheducationType(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRepositoryHealtheducationType(_response));
        });
    }

    protected processUpNodeForRepositoryHealtheducationType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容分类 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRepositoryHealtheducationType(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRepositoryHealtheducationType(_response));
        });
    }

    protected processDownNodeForRepositoryHealtheducationType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容分类 -- 根据Id删除数据
     * @return Success
     */
    delete37(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete37(_response));
        });
    }

    protected processDelete37(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomAccountGroupServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 账套分组 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomAccountGroupGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomAccountGroupResultEntry> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomAccountGroupGET(_response));
        });
    }

    protected processRoomAccountGroupGET(response: AxiosResponse): Promise<RoomAccountGroupResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomAccountGroupResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomAccountGroupResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomAccountGroupResultEntry>(null as any);
    }

    /**
     * 账套分组 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomAccountGroupPOST(id: string, body: RoomAccountGroupViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomAccountGroupPOST(_response));
        });
    }

    protected processRoomAccountGroupPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套分组 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter39(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomAccountGroupResult> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter39(_response));
        });
    }

    protected processFilter39(response: AxiosResponse): Promise<RoomAccountGroupResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomAccountGroupResult.fromJS(resultData200);
            return Promise.resolve<RoomAccountGroupResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomAccountGroupResult>(null as any);
    }

    /**
     * 账套分组 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomAccountGroupPOST2(body: RoomAccountGroupViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomAccountGroupPOST2(_response));
        });
    }

    protected processRoomAccountGroupPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套分组 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRoomAccountGroup(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRoomAccountGroup(_response));
        });
    }

    protected processMoveNodeForRoomAccountGroup(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套分组 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRoomAccountGroup(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRoomAccountGroup(_response));
        });
    }

    protected processUpNodeForRoomAccountGroup(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套分组 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRoomAccountGroup(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRoomAccountGroup(_response));
        });
    }

    protected processDownNodeForRoomAccountGroup(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套分组 -- 根据Id删除数据
     * @return Success
     */
    delete38(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete38(_response));
        });
    }

    protected processDelete38(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomAccountGroupItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 账套详细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomAccountGroupItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomAccountGroupItemResultEntry> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomAccountGroupItemGET(_response));
        });
    }

    protected processRoomAccountGroupItemGET(response: AxiosResponse): Promise<RoomAccountGroupItemResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomAccountGroupItemResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomAccountGroupItemResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomAccountGroupItemResultEntry>(null as any);
    }

    /**
     * 账套详细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomAccountGroupItemPOST(id: string, body: RoomAccountGroupItemViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomAccountGroupItemPOST(_response));
        });
    }

    protected processRoomAccountGroupItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套详细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter40(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomAccountGroupItemResult> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter40(_response));
        });
    }

    protected processFilter40(response: AxiosResponse): Promise<RoomAccountGroupItemResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomAccountGroupItemResult.fromJS(resultData200);
            return Promise.resolve<RoomAccountGroupItemResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomAccountGroupItemResult>(null as any);
    }

    /**
     * 账套详细(向下递归查询所有子项) -- 根据账套分组标识查询信息
     * @param roomAccountGroupId 账套分组标识(未分类填0)
     * @param filter (optional) 查询条件
     * @return Success
     */
    byRoomAccountGroupId(roomAccountGroupId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<InventoryViewResult> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem/ByRoomAccountGroupId/{roomAccountGroupId}";
        if (roomAccountGroupId === undefined || roomAccountGroupId === null)
            throw new Error("The parameter 'roomAccountGroupId' must be defined.");
        url_ = url_.replace("{roomAccountGroupId}", encodeURIComponent("" + roomAccountGroupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByRoomAccountGroupId(_response));
        });
    }

    protected processByRoomAccountGroupId(response: AxiosResponse): Promise<InventoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = InventoryViewResult.fromJS(resultData200);
            return Promise.resolve<InventoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InventoryViewResult>(null as any);
    }

    /**
     * 账套详细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomAccountGroupItemPOST2(body: RoomAccountGroupItemViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomAccountGroupItemPOST2(_response));
        });
    }

    protected processRoomAccountGroupItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套详细 -- 批量新增数据
     * @param body (optional)
     * @return Success
     */
    batch2(body: RoomAccountGroupItemViewModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch2(_response));
        });
    }

    protected processBatch2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套详细 -- 根据Id删除数据
     * @return Success
     */
    delete39(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete39(_response));
        });
    }

    protected processDelete39(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomEarlyWarningRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 预警记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter41(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomEarlyWarningRecordViewResult> {
        let url_ = this.baseUrl + "/api/RoomEarlyWarningRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter41(_response));
        });
    }

    protected processFilter41(response: AxiosResponse): Promise<RoomEarlyWarningRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomEarlyWarningRecordViewResult.fromJS(resultData200);
            return Promise.resolve<RoomEarlyWarningRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomEarlyWarningRecordViewResult>(null as any);
    }
}

export class RoomItemListInventoryServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 库存统计
     * @param key (optional) 查询条件
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @return Success
     */
    inventoryStatistics(key: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<InventoryStatisticsViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemListInventory/InventoryStatistics?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInventoryStatistics(_response));
        });
    }

    protected processInventoryStatistics(response: AxiosResponse): Promise<InventoryStatisticsViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = InventoryStatisticsViewResult.fromJS(resultData200);
            return Promise.resolve<InventoryStatisticsViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InventoryStatisticsViewResult>(null as any);
    }

    /**
     * 项目库存 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 项目名称
     * @return Success
     */
    filter42(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemListInventoryViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemListInventory/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter42(_response));
        });
    }

    protected processFilter42(response: AxiosResponse): Promise<RoomItemListInventoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemListInventoryViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemListInventoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemListInventoryViewResult>(null as any);
    }

    /**
     * 项目库存 -- 患者出库查询
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientOut(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientOutViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemListInventory/PatientOut";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientOut(_response));
        });
    }

    protected processPatientOut(response: AxiosResponse): Promise<PatientOutViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientOutViewResult.fromJS(resultData200);
            return Promise.resolve<PatientOutViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientOutViewResult>(null as any);
    }

    /**
     * 项目库存 -- 患者出库明细查询
     * @param filter (optional) 查询条件
     * @param roomItemListId (optional) 项目
     * @return Success
     */
    patientOutDetail(filter: string | undefined, roomItemListId: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientOutItemViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemListInventory/PatientOutDetail?";
        if (roomItemListId === null)
            throw new Error("The parameter 'roomItemListId' cannot be null.");
        else if (roomItemListId !== undefined)
            url_ += "roomItemListId=" + encodeURIComponent("" + roomItemListId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientOutDetail(_response));
        });
    }

    protected processPatientOutDetail(response: AxiosResponse): Promise<PatientOutItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientOutItemViewResult.fromJS(resultData200);
            return Promise.resolve<PatientOutItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientOutItemViewResult>(null as any);
    }

    /**
     * 期初库存 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    updateInitial(id: string, body: RoomItemListInventoryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemListInventory/UpdateInitial/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateInitial(_response));
        });
    }

    protected processUpdateInitial(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomItemListInventoryRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 项目库存记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomItemListInventoryRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomItemListInventoryRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomItemListInventoryRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemListInventoryRecordGET(_response));
        });
    }

    protected processRoomItemListInventoryRecordGET(response: AxiosResponse): Promise<RoomItemListInventoryRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemListInventoryRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomItemListInventoryRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemListInventoryRecordViewResultEntry>(null as any);
    }

    /**
     * 项目库存记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomItemListInventoryRecordPOST(id: string, body: RoomItemListInventoryRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemListInventoryRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemListInventoryRecordPOST(_response));
        });
    }

    protected processRoomItemListInventoryRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目库存记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter43(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemListInventoryRecordViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemListInventoryRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter43(_response));
        });
    }

    protected processFilter43(response: AxiosResponse): Promise<RoomItemListInventoryRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemListInventoryRecordViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemListInventoryRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemListInventoryRecordViewResult>(null as any);
    }

    /**
     * 项目库存记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomItemListInventoryRecordPOST2(body: RoomItemListInventoryRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemListInventoryRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemListInventoryRecordPOST2(_response));
        });
    }

    protected processRoomItemListInventoryRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目库存记录 -- 根据Id删除数据
     * @return Success
     */
    delete40(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemListInventoryRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete40(_response));
        });
    }

    protected processDelete40(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomItemPriceServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 项目调价记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomItemPriceGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomItemPriceViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomItemPrice/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemPriceGET(_response));
        });
    }

    protected processRoomItemPriceGET(response: AxiosResponse): Promise<RoomItemPriceViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemPriceViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomItemPriceViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemPriceViewResultEntry>(null as any);
    }

    /**
     * 项目调价记录 -- 根据项目ID查询数据
     * @param roomItemListId 项目ID
     * @param filter (optional) 查询条件
     * @return Success
     */
    roomItemList(roomItemListId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemPriceViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemPrice/RoomItemList/{roomItemListId}";
        if (roomItemListId === undefined || roomItemListId === null)
            throw new Error("The parameter 'roomItemListId' must be defined.");
        url_ = url_.replace("{roomItemListId}", encodeURIComponent("" + roomItemListId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemList(_response));
        });
    }

    protected processRoomItemList(response: AxiosResponse): Promise<RoomItemPriceViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemPriceViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemPriceViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemPriceViewResult>(null as any);
    }

    /**
     * 项目调价记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 项目 - 分类/名称/简称/商品名/用法/厂家/拼音码/五笔码
     * @return Success
     */
    filter44(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemPriceViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemPrice/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter44(_response));
        });
    }

    protected processFilter44(response: AxiosResponse): Promise<RoomItemPriceViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemPriceViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemPriceViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemPriceViewResult>(null as any);
    }

    /**
     * 项目调价记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomItemPricePOST(body: RoomItemPriceEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemPrice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemPricePOST(_response));
        });
    }

    protected processRoomItemPricePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomItemTypeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 项目分类 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomItemTypeGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomItemTypeResultEntry> {
        let url_ = this.baseUrl + "/api/RoomItemType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemTypeGET(_response));
        });
    }

    protected processRoomItemTypeGET(response: AxiosResponse): Promise<RoomItemTypeResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemTypeResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomItemTypeResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemTypeResultEntry>(null as any);
    }

    /**
     * 项目分类 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomItemTypePOST(id: string, body: RoomItemTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemTypePOST(_response));
        });
    }

    protected processRoomItemTypePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目分类 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter45(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemTypeViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemType/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter45(_response));
        });
    }

    protected processFilter45(response: AxiosResponse): Promise<RoomItemTypeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemTypeViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemTypeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemTypeViewResult>(null as any);
    }

    /**
     * 项目分类 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomItemTypePOST2(body: RoomItemTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemTypePOST2(_response));
        });
    }

    protected processRoomItemTypePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目分类 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRoomItemType(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemType/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRoomItemType(_response));
        });
    }

    protected processMoveNodeForRoomItemType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目分类 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRoomItemType(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemType/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRoomItemType(_response));
        });
    }

    protected processUpNodeForRoomItemType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目分类 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRoomItemType(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemType/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRoomItemType(_response));
        });
    }

    protected processDownNodeForRoomItemType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目分类 -- 根据Id删除数据
     * @return Success
     */
    delete41(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemType/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete41(_response));
        });
    }

    protected processDelete41(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomManufacturerServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 药品耗材生产厂家信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomManufacturerGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomManufacturerViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomManufacturerGET(_response));
        });
    }

    protected processRoomManufacturerGET(response: AxiosResponse): Promise<RoomManufacturerViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomManufacturerViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomManufacturerViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomManufacturerViewResultEntry>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomManufacturerPOST(id: string, body: RoomManufacturerEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomManufacturerPOST(_response));
        });
    }

    protected processRoomManufacturerPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter46(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomManufacturerViewResult> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter46(_response));
        });
    }

    protected processFilter46(response: AxiosResponse): Promise<RoomManufacturerViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomManufacturerViewResult.fromJS(resultData200);
            return Promise.resolve<RoomManufacturerViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomManufacturerViewResult>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomManufacturerPOST2(body: RoomManufacturerEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomManufacturer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomManufacturerPOST2(_response));
        });
    }

    protected processRoomManufacturerPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRoomManufacturer(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRoomManufacturer(_response));
        });
    }

    protected processMoveNodeForRoomManufacturer(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRoomManufacturer(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRoomManufacturer(_response));
        });
    }

    protected processUpNodeForRoomManufacturer(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRoomManufacturer(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRoomManufacturer(_response));
        });
    }

    protected processDownNodeForRoomManufacturer(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 根据Id删除数据
     * @return Success
     */
    delete42(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete42(_response));
        });
    }

    protected processDelete42(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomSupplierServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 供应商信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomSupplierGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomSupplierViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomSupplier/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomSupplierGET(_response));
        });
    }

    protected processRoomSupplierGET(response: AxiosResponse): Promise<RoomSupplierViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomSupplierViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomSupplierViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomSupplierViewResultEntry>(null as any);
    }

    /**
     * 供应商信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomSupplierPOST(id: string, body: RoomSupplierEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomSupplier/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomSupplierPOST(_response));
        });
    }

    protected processRoomSupplierPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 供应商信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter47(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomSupplierViewResult> {
        let url_ = this.baseUrl + "/api/RoomSupplier/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter47(_response));
        });
    }

    protected processFilter47(response: AxiosResponse): Promise<RoomSupplierViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomSupplierViewResult.fromJS(resultData200);
            return Promise.resolve<RoomSupplierViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomSupplierViewResult>(null as any);
    }

    /**
     * 供应商信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomSupplierPOST2(body: RoomSupplierEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomSupplier";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomSupplierPOST2(_response));
        });
    }

    protected processRoomSupplierPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 供应商信息 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRoomSupplier(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomSupplier/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRoomSupplier(_response));
        });
    }

    protected processMoveNodeForRoomSupplier(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 供应商信息 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRoomSupplier(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomSupplier/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRoomSupplier(_response));
        });
    }

    protected processUpNodeForRoomSupplier(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 供应商信息 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRoomSupplier(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomSupplier/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRoomSupplier(_response));
        });
    }

    protected processDownNodeForRoomSupplier(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 供应商信息 -- 根据Id删除数据
     * @return Success
     */
    delete43(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomSupplier/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete43(_response));
        });
    }

    protected processDelete43(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysMenuExternalLinkServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 菜单外链 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysMenuExternalLinkGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysMenuExternalLinkViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysMenuExternalLink/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysMenuExternalLinkGET(_response));
        });
    }

    protected processSysMenuExternalLinkGET(response: AxiosResponse): Promise<SysMenuExternalLinkViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysMenuExternalLinkViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysMenuExternalLinkViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysMenuExternalLinkViewResultEntry>(null as any);
    }

    /**
     * 菜单外链 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysMenuExternalLinkPOST(id: string, body: SysMenuExternalLinkEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysMenuExternalLink/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysMenuExternalLinkPOST(_response));
        });
    }

    protected processSysMenuExternalLinkPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 菜单外链 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter48(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysMenuExternalLinkViewResult> {
        let url_ = this.baseUrl + "/api/SysMenuExternalLink/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter48(_response));
        });
    }

    protected processFilter48(response: AxiosResponse): Promise<SysMenuExternalLinkViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysMenuExternalLinkViewResult.fromJS(resultData200);
            return Promise.resolve<SysMenuExternalLinkViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysMenuExternalLinkViewResult>(null as any);
    }

    /**
     * 菜单外链 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysMenuExternalLinkPOST2(body: SysMenuExternalLinkEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysMenuExternalLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysMenuExternalLinkPOST2(_response));
        });
    }

    protected processSysMenuExternalLinkPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 菜单外链 -- 根据Id删除数据
     * @return Success
     */
    delete44(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysMenuExternalLink/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete44(_response));
        });
    }

    protected processDelete44(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class TokenServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 根据登录名或工号获取用户名
     * @param loginKey 登录名或工号
     * @return Success
     */
    tokenGET(loginKey: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Token/{loginKey}";
        if (loginKey === undefined || loginKey === null)
            throw new Error("The parameter 'loginKey' must be defined.");
        url_ = url_.replace("{loginKey}", encodeURIComponent("" + loginKey));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTokenGET(_response));
        });
    }

    protected processTokenGET(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 创建用户身份令牌
     * @param body (optional)
     * @return Success
     */
    tokenPOST(body: LoginViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<TokenViewExtResultEntry> {
        let url_ = this.baseUrl + "/api/Token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTokenPOST(_response));
        });
    }

    protected processTokenPOST(response: AxiosResponse): Promise<TokenViewExtResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TokenViewExtResultEntry.fromJS(resultData200);
            return Promise.resolve<TokenViewExtResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TokenViewExtResultEntry>(null as any);
    }

    /**
     * 注销
     * @return Success
     */
    logout(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Token/Logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLogout(_response));
        });
    }

    protected processLogout(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 测试身份
     * @return Success
     */
    tester(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Token/tester";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTester(_response));
        });
    }

    protected processTester(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 激活 -- 激活成功，返回注册信息；激活失败，返回原因
     * @param body (optional)
     * @return Success
     */
    activate(body: AuthorizeCodeView | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Token/Activate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processActivate(_response));
        });
    }

    protected processActivate(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 验证 -- 验证通过，返回注册信息；不通过，返回注册码
     * @return Success
     */
    verify(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Token/Verify";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processVerify(_response));
        });
    }

    protected processVerify(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

/** 抗凝剂类型药品 */
export class AntiTmplTypeDrugEditModel implements IAntiTmplTypeDrugEditModel {
    tmplTypeId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IAntiTmplTypeDrugEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tmplTypeId = _data["tmplTypeId"];
            this.roomItemListId = _data["roomItemListId"];
            this.frequently = _data["frequently"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): AntiTmplTypeDrugEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new AntiTmplTypeDrugEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tmplTypeId"] = this.tmplTypeId;
        data["roomItemListId"] = this.roomItemListId;
        data["frequently"] = this.frequently;
        data["remark"] = this.remark;
        return data;
    }
}

/** 抗凝剂类型药品 */
export interface IAntiTmplTypeDrugEditModel {
    tmplTypeId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 抗凝剂类型药品 */
export class AntiTmplTypeDrugView implements IAntiTmplTypeDrugView {
    tmplTypeId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;

    constructor(data?: IAntiTmplTypeDrugView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tmplTypeId = _data["tmplTypeId"];
            this.roomItemListId = _data["roomItemListId"];
            this.frequently = _data["frequently"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.sellingPrice = _data["sellingPrice"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.spec = _data["spec"];
            this.manufacturer = _data["manufacturer"];
        }
    }

    static fromJS(data: any): AntiTmplTypeDrugView {
        data = typeof data === 'object' ? data : {};
        let result = new AntiTmplTypeDrugView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tmplTypeId"] = this.tmplTypeId;
        data["roomItemListId"] = this.roomItemListId;
        data["frequently"] = this.frequently;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["sellingPrice"] = this.sellingPrice;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["spec"] = this.spec;
        data["manufacturer"] = this.manufacturer;
        return data;
    }
}

/** 抗凝剂类型药品 */
export interface IAntiTmplTypeDrugView {
    tmplTypeId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
}

/** Reponse */
export class AntiTmplTypeDrugViewResult implements IAntiTmplTypeDrugViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AntiTmplTypeDrugView[] | undefined;

    constructor(data?: IAntiTmplTypeDrugViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AntiTmplTypeDrugView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AntiTmplTypeDrugViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new AntiTmplTypeDrugViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IAntiTmplTypeDrugViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AntiTmplTypeDrugView[] | undefined;
}

/** Reponse */
export class AntiTmplTypeDrugViewResultEntry implements IAntiTmplTypeDrugViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: AntiTmplTypeDrugView;

    constructor(data?: IAntiTmplTypeDrugViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? AntiTmplTypeDrugView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AntiTmplTypeDrugViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new AntiTmplTypeDrugViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IAntiTmplTypeDrugViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: AntiTmplTypeDrugView;
}

/** 注册码 */
export class AuthorizeCodeView implements IAuthorizeCodeView {
    /** 注册码 */
    code?: string | undefined;

    constructor(data?: IAuthorizeCodeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): AuthorizeCodeView {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorizeCodeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        return data;
    }
}

/** 注册码 */
export interface IAuthorizeCodeView {
    /** 注册码 */
    code?: string | undefined;
}

export class AuthorizeInfo implements IAuthorizeInfo {
    authEdition?: Edition;
    registerCode?: string | undefined;
    expiryPermanent?: boolean;
    expiryStart?: dayjs.Dayjs;
    expiryEnd?: dayjs.Dayjs;
    checkCode?: string | undefined;
    randomSeed?: number;
    hospital?: string | undefined;
    product?: string | undefined;
    readonly expireDay?: number;

    constructor(data?: IAuthorizeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.authEdition = _data["authEdition"];
            this.registerCode = _data["registerCode"];
            this.expiryPermanent = _data["expiryPermanent"];
            this.expiryStart = _data["expiryStart"] ? dayjs(_data["expiryStart"].toString()) : <any>undefined;
            this.expiryEnd = _data["expiryEnd"] ? dayjs(_data["expiryEnd"].toString()) : <any>undefined;
            this.checkCode = _data["checkCode"];
            this.randomSeed = _data["randomSeed"];
            this.hospital = _data["hospital"];
            this.product = _data["product"];
            (<any>this).expireDay = _data["expireDay"];
        }
    }

    static fromJS(data: any): AuthorizeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorizeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authEdition"] = this.authEdition;
        data["registerCode"] = this.registerCode;
        data["expiryPermanent"] = this.expiryPermanent;
        data["expiryStart"] = this.expiryStart ? this.expiryStart.toISOString() : <any>undefined;
        data["expiryEnd"] = this.expiryEnd ? this.expiryEnd.toISOString() : <any>undefined;
        data["checkCode"] = this.checkCode;
        data["randomSeed"] = this.randomSeed;
        data["hospital"] = this.hospital;
        data["product"] = this.product;
        data["expireDay"] = this.expireDay;
        return data;
    }
}

export interface IAuthorizeInfo {
    authEdition?: Edition;
    registerCode?: string | undefined;
    expiryPermanent?: boolean;
    expiryStart?: dayjs.Dayjs;
    expiryEnd?: dayjs.Dayjs;
    checkCode?: string | undefined;
    randomSeed?: number;
    hospital?: string | undefined;
    product?: string | undefined;
    expireDay?: number;
}

/** 透析医嘱 */
export class CureDaView implements ICureDaView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行日期 */
    execDate!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 基本单位（用于组合规格） `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 一级单位（用于组合规格） `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 区域 */
    deptDialysisAreaId?: string | undefined;
    /** 区域排序 */
    deptDialysisSequence?: number | undefined;
    /** 区域名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床位序号 */
    bedSequence?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者拼音首字母 */
    pinYinCode?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 医嘱类型 */
    cureDaTypeName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 项目分类标识 */
    roomItemTypeId?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 是否允许核对(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowCheck?: boolean;
    /** 是否允许编辑(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowModify?: boolean;
    /** 是否允许执行(已核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能执行)(用户权限未判断) */
    allowExec?: boolean;
    /** 是否允许撤销(未执行未撤销的医嘱，才能撤销)(用户权限未判断) */
    allowRevocation?: boolean;
    /** 撤销人 */
    revocationer?: string | undefined;
    /** 撤销时间 */
    revocationTime?: dayjs.Dayjs | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 来源标签 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;

    constructor(data?: ICureDaView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.owned = _data["owned"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.unitBase = _data["unitBase"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.groupId = _data["groupId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.patientDaLongtermId = _data["patientDaLongtermId"];
            this.patientDaTemporaryId = _data["patientDaTemporaryId"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.deptDialysisSequence = _data["deptDialysisSequence"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.bedNumber = _data["bedNumber"];
            this.bedSequence = _data["bedSequence"];
            this.patientName = _data["patientName"];
            this.patientAge = _data["patientAge"];
            this.patientGender = _data["patientGender"];
            this.patientDept = _data["patientDept"];
            this.patientInNo = _data["patientInNo"];
            this.patientBed = _data["patientBed"];
            this.hospName = _data["hospName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.pinYinCode = _data["pinYinCode"];
            this.idNumber = _data["idNumber"];
            this.idType = _data["idType"];
            this.cureDaTypeName = _data["cureDaTypeName"];
            this.cureDaContent = _data["cureDaContent"];
            this.group = _data["group"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.unitName = _data["unitName"];
            this.singleUnitName = _data["singleUnitName"];
            this.usageName = _data["usageName"];
            this.statusName = _data["statusName"];
            this.specLabel = _data["specLabel"];
            this.nameGoods = _data["nameGoods"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.allowCheck = _data["allowCheck"];
            this.allowModify = _data["allowModify"];
            this.allowExec = _data["allowExec"];
            this.allowRevocation = _data["allowRevocation"];
            this.revocationer = _data["revocationer"];
            this.revocationTime = _data["revocationTime"] ? dayjs(_data["revocationTime"].toString()) : <any>undefined;
            this.typeName = _data["typeName"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.patientId = _data["patientId"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.execNurseName = _data["execNurseName"];
            this.execNurseTime = _data["execNurseTime"];
            this.openTimeHH = _data["openTimeHH"];
            this.openTimeDate = _data["openTimeDate"];
        }
    }

    static fromJS(data: any): CureDaView {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["owned"] = this.owned;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["execDate"] = this.execDate ? this.execDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["unitBase"] = this.unitBase;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["groupId"] = this.groupId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["patientDaLongtermId"] = this.patientDaLongtermId;
        data["patientDaTemporaryId"] = this.patientDaTemporaryId;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["deptDialysisSequence"] = this.deptDialysisSequence;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["bedNumber"] = this.bedNumber;
        data["bedSequence"] = this.bedSequence;
        data["patientName"] = this.patientName;
        data["patientAge"] = this.patientAge;
        data["patientGender"] = this.patientGender;
        data["patientDept"] = this.patientDept;
        data["patientInNo"] = this.patientInNo;
        data["patientBed"] = this.patientBed;
        data["hospName"] = this.hospName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["pinYinCode"] = this.pinYinCode;
        data["idNumber"] = this.idNumber;
        data["idType"] = this.idType;
        data["cureDaTypeName"] = this.cureDaTypeName;
        data["cureDaContent"] = this.cureDaContent;
        data["group"] = this.group;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["unitName"] = this.unitName;
        data["singleUnitName"] = this.singleUnitName;
        data["usageName"] = this.usageName;
        data["statusName"] = this.statusName;
        data["specLabel"] = this.specLabel;
        data["nameGoods"] = this.nameGoods;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["allowCheck"] = this.allowCheck;
        data["allowModify"] = this.allowModify;
        data["allowExec"] = this.allowExec;
        data["allowRevocation"] = this.allowRevocation;
        data["revocationer"] = this.revocationer;
        data["revocationTime"] = this.revocationTime ? this.revocationTime.toISOString() : <any>undefined;
        data["typeName"] = this.typeName;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["patientId"] = this.patientId;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["execNurseName"] = this.execNurseName;
        data["execNurseTime"] = this.execNurseTime;
        data["openTimeHH"] = this.openTimeHH;
        data["openTimeDate"] = this.openTimeDate;
        return data;
    }
}

/** 透析医嘱 */
export interface ICureDaView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行日期 */
    execDate: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 基本单位（用于组合规格） `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 一级单位（用于组合规格） `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 区域 */
    deptDialysisAreaId?: string | undefined;
    /** 区域排序 */
    deptDialysisSequence?: number | undefined;
    /** 区域名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床位序号 */
    bedSequence?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者拼音首字母 */
    pinYinCode?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 医嘱类型 */
    cureDaTypeName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 项目分类标识 */
    roomItemTypeId?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 是否允许核对(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowCheck?: boolean;
    /** 是否允许编辑(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowModify?: boolean;
    /** 是否允许执行(已核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能执行)(用户权限未判断) */
    allowExec?: boolean;
    /** 是否允许撤销(未执行未撤销的医嘱，才能撤销)(用户权限未判断) */
    allowRevocation?: boolean;
    /** 撤销人 */
    revocationer?: string | undefined;
    /** 撤销时间 */
    revocationTime?: dayjs.Dayjs | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 来源标签 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;
}

/** Reponse */
export class CureDaViewResult implements ICureDaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaView[] | undefined;

    constructor(data?: ICureDaViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDaView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDaViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaView[] | undefined;
}

/** 透析记录 */
export class CureRecord implements ICureRecord {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish?: number;
    /** 是否归档 */
    isArchive?: number;
    patients?: Patient;
    patientVascularAccesss?: PatientVascularAccess;
    patientOtherVascularAccesss?: PatientVascularAccess;

    constructor(data?: ICureRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineId = _data["dialysisMachineId"];
            this.dialysisMachineType = _data["dialysisMachineType"];
            this.dialysisMachineTypeLabel = _data["dialysisMachineTypeLabel"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.rfm = _data["rfm"];
            this.rfmLabel = _data["rfmLabel"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.ufc = _data["ufc"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.afterBpPositionLabel = _data["afterBpPositionLabel"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeBeforeWeight = _data["timeBeforeWeight"] ? dayjs(_data["timeBeforeWeight"].toString()) : <any>undefined;
            this.timeBeforeBp = _data["timeBeforeBp"] ? dayjs(_data["timeBeforeBp"].toString()) : <any>undefined;
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeAssementBefore = _data["timeAssementBefore"] ? dayjs(_data["timeAssementBefore"].toString()) : <any>undefined;
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            this.timeFirstMonitor = _data["timeFirstMonitor"] ? dayjs(_data["timeFirstMonitor"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.timeDisinfect = _data["timeDisinfect"] ? dayjs(_data["timeDisinfect"].toString()) : <any>undefined;
            this.timeAssementAfter = _data["timeAssementAfter"] ? dayjs(_data["timeAssementAfter"].toString()) : <any>undefined;
            this.timeAfterWeight = _data["timeAfterWeight"] ? dayjs(_data["timeAfterWeight"].toString()) : <any>undefined;
            this.timeAfterBp = _data["timeAfterBp"] ? dayjs(_data["timeAfterBp"].toString()) : <any>undefined;
            this.timeAfterSummary = _data["timeAfterSummary"] ? dayjs(_data["timeAfterSummary"].toString()) : <any>undefined;
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
            this.assementUserId = _data["assementUserId"];
            this.assementUserName = _data["assementUserName"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.assementBeforeNurseId = _data["assementBeforeNurseId"];
            this.assementBeforeNurseName = _data["assementBeforeNurseName"];
            this.punctureMethod = _data["punctureMethod"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.onTemp = _data["onTemp"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.verify = _data["verify"];
            this.offNurseId = _data["offNurseId"];
            this.offNurseName = _data["offNurseName"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            this.assementAfterNurseId = _data["assementAfterNurseId"];
            this.assementAfterNurseName = _data["assementAfterNurseName"];
            this.summaryAfterNurseId = _data["summaryAfterNurseId"];
            this.summaryAfterNurseName = _data["summaryAfterNurseName"];
            this.offEarly = _data["offEarly"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.suggestionNext = _data["suggestionNext"];
            this.cancelReason = _data["cancelReason"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.iuf = _data["iuf"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.patientPrescriptionId = _data["patientPrescriptionId"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.isReplenish = _data["isReplenish"];
            this.isArchive = _data["isArchive"];
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.patientVascularAccesss = _data["patientVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientVascularAccesss"]) : <any>undefined;
            this.patientOtherVascularAccesss = _data["patientOtherVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientOtherVascularAccesss"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecord {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineId"] = this.dialysisMachineId;
        data["dialysisMachineType"] = this.dialysisMachineType;
        data["dialysisMachineTypeLabel"] = this.dialysisMachineTypeLabel;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["rfm"] = this.rfm;
        data["rfmLabel"] = this.rfmLabel;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["ufc"] = this.ufc;
        data["afterWeight"] = this.afterWeight;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterBpPosition"] = this.afterBpPosition;
        data["afterBpPositionLabel"] = this.afterBpPositionLabel;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeBeforeWeight"] = this.timeBeforeWeight ? this.timeBeforeWeight.toISOString() : <any>undefined;
        data["timeBeforeBp"] = this.timeBeforeBp ? this.timeBeforeBp.toISOString() : <any>undefined;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toISOString() : <any>undefined;
        data["enact"] = this.enact;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toISOString() : <any>undefined;
        data["check"] = this.check;
        data["timeAssementBefore"] = this.timeAssementBefore ? this.timeAssementBefore.toISOString() : <any>undefined;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toISOString() : <any>undefined;
        data["timeFirstMonitor"] = this.timeFirstMonitor ? this.timeFirstMonitor.toISOString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["timeDisinfect"] = this.timeDisinfect ? this.timeDisinfect.toISOString() : <any>undefined;
        data["timeAssementAfter"] = this.timeAssementAfter ? this.timeAssementAfter.toISOString() : <any>undefined;
        data["timeAfterWeight"] = this.timeAfterWeight ? this.timeAfterWeight.toISOString() : <any>undefined;
        data["timeAfterBp"] = this.timeAfterBp ? this.timeAfterBp.toISOString() : <any>undefined;
        data["timeAfterSummary"] = this.timeAfterSummary ? this.timeAfterSummary.toISOString() : <any>undefined;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toISOString() : <any>undefined;
        data["assementUserId"] = this.assementUserId;
        data["assementUserName"] = this.assementUserName;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["assementBeforeNurseId"] = this.assementBeforeNurseId;
        data["assementBeforeNurseName"] = this.assementBeforeNurseName;
        data["punctureMethod"] = this.punctureMethod;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["onTemp"] = this.onTemp;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["verify"] = this.verify;
        data["offNurseId"] = this.offNurseId;
        data["offNurseName"] = this.offNurseName;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        data["assementAfterNurseId"] = this.assementAfterNurseId;
        data["assementAfterNurseName"] = this.assementAfterNurseName;
        data["summaryAfterNurseId"] = this.summaryAfterNurseId;
        data["summaryAfterNurseName"] = this.summaryAfterNurseName;
        data["offEarly"] = this.offEarly;
        data["offEarlyCause"] = this.offEarlyCause;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["suggestionNext"] = this.suggestionNext;
        data["cancelReason"] = this.cancelReason;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["iuf"] = this.iuf;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toISOString() : <any>undefined;
        data["patientPrescriptionId"] = this.patientPrescriptionId;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["isReplenish"] = this.isReplenish;
        data["isArchive"] = this.isArchive;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["patientVascularAccesss"] = this.patientVascularAccesss ? this.patientVascularAccesss.toJSON() : <any>undefined;
        data["patientOtherVascularAccesss"] = this.patientOtherVascularAccesss ? this.patientOtherVascularAccesss.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析记录 */
export interface ICureRecord {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish?: number;
    /** 是否归档 */
    isArchive?: number;
    patients?: Patient;
    patientVascularAccesss?: PatientVascularAccess;
    patientOtherVascularAccesss?: PatientVascularAccess;
}

/** 透析班次 */
export class CureShift implements ICureShift {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endDate?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureShift) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.beginTime = _data["beginTime"];
            this.endDate = _data["endDate"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureShift {
        data = typeof data === 'object' ? data : {};
        let result = new CureShift();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["beginTime"] = this.beginTime;
        data["endDate"] = this.endDate;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析班次 */
export interface ICureShift {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endDate?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 细菌过滤器更换记录 */
export class DevBacterialfilterchangeLogEditModel implements IDevBacterialfilterchangeLogEditModel {
    /** [设备编号id](#科室设备) */
    devInfoId?: string | undefined;
    /** [更换人](#用户信息) */
    operatorId?: string | undefined;
    /** 更换日期 */
    changeTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** [细菌过滤器型号](#项目清单) */
    roomItemListId?: string | undefined;

    constructor(data?: IDevBacterialfilterchangeLogEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.operatorId = _data["operatorId"];
            this.changeTime = _data["changeTime"] ? dayjs(_data["changeTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.roomItemListId = _data["roomItemListId"];
        }
    }

    static fromJS(data: any): DevBacterialfilterchangeLogEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevBacterialfilterchangeLogEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["operatorId"] = this.operatorId;
        data["changeTime"] = this.changeTime ? this.changeTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["roomItemListId"] = this.roomItemListId;
        return data;
    }
}

/** 细菌过滤器更换记录 */
export interface IDevBacterialfilterchangeLogEditModel {
    /** [设备编号id](#科室设备) */
    devInfoId?: string | undefined;
    /** [更换人](#用户信息) */
    operatorId?: string | undefined;
    /** 更换日期 */
    changeTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** [细菌过滤器型号](#项目清单) */
    roomItemListId?: string | undefined;
}

/** 细菌过滤器excel转换 */
export class DevBacterialfilterchangeLogExcelView implements IDevBacterialfilterchangeLogExcelView {
    /** 更换人 */
    creater?: string | undefined;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 细菌过滤器名称 */
    bacterialfilterName?: string | undefined;
    /** 细菌过滤器型号 */
    bacterialfilterType?: string | undefined;
    /** 设备型号 */
    devType?: string | undefined;
    /** 更换日期 */
    changeTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevBacterialfilterchangeLogExcelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.creater = _data["creater"];
            this.devCode = _data["devCode"];
            this.bacterialfilterName = _data["bacterialfilterName"];
            this.bacterialfilterType = _data["bacterialfilterType"];
            this.devType = _data["devType"];
            this.changeTime = _data["changeTime"] ? dayjs(_data["changeTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevBacterialfilterchangeLogExcelView {
        data = typeof data === 'object' ? data : {};
        let result = new DevBacterialfilterchangeLogExcelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["creater"] = this.creater;
        data["devCode"] = this.devCode;
        data["bacterialfilterName"] = this.bacterialfilterName;
        data["bacterialfilterType"] = this.bacterialfilterType;
        data["devType"] = this.devType;
        data["changeTime"] = this.changeTime ? this.changeTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 细菌过滤器excel转换 */
export interface IDevBacterialfilterchangeLogExcelView {
    /** 更换人 */
    creater?: string | undefined;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 细菌过滤器名称 */
    bacterialfilterName?: string | undefined;
    /** 细菌过滤器型号 */
    bacterialfilterType?: string | undefined;
    /** 设备型号 */
    devType?: string | undefined;
    /** 更换日期 */
    changeTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DevBacterialfilterchangeLogExcelViewResult implements IDevBacterialfilterchangeLogExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevBacterialfilterchangeLogExcelView[] | undefined;

    constructor(data?: IDevBacterialfilterchangeLogExcelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevBacterialfilterchangeLogExcelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevBacterialfilterchangeLogExcelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevBacterialfilterchangeLogExcelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevBacterialfilterchangeLogExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevBacterialfilterchangeLogExcelView[] | undefined;
}

/** 细菌过滤器更换记录 */
export class DevBacterialfilterchangeLogView implements IDevBacterialfilterchangeLogView {
    /** [设备编号id](#科室设备) */
    devInfoId?: string | undefined;
    /** [更换人](#用户信息) */
    operatorId?: string | undefined;
    /** 更换日期 */
    changeTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** [细菌过滤器型号](#项目清单) */
    roomItemListId?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 设备型号 */
    devType?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** 细菌过滤器型号 */
    bacterialfilterType?: string | undefined;
    /** 细菌过滤器名称 */
    bacterialfilterName?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDevBacterialfilterchangeLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.operatorId = _data["operatorId"];
            this.changeTime = _data["changeTime"] ? dayjs(_data["changeTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.roomItemListId = _data["roomItemListId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.devCode = _data["devCode"];
            this.devType = _data["devType"];
            this.sn = _data["sn"];
            this.bacterialfilterType = _data["bacterialfilterType"];
            this.bacterialfilterName = _data["bacterialfilterName"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DevBacterialfilterchangeLogView {
        data = typeof data === 'object' ? data : {};
        let result = new DevBacterialfilterchangeLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["operatorId"] = this.operatorId;
        data["changeTime"] = this.changeTime ? this.changeTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["roomItemListId"] = this.roomItemListId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["devCode"] = this.devCode;
        data["devType"] = this.devType;
        data["sn"] = this.sn;
        data["bacterialfilterType"] = this.bacterialfilterType;
        data["bacterialfilterName"] = this.bacterialfilterName;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 细菌过滤器更换记录 */
export interface IDevBacterialfilterchangeLogView {
    /** [设备编号id](#科室设备) */
    devInfoId?: string | undefined;
    /** [更换人](#用户信息) */
    operatorId?: string | undefined;
    /** 更换日期 */
    changeTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** [细菌过滤器型号](#项目清单) */
    roomItemListId?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 设备型号 */
    devType?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** 细菌过滤器型号 */
    bacterialfilterType?: string | undefined;
    /** 细菌过滤器名称 */
    bacterialfilterName?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DevBacterialfilterchangeLogViewResult implements IDevBacterialfilterchangeLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevBacterialfilterchangeLogView[] | undefined;

    constructor(data?: IDevBacterialfilterchangeLogViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevBacterialfilterchangeLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevBacterialfilterchangeLogViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevBacterialfilterchangeLogViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevBacterialfilterchangeLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevBacterialfilterchangeLogView[] | undefined;
}

/** Reponse */
export class DevBacterialfilterchangeLogViewResultEntry implements IDevBacterialfilterchangeLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevBacterialfilterchangeLogView;

    constructor(data?: IDevBacterialfilterchangeLogViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevBacterialfilterchangeLogView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevBacterialfilterchangeLogViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevBacterialfilterchangeLogViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevBacterialfilterchangeLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevBacterialfilterchangeLogView;
}

/** 消毒 */
export class DevDisinfectLogView implements IDevDisinfectLogView {
    /** 标识 */
    id?: string | undefined;
    /** 设备标识 */
    devInfoId?: string | undefined;
    /** 设备编号 */
    devInfoCode?: string | undefined;
    /** 设备号 */
    devInfoSn?: string | undefined;
    /** 消毒日期 */
    date?: dayjs.Dayjs;
    /** 班次标识 */
    cureShiftId?: string | undefined;
    /** 班次 */
    cureShiftName?: string | undefined;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 */
    endDate?: dayjs.Dayjs;
    /** 消毒时长 *分钟* */
    disinfectTime?: number;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` */
    programSphygmomanometerCuff?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` - 显示值 */
    programSphygmomanometerCuffLabel?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) - 标识 */
    sphygmomanometerCuffOperatorId?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) - 名称 */
    sphygmomanometerCuffOperatorName?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDevDisinfectLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.devInfoId = _data["devInfoId"];
            this.devInfoCode = _data["devInfoCode"];
            this.devInfoSn = _data["devInfoSn"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.cureShiftId = _data["cureShiftId"];
            this.cureShiftName = _data["cureShiftName"];
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.disinfectTime = _data["disinfectTime"];
            this.programInternal = _data["programInternal"];
            this.programInternalLabel = _data["programInternalLabel"];
            this.internalOperatorId = _data["internalOperatorId"];
            this.internalOperatorName = _data["internalOperatorName"];
            this.programExterior = _data["programExterior"];
            this.programExteriorLabel = _data["programExteriorLabel"];
            this.externalOperatorId = _data["externalOperatorId"];
            this.externalOperatorName = _data["externalOperatorName"];
            this.programSphygmomanometerCuff = _data["programSphygmomanometerCuff"];
            this.programSphygmomanometerCuffLabel = _data["programSphygmomanometerCuffLabel"];
            this.sphygmomanometerCuffOperatorId = _data["sphygmomanometerCuffOperatorId"];
            this.sphygmomanometerCuffOperatorName = _data["sphygmomanometerCuffOperatorName"];
            this.bedUnitCleaning = _data["bedUnitCleaning"];
            this.filterScreenChanging = _data["filterScreenChanging"];
            this.disinfectTemp = _data["disinfectTemp"];
            this.disinfectInstructions = _data["disinfectInstructions"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DevDisinfectLogView {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["devInfoId"] = this.devInfoId;
        data["devInfoCode"] = this.devInfoCode;
        data["devInfoSn"] = this.devInfoSn;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["cureShiftId"] = this.cureShiftId;
        data["cureShiftName"] = this.cureShiftName;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["disinfectTime"] = this.disinfectTime;
        data["programInternal"] = this.programInternal;
        data["programInternalLabel"] = this.programInternalLabel;
        data["internalOperatorId"] = this.internalOperatorId;
        data["internalOperatorName"] = this.internalOperatorName;
        data["programExterior"] = this.programExterior;
        data["programExteriorLabel"] = this.programExteriorLabel;
        data["externalOperatorId"] = this.externalOperatorId;
        data["externalOperatorName"] = this.externalOperatorName;
        data["programSphygmomanometerCuff"] = this.programSphygmomanometerCuff;
        data["programSphygmomanometerCuffLabel"] = this.programSphygmomanometerCuffLabel;
        data["sphygmomanometerCuffOperatorId"] = this.sphygmomanometerCuffOperatorId;
        data["sphygmomanometerCuffOperatorName"] = this.sphygmomanometerCuffOperatorName;
        data["bedUnitCleaning"] = this.bedUnitCleaning;
        data["filterScreenChanging"] = this.filterScreenChanging;
        data["disinfectTemp"] = this.disinfectTemp;
        data["disinfectInstructions"] = this.disinfectInstructions;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 消毒 */
export interface IDevDisinfectLogView {
    /** 标识 */
    id?: string | undefined;
    /** 设备标识 */
    devInfoId?: string | undefined;
    /** 设备编号 */
    devInfoCode?: string | undefined;
    /** 设备号 */
    devInfoSn?: string | undefined;
    /** 消毒日期 */
    date?: dayjs.Dayjs;
    /** 班次标识 */
    cureShiftId?: string | undefined;
    /** 班次 */
    cureShiftName?: string | undefined;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 */
    endDate?: dayjs.Dayjs;
    /** 消毒时长 *分钟* */
    disinfectTime?: number;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` */
    programSphygmomanometerCuff?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` - 显示值 */
    programSphygmomanometerCuffLabel?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) - 标识 */
    sphygmomanometerCuffOperatorId?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) - 名称 */
    sphygmomanometerCuffOperatorName?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 消毒记录 (ViewModel) */
export class DevDisinfectLogViewModel implements IDevDisinfectLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId!: string;
    /** 班次 */
    cureShiftId?: string | undefined;
    /** 班次 */
    cureShiftName?: string | undefined;
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** 开始时间 */
    beginDate!: dayjs.Dayjs;
    /** 停止时间 */
    endDate!: dayjs.Dayjs;
    /** 消毒时长 *分钟* */
    disinfectTime!: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** [机外消毒人](用户信息Id) */
    externalOperatorId?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** [机内消毒人](用户信息Id) */
    internalOperatorId?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` */
    programSphygmomanometerCuff?: string | undefined;
    /** [血压计袖带消毒人](用户信息Id) */
    sphygmomanometerCuffOperatorId?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevDisinfectLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.cureShiftId = _data["cureShiftId"];
            this.cureShiftName = _data["cureShiftName"];
            this.cureRecordId = _data["cureRecordId"];
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.disinfectTime = _data["disinfectTime"];
            this.programExterior = _data["programExterior"];
            this.externalOperatorId = _data["externalOperatorId"];
            this.programInternal = _data["programInternal"];
            this.internalOperatorId = _data["internalOperatorId"];
            this.programSphygmomanometerCuff = _data["programSphygmomanometerCuff"];
            this.sphygmomanometerCuffOperatorId = _data["sphygmomanometerCuffOperatorId"];
            this.bedUnitCleaning = _data["bedUnitCleaning"];
            this.filterScreenChanging = _data["filterScreenChanging"];
            this.disinfectTemp = _data["disinfectTemp"];
            this.disinfectInstructions = _data["disinfectInstructions"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevDisinfectLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["cureShiftId"] = this.cureShiftId;
        data["cureShiftName"] = this.cureShiftName;
        data["cureRecordId"] = this.cureRecordId;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["disinfectTime"] = this.disinfectTime;
        data["programExterior"] = this.programExterior;
        data["externalOperatorId"] = this.externalOperatorId;
        data["programInternal"] = this.programInternal;
        data["internalOperatorId"] = this.internalOperatorId;
        data["programSphygmomanometerCuff"] = this.programSphygmomanometerCuff;
        data["sphygmomanometerCuffOperatorId"] = this.sphygmomanometerCuffOperatorId;
        data["bedUnitCleaning"] = this.bedUnitCleaning;
        data["filterScreenChanging"] = this.filterScreenChanging;
        data["disinfectTemp"] = this.disinfectTemp;
        data["disinfectInstructions"] = this.disinfectInstructions;
        data["remark"] = this.remark;
        return data;
    }
}

/** 消毒记录 (ViewModel) */
export interface IDevDisinfectLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId: string;
    /** 班次 */
    cureShiftId?: string | undefined;
    /** 班次 */
    cureShiftName?: string | undefined;
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** 开始时间 */
    beginDate: dayjs.Dayjs;
    /** 停止时间 */
    endDate: dayjs.Dayjs;
    /** 消毒时长 *分钟* */
    disinfectTime: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** [机外消毒人](用户信息Id) */
    externalOperatorId?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** [机内消毒人](用户信息Id) */
    internalOperatorId?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` */
    programSphygmomanometerCuff?: string | undefined;
    /** [血压计袖带消毒人](用户信息Id) */
    sphygmomanometerCuffOperatorId?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DevDisinfectLogViewResult implements IDevDisinfectLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDisinfectLogView[] | undefined;

    constructor(data?: IDevDisinfectLogViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevDisinfectLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevDisinfectLogViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectLogViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevDisinfectLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDisinfectLogView[] | undefined;
}

/** Reponse */
export class DevDisinfectLogViewResultEntry implements IDevDisinfectLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevDisinfectLogView;

    constructor(data?: IDevDisinfectLogViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevDisinfectLogView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevDisinfectLogViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectLogViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevDisinfectLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevDisinfectLogView;
}

/** 设备消毒配置 */
export class DevDisinfectSetting implements IDevDisinfectSetting {
    /** 标识 */
    id?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` */
    devType?: string | undefined;
    /** 设备型号 */
    devModel?: string | undefined;
    /** [班次](透析班次) *不填则是通用的* */
    cureShiftId?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime?: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒温度 */
    internalTemp?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureShifts?: CureShift;

    constructor(data?: IDevDisinfectSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.devType = _data["devType"];
            this.devModel = _data["devModel"];
            this.cureShiftId = _data["cureShiftId"];
            this.disinfectTime = _data["disinfectTime"];
            this.programExterior = _data["programExterior"];
            this.programInternal = _data["programInternal"];
            this.internalTemp = _data["internalTemp"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureShifts = _data["cureShifts"] ? CureShift.fromJS(_data["cureShifts"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevDisinfectSetting {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["devType"] = this.devType;
        data["devModel"] = this.devModel;
        data["cureShiftId"] = this.cureShiftId;
        data["disinfectTime"] = this.disinfectTime;
        data["programExterior"] = this.programExterior;
        data["programInternal"] = this.programInternal;
        data["internalTemp"] = this.internalTemp;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["cureShifts"] = this.cureShifts ? this.cureShifts.toJSON() : <any>undefined;
        return data;
    }
}

/** 设备消毒配置 */
export interface IDevDisinfectSetting {
    /** 标识 */
    id?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` */
    devType?: string | undefined;
    /** 设备型号 */
    devModel?: string | undefined;
    /** [班次](透析班次) *不填则是通用的* */
    cureShiftId?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime?: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒温度 */
    internalTemp?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureShifts?: CureShift;
}

/** 设备消毒配置 */
export class DevDisinfectSettingEditModel implements IDevDisinfectSettingEditModel {
    /** 设备类型 `DIC.DEV.TYPE` */
    devType!: string;
    /** 设备型号 */
    devModel!: string;
    /** [班次](#透析班次) *不填则是通用的* */
    cureShiftId?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime!: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 机内消毒温度 */
    internalTemp?: string | undefined;

    constructor(data?: IDevDisinfectSettingEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devType = _data["devType"];
            this.devModel = _data["devModel"];
            this.cureShiftId = _data["cureShiftId"];
            this.disinfectTime = _data["disinfectTime"];
            this.programExterior = _data["programExterior"];
            this.programInternal = _data["programInternal"];
            this.remark = _data["remark"];
            this.internalTemp = _data["internalTemp"];
        }
    }

    static fromJS(data: any): DevDisinfectSettingEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectSettingEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devType"] = this.devType;
        data["devModel"] = this.devModel;
        data["cureShiftId"] = this.cureShiftId;
        data["disinfectTime"] = this.disinfectTime;
        data["programExterior"] = this.programExterior;
        data["programInternal"] = this.programInternal;
        data["remark"] = this.remark;
        data["internalTemp"] = this.internalTemp;
        return data;
    }
}

/** 设备消毒配置 */
export interface IDevDisinfectSettingEditModel {
    /** 设备类型 `DIC.DEV.TYPE` */
    devType: string;
    /** 设备型号 */
    devModel: string;
    /** [班次](#透析班次) *不填则是通用的* */
    cureShiftId?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 机内消毒温度 */
    internalTemp?: string | undefined;
}

/** Reponse */
export class DevDisinfectSettingResultEntry implements IDevDisinfectSettingResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevDisinfectSetting;

    constructor(data?: IDevDisinfectSettingResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevDisinfectSetting.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevDisinfectSettingResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectSettingResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevDisinfectSettingResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevDisinfectSetting;
}

/** 设备消毒配置 */
export class DevDisinfectSettingView implements IDevDisinfectSettingView {
    /** 设备类型 `DIC.DEV.TYPE` */
    devType!: string;
    /** 设备型号 */
    devModel!: string;
    /** [班次](#透析班次) *不填则是通用的* */
    cureShiftId?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime!: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 机内消毒温度 */
    internalTemp?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` */
    devTypeLabel?: string | undefined;
    /** 班次 *不填则是通用的* */
    cureShiftName?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDevDisinfectSettingView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devType = _data["devType"];
            this.devModel = _data["devModel"];
            this.cureShiftId = _data["cureShiftId"];
            this.disinfectTime = _data["disinfectTime"];
            this.programExterior = _data["programExterior"];
            this.programInternal = _data["programInternal"];
            this.remark = _data["remark"];
            this.internalTemp = _data["internalTemp"];
            this.devTypeLabel = _data["devTypeLabel"];
            this.cureShiftName = _data["cureShiftName"];
            this.programExteriorLabel = _data["programExteriorLabel"];
            this.programInternalLabel = _data["programInternalLabel"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DevDisinfectSettingView {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectSettingView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devType"] = this.devType;
        data["devModel"] = this.devModel;
        data["cureShiftId"] = this.cureShiftId;
        data["disinfectTime"] = this.disinfectTime;
        data["programExterior"] = this.programExterior;
        data["programInternal"] = this.programInternal;
        data["remark"] = this.remark;
        data["internalTemp"] = this.internalTemp;
        data["devTypeLabel"] = this.devTypeLabel;
        data["cureShiftName"] = this.cureShiftName;
        data["programExteriorLabel"] = this.programExteriorLabel;
        data["programInternalLabel"] = this.programInternalLabel;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 设备消毒配置 */
export interface IDevDisinfectSettingView {
    /** 设备类型 `DIC.DEV.TYPE` */
    devType: string;
    /** 设备型号 */
    devModel: string;
    /** [班次](#透析班次) *不填则是通用的* */
    cureShiftId?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 机内消毒温度 */
    internalTemp?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` */
    devTypeLabel?: string | undefined;
    /** 班次 *不填则是通用的* */
    cureShiftName?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DevDisinfectSettingViewResult implements IDevDisinfectSettingViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDisinfectSettingView[] | undefined;

    constructor(data?: IDevDisinfectSettingViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevDisinfectSettingView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevDisinfectSettingViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectSettingViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevDisinfectSettingViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDisinfectSettingView[] | undefined;
}

/** 科室设备 */
export class DevInfo implements IDevInfo {
    /** 标识 */
    id?: string | undefined;
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** [操作者](用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive?: number;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;
    sysHospitalAreas?: SysHospitalArea;
    sysUsers?: SysUser;

    constructor(data?: IDevInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.sn = _data["sn"];
            this.ip = _data["ip"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.dealer = _data["dealer"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.sysUserId = _data["sysUserId"];
            this.dateUsed = _data["dateUsed"] ? dayjs(_data["dateUsed"].toString()) : <any>undefined;
            this.dateWarranty = _data["dateWarranty"] ? dayjs(_data["dateWarranty"].toString()) : <any>undefined;
            this.positive = _data["positive"];
            this.sphygmomanometerCuff = _data["sphygmomanometerCuff"];
            this.diseaseType = _data["diseaseType"];
            this.location = _data["location"];
            this.remark = _data["remark"];
            this.status = _data["status"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.isNew = _data["isNew"];
            this.sequence = _data["sequence"];
            this.sysHospitalAreas = _data["sysHospitalAreas"] ? SysHospitalArea.fromJS(_data["sysHospitalAreas"]) : <any>undefined;
            this.sysUsers = _data["sysUsers"] ? SysUser.fromJS(_data["sysUsers"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["sn"] = this.sn;
        data["ip"] = this.ip;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toISOString() : <any>undefined;
        data["dealer"] = this.dealer;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["sysUserId"] = this.sysUserId;
        data["dateUsed"] = this.dateUsed ? this.dateUsed.toISOString() : <any>undefined;
        data["dateWarranty"] = this.dateWarranty ? this.dateWarranty.toISOString() : <any>undefined;
        data["positive"] = this.positive;
        data["sphygmomanometerCuff"] = this.sphygmomanometerCuff;
        data["diseaseType"] = this.diseaseType;
        data["location"] = this.location;
        data["remark"] = this.remark;
        data["status"] = this.status;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["isNew"] = this.isNew;
        data["sequence"] = this.sequence;
        data["sysHospitalAreas"] = this.sysHospitalAreas ? this.sysHospitalAreas.toJSON() : <any>undefined;
        data["sysUsers"] = this.sysUsers ? this.sysUsers.toJSON() : <any>undefined;
        return data;
    }
}

/** 科室设备 */
export interface IDevInfo {
    /** 标识 */
    id?: string | undefined;
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** [操作者](用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive?: number;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;
    sysHospitalAreas?: SysHospitalArea;
    sysUsers?: SysUser;
}

export class DevInfoEditModel implements IDevInfoEditModel {
    /** 设备编号 *○不允许重复* */
    code!: string;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type!: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model!: string;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** [操作者](#用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive!: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status!: string;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;

    constructor(data?: IDevInfoEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.sn = _data["sn"];
            this.ip = _data["ip"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.dealer = _data["dealer"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.sysUserId = _data["sysUserId"];
            this.dateUsed = _data["dateUsed"] ? dayjs(_data["dateUsed"].toString()) : <any>undefined;
            this.dateWarranty = _data["dateWarranty"] ? dayjs(_data["dateWarranty"].toString()) : <any>undefined;
            this.positive = _data["positive"];
            this.diseaseType = _data["diseaseType"];
            this.location = _data["location"];
            this.remark = _data["remark"];
            this.status = _data["status"];
            this.boxIp = _data["boxIp"];
            this.bluetoothBpId = _data["bluetoothBpId"];
            this.sphygmomanometerCuff = _data["sphygmomanometerCuff"];
            this.isNew = _data["isNew"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): DevInfoEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["sn"] = this.sn;
        data["ip"] = this.ip;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toISOString() : <any>undefined;
        data["dealer"] = this.dealer;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["sysUserId"] = this.sysUserId;
        data["dateUsed"] = this.dateUsed ? this.dateUsed.toISOString() : <any>undefined;
        data["dateWarranty"] = this.dateWarranty ? this.dateWarranty.toISOString() : <any>undefined;
        data["positive"] = this.positive;
        data["diseaseType"] = this.diseaseType;
        data["location"] = this.location;
        data["remark"] = this.remark;
        data["status"] = this.status;
        data["boxIp"] = this.boxIp;
        data["bluetoothBpId"] = this.bluetoothBpId;
        data["sphygmomanometerCuff"] = this.sphygmomanometerCuff;
        data["isNew"] = this.isNew;
        data["sequence"] = this.sequence;
        return data;
    }
}

export interface IDevInfoEditModel {
    /** 设备编号 *○不允许重复* */
    code: string;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model: string;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** [操作者](#用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status: string;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;
}

/** 从 Excel 导入 设备信息 表所需的视图类 */
export class DevInfoExcelView implements IDevInfoExcelView {
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备类型 - 显示值 */
    typeLabel?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positiveStr?: string | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    readonly positive?: number;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 病情类型 - 显示值 */
    diseaseTypeLabel?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 设备状态 - 显示值 */
    statusLabel?: string | undefined;
    /** 使用科室 */
    department?: string | undefined;

    constructor(data?: IDevInfoExcelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.model = _data["model"];
            this.sn = _data["sn"];
            this.ip = _data["ip"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.dealer = _data["dealer"];
            this.dateUsed = _data["dateUsed"] ? dayjs(_data["dateUsed"].toString()) : <any>undefined;
            this.dateWarranty = _data["dateWarranty"] ? dayjs(_data["dateWarranty"].toString()) : <any>undefined;
            this.positiveStr = _data["positiveStr"];
            (<any>this).positive = _data["positive"];
            this.sphygmomanometerCuff = _data["sphygmomanometerCuff"];
            this.diseaseType = _data["diseaseType"];
            this.diseaseTypeLabel = _data["diseaseTypeLabel"];
            this.location = _data["location"];
            this.remark = _data["remark"];
            this.status = _data["status"];
            this.statusLabel = _data["statusLabel"];
            this.department = _data["department"];
        }
    }

    static fromJS(data: any): DevInfoExcelView {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoExcelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["model"] = this.model;
        data["sn"] = this.sn;
        data["ip"] = this.ip;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toISOString() : <any>undefined;
        data["dealer"] = this.dealer;
        data["dateUsed"] = this.dateUsed ? this.dateUsed.toISOString() : <any>undefined;
        data["dateWarranty"] = this.dateWarranty ? this.dateWarranty.toISOString() : <any>undefined;
        data["positiveStr"] = this.positiveStr;
        data["positive"] = this.positive;
        data["sphygmomanometerCuff"] = this.sphygmomanometerCuff;
        data["diseaseType"] = this.diseaseType;
        data["diseaseTypeLabel"] = this.diseaseTypeLabel;
        data["location"] = this.location;
        data["remark"] = this.remark;
        data["status"] = this.status;
        data["statusLabel"] = this.statusLabel;
        data["department"] = this.department;
        return data;
    }
}

/** 从 Excel 导入 设备信息 表所需的视图类 */
export interface IDevInfoExcelView {
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备类型 - 显示值 */
    typeLabel?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positiveStr?: string | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive?: number;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 病情类型 - 显示值 */
    diseaseTypeLabel?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 设备状态 - 显示值 */
    statusLabel?: string | undefined;
    /** 使用科室 */
    department?: string | undefined;
}

/** Reponse */
export class DevInfoExcelViewResult implements IDevInfoExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevInfoExcelView[] | undefined;

    constructor(data?: IDevInfoExcelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevInfoExcelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevInfoExcelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoExcelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevInfoExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevInfoExcelView[] | undefined;
}

/** 设备汇总 */
export class DevInfoSummaryView implements IDevInfoSummaryView {
    /** 正常 */
    enabledCount?: number;
    /** 故障 */
    faultCount?: number;
    /** 维修 */
    maintainCount?: number;
    /** 总量 （停用与报废不统计） */
    sumCount?: number;
    /** 水消毒状态 (0-异常 1-正常) */
    watertreatmentNormal?: number;

    constructor(data?: IDevInfoSummaryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enabledCount = _data["enabledCount"];
            this.faultCount = _data["faultCount"];
            this.maintainCount = _data["maintainCount"];
            this.sumCount = _data["sumCount"];
            this.watertreatmentNormal = _data["watertreatmentNormal"];
        }
    }

    static fromJS(data: any): DevInfoSummaryView {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoSummaryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enabledCount"] = this.enabledCount;
        data["faultCount"] = this.faultCount;
        data["maintainCount"] = this.maintainCount;
        data["sumCount"] = this.sumCount;
        data["watertreatmentNormal"] = this.watertreatmentNormal;
        return data;
    }
}

/** 设备汇总 */
export interface IDevInfoSummaryView {
    /** 正常 */
    enabledCount?: number;
    /** 故障 */
    faultCount?: number;
    /** 维修 */
    maintainCount?: number;
    /** 总量 （停用与报废不统计） */
    sumCount?: number;
    /** 水消毒状态 (0-异常 1-正常) */
    watertreatmentNormal?: number;
}

/** Reponse */
export class DevInfoSummaryViewResultEntry implements IDevInfoSummaryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevInfoSummaryView;

    constructor(data?: IDevInfoSummaryViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevInfoSummaryView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevInfoSummaryViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoSummaryViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevInfoSummaryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevInfoSummaryView;
}

/** 设备信息 */
export class DevInfoView implements IDevInfoView {
    /** 设备编号 *○不允许重复* */
    code!: string;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type!: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model!: string;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** [操作者](#用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive!: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status!: string;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 床位编号 */
    bedName?: string | undefined;
    /** 设备类型名称 */
    typeName?: string | undefined;
    /** [使用科室](院区) */
    sysHospitalAreaName?: string | undefined;
    /** [使用科室](院区) */
    sysHospitalAreaNameFull?: string | undefined;
    /** 负责人名称 */
    sysUserName?: string | undefined;
    /** 病情类型名称 */
    diseaseTypeName?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    statusName?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDevInfoView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.sn = _data["sn"];
            this.ip = _data["ip"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.dealer = _data["dealer"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.sysUserId = _data["sysUserId"];
            this.dateUsed = _data["dateUsed"] ? dayjs(_data["dateUsed"].toString()) : <any>undefined;
            this.dateWarranty = _data["dateWarranty"] ? dayjs(_data["dateWarranty"].toString()) : <any>undefined;
            this.positive = _data["positive"];
            this.diseaseType = _data["diseaseType"];
            this.location = _data["location"];
            this.remark = _data["remark"];
            this.status = _data["status"];
            this.boxIp = _data["boxIp"];
            this.bluetoothBpId = _data["bluetoothBpId"];
            this.sphygmomanometerCuff = _data["sphygmomanometerCuff"];
            this.isNew = _data["isNew"];
            this.sequence = _data["sequence"];
            this.bedName = _data["bedName"];
            this.typeName = _data["typeName"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
            this.sysHospitalAreaNameFull = _data["sysHospitalAreaNameFull"];
            this.sysUserName = _data["sysUserName"];
            this.diseaseTypeName = _data["diseaseTypeName"];
            this.statusName = _data["statusName"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DevInfoView {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["sn"] = this.sn;
        data["ip"] = this.ip;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toISOString() : <any>undefined;
        data["dealer"] = this.dealer;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["sysUserId"] = this.sysUserId;
        data["dateUsed"] = this.dateUsed ? this.dateUsed.toISOString() : <any>undefined;
        data["dateWarranty"] = this.dateWarranty ? this.dateWarranty.toISOString() : <any>undefined;
        data["positive"] = this.positive;
        data["diseaseType"] = this.diseaseType;
        data["location"] = this.location;
        data["remark"] = this.remark;
        data["status"] = this.status;
        data["boxIp"] = this.boxIp;
        data["bluetoothBpId"] = this.bluetoothBpId;
        data["sphygmomanometerCuff"] = this.sphygmomanometerCuff;
        data["isNew"] = this.isNew;
        data["sequence"] = this.sequence;
        data["bedName"] = this.bedName;
        data["typeName"] = this.typeName;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        data["sysHospitalAreaNameFull"] = this.sysHospitalAreaNameFull;
        data["sysUserName"] = this.sysUserName;
        data["diseaseTypeName"] = this.diseaseTypeName;
        data["statusName"] = this.statusName;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 设备信息 */
export interface IDevInfoView {
    /** 设备编号 *○不允许重复* */
    code: string;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model: string;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** [操作者](#用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status: string;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 床位编号 */
    bedName?: string | undefined;
    /** 设备类型名称 */
    typeName?: string | undefined;
    /** [使用科室](院区) */
    sysHospitalAreaName?: string | undefined;
    /** [使用科室](院区) */
    sysHospitalAreaNameFull?: string | undefined;
    /** 负责人名称 */
    sysUserName?: string | undefined;
    /** 病情类型名称 */
    diseaseTypeName?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    statusName?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DevInfoViewResult implements IDevInfoViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevInfoView[] | undefined;

    constructor(data?: IDevInfoViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevInfoView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevInfoViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevInfoViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevInfoView[] | undefined;
}

/** Reponse */
export class DevInfoViewResultEntry implements IDevInfoViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevInfoView;

    constructor(data?: IDevInfoViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevInfoView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevInfoViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevInfoViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevInfoView;
}

/** 维护记录 */
export class DevMaintenanceLogView implements IDevMaintenanceLogView {
    /** 标识 */
    id?: string | undefined;
    /** 设备标识 */
    devInfoId?: string | undefined;
    /** 设备编号 *○不允许重复* */
    devInfoCode?: string | undefined;
    /** 设备号 */
    devInfoSn?: string | undefined;
    /** 维护日期 */
    date?: dayjs.Dayjs;
    /** 维护类型 *维修,保养* */
    type?: string | undefined;
    /** 费用 */
    cost?: number;
    /** 科室工程师 */
    engineer?: string | undefined;
    /** 维护工程师 */
    serviceEngineer?: string | undefined;
    /** 内容 *更换零件内容* */
    content?: string | undefined;
    /** 维修部位 */
    repairPosition?: string | undefined;
    /** 维修部位显示值 */
    repairPositionLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** [操作者标识](#用户信息) */
    operatorId?: string | undefined;
    /** 操作者标识 */
    operator?: string | undefined;

    constructor(data?: IDevMaintenanceLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.devInfoId = _data["devInfoId"];
            this.devInfoCode = _data["devInfoCode"];
            this.devInfoSn = _data["devInfoSn"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.cost = _data["cost"];
            this.engineer = _data["engineer"];
            this.serviceEngineer = _data["serviceEngineer"];
            this.content = _data["content"];
            this.repairPosition = _data["repairPosition"];
            this.repairPositionLabel = _data["repairPositionLabel"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operator = _data["operator"];
        }
    }

    static fromJS(data: any): DevMaintenanceLogView {
        data = typeof data === 'object' ? data : {};
        let result = new DevMaintenanceLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["devInfoId"] = this.devInfoId;
        data["devInfoCode"] = this.devInfoCode;
        data["devInfoSn"] = this.devInfoSn;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["cost"] = this.cost;
        data["engineer"] = this.engineer;
        data["serviceEngineer"] = this.serviceEngineer;
        data["content"] = this.content;
        data["repairPosition"] = this.repairPosition;
        data["repairPositionLabel"] = this.repairPositionLabel;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operator"] = this.operator;
        return data;
    }
}

/** 维护记录 */
export interface IDevMaintenanceLogView {
    /** 标识 */
    id?: string | undefined;
    /** 设备标识 */
    devInfoId?: string | undefined;
    /** 设备编号 *○不允许重复* */
    devInfoCode?: string | undefined;
    /** 设备号 */
    devInfoSn?: string | undefined;
    /** 维护日期 */
    date?: dayjs.Dayjs;
    /** 维护类型 *维修,保养* */
    type?: string | undefined;
    /** 费用 */
    cost?: number;
    /** 科室工程师 */
    engineer?: string | undefined;
    /** 维护工程师 */
    serviceEngineer?: string | undefined;
    /** 内容 *更换零件内容* */
    content?: string | undefined;
    /** 维修部位 */
    repairPosition?: string | undefined;
    /** 维修部位显示值 */
    repairPositionLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** [操作者标识](#用户信息) */
    operatorId?: string | undefined;
    /** 操作者标识 */
    operator?: string | undefined;
}

/** 维护记录 (ViewModel) */
export class DevMaintenanceLogViewModel implements IDevMaintenanceLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId!: string;
    /** 维护日期 */
    date!: dayjs.Dayjs;
    /** 维护类型 *维修,保养* */
    type!: string;
    /** 费用 */
    cost!: number;
    /** 科室工程师 */
    engineer?: string | undefined;
    /** 维护工程师 */
    serviceEngineer?: string | undefined;
    /** 内容 *更换零件内容* */
    content?: string | undefined;
    /** 维修部位 */
    repairPosition?: string | undefined;
    /** [操作者标识](用户信息Id) */
    operatorId?: string | undefined;
    /** 操作者标识 */
    operator?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevMaintenanceLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.cost = _data["cost"];
            this.engineer = _data["engineer"];
            this.serviceEngineer = _data["serviceEngineer"];
            this.content = _data["content"];
            this.repairPosition = _data["repairPosition"];
            this.operatorId = _data["operatorId"];
            this.operator = _data["operator"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevMaintenanceLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevMaintenanceLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["cost"] = this.cost;
        data["engineer"] = this.engineer;
        data["serviceEngineer"] = this.serviceEngineer;
        data["content"] = this.content;
        data["repairPosition"] = this.repairPosition;
        data["operatorId"] = this.operatorId;
        data["operator"] = this.operator;
        data["remark"] = this.remark;
        return data;
    }
}

/** 维护记录 (ViewModel) */
export interface IDevMaintenanceLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId: string;
    /** 维护日期 */
    date: dayjs.Dayjs;
    /** 维护类型 *维修,保养* */
    type: string;
    /** 费用 */
    cost: number;
    /** 科室工程师 */
    engineer?: string | undefined;
    /** 维护工程师 */
    serviceEngineer?: string | undefined;
    /** 内容 *更换零件内容* */
    content?: string | undefined;
    /** 维修部位 */
    repairPosition?: string | undefined;
    /** [操作者标识](用户信息Id) */
    operatorId?: string | undefined;
    /** 操作者标识 */
    operator?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DevMaintenanceLogViewResult implements IDevMaintenanceLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevMaintenanceLogView[] | undefined;

    constructor(data?: IDevMaintenanceLogViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevMaintenanceLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevMaintenanceLogViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevMaintenanceLogViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevMaintenanceLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevMaintenanceLogView[] | undefined;
}

/** Reponse */
export class DevMaintenanceLogViewResultEntry implements IDevMaintenanceLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevMaintenanceLogView;

    constructor(data?: IDevMaintenanceLogViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevMaintenanceLogView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevMaintenanceLogViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevMaintenanceLogViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevMaintenanceLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevMaintenanceLogView;
}

/** 科室设备生产厂家信息 */
export class DevManufacturerEditModel implements IDevManufacturerEditModel {
    /** 公司法定名称 *○不允许重复* */
    name!: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 传真 */
    fax?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevManufacturerEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.address = _data["address"];
            this.fax = _data["fax"];
            this.linkman = _data["linkman"];
            this.positionContact = _data["positionContact"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevManufacturerEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevManufacturerEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["fax"] = this.fax;
        data["linkman"] = this.linkman;
        data["positionContact"] = this.positionContact;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        return data;
    }
}

/** 科室设备生产厂家信息 */
export interface IDevManufacturerEditModel {
    /** 公司法定名称 *○不允许重复* */
    name: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 传真 */
    fax?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 科室设备生产厂家信息 */
export class DevManufacturerView implements IDevManufacturerView {
    /** 公司法定名称 *○不允许重复* */
    name!: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 传真 */
    fax?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 序列 */
    sequence!: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDevManufacturerView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.address = _data["address"];
            this.fax = _data["fax"];
            this.linkman = _data["linkman"];
            this.positionContact = _data["positionContact"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DevManufacturerView {
        data = typeof data === 'object' ? data : {};
        let result = new DevManufacturerView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["fax"] = this.fax;
        data["linkman"] = this.linkman;
        data["positionContact"] = this.positionContact;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 科室设备生产厂家信息 */
export interface IDevManufacturerView {
    /** 公司法定名称 *○不允许重复* */
    name: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 传真 */
    fax?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 序列 */
    sequence: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DevManufacturerViewResult implements IDevManufacturerViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevManufacturerView[] | undefined;

    constructor(data?: IDevManufacturerViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevManufacturerView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevManufacturerViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevManufacturerViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevManufacturerViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevManufacturerView[] | undefined;
}

/** Reponse */
export class DevManufacturerViewResultEntry implements IDevManufacturerViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevManufacturerView;

    constructor(data?: IDevManufacturerViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevManufacturerView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevManufacturerViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevManufacturerViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevManufacturerViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevManufacturerView;
}

/** 设备保修记录 */
export class DevRepairsLogEditModel implements IDevRepairsLogEditModel {
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** 故障描述 */
    faultDescription!: string;

    constructor(data?: IDevRepairsLogEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.faultDescription = _data["faultDescription"];
        }
    }

    static fromJS(data: any): DevRepairsLogEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevRepairsLogEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["faultDescription"] = this.faultDescription;
        return data;
    }
}

/** 设备保修记录 */
export interface IDevRepairsLogEditModel {
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** 故障描述 */
    faultDescription: string;
}

/** 设备报修记录 */
export class DevRepairsLogView implements IDevRepairsLogView {
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** 故障描述 */
    faultDescription!: string;
    /** 标识 */
    id?: string | undefined;
    /** 处理时间 */
    disposeTime?: dayjs.Dayjs | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备类型显示值 */
    typeLabel?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](透析室名称) */
    sysHospitalAreaName?: string | undefined;

    constructor(data?: IDevRepairsLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.faultDescription = _data["faultDescription"];
            this.id = _data["id"];
            this.disposeTime = _data["disposeTime"] ? dayjs(_data["disposeTime"].toString()) : <any>undefined;
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.sn = _data["sn"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.model = _data["model"];
            this.ip = _data["ip"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.dealer = _data["dealer"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
        }
    }

    static fromJS(data: any): DevRepairsLogView {
        data = typeof data === 'object' ? data : {};
        let result = new DevRepairsLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["faultDescription"] = this.faultDescription;
        data["id"] = this.id;
        data["disposeTime"] = this.disposeTime ? this.disposeTime.toISOString() : <any>undefined;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["sn"] = this.sn;
        data["code"] = this.code;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["model"] = this.model;
        data["ip"] = this.ip;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toISOString() : <any>undefined;
        data["dealer"] = this.dealer;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        return data;
    }
}

/** 设备报修记录 */
export interface IDevRepairsLogView {
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** 故障描述 */
    faultDescription: string;
    /** 标识 */
    id?: string | undefined;
    /** 处理时间 */
    disposeTime?: dayjs.Dayjs | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备类型显示值 */
    typeLabel?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](透析室名称) */
    sysHospitalAreaName?: string | undefined;
}

/** Reponse */
export class DevRepairsLogViewResult implements IDevRepairsLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevRepairsLogView[] | undefined;

    constructor(data?: IDevRepairsLogViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevRepairsLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevRepairsLogViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevRepairsLogViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevRepairsLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevRepairsLogView[] | undefined;
}

/** Reponse */
export class DevRepairsLogViewResultEntry implements IDevRepairsLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevRepairsLogView;

    constructor(data?: IDevRepairsLogViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevRepairsLogView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevRepairsLogViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevRepairsLogViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevRepairsLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevRepairsLogView;
}

/** 报废记录 */
export class DevScrapLog implements IDevScrapLog {
    /** 标识 */
    id?: string | undefined;
    /** [设备标识](科室设备) */
    devInfoId?: string | undefined;
    /** 报废日期 */
    date?: dayjs.Dayjs;
    /** 报废原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    devInfos?: DevInfo;

    constructor(data?: IDevScrapLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.devInfoId = _data["devInfoId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.cause = _data["cause"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.devInfos = _data["devInfos"] ? DevInfo.fromJS(_data["devInfos"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevScrapLog {
        data = typeof data === 'object' ? data : {};
        let result = new DevScrapLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["devInfoId"] = this.devInfoId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["devInfos"] = this.devInfos ? this.devInfos.toJSON() : <any>undefined;
        return data;
    }
}

/** 报废记录 */
export interface IDevScrapLog {
    /** 标识 */
    id?: string | undefined;
    /** [设备标识](科室设备) */
    devInfoId?: string | undefined;
    /** 报废日期 */
    date?: dayjs.Dayjs;
    /** 报废原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    devInfos?: DevInfo;
}

/** Reponse */
export class DevScrapLogResult implements IDevScrapLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevScrapLog[] | undefined;

    constructor(data?: IDevScrapLogResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevScrapLog.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevScrapLogResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevScrapLogResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevScrapLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevScrapLog[] | undefined;
}

/** Reponse */
export class DevScrapLogResultEntry implements IDevScrapLogResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevScrapLog;

    constructor(data?: IDevScrapLogResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevScrapLog.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevScrapLogResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevScrapLogResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevScrapLogResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevScrapLog;
}

/** 报废记录 (ViewModel) */
export class DevScrapLogViewModel implements IDevScrapLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId!: string;
    /** 报废日期 */
    date!: dayjs.Dayjs;
    /** 报废原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevScrapLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.cause = _data["cause"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevScrapLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevScrapLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        return data;
    }
}

/** 报废记录 (ViewModel) */
export interface IDevScrapLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId: string;
    /** 报废日期 */
    date: dayjs.Dayjs;
    /** 报废原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 设备使用记录 */
export class DevUsageLogView implements IDevUsageLogView {
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** 使用日期 */
    date!: dayjs.Dayjs;
    /** 透析时长 */
    timeDialysis?: number | undefined;
    /** 消毒时长 */
    timeDisinfect?: number | undefined;
    /** 开机时长 */
    timeStart?: number | undefined;
    /** 透析时长 */
    timeWork?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 设备状态 */
    equipmentStatus?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 设备编号 *○不允许重复* */
    devInfoCode?: string | undefined;
    /** 设备号 */
    devInfoSn?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDevUsageLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.timeDialysis = _data["timeDialysis"];
            this.timeDisinfect = _data["timeDisinfect"];
            this.timeStart = _data["timeStart"];
            this.timeWork = _data["timeWork"];
            this.remark = _data["remark"];
            this.patientId = _data["patientId"];
            this.equipmentStatus = _data["equipmentStatus"];
            this.patientName = _data["patientName"];
            this.id = _data["id"];
            this.devInfoCode = _data["devInfoCode"];
            this.devInfoSn = _data["devInfoSn"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DevUsageLogView {
        data = typeof data === 'object' ? data : {};
        let result = new DevUsageLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["timeDialysis"] = this.timeDialysis;
        data["timeDisinfect"] = this.timeDisinfect;
        data["timeStart"] = this.timeStart;
        data["timeWork"] = this.timeWork;
        data["remark"] = this.remark;
        data["patientId"] = this.patientId;
        data["equipmentStatus"] = this.equipmentStatus;
        data["patientName"] = this.patientName;
        data["id"] = this.id;
        data["devInfoCode"] = this.devInfoCode;
        data["devInfoSn"] = this.devInfoSn;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 设备使用记录 */
export interface IDevUsageLogView {
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** 使用日期 */
    date: dayjs.Dayjs;
    /** 透析时长 */
    timeDialysis?: number | undefined;
    /** 消毒时长 */
    timeDisinfect?: number | undefined;
    /** 开机时长 */
    timeStart?: number | undefined;
    /** 透析时长 */
    timeWork?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 设备状态 */
    equipmentStatus?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 设备编号 *○不允许重复* */
    devInfoCode?: string | undefined;
    /** 设备号 */
    devInfoSn?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 设备使用记录 (ViewModel) */
export class DevUsageLogViewModel implements IDevUsageLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId!: string;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 使用日期 */
    date!: dayjs.Dayjs;
    /** 透析时长 */
    timeDialysis?: number | undefined;
    /** 消毒时长 */
    timeDisinfect?: number | undefined;
    /** 开机时长 */
    timeStart?: number | undefined;
    /** 透析时长 */
    timeWork?: number | undefined;
    /** 设备状态 */
    equipmentStatus?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevUsageLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.timeDialysis = _data["timeDialysis"];
            this.timeDisinfect = _data["timeDisinfect"];
            this.timeStart = _data["timeStart"];
            this.timeWork = _data["timeWork"];
            this.equipmentStatus = _data["equipmentStatus"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevUsageLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevUsageLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["timeDialysis"] = this.timeDialysis;
        data["timeDisinfect"] = this.timeDisinfect;
        data["timeStart"] = this.timeStart;
        data["timeWork"] = this.timeWork;
        data["equipmentStatus"] = this.equipmentStatus;
        data["remark"] = this.remark;
        return data;
    }
}

/** 设备使用记录 (ViewModel) */
export interface IDevUsageLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId: string;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 使用日期 */
    date: dayjs.Dayjs;
    /** 透析时长 */
    timeDialysis?: number | undefined;
    /** 消毒时长 */
    timeDisinfect?: number | undefined;
    /** 开机时长 */
    timeStart?: number | undefined;
    /** 透析时长 */
    timeWork?: number | undefined;
    /** 设备状态 */
    equipmentStatus?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DevUsageLogViewResult implements IDevUsageLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevUsageLogView[] | undefined;

    constructor(data?: IDevUsageLogViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevUsageLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevUsageLogViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevUsageLogViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevUsageLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevUsageLogView[] | undefined;
}

/** Reponse */
export class DevUsageLogViewResultEntry implements IDevUsageLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevUsageLogView;

    constructor(data?: IDevUsageLogViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevUsageLogView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevUsageLogViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevUsageLogViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevUsageLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevUsageLogView;
}

/** 水处理设备 */
export class DevWaterProcessInfoEditModel implements IDevWaterProcessInfoEditModel {
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 编号 */
    code!: string;
    /** 设备号 */
    deviceNo?: string | undefined;
    /** 设备类型 `DIC.WATER.DEV.TYPE` *污水处理设备,原水处理设备,净水设备,过滤设备* */
    type!: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model!: string;
    /** 品牌 */
    brand?: string | undefined;
    /** 规格 */
    specification?: string | undefined;
    /** 产地 `DIC.DEV.ORIGIN` */
    productionPlace?: string | undefined;
    /** 生产厂家 `DIC.DEV.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 产水量 */
    produceWaterMount?: string | undefined;
    /** 水温 */
    temperature?: string | undefined;
    /** 水压 */
    hydraulic?: string | undefined;
    /** 电导率 */
    conductivity?: string | undefined;
    /** 使用水源 */
    waterSource?: string | undefined;
    /** 过滤器型号 */
    filterModel?: string | undefined;
    /** 水质 */
    waterQuality?: string | undefined;
    /** 供水模式  来源 `DIC.WATER.SUPPLY.MODEL` *直供水,水箱供水* */
    waterSupplyMode?: string | undefined;
    /** 生产时间 */
    produceDate?: dayjs.Dayjs | undefined;
    /** 启用日期 */
    usedDate?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    guaranteeDate?: dayjs.Dayjs | undefined;
    /** [负责人标识](#用户信息) */
    principalId!: string;
    /** 负责人名称 */
    principalName!: string;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status!: string;
    /** 存放地点 */
    savePosition?: string | undefined;
    /** 销售许可证 */
    saleLicense?: string | undefined;
    /** 合格证 */
    certificate?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevWaterProcessInfoEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.code = _data["code"];
            this.deviceNo = _data["deviceNo"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.brand = _data["brand"];
            this.specification = _data["specification"];
            this.productionPlace = _data["productionPlace"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.produceWaterMount = _data["produceWaterMount"];
            this.temperature = _data["temperature"];
            this.hydraulic = _data["hydraulic"];
            this.conductivity = _data["conductivity"];
            this.waterSource = _data["waterSource"];
            this.filterModel = _data["filterModel"];
            this.waterQuality = _data["waterQuality"];
            this.waterSupplyMode = _data["waterSupplyMode"];
            this.produceDate = _data["produceDate"] ? dayjs(_data["produceDate"].toString()) : <any>undefined;
            this.usedDate = _data["usedDate"] ? dayjs(_data["usedDate"].toString()) : <any>undefined;
            this.guaranteeDate = _data["guaranteeDate"] ? dayjs(_data["guaranteeDate"].toString()) : <any>undefined;
            this.principalId = _data["principalId"];
            this.principalName = _data["principalName"];
            this.status = _data["status"];
            this.savePosition = _data["savePosition"];
            this.saleLicense = _data["saleLicense"];
            this.certificate = _data["certificate"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevWaterProcessInfoEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessInfoEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["code"] = this.code;
        data["deviceNo"] = this.deviceNo;
        data["type"] = this.type;
        data["model"] = this.model;
        data["brand"] = this.brand;
        data["specification"] = this.specification;
        data["productionPlace"] = this.productionPlace;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["produceWaterMount"] = this.produceWaterMount;
        data["temperature"] = this.temperature;
        data["hydraulic"] = this.hydraulic;
        data["conductivity"] = this.conductivity;
        data["waterSource"] = this.waterSource;
        data["filterModel"] = this.filterModel;
        data["waterQuality"] = this.waterQuality;
        data["waterSupplyMode"] = this.waterSupplyMode;
        data["produceDate"] = this.produceDate ? this.produceDate.toISOString() : <any>undefined;
        data["usedDate"] = this.usedDate ? this.usedDate.toISOString() : <any>undefined;
        data["guaranteeDate"] = this.guaranteeDate ? this.guaranteeDate.toISOString() : <any>undefined;
        data["principalId"] = this.principalId;
        data["principalName"] = this.principalName;
        data["status"] = this.status;
        data["savePosition"] = this.savePosition;
        data["saleLicense"] = this.saleLicense;
        data["certificate"] = this.certificate;
        data["remark"] = this.remark;
        return data;
    }
}

/** 水处理设备 */
export interface IDevWaterProcessInfoEditModel {
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 编号 */
    code: string;
    /** 设备号 */
    deviceNo?: string | undefined;
    /** 设备类型 `DIC.WATER.DEV.TYPE` *污水处理设备,原水处理设备,净水设备,过滤设备* */
    type: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model: string;
    /** 品牌 */
    brand?: string | undefined;
    /** 规格 */
    specification?: string | undefined;
    /** 产地 `DIC.DEV.ORIGIN` */
    productionPlace?: string | undefined;
    /** 生产厂家 `DIC.DEV.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 产水量 */
    produceWaterMount?: string | undefined;
    /** 水温 */
    temperature?: string | undefined;
    /** 水压 */
    hydraulic?: string | undefined;
    /** 电导率 */
    conductivity?: string | undefined;
    /** 使用水源 */
    waterSource?: string | undefined;
    /** 过滤器型号 */
    filterModel?: string | undefined;
    /** 水质 */
    waterQuality?: string | undefined;
    /** 供水模式  来源 `DIC.WATER.SUPPLY.MODEL` *直供水,水箱供水* */
    waterSupplyMode?: string | undefined;
    /** 生产时间 */
    produceDate?: dayjs.Dayjs | undefined;
    /** 启用日期 */
    usedDate?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    guaranteeDate?: dayjs.Dayjs | undefined;
    /** [负责人标识](#用户信息) */
    principalId: string;
    /** 负责人名称 */
    principalName: string;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status: string;
    /** 存放地点 */
    savePosition?: string | undefined;
    /** 销售许可证 */
    saleLicense?: string | undefined;
    /** 合格证 */
    certificate?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 水处理设备 */
export class DevWaterProcessInfoView implements IDevWaterProcessInfoView {
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 编号 */
    code!: string;
    /** 设备号 */
    deviceNo?: string | undefined;
    /** 设备类型 `DIC.WATER.DEV.TYPE` *污水处理设备,原水处理设备,净水设备,过滤设备* */
    type!: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model!: string;
    /** 品牌 */
    brand?: string | undefined;
    /** 规格 */
    specification?: string | undefined;
    /** 产地 `DIC.DEV.ORIGIN` */
    productionPlace?: string | undefined;
    /** 生产厂家 `DIC.DEV.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 产水量 */
    produceWaterMount?: string | undefined;
    /** 水温 */
    temperature?: string | undefined;
    /** 水压 */
    hydraulic?: string | undefined;
    /** 电导率 */
    conductivity?: string | undefined;
    /** 使用水源 */
    waterSource?: string | undefined;
    /** 过滤器型号 */
    filterModel?: string | undefined;
    /** 水质 */
    waterQuality?: string | undefined;
    /** 供水模式  来源 `DIC.WATER.SUPPLY.MODEL` *直供水,水箱供水* */
    waterSupplyMode?: string | undefined;
    /** 生产时间 */
    produceDate?: dayjs.Dayjs | undefined;
    /** 启用日期 */
    usedDate?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    guaranteeDate?: dayjs.Dayjs | undefined;
    /** [负责人标识](#用户信息) */
    principalId!: string;
    /** 负责人名称 */
    principalName!: string;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status!: string;
    /** 存放地点 */
    savePosition?: string | undefined;
    /** 销售许可证 */
    saleLicense?: string | undefined;
    /** 合格证 */
    certificate?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 设备类型 字典标签 */
    typeName?: string | undefined;
    /** 设备型号 字典标签 */
    modelLabel?: string | undefined;
    /** 生产厂家 字典标签 */
    manufacturerLabel?: string | undefined;
    /** 供应商 字典标签 */
    supplerLabel?: string | undefined;
    /** 供水模式 字典标签 */
    waterSupplyModeLabel?: string | undefined;
    /** 状态 字典标签 */
    statusName?: string | undefined;
    /** 销售许可证 */
    saleLicenseUrl?: string | undefined;
    /** 合格证 */
    certificateUrl?: string | undefined;

    constructor(data?: IDevWaterProcessInfoView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.code = _data["code"];
            this.deviceNo = _data["deviceNo"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.brand = _data["brand"];
            this.specification = _data["specification"];
            this.productionPlace = _data["productionPlace"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.produceWaterMount = _data["produceWaterMount"];
            this.temperature = _data["temperature"];
            this.hydraulic = _data["hydraulic"];
            this.conductivity = _data["conductivity"];
            this.waterSource = _data["waterSource"];
            this.filterModel = _data["filterModel"];
            this.waterQuality = _data["waterQuality"];
            this.waterSupplyMode = _data["waterSupplyMode"];
            this.produceDate = _data["produceDate"] ? dayjs(_data["produceDate"].toString()) : <any>undefined;
            this.usedDate = _data["usedDate"] ? dayjs(_data["usedDate"].toString()) : <any>undefined;
            this.guaranteeDate = _data["guaranteeDate"] ? dayjs(_data["guaranteeDate"].toString()) : <any>undefined;
            this.principalId = _data["principalId"];
            this.principalName = _data["principalName"];
            this.status = _data["status"];
            this.savePosition = _data["savePosition"];
            this.saleLicense = _data["saleLicense"];
            this.certificate = _data["certificate"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.typeName = _data["typeName"];
            this.modelLabel = _data["modelLabel"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.supplerLabel = _data["supplerLabel"];
            this.waterSupplyModeLabel = _data["waterSupplyModeLabel"];
            this.statusName = _data["statusName"];
            this.saleLicenseUrl = _data["saleLicenseUrl"];
            this.certificateUrl = _data["certificateUrl"];
        }
    }

    static fromJS(data: any): DevWaterProcessInfoView {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessInfoView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["code"] = this.code;
        data["deviceNo"] = this.deviceNo;
        data["type"] = this.type;
        data["model"] = this.model;
        data["brand"] = this.brand;
        data["specification"] = this.specification;
        data["productionPlace"] = this.productionPlace;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["produceWaterMount"] = this.produceWaterMount;
        data["temperature"] = this.temperature;
        data["hydraulic"] = this.hydraulic;
        data["conductivity"] = this.conductivity;
        data["waterSource"] = this.waterSource;
        data["filterModel"] = this.filterModel;
        data["waterQuality"] = this.waterQuality;
        data["waterSupplyMode"] = this.waterSupplyMode;
        data["produceDate"] = this.produceDate ? this.produceDate.toISOString() : <any>undefined;
        data["usedDate"] = this.usedDate ? this.usedDate.toISOString() : <any>undefined;
        data["guaranteeDate"] = this.guaranteeDate ? this.guaranteeDate.toISOString() : <any>undefined;
        data["principalId"] = this.principalId;
        data["principalName"] = this.principalName;
        data["status"] = this.status;
        data["savePosition"] = this.savePosition;
        data["saleLicense"] = this.saleLicense;
        data["certificate"] = this.certificate;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["typeName"] = this.typeName;
        data["modelLabel"] = this.modelLabel;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["supplerLabel"] = this.supplerLabel;
        data["waterSupplyModeLabel"] = this.waterSupplyModeLabel;
        data["statusName"] = this.statusName;
        data["saleLicenseUrl"] = this.saleLicenseUrl;
        data["certificateUrl"] = this.certificateUrl;
        return data;
    }
}

/** 水处理设备 */
export interface IDevWaterProcessInfoView {
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 编号 */
    code: string;
    /** 设备号 */
    deviceNo?: string | undefined;
    /** 设备类型 `DIC.WATER.DEV.TYPE` *污水处理设备,原水处理设备,净水设备,过滤设备* */
    type: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model: string;
    /** 品牌 */
    brand?: string | undefined;
    /** 规格 */
    specification?: string | undefined;
    /** 产地 `DIC.DEV.ORIGIN` */
    productionPlace?: string | undefined;
    /** 生产厂家 `DIC.DEV.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 产水量 */
    produceWaterMount?: string | undefined;
    /** 水温 */
    temperature?: string | undefined;
    /** 水压 */
    hydraulic?: string | undefined;
    /** 电导率 */
    conductivity?: string | undefined;
    /** 使用水源 */
    waterSource?: string | undefined;
    /** 过滤器型号 */
    filterModel?: string | undefined;
    /** 水质 */
    waterQuality?: string | undefined;
    /** 供水模式  来源 `DIC.WATER.SUPPLY.MODEL` *直供水,水箱供水* */
    waterSupplyMode?: string | undefined;
    /** 生产时间 */
    produceDate?: dayjs.Dayjs | undefined;
    /** 启用日期 */
    usedDate?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    guaranteeDate?: dayjs.Dayjs | undefined;
    /** [负责人标识](#用户信息) */
    principalId: string;
    /** 负责人名称 */
    principalName: string;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status: string;
    /** 存放地点 */
    savePosition?: string | undefined;
    /** 销售许可证 */
    saleLicense?: string | undefined;
    /** 合格证 */
    certificate?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 设备类型 字典标签 */
    typeName?: string | undefined;
    /** 设备型号 字典标签 */
    modelLabel?: string | undefined;
    /** 生产厂家 字典标签 */
    manufacturerLabel?: string | undefined;
    /** 供应商 字典标签 */
    supplerLabel?: string | undefined;
    /** 供水模式 字典标签 */
    waterSupplyModeLabel?: string | undefined;
    /** 状态 字典标签 */
    statusName?: string | undefined;
    /** 销售许可证 */
    saleLicenseUrl?: string | undefined;
    /** 合格证 */
    certificateUrl?: string | undefined;
}

/** Reponse */
export class DevWaterProcessInfoViewResult implements IDevWaterProcessInfoViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevWaterProcessInfoView[] | undefined;

    constructor(data?: IDevWaterProcessInfoViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevWaterProcessInfoView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevWaterProcessInfoViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessInfoViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevWaterProcessInfoViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevWaterProcessInfoView[] | undefined;
}

/** Reponse */
export class DevWaterProcessInfoViewResultEntry implements IDevWaterProcessInfoViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevWaterProcessInfoView;

    constructor(data?: IDevWaterProcessInfoViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevWaterProcessInfoView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevWaterProcessInfoViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessInfoViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevWaterProcessInfoViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevWaterProcessInfoView;
}

/** 个人药库借药 */
export class DrugStorageArrearageEditModel implements IDrugStorageArrearageEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 欠药时间 */
    date!: dayjs.Dayjs;
    /** 数量 */
    count!: number;
    /** 入库数量 */
    backCount!: number;
    /** 是否完成入库0,1 */
    status!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDrugStorageArrearageEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.count = _data["count"];
            this.backCount = _data["backCount"];
            this.status = _data["status"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DrugStorageArrearageEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageArrearageEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["count"] = this.count;
        data["backCount"] = this.backCount;
        data["status"] = this.status;
        data["remark"] = this.remark;
        return data;
    }
}

/** 个人药库借药 */
export interface IDrugStorageArrearageEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 欠药时间 */
    date: dayjs.Dayjs;
    /** 数量 */
    count: number;
    /** 入库数量 */
    backCount: number;
    /** 是否完成入库0,1 */
    status: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 个人药库借药 */
export class DrugStorageArrearageView implements IDrugStorageArrearageView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 欠药时间 */
    date!: dayjs.Dayjs;
    /** 数量 */
    count!: number;
    /** 入库数量 */
    backCount!: number;
    /** 是否完成入库0,1 */
    status!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` */
    unitBase!: string;

    constructor(data?: IDrugStorageArrearageView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.count = _data["count"];
            this.backCount = _data["backCount"];
            this.status = _data["status"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.sourceLabel = _data["sourceLabel"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
            this.unitBase = _data["unitBase"];
        }
    }

    static fromJS(data: any): DrugStorageArrearageView {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageArrearageView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["count"] = this.count;
        data["backCount"] = this.backCount;
        data["status"] = this.status;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["sourceLabel"] = this.sourceLabel;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        data["unitBase"] = this.unitBase;
        return data;
    }
}

/** 个人药库借药 */
export interface IDrugStorageArrearageView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 欠药时间 */
    date: dayjs.Dayjs;
    /** 数量 */
    count: number;
    /** 入库数量 */
    backCount: number;
    /** 是否完成入库0,1 */
    status: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` */
    unitBase: string;
}

/** Reponse */
export class DrugStorageArrearageViewResult implements IDrugStorageArrearageViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageArrearageView[] | undefined;

    constructor(data?: IDrugStorageArrearageViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugStorageArrearageView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugStorageArrearageViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageArrearageViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugStorageArrearageViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageArrearageView[] | undefined;
}

/** 个人药库明细 */
export class DrugStorageDetailView implements IDrugStorageDetailView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 类型 (入库 出库 借药) */
    storageType?: string | undefined;
    /** 数量 */
    count?: number;
    /** 剩余数量 */
    surplusCount?: number;
    /** 项目名称 */
    roomItemListId?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;

    constructor(data?: IDrugStorageDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.storageType = _data["storageType"];
            this.count = _data["count"];
            this.surplusCount = _data["surplusCount"];
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
        }
    }

    static fromJS(data: any): DrugStorageDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["storageType"] = this.storageType;
        data["count"] = this.count;
        data["surplusCount"] = this.surplusCount;
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        return data;
    }
}

/** 个人药库明细 */
export interface IDrugStorageDetailView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 类型 (入库 出库 借药) */
    storageType?: string | undefined;
    /** 数量 */
    count?: number;
    /** 剩余数量 */
    surplusCount?: number;
    /** 项目名称 */
    roomItemListId?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
}

/** Reponse */
export class DrugStorageDetailViewResult implements IDrugStorageDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageDetailView[] | undefined;

    constructor(data?: IDrugStorageDetailViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugStorageDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugStorageDetailViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageDetailViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugStorageDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageDetailView[] | undefined;
}

/** 个人药库入库 */
export class DrugStorageInEditModel implements IDrugStorageInEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [个人药库库存](#个人药库库存) */
    drugStorageInventoryId?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 入库时间 */
    date!: dayjs.Dayjs;
    /** 入库数量 */
    inCount!: number;
    /** 剩余数量 */
    surplusCount!: number;
    /** 入库单号(发票号码) */
    inNumber?: string | undefined;
    /** 住院号 */
    hospitalNumber?: string | undefined;
    /** 住院序号 */
    hospitalSeq?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDrugStorageInEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.drugStorageInventoryId = _data["drugStorageInventoryId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.inCount = _data["inCount"];
            this.surplusCount = _data["surplusCount"];
            this.inNumber = _data["inNumber"];
            this.hospitalNumber = _data["hospitalNumber"];
            this.hospitalSeq = _data["hospitalSeq"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DrugStorageInEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageInEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["drugStorageInventoryId"] = this.drugStorageInventoryId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["inCount"] = this.inCount;
        data["surplusCount"] = this.surplusCount;
        data["inNumber"] = this.inNumber;
        data["hospitalNumber"] = this.hospitalNumber;
        data["hospitalSeq"] = this.hospitalSeq;
        data["remark"] = this.remark;
        return data;
    }
}

/** 个人药库入库 */
export interface IDrugStorageInEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [个人药库库存](#个人药库库存) */
    drugStorageInventoryId?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 入库时间 */
    date: dayjs.Dayjs;
    /** 入库数量 */
    inCount: number;
    /** 剩余数量 */
    surplusCount: number;
    /** 入库单号(发票号码) */
    inNumber?: string | undefined;
    /** 住院号 */
    hospitalNumber?: string | undefined;
    /** 住院序号 */
    hospitalSeq?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 个人药库入库 */
export class DrugStorageInView implements IDrugStorageInView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [个人药库库存](#个人药库库存) */
    drugStorageInventoryId?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 入库时间 */
    date!: dayjs.Dayjs;
    /** 入库数量 */
    inCount!: number;
    /** 剩余数量 */
    surplusCount!: number;
    /** 入库单号(发票号码) */
    inNumber?: string | undefined;
    /** 住院号 */
    hospitalNumber?: string | undefined;
    /** 住院序号 */
    hospitalSeq?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 上次出库时间 */
    lastOutTime?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;

    constructor(data?: IDrugStorageInView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.drugStorageInventoryId = _data["drugStorageInventoryId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.inCount = _data["inCount"];
            this.surplusCount = _data["surplusCount"];
            this.inNumber = _data["inNumber"];
            this.hospitalNumber = _data["hospitalNumber"];
            this.hospitalSeq = _data["hospitalSeq"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.lastOutTime = _data["lastOutTime"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.sourceLabel = _data["sourceLabel"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBase = _data["unitBase"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
        }
    }

    static fromJS(data: any): DrugStorageInView {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageInView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["drugStorageInventoryId"] = this.drugStorageInventoryId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["inCount"] = this.inCount;
        data["surplusCount"] = this.surplusCount;
        data["inNumber"] = this.inNumber;
        data["hospitalNumber"] = this.hospitalNumber;
        data["hospitalSeq"] = this.hospitalSeq;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["lastOutTime"] = this.lastOutTime;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["sourceLabel"] = this.sourceLabel;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBase"] = this.unitBase;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        return data;
    }
}

/** 个人药库入库 */
export interface IDrugStorageInView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [个人药库库存](#个人药库库存) */
    drugStorageInventoryId?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 入库时间 */
    date: dayjs.Dayjs;
    /** 入库数量 */
    inCount: number;
    /** 剩余数量 */
    surplusCount: number;
    /** 入库单号(发票号码) */
    inNumber?: string | undefined;
    /** 住院号 */
    hospitalNumber?: string | undefined;
    /** 住院序号 */
    hospitalSeq?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 上次出库时间 */
    lastOutTime?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
}

/** Reponse */
export class DrugStorageInViewResult implements IDrugStorageInViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageInView[] | undefined;

    constructor(data?: IDrugStorageInViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugStorageInView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugStorageInViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageInViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugStorageInViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageInView[] | undefined;
}

/** 个人药库库存 */
export class DrugStorageInventoryView implements IDrugStorageInventoryView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 库存数量 */
    inventoryCount!: number;
    /** 主键标识 */
    id?: string | undefined;
    /** 上次入库时间 */
    lastInTime?: dayjs.Dayjs | undefined;
    /** 上次出库时间 */
    lastOutTime?: dayjs.Dayjs | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者来源显示值 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;

    constructor(data?: IDrugStorageInventoryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.lastInTime = _data["lastInTime"] ? dayjs(_data["lastInTime"].toString()) : <any>undefined;
            this.lastOutTime = _data["lastOutTime"] ? dayjs(_data["lastOutTime"].toString()) : <any>undefined;
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sourceLabel = _data["sourceLabel"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBase = _data["unitBase"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
        }
    }

    static fromJS(data: any): DrugStorageInventoryView {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageInventoryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["lastInTime"] = this.lastInTime ? this.lastInTime.toISOString() : <any>undefined;
        data["lastOutTime"] = this.lastOutTime ? this.lastOutTime.toISOString() : <any>undefined;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["sourceLabel"] = this.sourceLabel;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBase"] = this.unitBase;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        return data;
    }
}

/** 个人药库库存 */
export interface IDrugStorageInventoryView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 库存数量 */
    inventoryCount: number;
    /** 主键标识 */
    id?: string | undefined;
    /** 上次入库时间 */
    lastInTime?: dayjs.Dayjs | undefined;
    /** 上次出库时间 */
    lastOutTime?: dayjs.Dayjs | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者来源显示值 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
}

/** Reponse */
export class DrugStorageInventoryViewResult implements IDrugStorageInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageInventoryView[] | undefined;

    constructor(data?: IDrugStorageInventoryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugStorageInventoryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugStorageInventoryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageInventoryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugStorageInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageInventoryView[] | undefined;
}

/** 个人药库出库 */
export class DrugStorageOutEditModel implements IDrugStorageOutEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 出库时间 */
    date!: dayjs.Dayjs;
    /** 数量 */
    count!: number;
    /** 入库记录标识 */
    drugStorageInId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDrugStorageOutEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.count = _data["count"];
            this.drugStorageInId = _data["drugStorageInId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DrugStorageOutEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageOutEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["count"] = this.count;
        data["drugStorageInId"] = this.drugStorageInId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 个人药库出库 */
export interface IDrugStorageOutEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 出库时间 */
    date: dayjs.Dayjs;
    /** 数量 */
    count: number;
    /** 入库记录标识 */
    drugStorageInId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 个人药库出库 */
export class DrugStorageOutView implements IDrugStorageOutView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 出库时间 */
    date!: dayjs.Dayjs;
    /** 数量 */
    count!: number;
    /** 入库记录标识 */
    drugStorageInId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 入库单号 */
    inNumber?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;

    constructor(data?: IDrugStorageOutView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.count = _data["count"];
            this.drugStorageInId = _data["drugStorageInId"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.inNumber = _data["inNumber"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.sourceLabel = _data["sourceLabel"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBase = _data["unitBase"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
        }
    }

    static fromJS(data: any): DrugStorageOutView {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageOutView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["count"] = this.count;
        data["drugStorageInId"] = this.drugStorageInId;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["inNumber"] = this.inNumber;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["sourceLabel"] = this.sourceLabel;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBase"] = this.unitBase;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        return data;
    }
}

/** 个人药库出库 */
export interface IDrugStorageOutView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 出库时间 */
    date: dayjs.Dayjs;
    /** 数量 */
    count: number;
    /** 入库记录标识 */
    drugStorageInId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 入库单号 */
    inNumber?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
}

/** Reponse */
export class DrugStorageOutViewResult implements IDrugStorageOutViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageOutView[] | undefined;

    constructor(data?: IDrugStorageOutViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugStorageOutView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugStorageOutViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageOutViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugStorageOutViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageOutView[] | undefined;
}

export enum Edition {
    _0 = 0,
    _1 = 1,
}

/** 文件列表 */
export class HfsFiles implements IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHfsFiles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.status = _data["status"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HfsFiles {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["status"] = this.status;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 文件列表 */
export interface IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HfsFilesResult implements IHfsFilesResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HfsFiles[] | undefined;

    constructor(data?: IHfsFilesResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HfsFiles.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HfsFilesResult {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFilesResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHfsFilesResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HfsFiles[] | undefined;
}

/** Reponse */
export class HfsFilesResultEntry implements IHfsFilesResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HfsFiles;

    constructor(data?: IHfsFilesResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HfsFiles.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HfsFilesResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFilesResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHfsFilesResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HfsFiles;
}

/** 文件列表 (ViewModel) */
export class HfsFilesViewModel implements IHfsFilesViewModel {
    /** 原文件名 */
    name!: string;
    /** 扩展名 */
    extension!: string;
    /** 文件大小 *字节* */
    length!: number;
    /** 文件路径 */
    path!: string;
    /** url */
    url!: string;
    /** 状态0,1 *0：临时 1：正式* */
    status!: number;

    constructor(data?: IHfsFilesViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): HfsFilesViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFilesViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["status"] = this.status;
        return data;
    }
}

/** 文件列表 (ViewModel) */
export interface IHfsFilesViewModel {
    /** 原文件名 */
    name: string;
    /** 扩展名 */
    extension: string;
    /** 文件大小 *字节* */
    length: number;
    /** 文件路径 */
    path: string;
    /** url */
    url: string;
    /** 状态0,1 *0：临时 1：正式* */
    status: number;
}

/** 治疗室环境监测采样 */
export class HospitalEnvMoniterRecordEditModel implements IHospitalEnvMoniterRecordEditModel {
    /** 检测年份 */
    year!: number;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 采样结果 */
    result?: string | undefined;

    constructor(data?: IHospitalEnvMoniterRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.operatorId = _data["operatorId"];
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): HospitalEnvMoniterRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalEnvMoniterRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["operatorId"] = this.operatorId;
        data["result"] = this.result;
        return data;
    }
}

/** 治疗室环境监测采样 */
export interface IHospitalEnvMoniterRecordEditModel {
    /** 检测年份 */
    year: number;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 采样结果 */
    result?: string | undefined;
}

/** 治疗室环境监测采样 */
export class HospitalEnvMoniterRecordView implements IHospitalEnvMoniterRecordView {
    /** 检测年份 */
    year!: number;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 采样结果 */
    result?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalEnvMoniterRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.operatorId = _data["operatorId"];
            this.result = _data["result"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalEnvMoniterRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalEnvMoniterRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["operatorId"] = this.operatorId;
        data["result"] = this.result;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 治疗室环境监测采样 */
export interface IHospitalEnvMoniterRecordView {
    /** 检测年份 */
    year: number;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 采样结果 */
    result?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalEnvMoniterRecordViewResult implements IHospitalEnvMoniterRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalEnvMoniterRecordView[] | undefined;

    constructor(data?: IHospitalEnvMoniterRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalEnvMoniterRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalEnvMoniterRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalEnvMoniterRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalEnvMoniterRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalEnvMoniterRecordView[] | undefined;
}

/** Reponse */
export class HospitalEnvMoniterRecordViewResultEntry implements IHospitalEnvMoniterRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalEnvMoniterRecordView;

    constructor(data?: IHospitalEnvMoniterRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalEnvMoniterRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalEnvMoniterRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalEnvMoniterRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalEnvMoniterRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalEnvMoniterRecordView;
}

export class HospitalInfectionDialysateDetailView implements IHospitalInfectionDialysateDetailView {
    id?: string | undefined;
    date?: dayjs.Dayjs;
    operatorId?: string | undefined;
    operatorName?: string | undefined;
    sysHospitalAreaId?: string | undefined;
    data?: HospitalInfectionDialysateItems[] | undefined;

    constructor(data?: IHospitalInfectionDialysateDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionDialysateItems.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IHospitalInfectionDialysateDetailView {
    id?: string | undefined;
    date?: dayjs.Dayjs;
    operatorId?: string | undefined;
    operatorName?: string | undefined;
    sysHospitalAreaId?: string | undefined;
    data?: HospitalInfectionDialysateItems[] | undefined;
}

/** Reponse */
export class HospitalInfectionDialysateDetailViewResultEntry implements IHospitalInfectionDialysateDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionDialysateDetailView;

    constructor(data?: IHospitalInfectionDialysateDetailViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionDialysateDetailView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateDetailViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateDetailViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionDialysateDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionDialysateDetailView;
}

export class HospitalInfectionDialysateDetails implements IHospitalInfectionDialysateDetails {
    deviceId?: string | undefined;
    deviceName?: string | undefined;
    germ?: number | undefined;
    endotoxin?: number | undefined;
    sequence?: number;
    isGerm?: boolean;
    isEndotoxin?: boolean;

    constructor(data?: IHospitalInfectionDialysateDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"];
            this.deviceName = _data["deviceName"];
            this.germ = _data["germ"];
            this.endotoxin = _data["endotoxin"];
            this.sequence = _data["sequence"];
            this.isGerm = _data["isGerm"];
            this.isEndotoxin = _data["isEndotoxin"];
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateDetails {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId;
        data["deviceName"] = this.deviceName;
        data["germ"] = this.germ;
        data["endotoxin"] = this.endotoxin;
        data["sequence"] = this.sequence;
        data["isGerm"] = this.isGerm;
        data["isEndotoxin"] = this.isEndotoxin;
        return data;
    }
}

export interface IHospitalInfectionDialysateDetails {
    deviceId?: string | undefined;
    deviceName?: string | undefined;
    germ?: number | undefined;
    endotoxin?: number | undefined;
    sequence?: number;
    isGerm?: boolean;
    isEndotoxin?: boolean;
}

/** 透析液检测 */
export class HospitalInfectionDialysateEdit implements IHospitalInfectionDialysateEdit {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 检测年份 */
    year!: number;

    constructor(data?: IHospitalInfectionDialysateEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.result = _data["result"];
            this.remark = _data["remark"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.year = _data["year"];
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateEdit {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["result"] = this.result;
        data["remark"] = this.remark;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["year"] = this.year;
        return data;
    }
}

/** 透析液检测 */
export interface IHospitalInfectionDialysateEdit {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 检测年份 */
    year: number;
}

export class HospitalInfectionDialysateItems implements IHospitalInfectionDialysateItems {
    date?: dayjs.Dayjs | undefined;
    details?: HospitalInfectionDialysateDetails[] | undefined;

    constructor(data?: IHospitalInfectionDialysateItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(HospitalInfectionDialysateDetails.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateItems {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        return data;
    }
}

export interface IHospitalInfectionDialysateItems {
    date?: dayjs.Dayjs | undefined;
    details?: HospitalInfectionDialysateDetails[] | undefined;
}

/** 透析液检测 */
export class HospitalInfectionDialysateView implements IHospitalInfectionDialysateView {
    /** 年份 */
    year?: number;
    /** 创建人标识 */
    operatorId?: string | undefined;
    /** 创建人 */
    operatorName?: string | undefined;
    /** 检测次数 */
    count?: number;
    /** 检测次数 */
    lastDate?: dayjs.Dayjs;

    constructor(data?: IHospitalInfectionDialysateView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.count = _data["count"];
            this.lastDate = _data["lastDate"] ? dayjs(_data["lastDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["count"] = this.count;
        data["lastDate"] = this.lastDate ? this.lastDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析液检测 */
export interface IHospitalInfectionDialysateView {
    /** 年份 */
    year?: number;
    /** 创建人标识 */
    operatorId?: string | undefined;
    /** 创建人 */
    operatorName?: string | undefined;
    /** 检测次数 */
    count?: number;
    /** 检测次数 */
    lastDate?: dayjs.Dayjs;
}

/** Reponse */
export class HospitalInfectionDialysateViewResult implements IHospitalInfectionDialysateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionDialysateView[] | undefined;

    constructor(data?: IHospitalInfectionDialysateViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionDialysateView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionDialysateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionDialysateView[] | undefined;
}

/** 消毒液残留量检测 */
export class HospitalInfectionDisinfectantResidueDetectionEditModel implements IHospitalInfectionDisinfectantResidueDetectionEditModel {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 出水采样口检测结果 */
    outwaterSamplingResult?: string | undefined;
    /** 出水采样口检测时间 */
    outwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 回水采样口检测结果 */
    inwaterSamplingResult?: string | undefined;
    /** 回水采样口检测时间 */
    inwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 配水箱检测结果 */
    distributionwaterTankResult?: string | undefined;
    /** 配水箱检测时间 */
    distributionwaterTankTime?: dayjs.Dayjs | undefined;
    /** 操作人 */
    operator!: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;

    constructor(data?: IHospitalInfectionDisinfectantResidueDetectionEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.outwaterSamplingResult = _data["outwaterSamplingResult"];
            this.outwaterSamplingTime = _data["outwaterSamplingTime"] ? dayjs(_data["outwaterSamplingTime"].toString()) : <any>undefined;
            this.inwaterSamplingResult = _data["inwaterSamplingResult"];
            this.inwaterSamplingTime = _data["inwaterSamplingTime"] ? dayjs(_data["inwaterSamplingTime"].toString()) : <any>undefined;
            this.distributionwaterTankResult = _data["distributionwaterTankResult"];
            this.distributionwaterTankTime = _data["distributionwaterTankTime"] ? dayjs(_data["distributionwaterTankTime"].toString()) : <any>undefined;
            this.operator = _data["operator"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
        }
    }

    static fromJS(data: any): HospitalInfectionDisinfectantResidueDetectionEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDisinfectantResidueDetectionEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["outwaterSamplingResult"] = this.outwaterSamplingResult;
        data["outwaterSamplingTime"] = this.outwaterSamplingTime ? this.outwaterSamplingTime.toISOString() : <any>undefined;
        data["inwaterSamplingResult"] = this.inwaterSamplingResult;
        data["inwaterSamplingTime"] = this.inwaterSamplingTime ? this.inwaterSamplingTime.toISOString() : <any>undefined;
        data["distributionwaterTankResult"] = this.distributionwaterTankResult;
        data["distributionwaterTankTime"] = this.distributionwaterTankTime ? this.distributionwaterTankTime.toISOString() : <any>undefined;
        data["operator"] = this.operator;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        return data;
    }
}

/** 消毒液残留量检测 */
export interface IHospitalInfectionDisinfectantResidueDetectionEditModel {
    /** 日期 */
    date: dayjs.Dayjs;
    /** 出水采样口检测结果 */
    outwaterSamplingResult?: string | undefined;
    /** 出水采样口检测时间 */
    outwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 回水采样口检测结果 */
    inwaterSamplingResult?: string | undefined;
    /** 回水采样口检测时间 */
    inwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 配水箱检测结果 */
    distributionwaterTankResult?: string | undefined;
    /** 配水箱检测时间 */
    distributionwaterTankTime?: dayjs.Dayjs | undefined;
    /** 操作人 */
    operator: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
}

/** 消毒液残留量检测 */
export class HospitalInfectionDisinfectantResidueDetectionView implements IHospitalInfectionDisinfectantResidueDetectionView {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 出水采样口检测结果 */
    outwaterSamplingResult?: string | undefined;
    /** 出水采样口检测时间 */
    outwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 回水采样口检测结果 */
    inwaterSamplingResult?: string | undefined;
    /** 回水采样口检测时间 */
    inwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 配水箱检测结果 */
    distributionwaterTankResult?: string | undefined;
    /** 配水箱检测时间 */
    distributionwaterTankTime?: dayjs.Dayjs | undefined;
    /** 操作人 */
    operator!: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionDisinfectantResidueDetectionView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.outwaterSamplingResult = _data["outwaterSamplingResult"];
            this.outwaterSamplingTime = _data["outwaterSamplingTime"] ? dayjs(_data["outwaterSamplingTime"].toString()) : <any>undefined;
            this.inwaterSamplingResult = _data["inwaterSamplingResult"];
            this.inwaterSamplingTime = _data["inwaterSamplingTime"] ? dayjs(_data["inwaterSamplingTime"].toString()) : <any>undefined;
            this.distributionwaterTankResult = _data["distributionwaterTankResult"];
            this.distributionwaterTankTime = _data["distributionwaterTankTime"] ? dayjs(_data["distributionwaterTankTime"].toString()) : <any>undefined;
            this.operator = _data["operator"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionDisinfectantResidueDetectionView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDisinfectantResidueDetectionView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["outwaterSamplingResult"] = this.outwaterSamplingResult;
        data["outwaterSamplingTime"] = this.outwaterSamplingTime ? this.outwaterSamplingTime.toISOString() : <any>undefined;
        data["inwaterSamplingResult"] = this.inwaterSamplingResult;
        data["inwaterSamplingTime"] = this.inwaterSamplingTime ? this.inwaterSamplingTime.toISOString() : <any>undefined;
        data["distributionwaterTankResult"] = this.distributionwaterTankResult;
        data["distributionwaterTankTime"] = this.distributionwaterTankTime ? this.distributionwaterTankTime.toISOString() : <any>undefined;
        data["operator"] = this.operator;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 消毒液残留量检测 */
export interface IHospitalInfectionDisinfectantResidueDetectionView {
    /** 日期 */
    date: dayjs.Dayjs;
    /** 出水采样口检测结果 */
    outwaterSamplingResult?: string | undefined;
    /** 出水采样口检测时间 */
    outwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 回水采样口检测结果 */
    inwaterSamplingResult?: string | undefined;
    /** 回水采样口检测时间 */
    inwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 配水箱检测结果 */
    distributionwaterTankResult?: string | undefined;
    /** 配水箱检测时间 */
    distributionwaterTankTime?: dayjs.Dayjs | undefined;
    /** 操作人 */
    operator: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionDisinfectantResidueDetectionViewResult implements IHospitalInfectionDisinfectantResidueDetectionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionDisinfectantResidueDetectionView[] | undefined;

    constructor(data?: IHospitalInfectionDisinfectantResidueDetectionViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionDisinfectantResidueDetectionView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionDisinfectantResidueDetectionViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDisinfectantResidueDetectionViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionDisinfectantResidueDetectionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionDisinfectantResidueDetectionView[] | undefined;
}

/** Reponse */
export class HospitalInfectionDisinfectantResidueDetectionViewResultEntry implements IHospitalInfectionDisinfectantResidueDetectionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionDisinfectantResidueDetectionView;

    constructor(data?: IHospitalInfectionDisinfectantResidueDetectionViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionDisinfectantResidueDetectionView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionDisinfectantResidueDetectionViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDisinfectantResidueDetectionViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionDisinfectantResidueDetectionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionDisinfectantResidueDetectionView;
}

/** 电解质检测 */
export class HospitalInfectionElectrolyteEdit implements IHospitalInfectionElectrolyteEdit {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** [监测人员标识](#用户信息) */
    operatorId!: string;
    /** 钠 *mmol/L* */
    na?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 氯 *mmol/L* */
    cl?: number | undefined;
    /** 透析液批号 */
    lotNumber?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IHospitalInfectionElectrolyteEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devInfoId = _data["devInfoId"];
            this.operatorId = _data["operatorId"];
            this.na = _data["na"];
            this.k = _data["k"];
            this.cl = _data["cl"];
            this.lotNumber = _data["lotNumber"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): HospitalInfectionElectrolyteEdit {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionElectrolyteEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["devInfoId"] = this.devInfoId;
        data["operatorId"] = this.operatorId;
        data["na"] = this.na;
        data["k"] = this.k;
        data["cl"] = this.cl;
        data["lotNumber"] = this.lotNumber;
        data["remark"] = this.remark;
        return data;
    }
}

/** 电解质检测 */
export interface IHospitalInfectionElectrolyteEdit {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** [监测人员标识](#用户信息) */
    operatorId: string;
    /** 钠 *mmol/L* */
    na?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 氯 *mmol/L* */
    cl?: number | undefined;
    /** 透析液批号 */
    lotNumber?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 电解质检测 */
export class HospitalInfectionElectrolyteView implements IHospitalInfectionElectrolyteView {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** [监测人员标识](#用户信息) */
    operatorId!: string;
    /** 钠 *mmol/L* */
    na?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 氯 *mmol/L* */
    cl?: number | undefined;
    /** 透析液批号 */
    lotNumber?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设备名称 */
    devInfoName?: string | undefined;
    /** 操作者 */
    operatorName?: string | undefined;
    /** 操作者别名 */
    operatorName2?: string | undefined;
    /** 操作者全名 */
    operatorNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionElectrolyteView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devInfoId = _data["devInfoId"];
            this.operatorId = _data["operatorId"];
            this.na = _data["na"];
            this.k = _data["k"];
            this.cl = _data["cl"];
            this.lotNumber = _data["lotNumber"];
            this.remark = _data["remark"];
            this.devInfoName = _data["devInfoName"];
            this.operatorName = _data["operatorName"];
            this.operatorName2 = _data["operatorName2"];
            this.operatorNameFull = _data["operatorNameFull"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionElectrolyteView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionElectrolyteView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["devInfoId"] = this.devInfoId;
        data["operatorId"] = this.operatorId;
        data["na"] = this.na;
        data["k"] = this.k;
        data["cl"] = this.cl;
        data["lotNumber"] = this.lotNumber;
        data["remark"] = this.remark;
        data["devInfoName"] = this.devInfoName;
        data["operatorName"] = this.operatorName;
        data["operatorName2"] = this.operatorName2;
        data["operatorNameFull"] = this.operatorNameFull;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 电解质检测 */
export interface IHospitalInfectionElectrolyteView {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** [监测人员标识](#用户信息) */
    operatorId: string;
    /** 钠 *mmol/L* */
    na?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 氯 *mmol/L* */
    cl?: number | undefined;
    /** 透析液批号 */
    lotNumber?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设备名称 */
    devInfoName?: string | undefined;
    /** 操作者 */
    operatorName?: string | undefined;
    /** 操作者别名 */
    operatorName2?: string | undefined;
    /** 操作者全名 */
    operatorNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionElectrolyteViewResult implements IHospitalInfectionElectrolyteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionElectrolyteView[] | undefined;

    constructor(data?: IHospitalInfectionElectrolyteViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionElectrolyteView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionElectrolyteViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionElectrolyteViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionElectrolyteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionElectrolyteView[] | undefined;
}

/** Reponse */
export class HospitalInfectionElectrolyteViewResultEntry implements IHospitalInfectionElectrolyteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionElectrolyteView;

    constructor(data?: IHospitalInfectionElectrolyteViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionElectrolyteView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionElectrolyteViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionElectrolyteViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionElectrolyteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionElectrolyteView;
}

/** 细菌培养 */
export class HospitalInfectionGermicultureEdit implements IHospitalInfectionGermicultureEdit {
    /** 送检日期 */
    submittedDate!: dayjs.Dayjs;
    /** 培养类型 *细菌培养,空气细菌,消毒剂培养* */
    type!: string;
    /** 培养项目 *细菌培养,空气细菌,员工培养,消毒剂培养* */
    cultivateProject?: string | undefined;
    /** 送检单位 */
    submittedDepartment?: string | undefined;
    /** 临床印象 */
    clinicalImpression?: string | undefined;
    /** 送检材料 */
    submittedMaterials?: string | undefined;
    /** 检验项目 */
    submittedProject?: string | undefined;
    /** 送检医师 */
    submitteDphysician?: string | undefined;
    /** 检验结果 */
    result?: string | undefined;
    /** 报告日期 */
    reportDate!: dayjs.Dayjs;
    /** 检查员 */
    inspector!: string;
    /** 检验者 */
    checker!: string;
    /** 备注 */
    remark?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;

    constructor(data?: IHospitalInfectionGermicultureEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.submittedDate = _data["submittedDate"] ? dayjs(_data["submittedDate"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.cultivateProject = _data["cultivateProject"];
            this.submittedDepartment = _data["submittedDepartment"];
            this.clinicalImpression = _data["clinicalImpression"];
            this.submittedMaterials = _data["submittedMaterials"];
            this.submittedProject = _data["submittedProject"];
            this.submitteDphysician = _data["submitteDphysician"];
            this.result = _data["result"];
            this.reportDate = _data["reportDate"] ? dayjs(_data["reportDate"].toString()) : <any>undefined;
            this.inspector = _data["inspector"];
            this.checker = _data["checker"];
            this.remark = _data["remark"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureEdit {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["submittedDate"] = this.submittedDate ? this.submittedDate.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["cultivateProject"] = this.cultivateProject;
        data["submittedDepartment"] = this.submittedDepartment;
        data["clinicalImpression"] = this.clinicalImpression;
        data["submittedMaterials"] = this.submittedMaterials;
        data["submittedProject"] = this.submittedProject;
        data["submitteDphysician"] = this.submitteDphysician;
        data["result"] = this.result;
        data["reportDate"] = this.reportDate ? this.reportDate.toISOString() : <any>undefined;
        data["inspector"] = this.inspector;
        data["checker"] = this.checker;
        data["remark"] = this.remark;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        return data;
    }
}

/** 细菌培养 */
export interface IHospitalInfectionGermicultureEdit {
    /** 送检日期 */
    submittedDate: dayjs.Dayjs;
    /** 培养类型 *细菌培养,空气细菌,消毒剂培养* */
    type: string;
    /** 培养项目 *细菌培养,空气细菌,员工培养,消毒剂培养* */
    cultivateProject?: string | undefined;
    /** 送检单位 */
    submittedDepartment?: string | undefined;
    /** 临床印象 */
    clinicalImpression?: string | undefined;
    /** 送检材料 */
    submittedMaterials?: string | undefined;
    /** 检验项目 */
    submittedProject?: string | undefined;
    /** 送检医师 */
    submitteDphysician?: string | undefined;
    /** 检验结果 */
    result?: string | undefined;
    /** 报告日期 */
    reportDate: dayjs.Dayjs;
    /** 检查员 */
    inspector: string;
    /** 检验者 */
    checker: string;
    /** 备注 */
    remark?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
}

export class HospitalInfectionGermicultureSurfaceEditModel implements IHospitalInfectionGermicultureSurfaceEditModel {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 碘伏 */
    iodophor?: number | undefined;
    /** 生理盐水 */
    saline?: number | undefined;
    /** 机器表面 */
    machineSurface?: number | undefined;
    /** 棉签 */
    cottonSwab?: number | undefined;
    /** 手指 */
    finger?: number | undefined;
    /** 冰箱 */
    fridge?: number | undefined;
    /** 浓缩液A */
    concentrateSolutionA?: number | undefined;
    /** 浓缩液B */
    concentrateSolutionB?: number | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;

    constructor(data?: IHospitalInfectionGermicultureSurfaceEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.iodophor = _data["iodophor"];
            this.saline = _data["saline"];
            this.machineSurface = _data["machineSurface"];
            this.cottonSwab = _data["cottonSwab"];
            this.finger = _data["finger"];
            this.fridge = _data["fridge"];
            this.concentrateSolutionA = _data["concentrateSolutionA"];
            this.concentrateSolutionB = _data["concentrateSolutionB"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureSurfaceEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureSurfaceEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["iodophor"] = this.iodophor;
        data["saline"] = this.saline;
        data["machineSurface"] = this.machineSurface;
        data["cottonSwab"] = this.cottonSwab;
        data["finger"] = this.finger;
        data["fridge"] = this.fridge;
        data["concentrateSolutionA"] = this.concentrateSolutionA;
        data["concentrateSolutionB"] = this.concentrateSolutionB;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        return data;
    }
}

export interface IHospitalInfectionGermicultureSurfaceEditModel {
    /** 日期 */
    date: dayjs.Dayjs;
    /** 碘伏 */
    iodophor?: number | undefined;
    /** 生理盐水 */
    saline?: number | undefined;
    /** 机器表面 */
    machineSurface?: number | undefined;
    /** 棉签 */
    cottonSwab?: number | undefined;
    /** 手指 */
    finger?: number | undefined;
    /** 冰箱 */
    fridge?: number | undefined;
    /** 浓缩液A */
    concentrateSolutionA?: number | undefined;
    /** 浓缩液B */
    concentrateSolutionB?: number | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
}

export class HospitalInfectionGermicultureSurfaceSummaryView implements IHospitalInfectionGermicultureSurfaceSummaryView {
    /** 季度 */
    quarter?: string | undefined;
    /** 日期 */
    date?: string | undefined;
    /** 碘伏 */
    iodophor?: number | undefined;
    /** 生理盐水 */
    saline?: number | undefined;
    /** 机器表面 */
    machineSurface?: number | undefined;
    /** 棉签 */
    cottonSwab?: number | undefined;
    /** 手指 */
    finger?: number | undefined;
    /** 冰箱 */
    fridge?: number | undefined;
    /** 浓缩液A */
    concentrateSolutionA?: number | undefined;
    /** 浓缩液B */
    concentrateSolutionB?: number | undefined;

    constructor(data?: IHospitalInfectionGermicultureSurfaceSummaryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.quarter = _data["quarter"];
            this.date = _data["date"];
            this.iodophor = _data["iodophor"];
            this.saline = _data["saline"];
            this.machineSurface = _data["machineSurface"];
            this.cottonSwab = _data["cottonSwab"];
            this.finger = _data["finger"];
            this.fridge = _data["fridge"];
            this.concentrateSolutionA = _data["concentrateSolutionA"];
            this.concentrateSolutionB = _data["concentrateSolutionB"];
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureSurfaceSummaryView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureSurfaceSummaryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quarter"] = this.quarter;
        data["date"] = this.date;
        data["iodophor"] = this.iodophor;
        data["saline"] = this.saline;
        data["machineSurface"] = this.machineSurface;
        data["cottonSwab"] = this.cottonSwab;
        data["finger"] = this.finger;
        data["fridge"] = this.fridge;
        data["concentrateSolutionA"] = this.concentrateSolutionA;
        data["concentrateSolutionB"] = this.concentrateSolutionB;
        return data;
    }
}

export interface IHospitalInfectionGermicultureSurfaceSummaryView {
    /** 季度 */
    quarter?: string | undefined;
    /** 日期 */
    date?: string | undefined;
    /** 碘伏 */
    iodophor?: number | undefined;
    /** 生理盐水 */
    saline?: number | undefined;
    /** 机器表面 */
    machineSurface?: number | undefined;
    /** 棉签 */
    cottonSwab?: number | undefined;
    /** 手指 */
    finger?: number | undefined;
    /** 冰箱 */
    fridge?: number | undefined;
    /** 浓缩液A */
    concentrateSolutionA?: number | undefined;
    /** 浓缩液B */
    concentrateSolutionB?: number | undefined;
}

/** Reponse */
export class HospitalInfectionGermicultureSurfaceSummaryViewResult implements IHospitalInfectionGermicultureSurfaceSummaryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionGermicultureSurfaceSummaryView[] | undefined;

    constructor(data?: IHospitalInfectionGermicultureSurfaceSummaryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionGermicultureSurfaceSummaryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureSurfaceSummaryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureSurfaceSummaryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionGermicultureSurfaceSummaryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionGermicultureSurfaceSummaryView[] | undefined;
}

export class HospitalInfectionGermicultureSurfaceView implements IHospitalInfectionGermicultureSurfaceView {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 碘伏 */
    iodophor?: number | undefined;
    /** 生理盐水 */
    saline?: number | undefined;
    /** 机器表面 */
    machineSurface?: number | undefined;
    /** 棉签 */
    cottonSwab?: number | undefined;
    /** 手指 */
    finger?: number | undefined;
    /** 冰箱 */
    fridge?: number | undefined;
    /** 浓缩液A */
    concentrateSolutionA?: number | undefined;
    /** 浓缩液B */
    concentrateSolutionB?: number | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionGermicultureSurfaceView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.iodophor = _data["iodophor"];
            this.saline = _data["saline"];
            this.machineSurface = _data["machineSurface"];
            this.cottonSwab = _data["cottonSwab"];
            this.finger = _data["finger"];
            this.fridge = _data["fridge"];
            this.concentrateSolutionA = _data["concentrateSolutionA"];
            this.concentrateSolutionB = _data["concentrateSolutionB"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureSurfaceView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureSurfaceView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["iodophor"] = this.iodophor;
        data["saline"] = this.saline;
        data["machineSurface"] = this.machineSurface;
        data["cottonSwab"] = this.cottonSwab;
        data["finger"] = this.finger;
        data["fridge"] = this.fridge;
        data["concentrateSolutionA"] = this.concentrateSolutionA;
        data["concentrateSolutionB"] = this.concentrateSolutionB;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IHospitalInfectionGermicultureSurfaceView {
    /** 日期 */
    date: dayjs.Dayjs;
    /** 碘伏 */
    iodophor?: number | undefined;
    /** 生理盐水 */
    saline?: number | undefined;
    /** 机器表面 */
    machineSurface?: number | undefined;
    /** 棉签 */
    cottonSwab?: number | undefined;
    /** 手指 */
    finger?: number | undefined;
    /** 冰箱 */
    fridge?: number | undefined;
    /** 浓缩液A */
    concentrateSolutionA?: number | undefined;
    /** 浓缩液B */
    concentrateSolutionB?: number | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionGermicultureSurfaceViewResult implements IHospitalInfectionGermicultureSurfaceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionGermicultureSurfaceView[] | undefined;

    constructor(data?: IHospitalInfectionGermicultureSurfaceViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionGermicultureSurfaceView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureSurfaceViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureSurfaceViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionGermicultureSurfaceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionGermicultureSurfaceView[] | undefined;
}

/** Reponse */
export class HospitalInfectionGermicultureSurfaceViewResultEntry implements IHospitalInfectionGermicultureSurfaceViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionGermicultureSurfaceView;

    constructor(data?: IHospitalInfectionGermicultureSurfaceViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionGermicultureSurfaceView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureSurfaceViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureSurfaceViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionGermicultureSurfaceViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionGermicultureSurfaceView;
}

/** 细菌培养 */
export class HospitalInfectionGermicultureView implements IHospitalInfectionGermicultureView {
    /** 送检日期 */
    submittedDate!: dayjs.Dayjs;
    /** 培养类型 *细菌培养,空气细菌,消毒剂培养* */
    type!: string;
    /** 培养项目 *细菌培养,空气细菌,员工培养,消毒剂培养* */
    cultivateProject?: string | undefined;
    /** 送检单位 */
    submittedDepartment?: string | undefined;
    /** 临床印象 */
    clinicalImpression?: string | undefined;
    /** 送检材料 */
    submittedMaterials?: string | undefined;
    /** 检验项目 */
    submittedProject?: string | undefined;
    /** 送检医师 */
    submitteDphysician?: string | undefined;
    /** 检验结果 */
    result?: string | undefined;
    /** 报告日期 */
    reportDate!: dayjs.Dayjs;
    /** 检查员 */
    inspector!: string;
    /** 检验者 */
    checker!: string;
    /** 备注 */
    remark?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 培养类型 */
    typeLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionGermicultureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.submittedDate = _data["submittedDate"] ? dayjs(_data["submittedDate"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.cultivateProject = _data["cultivateProject"];
            this.submittedDepartment = _data["submittedDepartment"];
            this.clinicalImpression = _data["clinicalImpression"];
            this.submittedMaterials = _data["submittedMaterials"];
            this.submittedProject = _data["submittedProject"];
            this.submitteDphysician = _data["submitteDphysician"];
            this.result = _data["result"];
            this.reportDate = _data["reportDate"] ? dayjs(_data["reportDate"].toString()) : <any>undefined;
            this.inspector = _data["inspector"];
            this.checker = _data["checker"];
            this.remark = _data["remark"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.typeLabel = _data["typeLabel"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["submittedDate"] = this.submittedDate ? this.submittedDate.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["cultivateProject"] = this.cultivateProject;
        data["submittedDepartment"] = this.submittedDepartment;
        data["clinicalImpression"] = this.clinicalImpression;
        data["submittedMaterials"] = this.submittedMaterials;
        data["submittedProject"] = this.submittedProject;
        data["submitteDphysician"] = this.submitteDphysician;
        data["result"] = this.result;
        data["reportDate"] = this.reportDate ? this.reportDate.toISOString() : <any>undefined;
        data["inspector"] = this.inspector;
        data["checker"] = this.checker;
        data["remark"] = this.remark;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["typeLabel"] = this.typeLabel;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 细菌培养 */
export interface IHospitalInfectionGermicultureView {
    /** 送检日期 */
    submittedDate: dayjs.Dayjs;
    /** 培养类型 *细菌培养,空气细菌,消毒剂培养* */
    type: string;
    /** 培养项目 *细菌培养,空气细菌,员工培养,消毒剂培养* */
    cultivateProject?: string | undefined;
    /** 送检单位 */
    submittedDepartment?: string | undefined;
    /** 临床印象 */
    clinicalImpression?: string | undefined;
    /** 送检材料 */
    submittedMaterials?: string | undefined;
    /** 检验项目 */
    submittedProject?: string | undefined;
    /** 送检医师 */
    submitteDphysician?: string | undefined;
    /** 检验结果 */
    result?: string | undefined;
    /** 报告日期 */
    reportDate: dayjs.Dayjs;
    /** 检查员 */
    inspector: string;
    /** 检验者 */
    checker: string;
    /** 备注 */
    remark?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 培养类型 */
    typeLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionGermicultureViewResult implements IHospitalInfectionGermicultureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionGermicultureView[] | undefined;

    constructor(data?: IHospitalInfectionGermicultureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionGermicultureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionGermicultureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionGermicultureView[] | undefined;
}

/** Reponse */
export class HospitalInfectionGermicultureViewResultEntry implements IHospitalInfectionGermicultureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionGermicultureView;

    constructor(data?: IHospitalInfectionGermicultureViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionGermicultureView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionGermicultureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionGermicultureView;
}

/** 内毒素检测 */
export class HospitalInfectionKreotoxinEdit implements IHospitalInfectionKreotoxinEdit {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** [监测人员标识](#用户信息) */
    operatorId!: string;
    /** 取样口位置 */
    position?: string | undefined;
    /** 检测项目 */
    checkProject?: string | undefined;
    /** 检测方法 */
    method?: string | undefined;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IHospitalInfectionKreotoxinEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devInfoId = _data["devInfoId"];
            this.operatorId = _data["operatorId"];
            this.position = _data["position"];
            this.checkProject = _data["checkProject"];
            this.method = _data["method"];
            this.result = _data["result"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): HospitalInfectionKreotoxinEdit {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionKreotoxinEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["devInfoId"] = this.devInfoId;
        data["operatorId"] = this.operatorId;
        data["position"] = this.position;
        data["checkProject"] = this.checkProject;
        data["method"] = this.method;
        data["result"] = this.result;
        data["remark"] = this.remark;
        return data;
    }
}

/** 内毒素检测 */
export interface IHospitalInfectionKreotoxinEdit {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** [监测人员标识](#用户信息) */
    operatorId: string;
    /** 取样口位置 */
    position?: string | undefined;
    /** 检测项目 */
    checkProject?: string | undefined;
    /** 检测方法 */
    method?: string | undefined;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 内毒素检测 */
export class HospitalInfectionKreotoxinView implements IHospitalInfectionKreotoxinView {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** [监测人员标识](#用户信息) */
    operatorId!: string;
    /** 取样口位置 */
    position?: string | undefined;
    /** 检测项目 */
    checkProject?: string | undefined;
    /** 检测方法 */
    method?: string | undefined;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设备名称 */
    devInfoName?: string | undefined;
    /** 监测人员 */
    operatorName?: string | undefined;
    /** 监测人员别名 */
    operatorName2?: string | undefined;
    /** 监测人员全名 */
    operatorNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionKreotoxinView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devInfoId = _data["devInfoId"];
            this.operatorId = _data["operatorId"];
            this.position = _data["position"];
            this.checkProject = _data["checkProject"];
            this.method = _data["method"];
            this.result = _data["result"];
            this.remark = _data["remark"];
            this.devInfoName = _data["devInfoName"];
            this.operatorName = _data["operatorName"];
            this.operatorName2 = _data["operatorName2"];
            this.operatorNameFull = _data["operatorNameFull"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionKreotoxinView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionKreotoxinView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["devInfoId"] = this.devInfoId;
        data["operatorId"] = this.operatorId;
        data["position"] = this.position;
        data["checkProject"] = this.checkProject;
        data["method"] = this.method;
        data["result"] = this.result;
        data["remark"] = this.remark;
        data["devInfoName"] = this.devInfoName;
        data["operatorName"] = this.operatorName;
        data["operatorName2"] = this.operatorName2;
        data["operatorNameFull"] = this.operatorNameFull;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 内毒素检测 */
export interface IHospitalInfectionKreotoxinView {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** [监测人员标识](#用户信息) */
    operatorId: string;
    /** 取样口位置 */
    position?: string | undefined;
    /** 检测项目 */
    checkProject?: string | undefined;
    /** 检测方法 */
    method?: string | undefined;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设备名称 */
    devInfoName?: string | undefined;
    /** 监测人员 */
    operatorName?: string | undefined;
    /** 监测人员别名 */
    operatorName2?: string | undefined;
    /** 监测人员全名 */
    operatorNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionKreotoxinViewResult implements IHospitalInfectionKreotoxinViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionKreotoxinView[] | undefined;

    constructor(data?: IHospitalInfectionKreotoxinViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionKreotoxinView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionKreotoxinViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionKreotoxinViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionKreotoxinViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionKreotoxinView[] | undefined;
}

/** Reponse */
export class HospitalInfectionKreotoxinViewResultEntry implements IHospitalInfectionKreotoxinViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionKreotoxinView;

    constructor(data?: IHospitalInfectionKreotoxinViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionKreotoxinView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionKreotoxinViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionKreotoxinViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionKreotoxinViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionKreotoxinView;
}

/** 水处理消毒 */
export class HospitalInfectionWatertreatmentDisinfectionBase implements IHospitalInfectionWatertreatmentDisinfectionBase {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 消毒剂名称 */
    disinfectantName!: string;
    /** 消毒剂配置时间 */
    disinfectantTime!: dayjs.Dayjs;
    /** 消毒剂原液浓度 */
    yuanyeConcentration?: number | undefined;
    /** 消毒剂应用浓度 */
    applicationConcentration?: number | undefined;
    /** 消毒剂有效浓度 */
    disinfectantEc?: number | undefined;
    /** 消毒剂配置者 */
    disinfectantConfigurator?: string | undefined;
    /** 消毒剂核对者 */
    disinfectantChecker?: string | undefined;
    /** 消毒开始时间 */
    startTime?: dayjs.Dayjs | undefined;
    /** 消毒循环保留时间 */
    retentionTime?: number | undefined;
    /** 消毒残余浓度 */
    residualConcentration?: number | undefined;
    /** 消毒者 */
    disinfector?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;

    constructor(data?: IHospitalInfectionWatertreatmentDisinfectionBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.disinfectantName = _data["disinfectantName"];
            this.disinfectantTime = _data["disinfectantTime"] ? dayjs(_data["disinfectantTime"].toString()) : <any>undefined;
            this.yuanyeConcentration = _data["yuanyeConcentration"];
            this.applicationConcentration = _data["applicationConcentration"];
            this.disinfectantEc = _data["disinfectantEc"];
            this.disinfectantConfigurator = _data["disinfectantConfigurator"];
            this.disinfectantChecker = _data["disinfectantChecker"];
            this.startTime = _data["startTime"] ? dayjs(_data["startTime"].toString()) : <any>undefined;
            this.retentionTime = _data["retentionTime"];
            this.residualConcentration = _data["residualConcentration"];
            this.disinfector = _data["disinfector"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentDisinfectionBase {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentDisinfectionBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["disinfectantName"] = this.disinfectantName;
        data["disinfectantTime"] = this.disinfectantTime ? this.disinfectantTime.toISOString() : <any>undefined;
        data["yuanyeConcentration"] = this.yuanyeConcentration;
        data["applicationConcentration"] = this.applicationConcentration;
        data["disinfectantEc"] = this.disinfectantEc;
        data["disinfectantConfigurator"] = this.disinfectantConfigurator;
        data["disinfectantChecker"] = this.disinfectantChecker;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["retentionTime"] = this.retentionTime;
        data["residualConcentration"] = this.residualConcentration;
        data["disinfector"] = this.disinfector;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        return data;
    }
}

/** 水处理消毒 */
export interface IHospitalInfectionWatertreatmentDisinfectionBase {
    /** 日期 */
    date: dayjs.Dayjs;
    /** 消毒剂名称 */
    disinfectantName: string;
    /** 消毒剂配置时间 */
    disinfectantTime: dayjs.Dayjs;
    /** 消毒剂原液浓度 */
    yuanyeConcentration?: number | undefined;
    /** 消毒剂应用浓度 */
    applicationConcentration?: number | undefined;
    /** 消毒剂有效浓度 */
    disinfectantEc?: number | undefined;
    /** 消毒剂配置者 */
    disinfectantConfigurator?: string | undefined;
    /** 消毒剂核对者 */
    disinfectantChecker?: string | undefined;
    /** 消毒开始时间 */
    startTime?: dayjs.Dayjs | undefined;
    /** 消毒循环保留时间 */
    retentionTime?: number | undefined;
    /** 消毒残余浓度 */
    residualConcentration?: number | undefined;
    /** 消毒者 */
    disinfector?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
}

/** 水处理消毒 */
export class HospitalInfectionWatertreatmentDisinfectionView implements IHospitalInfectionWatertreatmentDisinfectionView {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 消毒剂名称 */
    disinfectantName!: string;
    /** 消毒剂配置时间 */
    disinfectantTime!: dayjs.Dayjs;
    /** 消毒剂原液浓度 */
    yuanyeConcentration?: number | undefined;
    /** 消毒剂应用浓度 */
    applicationConcentration?: number | undefined;
    /** 消毒剂有效浓度 */
    disinfectantEc?: number | undefined;
    /** 消毒剂配置者 */
    disinfectantConfigurator?: string | undefined;
    /** 消毒剂核对者 */
    disinfectantChecker?: string | undefined;
    /** 消毒开始时间 */
    startTime?: dayjs.Dayjs | undefined;
    /** 消毒循环保留时间 */
    retentionTime?: number | undefined;
    /** 消毒残余浓度 */
    residualConcentration?: number | undefined;
    /** 消毒者 */
    disinfector?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionWatertreatmentDisinfectionView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.disinfectantName = _data["disinfectantName"];
            this.disinfectantTime = _data["disinfectantTime"] ? dayjs(_data["disinfectantTime"].toString()) : <any>undefined;
            this.yuanyeConcentration = _data["yuanyeConcentration"];
            this.applicationConcentration = _data["applicationConcentration"];
            this.disinfectantEc = _data["disinfectantEc"];
            this.disinfectantConfigurator = _data["disinfectantConfigurator"];
            this.disinfectantChecker = _data["disinfectantChecker"];
            this.startTime = _data["startTime"] ? dayjs(_data["startTime"].toString()) : <any>undefined;
            this.retentionTime = _data["retentionTime"];
            this.residualConcentration = _data["residualConcentration"];
            this.disinfector = _data["disinfector"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentDisinfectionView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentDisinfectionView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["disinfectantName"] = this.disinfectantName;
        data["disinfectantTime"] = this.disinfectantTime ? this.disinfectantTime.toISOString() : <any>undefined;
        data["yuanyeConcentration"] = this.yuanyeConcentration;
        data["applicationConcentration"] = this.applicationConcentration;
        data["disinfectantEc"] = this.disinfectantEc;
        data["disinfectantConfigurator"] = this.disinfectantConfigurator;
        data["disinfectantChecker"] = this.disinfectantChecker;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["retentionTime"] = this.retentionTime;
        data["residualConcentration"] = this.residualConcentration;
        data["disinfector"] = this.disinfector;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 水处理消毒 */
export interface IHospitalInfectionWatertreatmentDisinfectionView {
    /** 日期 */
    date: dayjs.Dayjs;
    /** 消毒剂名称 */
    disinfectantName: string;
    /** 消毒剂配置时间 */
    disinfectantTime: dayjs.Dayjs;
    /** 消毒剂原液浓度 */
    yuanyeConcentration?: number | undefined;
    /** 消毒剂应用浓度 */
    applicationConcentration?: number | undefined;
    /** 消毒剂有效浓度 */
    disinfectantEc?: number | undefined;
    /** 消毒剂配置者 */
    disinfectantConfigurator?: string | undefined;
    /** 消毒剂核对者 */
    disinfectantChecker?: string | undefined;
    /** 消毒开始时间 */
    startTime?: dayjs.Dayjs | undefined;
    /** 消毒循环保留时间 */
    retentionTime?: number | undefined;
    /** 消毒残余浓度 */
    residualConcentration?: number | undefined;
    /** 消毒者 */
    disinfector?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionWatertreatmentDisinfectionViewResult implements IHospitalInfectionWatertreatmentDisinfectionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionWatertreatmentDisinfectionView[] | undefined;

    constructor(data?: IHospitalInfectionWatertreatmentDisinfectionViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionWatertreatmentDisinfectionView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentDisinfectionViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentDisinfectionViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionWatertreatmentDisinfectionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionWatertreatmentDisinfectionView[] | undefined;
}

/** Reponse */
export class HospitalInfectionWatertreatmentDisinfectionViewResultEntry implements IHospitalInfectionWatertreatmentDisinfectionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionWatertreatmentDisinfectionView;

    constructor(data?: IHospitalInfectionWatertreatmentDisinfectionViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionWatertreatmentDisinfectionView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentDisinfectionViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentDisinfectionViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionWatertreatmentDisinfectionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionWatertreatmentDisinfectionView;
}

/** 水处理维护 */
export class HospitalInfectionWatertreatmentMaintenanceView implements IHospitalInfectionWatertreatmentMaintenanceView {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** PH */
    ph?: string | undefined;
    /** 游离氯 */
    cl?: string | undefined;
    /** 硬度 */
    hardness?: string | undefined;
    /** 纯水电导度 */
    waterconductivity?: string | undefined;
    /** 进水压 */
    intakepressure?: string | undefined;
    /** 一级压力 */
    primaryStress?: string | undefined;
    /** 二级压力 */
    secondaryStress?: string | undefined;
    /** 纯水流量 */
    waterflow?: string | undefined;
    /** 系统运行正常0,1 */
    normal!: number;
    /** 加盐超饱和0,1 */
    saltingoversaturate!: number;
    /** 加臭氧消毒0,1 */
    ozonedisinfection!: number;
    /** 砂罐0,1 */
    sandtank!: number;
    /** 碳罐0,1 */
    carbontank!: number;
    /** 树脂罐0,1 */
    resintank!: number;
    /** 纯水软化测试0,1 */
    softeningtest!: number;
    /** 内毒素监测0,1 */
    endotoxinmonitoring!: number;
    /** 二级纯水流量 */
    secondaryWaterflow?: string | undefined;
    /** 更换滤芯0,1 */
    filter?: number | undefined;
    /** 更换反射膜0,1 */
    reflectance?: number | undefined;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 操作者标识 */
    operator?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 系统运行正常0,1 */
    normalLabel?: string | undefined;
    /** 加盐超饱和0,1 */
    saltingoversaturateLabel?: string | undefined;
    /** 加臭氧消毒0,1 */
    ozonedisinfectionLabel?: string | undefined;
    /** 砂罐0,1 */
    sandtankLabel?: string | undefined;
    /** 碳罐0,1 */
    carbontankLabel?: string | undefined;
    /** 树脂罐0,1 */
    resintankLabel?: string | undefined;
    /** 纯水软化测试0,1 */
    softeningtestLabel?: string | undefined;
    /** 内毒素监测0,1 */
    endotoxinmonitoringLabel?: string | undefined;
    /** 更换滤芯0,1 */
    filterLabel?: string | undefined;
    /** 更换反射膜0,1 */
    reflectanceLabel?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionWatertreatmentMaintenanceView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.ph = _data["ph"];
            this.cl = _data["cl"];
            this.hardness = _data["hardness"];
            this.waterconductivity = _data["waterconductivity"];
            this.intakepressure = _data["intakepressure"];
            this.primaryStress = _data["primaryStress"];
            this.secondaryStress = _data["secondaryStress"];
            this.waterflow = _data["waterflow"];
            this.normal = _data["normal"];
            this.saltingoversaturate = _data["saltingoversaturate"];
            this.ozonedisinfection = _data["ozonedisinfection"];
            this.sandtank = _data["sandtank"];
            this.carbontank = _data["carbontank"];
            this.resintank = _data["resintank"];
            this.softeningtest = _data["softeningtest"];
            this.endotoxinmonitoring = _data["endotoxinmonitoring"];
            this.secondaryWaterflow = _data["secondaryWaterflow"];
            this.filter = _data["filter"];
            this.reflectance = _data["reflectance"];
            this.operatorId = _data["operatorId"];
            this.operator = _data["operator"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.normalLabel = _data["normalLabel"];
            this.saltingoversaturateLabel = _data["saltingoversaturateLabel"];
            this.ozonedisinfectionLabel = _data["ozonedisinfectionLabel"];
            this.sandtankLabel = _data["sandtankLabel"];
            this.carbontankLabel = _data["carbontankLabel"];
            this.resintankLabel = _data["resintankLabel"];
            this.softeningtestLabel = _data["softeningtestLabel"];
            this.endotoxinmonitoringLabel = _data["endotoxinmonitoringLabel"];
            this.filterLabel = _data["filterLabel"];
            this.reflectanceLabel = _data["reflectanceLabel"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentMaintenanceView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentMaintenanceView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["ph"] = this.ph;
        data["cl"] = this.cl;
        data["hardness"] = this.hardness;
        data["waterconductivity"] = this.waterconductivity;
        data["intakepressure"] = this.intakepressure;
        data["primaryStress"] = this.primaryStress;
        data["secondaryStress"] = this.secondaryStress;
        data["waterflow"] = this.waterflow;
        data["normal"] = this.normal;
        data["saltingoversaturate"] = this.saltingoversaturate;
        data["ozonedisinfection"] = this.ozonedisinfection;
        data["sandtank"] = this.sandtank;
        data["carbontank"] = this.carbontank;
        data["resintank"] = this.resintank;
        data["softeningtest"] = this.softeningtest;
        data["endotoxinmonitoring"] = this.endotoxinmonitoring;
        data["secondaryWaterflow"] = this.secondaryWaterflow;
        data["filter"] = this.filter;
        data["reflectance"] = this.reflectance;
        data["operatorId"] = this.operatorId;
        data["operator"] = this.operator;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["normalLabel"] = this.normalLabel;
        data["saltingoversaturateLabel"] = this.saltingoversaturateLabel;
        data["ozonedisinfectionLabel"] = this.ozonedisinfectionLabel;
        data["sandtankLabel"] = this.sandtankLabel;
        data["carbontankLabel"] = this.carbontankLabel;
        data["resintankLabel"] = this.resintankLabel;
        data["softeningtestLabel"] = this.softeningtestLabel;
        data["endotoxinmonitoringLabel"] = this.endotoxinmonitoringLabel;
        data["filterLabel"] = this.filterLabel;
        data["reflectanceLabel"] = this.reflectanceLabel;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 水处理维护 */
export interface IHospitalInfectionWatertreatmentMaintenanceView {
    /** 日期 */
    date: dayjs.Dayjs;
    /** PH */
    ph?: string | undefined;
    /** 游离氯 */
    cl?: string | undefined;
    /** 硬度 */
    hardness?: string | undefined;
    /** 纯水电导度 */
    waterconductivity?: string | undefined;
    /** 进水压 */
    intakepressure?: string | undefined;
    /** 一级压力 */
    primaryStress?: string | undefined;
    /** 二级压力 */
    secondaryStress?: string | undefined;
    /** 纯水流量 */
    waterflow?: string | undefined;
    /** 系统运行正常0,1 */
    normal: number;
    /** 加盐超饱和0,1 */
    saltingoversaturate: number;
    /** 加臭氧消毒0,1 */
    ozonedisinfection: number;
    /** 砂罐0,1 */
    sandtank: number;
    /** 碳罐0,1 */
    carbontank: number;
    /** 树脂罐0,1 */
    resintank: number;
    /** 纯水软化测试0,1 */
    softeningtest: number;
    /** 内毒素监测0,1 */
    endotoxinmonitoring: number;
    /** 二级纯水流量 */
    secondaryWaterflow?: string | undefined;
    /** 更换滤芯0,1 */
    filter?: number | undefined;
    /** 更换反射膜0,1 */
    reflectance?: number | undefined;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 操作者标识 */
    operator?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 系统运行正常0,1 */
    normalLabel?: string | undefined;
    /** 加盐超饱和0,1 */
    saltingoversaturateLabel?: string | undefined;
    /** 加臭氧消毒0,1 */
    ozonedisinfectionLabel?: string | undefined;
    /** 砂罐0,1 */
    sandtankLabel?: string | undefined;
    /** 碳罐0,1 */
    carbontankLabel?: string | undefined;
    /** 树脂罐0,1 */
    resintankLabel?: string | undefined;
    /** 纯水软化测试0,1 */
    softeningtestLabel?: string | undefined;
    /** 内毒素监测0,1 */
    endotoxinmonitoringLabel?: string | undefined;
    /** 更换滤芯0,1 */
    filterLabel?: string | undefined;
    /** 更换反射膜0,1 */
    reflectanceLabel?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 水处理维护 (ViewModel) */
export class HospitalInfectionWatertreatmentMaintenanceViewModel implements IHospitalInfectionWatertreatmentMaintenanceViewModel {
    /** [归属透析室标识](透析室Id) */
    sysHospitalAreaId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** PH */
    ph?: string | undefined;
    /** 游离氯 */
    cl?: string | undefined;
    /** 硬度 */
    hardness?: string | undefined;
    /** 纯水电导度 */
    waterconductivity?: string | undefined;
    /** 进水压 */
    intakepressure?: string | undefined;
    /** 一级压力 */
    primaryStress?: string | undefined;
    /** 二级压力 */
    secondaryStress?: string | undefined;
    /** 纯水流量 */
    waterflow?: string | undefined;
    /** 二级纯水流量 */
    secondaryWaterflow?: string | undefined;
    /** 系统运行正常0,1 */
    normal!: number;
    /** 加盐超饱和0,1 */
    saltingoversaturate!: number;
    /** 加臭氧消毒0,1 */
    ozonedisinfection!: number;
    /** 砂罐0,1 */
    sandtank!: number;
    /** 碳罐0,1 */
    carbontank!: number;
    /** 树脂罐0,1 */
    resintank!: number;
    /** 纯水软化测试0,1 */
    softeningtest!: number;
    /** 内毒素监测0,1 */
    endotoxinmonitoring!: number;
    /** 更换滤芯0,1 */
    filter?: number | undefined;
    /** 更换反射膜0,1 */
    reflectance?: number | undefined;
    /** [操作者标识](用户信息Id) */
    operatorId?: string | undefined;
    /** 操作者标识 */
    operator?: string | undefined;

    constructor(data?: IHospitalInfectionWatertreatmentMaintenanceViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.ph = _data["ph"];
            this.cl = _data["cl"];
            this.hardness = _data["hardness"];
            this.waterconductivity = _data["waterconductivity"];
            this.intakepressure = _data["intakepressure"];
            this.primaryStress = _data["primaryStress"];
            this.secondaryStress = _data["secondaryStress"];
            this.waterflow = _data["waterflow"];
            this.secondaryWaterflow = _data["secondaryWaterflow"];
            this.normal = _data["normal"];
            this.saltingoversaturate = _data["saltingoversaturate"];
            this.ozonedisinfection = _data["ozonedisinfection"];
            this.sandtank = _data["sandtank"];
            this.carbontank = _data["carbontank"];
            this.resintank = _data["resintank"];
            this.softeningtest = _data["softeningtest"];
            this.endotoxinmonitoring = _data["endotoxinmonitoring"];
            this.filter = _data["filter"];
            this.reflectance = _data["reflectance"];
            this.operatorId = _data["operatorId"];
            this.operator = _data["operator"];
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentMaintenanceViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentMaintenanceViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["ph"] = this.ph;
        data["cl"] = this.cl;
        data["hardness"] = this.hardness;
        data["waterconductivity"] = this.waterconductivity;
        data["intakepressure"] = this.intakepressure;
        data["primaryStress"] = this.primaryStress;
        data["secondaryStress"] = this.secondaryStress;
        data["waterflow"] = this.waterflow;
        data["secondaryWaterflow"] = this.secondaryWaterflow;
        data["normal"] = this.normal;
        data["saltingoversaturate"] = this.saltingoversaturate;
        data["ozonedisinfection"] = this.ozonedisinfection;
        data["sandtank"] = this.sandtank;
        data["carbontank"] = this.carbontank;
        data["resintank"] = this.resintank;
        data["softeningtest"] = this.softeningtest;
        data["endotoxinmonitoring"] = this.endotoxinmonitoring;
        data["filter"] = this.filter;
        data["reflectance"] = this.reflectance;
        data["operatorId"] = this.operatorId;
        data["operator"] = this.operator;
        return data;
    }
}

/** 水处理维护 (ViewModel) */
export interface IHospitalInfectionWatertreatmentMaintenanceViewModel {
    /** [归属透析室标识](透析室Id) */
    sysHospitalAreaId: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** PH */
    ph?: string | undefined;
    /** 游离氯 */
    cl?: string | undefined;
    /** 硬度 */
    hardness?: string | undefined;
    /** 纯水电导度 */
    waterconductivity?: string | undefined;
    /** 进水压 */
    intakepressure?: string | undefined;
    /** 一级压力 */
    primaryStress?: string | undefined;
    /** 二级压力 */
    secondaryStress?: string | undefined;
    /** 纯水流量 */
    waterflow?: string | undefined;
    /** 二级纯水流量 */
    secondaryWaterflow?: string | undefined;
    /** 系统运行正常0,1 */
    normal: number;
    /** 加盐超饱和0,1 */
    saltingoversaturate: number;
    /** 加臭氧消毒0,1 */
    ozonedisinfection: number;
    /** 砂罐0,1 */
    sandtank: number;
    /** 碳罐0,1 */
    carbontank: number;
    /** 树脂罐0,1 */
    resintank: number;
    /** 纯水软化测试0,1 */
    softeningtest: number;
    /** 内毒素监测0,1 */
    endotoxinmonitoring: number;
    /** 更换滤芯0,1 */
    filter?: number | undefined;
    /** 更换反射膜0,1 */
    reflectance?: number | undefined;
    /** [操作者标识](用户信息Id) */
    operatorId?: string | undefined;
    /** 操作者标识 */
    operator?: string | undefined;
}

/** Reponse */
export class HospitalInfectionWatertreatmentMaintenanceViewResult implements IHospitalInfectionWatertreatmentMaintenanceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionWatertreatmentMaintenanceView[] | undefined;

    constructor(data?: IHospitalInfectionWatertreatmentMaintenanceViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionWatertreatmentMaintenanceView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentMaintenanceViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentMaintenanceViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionWatertreatmentMaintenanceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionWatertreatmentMaintenanceView[] | undefined;
}

/** Reponse */
export class HospitalInfectionWatertreatmentMaintenanceViewResultEntry implements IHospitalInfectionWatertreatmentMaintenanceViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionWatertreatmentMaintenanceView;

    constructor(data?: IHospitalInfectionWatertreatmentMaintenanceViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionWatertreatmentMaintenanceView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentMaintenanceViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentMaintenanceViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionWatertreatmentMaintenanceViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionWatertreatmentMaintenanceView;
}

export class IndexDoctorView implements IIndexDoctorView {
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 全名 */
    nameFull?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 归属用户登录名 *可以与工号同时使用* */
    loginName?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 职务 医生`DIC.MEDICAL.DOCTOR.TITLE` 护士`DIC.MEDICAL.NURSE.TITLE` *主任,副主任,医生,护士长,护士,实习生* */
    title?: string | undefined;
    /** 职称 `DIC.MEDICAL.PROFESSIONALTITLE` *主任医师,副主任医师,主治医师,住院医师* */
    professionalTitle?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 职务显示值 */
    titleLabel?: string | undefined;
    /** 职称显示值 */
    professionalTitleLabel?: string | undefined;
    /** 当日患者数量 */
    patientCount?: number;
    /** 当日已签到患者数量 */
    patientCountSignin?: number;
    /** 当日透析医嘱数量(不包含已废弃的医嘱) */
    medicalAdviceCount?: number;
    /** 当日待执行医嘱数量 */
    medicalAdviceCountUnexecuted?: number;
    /** 当日交班数量(我@和@我的总量) */
    deptShrCount?: number;
    /** 当日排班数量 */
    deptScheduleCount?: number;

    constructor(data?: IIndexDoctorView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.nameFull = _data["nameFull"];
            this.jobNumber = _data["jobNumber"];
            this.loginName = _data["loginName"];
            this.gender = _data["gender"];
            this.title = _data["title"];
            this.professionalTitle = _data["professionalTitle"];
            this.genderLabel = _data["genderLabel"];
            this.titleLabel = _data["titleLabel"];
            this.professionalTitleLabel = _data["professionalTitleLabel"];
            this.patientCount = _data["patientCount"];
            this.patientCountSignin = _data["patientCountSignin"];
            this.medicalAdviceCount = _data["medicalAdviceCount"];
            this.medicalAdviceCountUnexecuted = _data["medicalAdviceCountUnexecuted"];
            this.deptShrCount = _data["deptShrCount"];
            this.deptScheduleCount = _data["deptScheduleCount"];
        }
    }

    static fromJS(data: any): IndexDoctorView {
        data = typeof data === 'object' ? data : {};
        let result = new IndexDoctorView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["nameFull"] = this.nameFull;
        data["jobNumber"] = this.jobNumber;
        data["loginName"] = this.loginName;
        data["gender"] = this.gender;
        data["title"] = this.title;
        data["professionalTitle"] = this.professionalTitle;
        data["genderLabel"] = this.genderLabel;
        data["titleLabel"] = this.titleLabel;
        data["professionalTitleLabel"] = this.professionalTitleLabel;
        data["patientCount"] = this.patientCount;
        data["patientCountSignin"] = this.patientCountSignin;
        data["medicalAdviceCount"] = this.medicalAdviceCount;
        data["medicalAdviceCountUnexecuted"] = this.medicalAdviceCountUnexecuted;
        data["deptShrCount"] = this.deptShrCount;
        data["deptScheduleCount"] = this.deptScheduleCount;
        return data;
    }
}

export interface IIndexDoctorView {
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 全名 */
    nameFull?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 归属用户登录名 *可以与工号同时使用* */
    loginName?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 职务 医生`DIC.MEDICAL.DOCTOR.TITLE` 护士`DIC.MEDICAL.NURSE.TITLE` *主任,副主任,医生,护士长,护士,实习生* */
    title?: string | undefined;
    /** 职称 `DIC.MEDICAL.PROFESSIONALTITLE` *主任医师,副主任医师,主治医师,住院医师* */
    professionalTitle?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 职务显示值 */
    titleLabel?: string | undefined;
    /** 职称显示值 */
    professionalTitleLabel?: string | undefined;
    /** 当日患者数量 */
    patientCount?: number;
    /** 当日已签到患者数量 */
    patientCountSignin?: number;
    /** 当日透析医嘱数量(不包含已废弃的医嘱) */
    medicalAdviceCount?: number;
    /** 当日待执行医嘱数量 */
    medicalAdviceCountUnexecuted?: number;
    /** 当日交班数量(我@和@我的总量) */
    deptShrCount?: number;
    /** 当日排班数量 */
    deptScheduleCount?: number;
}

/** Reponse */
export class IndexDoctorViewResultEntry implements IIndexDoctorViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IndexDoctorView;

    constructor(data?: IIndexDoctorViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? IndexDoctorView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IndexDoctorViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new IndexDoctorViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IIndexDoctorViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IndexDoctorView;
}

/** 首页排班展现 */
export class IndexScheduleView implements IIndexScheduleView {
    /** 用户标识 */
    id?: string | undefined;
    /** 用户姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 用户别名 */
    name2?: string | undefined;
    /** 用户全名 */
    nameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;

    constructor(data?: IIndexScheduleView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.nameFull = _data["nameFull"];
            this.monday = _data["monday"] ? IndexScheduleViewItem.fromJS(_data["monday"]) : <any>undefined;
            this.tuesday = _data["tuesday"] ? IndexScheduleViewItem.fromJS(_data["tuesday"]) : <any>undefined;
            this.wednesday = _data["wednesday"] ? IndexScheduleViewItem.fromJS(_data["wednesday"]) : <any>undefined;
            this.thursday = _data["thursday"] ? IndexScheduleViewItem.fromJS(_data["thursday"]) : <any>undefined;
            this.friday = _data["friday"] ? IndexScheduleViewItem.fromJS(_data["friday"]) : <any>undefined;
            this.saturday = _data["saturday"] ? IndexScheduleViewItem.fromJS(_data["saturday"]) : <any>undefined;
            this.sunday = _data["sunday"] ? IndexScheduleViewItem.fromJS(_data["sunday"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IndexScheduleView {
        data = typeof data === 'object' ? data : {};
        let result = new IndexScheduleView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["nameFull"] = this.nameFull;
        data["monday"] = this.monday ? this.monday.toJSON() : <any>undefined;
        data["tuesday"] = this.tuesday ? this.tuesday.toJSON() : <any>undefined;
        data["wednesday"] = this.wednesday ? this.wednesday.toJSON() : <any>undefined;
        data["thursday"] = this.thursday ? this.thursday.toJSON() : <any>undefined;
        data["friday"] = this.friday ? this.friday.toJSON() : <any>undefined;
        data["saturday"] = this.saturday ? this.saturday.toJSON() : <any>undefined;
        data["sunday"] = this.sunday ? this.sunday.toJSON() : <any>undefined;
        return data;
    }
}

/** 首页排班展现 */
export interface IIndexScheduleView {
    /** 用户标识 */
    id?: string | undefined;
    /** 用户姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 用户别名 */
    name2?: string | undefined;
    /** 用户全名 */
    nameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;
}

/** 医生排班详细信息 */
export class IndexScheduleViewItem implements IIndexScheduleViewItem {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 周日 */
    shifts?: IndexScheduleViewItems[] | undefined;

    constructor(data?: IIndexScheduleViewItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            if (Array.isArray(_data["shifts"])) {
                this.shifts = [] as any;
                for (let item of _data["shifts"])
                    this.shifts!.push(IndexScheduleViewItems.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IndexScheduleViewItem {
        data = typeof data === 'object' ? data : {};
        let result = new IndexScheduleViewItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        if (Array.isArray(this.shifts)) {
            data["shifts"] = [];
            for (let item of this.shifts)
                data["shifts"].push(item.toJSON());
        }
        return data;
    }
}

/** 医生排班详细信息 */
export interface IIndexScheduleViewItem {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 周日 */
    shifts?: IndexScheduleViewItems[] | undefined;
}

/** 医生排班详细信息 */
export class IndexScheduleViewItems implements IIndexScheduleViewItems {
    /** 标识 */
    id?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次简称 */
    shiftShortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 加班时长 - 如果有加班的 */
    overTimes?: number | undefined;
    /** 调休时长 */
    takeOffTimes?: number | undefined;
    /** 医护排班状态颜色 */
    contentColor?: string | undefined;
    /** 医护排班状态展示值 */
    contentLabel?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IIndexScheduleViewItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.shiftShortName = _data["shiftShortName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.overTimes = _data["overTimes"];
            this.takeOffTimes = _data["takeOffTimes"];
            this.contentColor = _data["contentColor"];
            this.contentLabel = _data["contentLabel"];
            this.color = _data["color"];
            this.colorName = _data["colorName"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): IndexScheduleViewItems {
        data = typeof data === 'object' ? data : {};
        let result = new IndexScheduleViewItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["shiftShortName"] = this.shiftShortName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["overTimes"] = this.overTimes;
        data["takeOffTimes"] = this.takeOffTimes;
        data["contentColor"] = this.contentColor;
        data["contentLabel"] = this.contentLabel;
        data["color"] = this.color;
        data["colorName"] = this.colorName;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 医生排班详细信息 */
export interface IIndexScheduleViewItems {
    /** 标识 */
    id?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次简称 */
    shiftShortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 加班时长 - 如果有加班的 */
    overTimes?: number | undefined;
    /** 调休时长 */
    takeOffTimes?: number | undefined;
    /** 医护排班状态颜色 */
    contentColor?: string | undefined;
    /** 医护排班状态展示值 */
    contentLabel?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class IndexScheduleViewResultEntry implements IIndexScheduleViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IndexScheduleView;

    constructor(data?: IIndexScheduleViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? IndexScheduleView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IndexScheduleViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new IndexScheduleViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IIndexScheduleViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IndexScheduleView;
}

/** 库存统计 */
export class InventoryStatisticsView implements IInventoryStatisticsView {
    /** 项目标识 */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目分类 */
    roomItemTypeName?: string | undefined;
    /** 初始库存 */
    initialCount?: number;
    /** 入库 */
    inCount?: number;
    /** 出库 */
    outCount?: number;
    /** 退库 */
    restoreCount?: number;
    /** 报损 */
    faultyCount?: number;
    /** 结余库存 */
    inventoryCount?: number;

    constructor(data?: IInventoryStatisticsView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.initialCount = _data["initialCount"];
            this.inCount = _data["inCount"];
            this.outCount = _data["outCount"];
            this.restoreCount = _data["restoreCount"];
            this.faultyCount = _data["faultyCount"];
            this.inventoryCount = _data["inventoryCount"];
        }
    }

    static fromJS(data: any): InventoryStatisticsView {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryStatisticsView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["initialCount"] = this.initialCount;
        data["inCount"] = this.inCount;
        data["outCount"] = this.outCount;
        data["restoreCount"] = this.restoreCount;
        data["faultyCount"] = this.faultyCount;
        data["inventoryCount"] = this.inventoryCount;
        return data;
    }
}

/** 库存统计 */
export interface IInventoryStatisticsView {
    /** 项目标识 */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目分类 */
    roomItemTypeName?: string | undefined;
    /** 初始库存 */
    initialCount?: number;
    /** 入库 */
    inCount?: number;
    /** 出库 */
    outCount?: number;
    /** 退库 */
    restoreCount?: number;
    /** 报损 */
    faultyCount?: number;
    /** 结余库存 */
    inventoryCount?: number;
}

/** Reponse */
export class InventoryStatisticsViewResult implements IInventoryStatisticsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InventoryStatisticsView[] | undefined;

    constructor(data?: IInventoryStatisticsViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(InventoryStatisticsView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InventoryStatisticsViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryStatisticsViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IInventoryStatisticsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InventoryStatisticsView[] | undefined;
}

/** 项目清单/账套管理/库存记录/期初库存(以项目清单为主表) 入库记录/出库记录(以库存为主表) */
export class InventoryView implements IInventoryView {
    /** 项目清单-标识 */
    roomItemListId?: string | undefined;
    /** 项目清单-项目名称 */
    roomItemListName?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    roomItemTypeName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天)  *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 一级单位名称 */
    unitLevel1Name?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 基本单位名称 */
    unitBaseName?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式名称 */
    usageModeName?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 期初库存 *基本单位的库存* */
    inventoryBegin?: number | undefined;
    /** 库存扣减 */
    inventory?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 使用说明 */
    remark?: string | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否编码管理 *0:否,1:是* */
    codeManage?: number | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 项目类型Code */
    typeCode?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 完整规格 */
    fullSpecLabel?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 一级单位、基本单位、规格单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 一级单位与基本单位集合 */
    unitListBase?: LabelModel[] | undefined;
    /** 项目类型:1-药品 2-耗材 0-其他 */
    type?: number;
    /** 扣减来源 0：科室扣减  1：个人库存 */
    deductionSource?: number;
    /** 费用类型 */
    costType?: string | undefined;
    /** 账套分组标识 */
    roomAccountGroupId?: string | undefined;
    /** 账套分组名称 */
    roomAccountGroupName?: string | undefined;
    /** 账套分组全称 */
    roomAccountGroupNameFull?: string | undefined;

    constructor(data?: IInventoryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemTypeNameFull = _data["roomItemTypeNameFull"];
            this.name = _data["name"];
            this.nameGoods = _data["nameGoods"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.shortName = _data["shortName"];
            this.model = _data["model"];
            this.spec = _data["spec"];
            this.origin = _data["origin"];
            this.dealer = _data["dealer"];
            this.warningDay = _data["warningDay"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Name = _data["unitLevel1Name"];
            this.unitBase = _data["unitBase"];
            this.unitBaseName = _data["unitBaseName"];
            this.conversionRate = _data["conversionRate"];
            this.sellingPrice = _data["sellingPrice"];
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
            this.usageMode = _data["usageMode"];
            this.usageModeName = _data["usageModeName"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.inventoryBegin = _data["inventoryBegin"];
            this.inventory = _data["inventory"];
            this.inventoryCount = _data["inventoryCount"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.afterCharge = _data["afterCharge"];
            this.inCharge = _data["inCharge"];
            this.codeManage = _data["codeManage"];
            this.batchManage = _data["batchManage"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.typeCode = _data["typeCode"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.specLabel = _data["specLabel"];
            this.fullSpecLabel = _data["fullSpecLabel"];
            this.unitLabel = _data["unitLabel"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            if (Array.isArray(_data["unitListBase"])) {
                this.unitListBase = [] as any;
                for (let item of _data["unitListBase"])
                    this.unitListBase!.push(LabelModel.fromJS(item));
            }
            this.type = _data["type"];
            this.deductionSource = _data["deductionSource"];
            this.costType = _data["costType"];
            this.roomAccountGroupId = _data["roomAccountGroupId"];
            this.roomAccountGroupName = _data["roomAccountGroupName"];
            this.roomAccountGroupNameFull = _data["roomAccountGroupNameFull"];
        }
    }

    static fromJS(data: any): InventoryView {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemTypeNameFull"] = this.roomItemTypeNameFull;
        data["name"] = this.name;
        data["nameGoods"] = this.nameGoods;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["shortName"] = this.shortName;
        data["model"] = this.model;
        data["spec"] = this.spec;
        data["origin"] = this.origin;
        data["dealer"] = this.dealer;
        data["warningDay"] = this.warningDay;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Name"] = this.unitLevel1Name;
        data["unitBase"] = this.unitBase;
        data["unitBaseName"] = this.unitBaseName;
        data["conversionRate"] = this.conversionRate;
        data["sellingPrice"] = this.sellingPrice;
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        data["usageMode"] = this.usageMode;
        data["usageModeName"] = this.usageModeName;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["inventoryBegin"] = this.inventoryBegin;
        data["inventory"] = this.inventory;
        data["inventoryCount"] = this.inventoryCount;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["afterCharge"] = this.afterCharge;
        data["inCharge"] = this.inCharge;
        data["codeManage"] = this.codeManage;
        data["batchManage"] = this.batchManage;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["typeCode"] = this.typeCode;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["specLabel"] = this.specLabel;
        data["fullSpecLabel"] = this.fullSpecLabel;
        data["unitLabel"] = this.unitLabel;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        if (Array.isArray(this.unitListBase)) {
            data["unitListBase"] = [];
            for (let item of this.unitListBase)
                data["unitListBase"].push(item.toJSON());
        }
        data["type"] = this.type;
        data["deductionSource"] = this.deductionSource;
        data["costType"] = this.costType;
        data["roomAccountGroupId"] = this.roomAccountGroupId;
        data["roomAccountGroupName"] = this.roomAccountGroupName;
        data["roomAccountGroupNameFull"] = this.roomAccountGroupNameFull;
        return data;
    }
}

/** 项目清单/账套管理/库存记录/期初库存(以项目清单为主表) 入库记录/出库记录(以库存为主表) */
export interface IInventoryView {
    /** 项目清单-标识 */
    roomItemListId?: string | undefined;
    /** 项目清单-项目名称 */
    roomItemListName?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    roomItemTypeName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天)  *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 一级单位名称 */
    unitLevel1Name?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 基本单位名称 */
    unitBaseName?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式名称 */
    usageModeName?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 期初库存 *基本单位的库存* */
    inventoryBegin?: number | undefined;
    /** 库存扣减 */
    inventory?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 使用说明 */
    remark?: string | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否编码管理 *0:否,1:是* */
    codeManage?: number | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 项目类型Code */
    typeCode?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 完整规格 */
    fullSpecLabel?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 一级单位、基本单位、规格单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 一级单位与基本单位集合 */
    unitListBase?: LabelModel[] | undefined;
    /** 项目类型:1-药品 2-耗材 0-其他 */
    type?: number;
    /** 扣减来源 0：科室扣减  1：个人库存 */
    deductionSource?: number;
    /** 费用类型 */
    costType?: string | undefined;
    /** 账套分组标识 */
    roomAccountGroupId?: string | undefined;
    /** 账套分组名称 */
    roomAccountGroupName?: string | undefined;
    /** 账套分组全称 */
    roomAccountGroupNameFull?: string | undefined;
}

/** Reponse */
export class InventoryViewResult implements IInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InventoryView[] | undefined;

    constructor(data?: IInventoryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(InventoryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InventoryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InventoryView[] | undefined;
}

/** 治疗数据 */
export class IotTreatmentData implements IIotTreatmentData {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 设备IP */
    deviceIp?: string | undefined;
    /** 治疗时间 *min* */
    therapyTime?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 跨膜压 *mmHg* */
    tmp?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 平均动脉压 *mmHg* */
    meanArterialPressure?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 透析液流量 *ml/h* */
    dialysateFlowRate?: number | undefined;
    /** 透析液电导度 *mS/cm* */
    dialysateCond?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 超滤率 *ml/h* */
    ufr?: number | undefined;
    /** 超滤量 *ml* */
    ufv?: number | undefined;
    /** 血流量 *ml/h* */
    bloodFlowRate?: number | undefined;
    /** 血流量 *l* */
    bloodFlowVolume?: number | undefined;
    /** 肝素量 *ml* */
    heparinVolume?: number | undefined;
    /** 设定治疗时间 *min* */
    therapyTimeSet?: number | undefined;
    /** 设定超滤量 *ml* */
    ufvSet?: number | undefined;
    /** 设定血流量 *ml/h* */
    bloodFlowRateSet?: number | undefined;
    /** 设定肝素速率 *ml/h* */
    heparinRateSet?: number | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    cureRecords?: CureRecord;

    constructor(data?: IIotTreatmentData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.deviceIp = _data["deviceIp"];
            this.therapyTime = _data["therapyTime"];
            this.arterialPressure = _data["arterialPressure"];
            this.venousPressure = _data["venousPressure"];
            this.tmp = _data["tmp"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.meanArterialPressure = _data["meanArterialPressure"];
            this.pulse = _data["pulse"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.dialysateCond = _data["dialysateCond"];
            this.dialysateTemp = _data["dialysateTemp"];
            this.ufr = _data["ufr"];
            this.ufv = _data["ufv"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.bloodFlowVolume = _data["bloodFlowVolume"];
            this.heparinVolume = _data["heparinVolume"];
            this.therapyTimeSet = _data["therapyTimeSet"];
            this.ufvSet = _data["ufvSet"];
            this.bloodFlowRateSet = _data["bloodFlowRateSet"];
            this.heparinRateSet = _data["heparinRateSet"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.rfv = _data["rfv"];
            this.cumulativeHeparinVolume = _data["cumulativeHeparinVolume"];
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IotTreatmentData {
        data = typeof data === 'object' ? data : {};
        let result = new IotTreatmentData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["deviceIp"] = this.deviceIp;
        data["therapyTime"] = this.therapyTime;
        data["arterialPressure"] = this.arterialPressure;
        data["venousPressure"] = this.venousPressure;
        data["tmp"] = this.tmp;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["meanArterialPressure"] = this.meanArterialPressure;
        data["pulse"] = this.pulse;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["dialysateCond"] = this.dialysateCond;
        data["dialysateTemp"] = this.dialysateTemp;
        data["ufr"] = this.ufr;
        data["ufv"] = this.ufv;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["bloodFlowVolume"] = this.bloodFlowVolume;
        data["heparinVolume"] = this.heparinVolume;
        data["therapyTimeSet"] = this.therapyTimeSet;
        data["ufvSet"] = this.ufvSet;
        data["bloodFlowRateSet"] = this.bloodFlowRateSet;
        data["heparinRateSet"] = this.heparinRateSet;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["rfv"] = this.rfv;
        data["cumulativeHeparinVolume"] = this.cumulativeHeparinVolume;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 治疗数据 */
export interface IIotTreatmentData {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 设备IP */
    deviceIp?: string | undefined;
    /** 治疗时间 *min* */
    therapyTime?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 跨膜压 *mmHg* */
    tmp?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 平均动脉压 *mmHg* */
    meanArterialPressure?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 透析液流量 *ml/h* */
    dialysateFlowRate?: number | undefined;
    /** 透析液电导度 *mS/cm* */
    dialysateCond?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 超滤率 *ml/h* */
    ufr?: number | undefined;
    /** 超滤量 *ml* */
    ufv?: number | undefined;
    /** 血流量 *ml/h* */
    bloodFlowRate?: number | undefined;
    /** 血流量 *l* */
    bloodFlowVolume?: number | undefined;
    /** 肝素量 *ml* */
    heparinVolume?: number | undefined;
    /** 设定治疗时间 *min* */
    therapyTimeSet?: number | undefined;
    /** 设定超滤量 *ml* */
    ufvSet?: number | undefined;
    /** 设定血流量 *ml/h* */
    bloodFlowRateSet?: number | undefined;
    /** 设定肝素速率 *ml/h* */
    heparinRateSet?: number | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    cureRecords?: CureRecord;
}

/** Reponse */
export class IotTreatmentDataResult implements IIotTreatmentDataResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: IotTreatmentData[] | undefined;

    constructor(data?: IIotTreatmentDataResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(IotTreatmentData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IotTreatmentDataResult {
        data = typeof data === 'object' ? data : {};
        let result = new IotTreatmentDataResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IIotTreatmentDataResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: IotTreatmentData[] | undefined;
}

/** Reponse */
export class IotTreatmentDataResultEntry implements IIotTreatmentDataResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IotTreatmentData;

    constructor(data?: IIotTreatmentDataResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? IotTreatmentData.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IotTreatmentDataResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new IotTreatmentDataResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IIotTreatmentDataResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IotTreatmentData;
}

/** 治疗数据 (ViewModel) */
export class IotTreatmentDataViewModel implements IIotTreatmentDataViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** 设备IP */
    deviceIp!: string;
    /** 治疗时间 *min* */
    therapyTime?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 跨膜压 *mmHg* */
    tmp?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 平均动脉压 *mmHg* */
    meanArterialPressure?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 透析液流量 *ml/h* */
    dialysateFlowRate?: number | undefined;
    /** 透析液电导度 *mS/cm* */
    dialysateCond?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 超滤率 *ml/h* */
    ufr?: number | undefined;
    /** 超滤量 *ml* */
    ufv?: number | undefined;
    /** 血流量 *ml/h* */
    bloodFlowRate?: number | undefined;
    /** 血流量 *l* */
    bloodFlowVolume?: number | undefined;
    /** 肝素量 *ml* */
    heparinVolume?: number | undefined;
    /** 设定治疗时间 *min* */
    therapyTimeSet?: number | undefined;
    /** 设定超滤量 *ml* */
    ufvSet?: number | undefined;
    /** 设定血流量 *ml/h* */
    bloodFlowRateSet?: number | undefined;
    /** 设定肝素速率 *ml/h* */
    heparinRateSet?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;

    constructor(data?: IIotTreatmentDataViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.deviceIp = _data["deviceIp"];
            this.therapyTime = _data["therapyTime"];
            this.arterialPressure = _data["arterialPressure"];
            this.venousPressure = _data["venousPressure"];
            this.tmp = _data["tmp"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.meanArterialPressure = _data["meanArterialPressure"];
            this.pulse = _data["pulse"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.dialysateCond = _data["dialysateCond"];
            this.dialysateTemp = _data["dialysateTemp"];
            this.ufr = _data["ufr"];
            this.ufv = _data["ufv"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.bloodFlowVolume = _data["bloodFlowVolume"];
            this.heparinVolume = _data["heparinVolume"];
            this.therapyTimeSet = _data["therapyTimeSet"];
            this.ufvSet = _data["ufvSet"];
            this.bloodFlowRateSet = _data["bloodFlowRateSet"];
            this.heparinRateSet = _data["heparinRateSet"];
            this.rfv = _data["rfv"];
            this.cumulativeHeparinVolume = _data["cumulativeHeparinVolume"];
        }
    }

    static fromJS(data: any): IotTreatmentDataViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new IotTreatmentDataViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["deviceIp"] = this.deviceIp;
        data["therapyTime"] = this.therapyTime;
        data["arterialPressure"] = this.arterialPressure;
        data["venousPressure"] = this.venousPressure;
        data["tmp"] = this.tmp;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["meanArterialPressure"] = this.meanArterialPressure;
        data["pulse"] = this.pulse;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["dialysateCond"] = this.dialysateCond;
        data["dialysateTemp"] = this.dialysateTemp;
        data["ufr"] = this.ufr;
        data["ufv"] = this.ufv;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["bloodFlowVolume"] = this.bloodFlowVolume;
        data["heparinVolume"] = this.heparinVolume;
        data["therapyTimeSet"] = this.therapyTimeSet;
        data["ufvSet"] = this.ufvSet;
        data["bloodFlowRateSet"] = this.bloodFlowRateSet;
        data["heparinRateSet"] = this.heparinRateSet;
        data["rfv"] = this.rfv;
        data["cumulativeHeparinVolume"] = this.cumulativeHeparinVolume;
        return data;
    }
}

/** 治疗数据 (ViewModel) */
export interface IIotTreatmentDataViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** 设备IP */
    deviceIp: string;
    /** 治疗时间 *min* */
    therapyTime?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 跨膜压 *mmHg* */
    tmp?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 平均动脉压 *mmHg* */
    meanArterialPressure?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 透析液流量 *ml/h* */
    dialysateFlowRate?: number | undefined;
    /** 透析液电导度 *mS/cm* */
    dialysateCond?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 超滤率 *ml/h* */
    ufr?: number | undefined;
    /** 超滤量 *ml* */
    ufv?: number | undefined;
    /** 血流量 *ml/h* */
    bloodFlowRate?: number | undefined;
    /** 血流量 *l* */
    bloodFlowVolume?: number | undefined;
    /** 肝素量 *ml* */
    heparinVolume?: number | undefined;
    /** 设定治疗时间 *min* */
    therapyTimeSet?: number | undefined;
    /** 设定超滤量 *ml* */
    ufvSet?: number | undefined;
    /** 设定血流量 *ml/h* */
    bloodFlowRateSet?: number | undefined;
    /** 设定肝素速率 *ml/h* */
    heparinRateSet?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
}

export class LabelModel implements ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;

    constructor(data?: ILabelModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LabelModel {
        data = typeof data === 'object' ? data : {};
        let result = new LabelModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data;
    }
}

export interface ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;
}

/** 检验统计配置 */
export class LisStatConfigEditModel implements ILisStatConfigEditModel {
    /** 名称 */
    name!: string;
    /** 编码 */
    code!: string;
    /** 透前透后 */
    isAfter?: boolean;
    /** 自定义计算 */
    isCalculate?: boolean;
    /** 计算公式 */
    calculateFormula?: string | undefined;
    /** 是否显示 */
    isDisplay?: boolean;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ILisStatConfigEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.isAfter = _data["isAfter"];
            this.isCalculate = _data["isCalculate"];
            this.calculateFormula = _data["calculateFormula"];
            this.isDisplay = _data["isDisplay"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): LisStatConfigEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new LisStatConfigEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["isAfter"] = this.isAfter;
        data["isCalculate"] = this.isCalculate;
        data["calculateFormula"] = this.calculateFormula;
        data["isDisplay"] = this.isDisplay;
        data["remark"] = this.remark;
        return data;
    }
}

/** 检验统计配置 */
export interface ILisStatConfigEditModel {
    /** 名称 */
    name: string;
    /** 编码 */
    code: string;
    /** 透前透后 */
    isAfter?: boolean;
    /** 自定义计算 */
    isCalculate?: boolean;
    /** 计算公式 */
    calculateFormula?: string | undefined;
    /** 是否显示 */
    isDisplay?: boolean;
    /** 备注 */
    remark?: string | undefined;
}

/** 检验统计配置 */
export class LisStatConfigView implements ILisStatConfigView {
    /** 名称 */
    name!: string;
    /** 编码 */
    code!: string;
    /** 透前透后 */
    isAfter?: boolean;
    /** 自定义计算 */
    isCalculate?: boolean;
    /** 计算公式 */
    calculateFormula?: string | undefined;
    /** 是否显示 */
    isDisplay?: boolean;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ILisStatConfigView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.isAfter = _data["isAfter"];
            this.isCalculate = _data["isCalculate"];
            this.calculateFormula = _data["calculateFormula"];
            this.isDisplay = _data["isDisplay"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LisStatConfigView {
        data = typeof data === 'object' ? data : {};
        let result = new LisStatConfigView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["isAfter"] = this.isAfter;
        data["isCalculate"] = this.isCalculate;
        data["calculateFormula"] = this.calculateFormula;
        data["isDisplay"] = this.isDisplay;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 检验统计配置 */
export interface ILisStatConfigView {
    /** 名称 */
    name: string;
    /** 编码 */
    code: string;
    /** 透前透后 */
    isAfter?: boolean;
    /** 自定义计算 */
    isCalculate?: boolean;
    /** 计算公式 */
    calculateFormula?: string | undefined;
    /** 是否显示 */
    isDisplay?: boolean;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class LisStatConfigViewResult implements ILisStatConfigViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: LisStatConfigView[] | undefined;

    constructor(data?: ILisStatConfigViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(LisStatConfigView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LisStatConfigViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new LisStatConfigViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ILisStatConfigViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: LisStatConfigView[] | undefined;
}

/** Reponse */
export class LisStatConfigViewResultEntry implements ILisStatConfigViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: LisStatConfigView;

    constructor(data?: ILisStatConfigViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? LisStatConfigView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LisStatConfigViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new LisStatConfigViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ILisStatConfigViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: LisStatConfigView;
}

/** LoginViewModel */
export class LoginViewModel implements ILoginViewModel {
    /** 用户名(工号或者登录名) */
    userName!: string;
    /** 密码 */
    password!: string;
    /** 院区 */
    hospitalAreaId?: string | undefined;
    /** 是否强制 */
    force?: boolean;

    constructor(data?: ILoginViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.hospitalAreaId = _data["hospitalAreaId"];
            this.force = _data["force"];
        }
    }

    static fromJS(data: any): LoginViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["hospitalAreaId"] = this.hospitalAreaId;
        data["force"] = this.force;
        return data;
    }
}

/** LoginViewModel */
export interface ILoginViewModel {
    /** 用户名(工号或者登录名) */
    userName: string;
    /** 密码 */
    password: string;
    /** 院区 */
    hospitalAreaId?: string | undefined;
    /** 是否强制 */
    force?: boolean;
}

/** 自定义表单字段映射 */
export class MapForm implements IMapForm {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 字段key */
    key?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IMapForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.key = _data["key"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): MapForm {
        data = typeof data === 'object' ? data : {};
        let result = new MapForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["key"] = this.key;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 自定义表单字段映射 */
export interface IMapForm {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 字段key */
    key?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class MapFormResult implements IMapFormResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapForm[] | undefined;

    constructor(data?: IMapFormResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapForm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapFormResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapFormResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapFormResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapForm[] | undefined;
}

/** Reponse */
export class MapFormResultEntry implements IMapFormResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapForm;

    constructor(data?: IMapFormResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? MapForm.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MapFormResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new MapFormResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IMapFormResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapForm;
}

/** 自定义表单字段映射 (ViewModel) */
export class MapFormViewModel implements IMapFormViewModel {
    /** 名称 */
    name!: string;
    /** 字段key */
    key!: string;

    constructor(data?: IMapFormViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.key = _data["key"];
        }
    }

    static fromJS(data: any): MapFormViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new MapFormViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["key"] = this.key;
        return data;
    }
}

/** 自定义表单字段映射 (ViewModel) */
export interface IMapFormViewModel {
    /** 名称 */
    name: string;
    /** 字段key */
    key: string;
}

/** 检验报告项配置 */
export class MapLisItemDeployEditModel implements IMapLisItemDeployEditModel {
    /** 名称 */
    name!: string;
    /** LIS编码，唯一 */
    codeLis!: string;
    /** 单位 */
    unit?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 匹配编码 */
    codeI?: string | undefined;

    constructor(data?: IMapLisItemDeployEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.codeLis = _data["codeLis"];
            this.unit = _data["unit"];
            this.referenceRange = _data["referenceRange"];
            this.remark = _data["remark"];
            this.codeI = _data["codeI"];
        }
    }

    static fromJS(data: any): MapLisItemDeployEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemDeployEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["codeLis"] = this.codeLis;
        data["unit"] = this.unit;
        data["referenceRange"] = this.referenceRange;
        data["remark"] = this.remark;
        data["codeI"] = this.codeI;
        return data;
    }
}

/** 检验报告项配置 */
export interface IMapLisItemDeployEditModel {
    /** 名称 */
    name: string;
    /** LIS编码，唯一 */
    codeLis: string;
    /** 单位 */
    unit?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 匹配编码 */
    codeI?: string | undefined;
}

/** 检验报告项配置 */
export class MapLisItemDeployView implements IMapLisItemDeployView {
    /** 名称 */
    name!: string;
    /** LIS编码，唯一 */
    codeLis!: string;
    /** 单位 */
    unit?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 匹配编码 */
    codeI?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 分类名称 */
    typeName?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;

    constructor(data?: IMapLisItemDeployView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.codeLis = _data["codeLis"];
            this.unit = _data["unit"];
            this.referenceRange = _data["referenceRange"];
            this.remark = _data["remark"];
            this.codeI = _data["codeI"];
            this.complianceRateRange = _data["complianceRateRange"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.must = _data["must"];
            this.typeName = _data["typeName"];
            this.commonTerms = _data["commonTerms"];
            this.abnormaRemind = _data["abnormaRemind"];
        }
    }

    static fromJS(data: any): MapLisItemDeployView {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemDeployView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["codeLis"] = this.codeLis;
        data["unit"] = this.unit;
        data["referenceRange"] = this.referenceRange;
        data["remark"] = this.remark;
        data["codeI"] = this.codeI;
        data["complianceRateRange"] = this.complianceRateRange;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["must"] = this.must;
        data["typeName"] = this.typeName;
        data["commonTerms"] = this.commonTerms;
        data["abnormaRemind"] = this.abnormaRemind;
        return data;
    }
}

/** 检验报告项配置 */
export interface IMapLisItemDeployView {
    /** 名称 */
    name: string;
    /** LIS编码，唯一 */
    codeLis: string;
    /** 单位 */
    unit?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 匹配编码 */
    codeI?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 分类名称 */
    typeName?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
}

/** Reponse */
export class MapLisItemDeployViewResult implements IMapLisItemDeployViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemDeployView[] | undefined;

    constructor(data?: IMapLisItemDeployViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapLisItemDeployView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapLisItemDeployViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemDeployViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapLisItemDeployViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemDeployView[] | undefined;
}

/** Reponse */
export class MapLisItemDeployViewResultEntry implements IMapLisItemDeployViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisItemDeployView;

    constructor(data?: IMapLisItemDeployViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? MapLisItemDeployView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisItemDeployViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemDeployViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IMapLisItemDeployViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisItemDeployView;
}

export class MapLisItemEditModel implements IMapLisItemEditModel {
    /** 名称 */
    name!: string;
    /** [检验报告分类标识](#检验报告分类) */
    mapLisTypeId!: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [iHDIS检验项配置标识](#iHDIS检验项配置) */
    mapLisItemIhdisId?: string | undefined;

    constructor(data?: IMapLisItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.mapLisTypeId = _data["mapLisTypeId"];
            this.codeLis = _data["codeLis"];
            this.remark = _data["remark"];
            this.mapLisItemIhdisId = _data["mapLisItemIhdisId"];
        }
    }

    static fromJS(data: any): MapLisItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["mapLisTypeId"] = this.mapLisTypeId;
        data["codeLis"] = this.codeLis;
        data["remark"] = this.remark;
        data["mapLisItemIhdisId"] = this.mapLisItemIhdisId;
        return data;
    }
}

export interface IMapLisItemEditModel {
    /** 名称 */
    name: string;
    /** [检验报告分类标识](#检验报告分类) */
    mapLisTypeId: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [iHDIS检验项配置标识](#iHDIS检验项配置) */
    mapLisItemIhdisId?: string | undefined;
}

/** iHDIS检验项明细 */
export class MapLisItemIhdisEditModel implements IMapLisItemIhdisEditModel {
    /** 名称 */
    name!: string;
    /** [关联的检验报告分类标识](#检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI!: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 是否进行质控报表统计 */
    report?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IMapLisItemIhdisEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.mapLisTypeId = _data["mapLisTypeId"];
            this.codeI = _data["codeI"];
            this.codeLis = _data["codeLis"];
            this.unit = _data["unit"];
            this.complianceRateRange = _data["complianceRateRange"];
            this.referenceRange = _data["referenceRange"];
            this.referenceRangeMinMan = _data["referenceRangeMinMan"];
            this.referenceRangeMaxMan = _data["referenceRangeMaxMan"];
            this.referenceRangeMinWoman = _data["referenceRangeMinWoman"];
            this.referenceRangeMaxWoman = _data["referenceRangeMaxWoman"];
            this.commonTerms = _data["commonTerms"];
            this.abnormaRemind = _data["abnormaRemind"];
            this.must = _data["must"];
            this.report = _data["report"];
            this.checkInterval = _data["checkInterval"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): MapLisItemIhdisEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemIhdisEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["mapLisTypeId"] = this.mapLisTypeId;
        data["codeI"] = this.codeI;
        data["codeLis"] = this.codeLis;
        data["unit"] = this.unit;
        data["complianceRateRange"] = this.complianceRateRange;
        data["referenceRange"] = this.referenceRange;
        data["referenceRangeMinMan"] = this.referenceRangeMinMan;
        data["referenceRangeMaxMan"] = this.referenceRangeMaxMan;
        data["referenceRangeMinWoman"] = this.referenceRangeMinWoman;
        data["referenceRangeMaxWoman"] = this.referenceRangeMaxWoman;
        data["commonTerms"] = this.commonTerms;
        data["abnormaRemind"] = this.abnormaRemind;
        data["must"] = this.must;
        data["report"] = this.report;
        data["checkInterval"] = this.checkInterval;
        data["remark"] = this.remark;
        return data;
    }
}

/** iHDIS检验项明细 */
export interface IMapLisItemIhdisEditModel {
    /** 名称 */
    name: string;
    /** [关联的检验报告分类标识](#检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 是否进行质控报表统计 */
    report?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** iHDIS检验项明细 */
export class MapLisItemIhdisView implements IMapLisItemIhdisView {
    /** 名称 */
    name!: string;
    /** [关联的检验报告分类标识](#检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI!: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 是否进行质控报表统计 */
    report?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 关联的检验报告分类名称 */
    mapLisTypeName?: string | undefined;

    constructor(data?: IMapLisItemIhdisView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.mapLisTypeId = _data["mapLisTypeId"];
            this.codeI = _data["codeI"];
            this.codeLis = _data["codeLis"];
            this.unit = _data["unit"];
            this.complianceRateRange = _data["complianceRateRange"];
            this.referenceRange = _data["referenceRange"];
            this.referenceRangeMinMan = _data["referenceRangeMinMan"];
            this.referenceRangeMaxMan = _data["referenceRangeMaxMan"];
            this.referenceRangeMinWoman = _data["referenceRangeMinWoman"];
            this.referenceRangeMaxWoman = _data["referenceRangeMaxWoman"];
            this.commonTerms = _data["commonTerms"];
            this.abnormaRemind = _data["abnormaRemind"];
            this.must = _data["must"];
            this.report = _data["report"];
            this.checkInterval = _data["checkInterval"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.mapLisTypeName = _data["mapLisTypeName"];
        }
    }

    static fromJS(data: any): MapLisItemIhdisView {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemIhdisView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["mapLisTypeId"] = this.mapLisTypeId;
        data["codeI"] = this.codeI;
        data["codeLis"] = this.codeLis;
        data["unit"] = this.unit;
        data["complianceRateRange"] = this.complianceRateRange;
        data["referenceRange"] = this.referenceRange;
        data["referenceRangeMinMan"] = this.referenceRangeMinMan;
        data["referenceRangeMaxMan"] = this.referenceRangeMaxMan;
        data["referenceRangeMinWoman"] = this.referenceRangeMinWoman;
        data["referenceRangeMaxWoman"] = this.referenceRangeMaxWoman;
        data["commonTerms"] = this.commonTerms;
        data["abnormaRemind"] = this.abnormaRemind;
        data["must"] = this.must;
        data["report"] = this.report;
        data["checkInterval"] = this.checkInterval;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["mapLisTypeName"] = this.mapLisTypeName;
        return data;
    }
}

/** iHDIS检验项明细 */
export interface IMapLisItemIhdisView {
    /** 名称 */
    name: string;
    /** [关联的检验报告分类标识](#检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 是否进行质控报表统计 */
    report?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 关联的检验报告分类名称 */
    mapLisTypeName?: string | undefined;
}

/** Reponse */
export class MapLisItemIhdisViewResult implements IMapLisItemIhdisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemIhdisView[] | undefined;

    constructor(data?: IMapLisItemIhdisViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapLisItemIhdisView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapLisItemIhdisViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemIhdisViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapLisItemIhdisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemIhdisView[] | undefined;
}

/** Reponse */
export class MapLisItemIhdisViewResultEntry implements IMapLisItemIhdisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisItemIhdisView;

    constructor(data?: IMapLisItemIhdisViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? MapLisItemIhdisView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisItemIhdisViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemIhdisViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IMapLisItemIhdisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisItemIhdisView;
}

export class MapLisItemView implements IMapLisItemView {
    /** 名称 */
    name!: string;
    /** [检验报告分类标识](#检验报告分类) */
    mapLisTypeId!: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [iHDIS检验项配置标识](#iHDIS检验项配置) */
    mapLisItemIhdisId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 分类名称 */
    typeName?: string | undefined;
    /** 分类名称 */
    typeCodeName?: string | undefined;
    /** 检验周期显示值 */
    checkIntervalLabel?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IMapLisItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.mapLisTypeId = _data["mapLisTypeId"];
            this.codeLis = _data["codeLis"];
            this.remark = _data["remark"];
            this.mapLisItemIhdisId = _data["mapLisItemIhdisId"];
            this.codeI = _data["codeI"];
            this.unit = _data["unit"];
            this.complianceRateRange = _data["complianceRateRange"];
            this.referenceRange = _data["referenceRange"];
            this.referenceRangeMinMan = _data["referenceRangeMinMan"];
            this.referenceRangeMaxMan = _data["referenceRangeMaxMan"];
            this.referenceRangeMinWoman = _data["referenceRangeMinWoman"];
            this.referenceRangeMaxWoman = _data["referenceRangeMaxWoman"];
            this.commonTerms = _data["commonTerms"];
            this.abnormaRemind = _data["abnormaRemind"];
            this.must = _data["must"];
            this.checkInterval = _data["checkInterval"];
            this.typeName = _data["typeName"];
            this.typeCodeName = _data["typeCodeName"];
            this.checkIntervalLabel = _data["checkIntervalLabel"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisItemView {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["mapLisTypeId"] = this.mapLisTypeId;
        data["codeLis"] = this.codeLis;
        data["remark"] = this.remark;
        data["mapLisItemIhdisId"] = this.mapLisItemIhdisId;
        data["codeI"] = this.codeI;
        data["unit"] = this.unit;
        data["complianceRateRange"] = this.complianceRateRange;
        data["referenceRange"] = this.referenceRange;
        data["referenceRangeMinMan"] = this.referenceRangeMinMan;
        data["referenceRangeMaxMan"] = this.referenceRangeMaxMan;
        data["referenceRangeMinWoman"] = this.referenceRangeMinWoman;
        data["referenceRangeMaxWoman"] = this.referenceRangeMaxWoman;
        data["commonTerms"] = this.commonTerms;
        data["abnormaRemind"] = this.abnormaRemind;
        data["must"] = this.must;
        data["checkInterval"] = this.checkInterval;
        data["typeName"] = this.typeName;
        data["typeCodeName"] = this.typeCodeName;
        data["checkIntervalLabel"] = this.checkIntervalLabel;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IMapLisItemView {
    /** 名称 */
    name: string;
    /** [检验报告分类标识](#检验报告分类) */
    mapLisTypeId: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [iHDIS检验项配置标识](#iHDIS检验项配置) */
    mapLisItemIhdisId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 分类名称 */
    typeName?: string | undefined;
    /** 分类名称 */
    typeCodeName?: string | undefined;
    /** 检验周期显示值 */
    checkIntervalLabel?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class MapLisItemViewResult implements IMapLisItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemView[] | undefined;

    constructor(data?: IMapLisItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapLisItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapLisItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapLisItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemView[] | undefined;
}

/** Reponse */
export class MapLisItemViewResultEntry implements IMapLisItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisItemView;

    constructor(data?: IMapLisItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? MapLisItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IMapLisItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisItemView;
}

/** 检验报告分类 */
export class MapLisType implements IMapLisType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IMapLisType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisType {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 检验报告分类 */
export interface IMapLisType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class MapLisTypeResult implements IMapLisTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisType[] | undefined;

    constructor(data?: IMapLisTypeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapLisType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapLisTypeResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisTypeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapLisTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisType[] | undefined;
}

/** Reponse */
export class MapLisTypeResultEntry implements IMapLisTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisType;

    constructor(data?: IMapLisTypeResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? MapLisType.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisTypeResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisTypeResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IMapLisTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisType;
}

/** 检验报告分类 (ViewModel) */
export class MapLisTypeViewModel implements IMapLisTypeViewModel {
    /** 名称 */
    name!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IMapLisTypeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): MapLisTypeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisTypeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

/** 检验报告分类 (ViewModel) */
export interface IMapLisTypeViewModel {
    /** 名称 */
    name: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 已经匹配列表视图 */
export class MapListMatched implements IMapListMatched {
    /** 血透系统Id */
    idIhdis?: string | undefined;
    /** 血透系统Code */
    codeI?: string | undefined;
    /** 血透系统Id */
    idLis?: string | undefined;
    /** Lis系统Code */
    codeLis?: string | undefined;
    /** Lis系统化验名称 */
    nameLis?: string | undefined;
    /** 血透系统化验名称 */
    nameI?: string | undefined;

    constructor(data?: IMapListMatched) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idIhdis = _data["idIhdis"];
            this.codeI = _data["codeI"];
            this.idLis = _data["idLis"];
            this.codeLis = _data["codeLis"];
            this.nameLis = _data["nameLis"];
            this.nameI = _data["nameI"];
        }
    }

    static fromJS(data: any): MapListMatched {
        data = typeof data === 'object' ? data : {};
        let result = new MapListMatched();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idIhdis"] = this.idIhdis;
        data["codeI"] = this.codeI;
        data["idLis"] = this.idLis;
        data["codeLis"] = this.codeLis;
        data["nameLis"] = this.nameLis;
        data["nameI"] = this.nameI;
        return data;
    }
}

/** 已经匹配列表视图 */
export interface IMapListMatched {
    /** 血透系统Id */
    idIhdis?: string | undefined;
    /** 血透系统Code */
    codeI?: string | undefined;
    /** 血透系统Id */
    idLis?: string | undefined;
    /** Lis系统Code */
    codeLis?: string | undefined;
    /** Lis系统化验名称 */
    nameLis?: string | undefined;
    /** 血透系统化验名称 */
    nameI?: string | undefined;
}

/** Reponse */
export class MapListMatchedResult implements IMapListMatchedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapListMatched[] | undefined;

    constructor(data?: IMapListMatchedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapListMatched.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapListMatchedResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapListMatchedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapListMatchedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapListMatched[] | undefined;
}

/** 菜单权限 */
export class MenuRightView implements IMenuRightView {
    /** 权限标识 */
    id?: string | undefined;
    /** 权限名称 */
    name?: string | undefined;
    /** 权限代码 */
    code?: string | undefined;
    /** 权限类型 */
    type?: number;

    constructor(data?: IMenuRightView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): MenuRightView {
        data = typeof data === 'object' ? data : {};
        let result = new MenuRightView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["type"] = this.type;
        return data;
    }
}

/** 菜单权限 */
export interface IMenuRightView {
    /** 权限标识 */
    id?: string | undefined;
    /** 权限名称 */
    name?: string | undefined;
    /** 权限代码 */
    code?: string | undefined;
    /** 权限类型 */
    type?: number;
}

/** Reponse */
export class ObjectResult implements IObjectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: any[] | undefined;

    constructor(data?: IObjectResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
        }
    }

    static fromJS(data: any): ObjectResult {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        return data;
    }
}

/** Reponse */
export interface IObjectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: any[] | undefined;
}

/** 患者信息 */
export class Patient implements IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;

    constructor(data?: IPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.surnameCode = _data["surnameCode"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.photo = _data["photo"];
            this.face = _data["face"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.department = _data["department"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.archiveNumber = _data["archiveNumber"];
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.rh = _data["rh"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.educationalLevel = _data["educationalLevel"];
            this.profession = _data["profession"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisStateTransition = _data["dialysisStateTransition"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.prognosisState = _data["prognosisState"];
            this.positive = _data["positive"];
            this.complication = _data["complication"];
            this.doctor = _data["doctor"];
            this.nurse = _data["nurse"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisPathological = _data["diagnosisPathological"];
            this.diagnosisComplication = _data["diagnosisComplication"];
            this.diagnosisInfectiousDiseases = _data["diagnosisInfectiousDiseases"];
            this.diagnosisTumor = _data["diagnosisTumor"];
            this.diagnosisAllergy = _data["diagnosisAllergy"];
            this.remark = _data["remark"];
            this.initialSource = _data["initialSource"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.finger = _data["finger"];
            this.dossierNumber = _data["dossierNumber"];
            this.medicareCondition = _data["medicareCondition"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
        }
    }

    static fromJS(data: any): Patient {
        data = typeof data === 'object' ? data : {};
        let result = new Patient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["surnameCode"] = this.surnameCode;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["photo"] = this.photo;
        data["face"] = this.face;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["department"] = this.department;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["archiveNumber"] = this.archiveNumber;
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["rh"] = this.rh;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["educationalLevel"] = this.educationalLevel;
        data["profession"] = this.profession;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toISOString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisStateTransition"] = this.dialysisStateTransition;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["prognosisState"] = this.prognosisState;
        data["positive"] = this.positive;
        data["complication"] = this.complication;
        data["doctor"] = this.doctor;
        data["nurse"] = this.nurse;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisPathological"] = this.diagnosisPathological;
        data["diagnosisComplication"] = this.diagnosisComplication;
        data["diagnosisInfectiousDiseases"] = this.diagnosisInfectiousDiseases;
        data["diagnosisTumor"] = this.diagnosisTumor;
        data["diagnosisAllergy"] = this.diagnosisAllergy;
        data["remark"] = this.remark;
        data["initialSource"] = this.initialSource;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["finger"] = this.finger;
        data["dossierNumber"] = this.dossierNumber;
        data["medicareCondition"] = this.medicareCondition;
        data["nextDate"] = this.nextDate ? this.nextDate.toISOString() : <any>undefined;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        return data;
    }
}

/** 患者信息 */
export interface IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
}

/** 患者出库 */
export class PatientOutItemView implements IPatientOutItemView {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: IPatientOutItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftName = _data["shiftName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.spec = _data["spec"];
            this.unitLevel1 = _data["unitLevel1"];
            this.conversionRate = _data["conversionRate"];
            this.count = _data["count"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): PatientOutItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOutItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftName"] = this.shiftName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["spec"] = this.spec;
        data["unitLevel1"] = this.unitLevel1;
        data["conversionRate"] = this.conversionRate;
        data["count"] = this.count;
        data["unit"] = this.unit;
        return data;
    }
}

/** 患者出库 */
export interface IPatientOutItemView {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;
}

/** Reponse */
export class PatientOutItemViewResult implements IPatientOutItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientOutItemView[] | undefined;

    constructor(data?: IPatientOutItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientOutItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientOutItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOutItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientOutItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientOutItemView[] | undefined;
}

/** 患者出库 */
export class PatientOutView implements IPatientOutView {
    /** 项目标识 */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientOutView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.spec = _data["spec"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientOutView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOutView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["spec"] = this.spec;
        data["count"] = this.count;
        return data;
    }
}

/** 患者出库 */
export interface IPatientOutView {
    /** 项目标识 */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class PatientOutViewResult implements IPatientOutViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientOutView[] | undefined;

    constructor(data?: IPatientOutViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientOutView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientOutViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOutViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientOutViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientOutView[] | undefined;
}

/** 患者血管通路 */
export class PatientVascularAccess implements IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientVascularAccess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
            this.changeCauseOther = _data["changeCauseOther"];
            this.location = _data["location"];
            this.type = _data["type"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.remarkOther = _data["remarkOther"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.default = _data["default"];
            this.disableDate = _data["disableDate"] ? dayjs(_data["disableDate"].toString()) : <any>undefined;
            this.disableReason = _data["disableReason"];
            this.lifetime = _data["lifetime"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccess {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["change"] = this.change;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        data["changeCauseOther"] = this.changeCauseOther;
        data["location"] = this.location;
        data["type"] = this.type;
        data["position"] = this.position;
        data["way"] = this.way;
        data["remarkOther"] = this.remarkOther;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["default"] = this.default;
        data["disableDate"] = this.disableDate ? this.disableDate.toISOString() : <any>undefined;
        data["disableReason"] = this.disableReason;
        data["lifetime"] = this.lifetime;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者血管通路 */
export interface IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** 拼音五笔简码 */
export class PinyinWubiCodeView implements IPinyinWubiCodeView {
    /** 拼音简码 */
    pinyinCode?: string | undefined;
    /** 五笔简码 */
    wubiCode?: string | undefined;

    constructor(data?: IPinyinWubiCodeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
        }
    }

    static fromJS(data: any): PinyinWubiCodeView {
        data = typeof data === 'object' ? data : {};
        let result = new PinyinWubiCodeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        return data;
    }
}

/** 拼音五笔简码 */
export interface IPinyinWubiCodeView {
    /** 拼音简码 */
    pinyinCode?: string | undefined;
    /** 五笔简码 */
    wubiCode?: string | undefined;
}

/** Reponse */
export class PinyinWubiCodeViewResultEntry implements IPinyinWubiCodeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PinyinWubiCodeView;

    constructor(data?: IPinyinWubiCodeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PinyinWubiCodeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PinyinWubiCodeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PinyinWubiCodeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPinyinWubiCodeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PinyinWubiCodeView;
}

/** 转归报告分类 */
export class PrognosisFormType implements IPrognosisFormType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type?: number;
    /** 序列 */
    sequence?: number;
    /** 分类 */
    category?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPrognosisFormType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.sequence = _data["sequence"];
            this.category = _data["category"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PrognosisFormType {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisFormType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["type"] = this.type;
        data["sequence"] = this.sequence;
        data["category"] = this.category;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 转归报告分类 */
export interface IPrognosisFormType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type?: number;
    /** 序列 */
    sequence?: number;
    /** 分类 */
    category?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 转归报告分类 */
export class PrognosisFormTypeEditModel implements IPrognosisFormTypeEditModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code!: string;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type!: number;
    /** 分类 */
    category?: string | undefined;

    constructor(data?: IPrognosisFormTypeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.category = _data["category"];
        }
    }

    static fromJS(data: any): PrognosisFormTypeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisFormTypeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["type"] = this.type;
        data["category"] = this.category;
        return data;
    }
}

/** 转归报告分类 */
export interface IPrognosisFormTypeEditModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code: string;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type: number;
    /** 分类 */
    category?: string | undefined;
}

/** Reponse */
export class PrognosisFormTypeResult implements IPrognosisFormTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrognosisFormType[] | undefined;

    constructor(data?: IPrognosisFormTypeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PrognosisFormType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PrognosisFormTypeResult {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisFormTypeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPrognosisFormTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrognosisFormType[] | undefined;
}

/** Reponse */
export class PrognosisFormTypeResultEntry implements IPrognosisFormTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrognosisFormType;

    constructor(data?: IPrognosisFormTypeResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PrognosisFormType.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PrognosisFormTypeResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisFormTypeResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPrognosisFormTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrognosisFormType;
}

/** 知识库-并发症 */
export class RepositoryComplication implements IRepositoryComplication {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryComplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.frequently = _data["frequently"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryComplication {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplication();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["frequently"] = this.frequently;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 知识库-并发症 */
export interface IRepositoryComplication {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class RepositoryComplicationCauseEditModel implements IRepositoryComplicationCauseEditModel {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId!: string;
    /** 名称 */
    name!: string;

    constructor(data?: IRepositoryComplicationCauseEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryComplicationId = _data["repositoryComplicationId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): RepositoryComplicationCauseEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationCauseEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryComplicationId"] = this.repositoryComplicationId;
        data["name"] = this.name;
        return data;
    }
}

export interface IRepositoryComplicationCauseEditModel {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId: string;
    /** 名称 */
    name: string;
}

export class RepositoryComplicationCauseView implements IRepositoryComplicationCauseView {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId!: string;
    /** 名称 */
    name!: string;
    /** 并发症名称 */
    repositoryComplicationName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryComplicationCauseView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryComplicationId = _data["repositoryComplicationId"];
            this.name = _data["name"];
            this.repositoryComplicationName = _data["repositoryComplicationName"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryComplicationCauseView {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationCauseView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryComplicationId"] = this.repositoryComplicationId;
        data["name"] = this.name;
        data["repositoryComplicationName"] = this.repositoryComplicationName;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRepositoryComplicationCauseView {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId: string;
    /** 名称 */
    name: string;
    /** 并发症名称 */
    repositoryComplicationName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RepositoryComplicationCauseViewResult implements IRepositoryComplicationCauseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryComplicationCauseView[] | undefined;

    constructor(data?: IRepositoryComplicationCauseViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RepositoryComplicationCauseView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryComplicationCauseViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationCauseViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRepositoryComplicationCauseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryComplicationCauseView[] | undefined;
}

/** Reponse */
export class RepositoryComplicationCauseViewResultEntry implements IRepositoryComplicationCauseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryComplicationCauseView;

    constructor(data?: IRepositoryComplicationCauseViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RepositoryComplicationCauseView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryComplicationCauseViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationCauseViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRepositoryComplicationCauseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryComplicationCauseView;
}

export class RepositoryComplicationDisposeEditModel implements IRepositoryComplicationDisposeEditModel {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId!: string;
    /** 名称 */
    name!: string;
    /** 序列 */
    sequence?: number;

    constructor(data?: IRepositoryComplicationDisposeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryComplicationId = _data["repositoryComplicationId"];
            this.name = _data["name"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): RepositoryComplicationDisposeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationDisposeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryComplicationId"] = this.repositoryComplicationId;
        data["name"] = this.name;
        data["sequence"] = this.sequence;
        return data;
    }
}

export interface IRepositoryComplicationDisposeEditModel {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId: string;
    /** 名称 */
    name: string;
    /** 序列 */
    sequence?: number;
}

export class RepositoryComplicationDisposeView implements IRepositoryComplicationDisposeView {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId!: string;
    /** 名称 */
    name!: string;
    /** 序列 */
    sequence?: number;
    /** 并发症名称 */
    repositoryComplicationName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryComplicationDisposeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryComplicationId = _data["repositoryComplicationId"];
            this.name = _data["name"];
            this.sequence = _data["sequence"];
            this.repositoryComplicationName = _data["repositoryComplicationName"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryComplicationDisposeView {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationDisposeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryComplicationId"] = this.repositoryComplicationId;
        data["name"] = this.name;
        data["sequence"] = this.sequence;
        data["repositoryComplicationName"] = this.repositoryComplicationName;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRepositoryComplicationDisposeView {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId: string;
    /** 名称 */
    name: string;
    /** 序列 */
    sequence?: number;
    /** 并发症名称 */
    repositoryComplicationName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RepositoryComplicationDisposeViewResult implements IRepositoryComplicationDisposeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryComplicationDisposeView[] | undefined;

    constructor(data?: IRepositoryComplicationDisposeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RepositoryComplicationDisposeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryComplicationDisposeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationDisposeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRepositoryComplicationDisposeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryComplicationDisposeView[] | undefined;
}

/** Reponse */
export class RepositoryComplicationDisposeViewResultEntry implements IRepositoryComplicationDisposeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryComplicationDisposeView;

    constructor(data?: IRepositoryComplicationDisposeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RepositoryComplicationDisposeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryComplicationDisposeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationDisposeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRepositoryComplicationDisposeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryComplicationDisposeView;
}

/** Reponse */
export class RepositoryComplicationResult implements IRepositoryComplicationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryComplication[] | undefined;

    constructor(data?: IRepositoryComplicationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RepositoryComplication.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryComplicationResult {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRepositoryComplicationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryComplication[] | undefined;
}

/** Reponse */
export class RepositoryComplicationResultEntry implements IRepositoryComplicationResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryComplication;

    constructor(data?: IRepositoryComplicationResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RepositoryComplication.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryComplicationResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRepositoryComplicationResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryComplication;
}

/** 知识库-并发症 (ViewModel) */
export class RepositoryComplicationViewModel implements IRepositoryComplicationViewModel {
    /** 名称 */
    name!: string;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;

    constructor(data?: IRepositoryComplicationViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.frequently = _data["frequently"];
        }
    }

    static fromJS(data: any): RepositoryComplicationViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["frequently"] = this.frequently;
        return data;
    }
}

/** 知识库-并发症 (ViewModel) */
export interface IRepositoryComplicationViewModel {
    /** 名称 */
    name: string;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
}

/** 宣教内容明细 */
export class RepositoryHealtheducationDetail implements IRepositoryHealtheducationDetail {
    /** 标识 */
    id?: string | undefined;
    /** [分类标识](宣教内容分类) */
    repositoryHealtheducationTypeId?: string | undefined;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name?: string | undefined;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type?: string | undefined;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    repositoryHealtheducationTypes?: RepositoryHealtheducationType;

    constructor(data?: IRepositoryHealtheducationDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.repositoryHealtheducationTypeId = _data["repositoryHealtheducationTypeId"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.duration = _data["duration"];
            this.sequence = _data["sequence"];
            this.source = _data["source"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.repositoryHealtheducationTypes = _data["repositoryHealtheducationTypes"] ? RepositoryHealtheducationType.fromJS(_data["repositoryHealtheducationTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetail {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["repositoryHealtheducationTypeId"] = this.repositoryHealtheducationTypeId;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["type"] = this.type;
        data["content"] = this.content;
        data["duration"] = this.duration;
        data["sequence"] = this.sequence;
        data["source"] = this.source;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["repositoryHealtheducationTypes"] = this.repositoryHealtheducationTypes ? this.repositoryHealtheducationTypes.toJSON() : <any>undefined;
        return data;
    }
}

/** 宣教内容明细 */
export interface IRepositoryHealtheducationDetail {
    /** 标识 */
    id?: string | undefined;
    /** [分类标识](宣教内容分类) */
    repositoryHealtheducationTypeId?: string | undefined;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name?: string | undefined;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type?: string | undefined;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    repositoryHealtheducationTypes?: RepositoryHealtheducationType;
}

export class RepositoryHealtheducationDetailEditModel implements IRepositoryHealtheducationDetailEditModel {
    /** [分类标识](#宣教内容分类) */
    repositoryHealtheducationTypeId!: string;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name!: string;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type!: string;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件路径集合 */
    urls?: RepositoryHealtheducationDetailEditModelItem[] | undefined;

    constructor(data?: IRepositoryHealtheducationDetailEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryHealtheducationTypeId = _data["repositoryHealtheducationTypeId"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.duration = _data["duration"];
            this.source = _data["source"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["urls"])) {
                this.urls = [] as any;
                for (let item of _data["urls"])
                    this.urls!.push(RepositoryHealtheducationDetailEditModelItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryHealtheducationTypeId"] = this.repositoryHealtheducationTypeId;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["type"] = this.type;
        data["content"] = this.content;
        data["duration"] = this.duration;
        data["source"] = this.source;
        data["remark"] = this.remark;
        if (Array.isArray(this.urls)) {
            data["urls"] = [];
            for (let item of this.urls)
                data["urls"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRepositoryHealtheducationDetailEditModel {
    /** [分类标识](#宣教内容分类) */
    repositoryHealtheducationTypeId: string;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name: string;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type: string;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件路径集合 */
    urls?: RepositoryHealtheducationDetailEditModelItem[] | undefined;
}

export class RepositoryHealtheducationDetailEditModelItem implements IRepositoryHealtheducationDetailEditModelItem {
    /** url */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;

    constructor(data?: IRepositoryHealtheducationDetailEditModelItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailEditModelItem {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailEditModelItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["sequence"] = this.sequence;
        return data;
    }
}

export interface IRepositoryHealtheducationDetailEditModelItem {
    /** url */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;
}

/** 宣教内容明细附件 */
export class RepositoryHealtheducationDetailFile implements IRepositoryHealtheducationDetailFile {
    /** 标识 */
    id?: string | undefined;
    /** [宣教内容明细标识](宣教内容明细) */
    repositoryHealtheducationDetailId?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    repositoryHealtheducationDetails?: RepositoryHealtheducationDetail;

    constructor(data?: IRepositoryHealtheducationDetailFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.repositoryHealtheducationDetailId = _data["repositoryHealtheducationDetailId"];
            this.url = _data["url"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.repositoryHealtheducationDetails = _data["repositoryHealtheducationDetails"] ? RepositoryHealtheducationDetail.fromJS(_data["repositoryHealtheducationDetails"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailFile {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["repositoryHealtheducationDetailId"] = this.repositoryHealtheducationDetailId;
        data["url"] = this.url;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["repositoryHealtheducationDetails"] = this.repositoryHealtheducationDetails ? this.repositoryHealtheducationDetails.toJSON() : <any>undefined;
        return data;
    }
}

/** 宣教内容明细附件 */
export interface IRepositoryHealtheducationDetailFile {
    /** 标识 */
    id?: string | undefined;
    /** [宣教内容明细标识](宣教内容明细) */
    repositoryHealtheducationDetailId?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    repositoryHealtheducationDetails?: RepositoryHealtheducationDetail;
}

/** Reponse */
export class RepositoryHealtheducationDetailFileResult implements IRepositoryHealtheducationDetailFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryHealtheducationDetailFile[] | undefined;

    constructor(data?: IRepositoryHealtheducationDetailFileResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RepositoryHealtheducationDetailFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailFileResult {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailFileResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRepositoryHealtheducationDetailFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryHealtheducationDetailFile[] | undefined;
}

/** Reponse */
export class RepositoryHealtheducationDetailFileResultEntry implements IRepositoryHealtheducationDetailFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryHealtheducationDetailFile;

    constructor(data?: IRepositoryHealtheducationDetailFileResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RepositoryHealtheducationDetailFile.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailFileResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailFileResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRepositoryHealtheducationDetailFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryHealtheducationDetailFile;
}

/** 宣教内容明细附件 (ViewModel) */
export class RepositoryHealtheducationDetailFileViewModel implements IRepositoryHealtheducationDetailFileViewModel {
    /** [宣教内容明细标识](宣教内容明细Id) */
    repositoryHealtheducationDetailId!: string;
    /** 文件路径 */
    url!: string;

    constructor(data?: IRepositoryHealtheducationDetailFileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryHealtheducationDetailId = _data["repositoryHealtheducationDetailId"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailFileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailFileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryHealtheducationDetailId"] = this.repositoryHealtheducationDetailId;
        data["url"] = this.url;
        return data;
    }
}

/** 宣教内容明细附件 (ViewModel) */
export interface IRepositoryHealtheducationDetailFileViewModel {
    /** [宣教内容明细标识](宣教内容明细Id) */
    repositoryHealtheducationDetailId: string;
    /** 文件路径 */
    url: string;
}

export class RepositoryHealtheducationDetailView implements IRepositoryHealtheducationDetailView {
    /** [分类标识](#宣教内容分类) */
    repositoryHealtheducationTypeId!: string;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name!: string;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type!: string;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 宣教类型名称 */
    repositoryHealtheducationTypeName?: string | undefined;
    /** 宣教类型序列 */
    repositoryHealtheducationTypeSequence?: number;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 附件信息 */
    files?: RepositoryHealtheducationDetailViewItem[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryHealtheducationDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryHealtheducationTypeId = _data["repositoryHealtheducationTypeId"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.duration = _data["duration"];
            this.source = _data["source"];
            this.remark = _data["remark"];
            this.repositoryHealtheducationTypeName = _data["repositoryHealtheducationTypeName"];
            this.repositoryHealtheducationTypeSequence = _data["repositoryHealtheducationTypeSequence"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(RepositoryHealtheducationDetailViewItem.fromJS(item));
            }
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryHealtheducationTypeId"] = this.repositoryHealtheducationTypeId;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["type"] = this.type;
        data["content"] = this.content;
        data["duration"] = this.duration;
        data["source"] = this.source;
        data["remark"] = this.remark;
        data["repositoryHealtheducationTypeName"] = this.repositoryHealtheducationTypeName;
        data["repositoryHealtheducationTypeSequence"] = this.repositoryHealtheducationTypeSequence;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRepositoryHealtheducationDetailView {
    /** [分类标识](#宣教内容分类) */
    repositoryHealtheducationTypeId: string;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name: string;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type: string;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 宣教类型名称 */
    repositoryHealtheducationTypeName?: string | undefined;
    /** 宣教类型序列 */
    repositoryHealtheducationTypeSequence?: number;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 附件信息 */
    files?: RepositoryHealtheducationDetailViewItem[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class RepositoryHealtheducationDetailViewItem implements IRepositoryHealtheducationDetailViewItem {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;

    constructor(data?: IRepositoryHealtheducationDetailViewItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailViewItem {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailViewItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["sequence"] = this.sequence;
        return data;
    }
}

export interface IRepositoryHealtheducationDetailViewItem {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;
}

/** Reponse */
export class RepositoryHealtheducationDetailViewResult implements IRepositoryHealtheducationDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryHealtheducationDetailView[] | undefined;

    constructor(data?: IRepositoryHealtheducationDetailViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RepositoryHealtheducationDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRepositoryHealtheducationDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryHealtheducationDetailView[] | undefined;
}

/** Reponse */
export class RepositoryHealtheducationDetailViewResultEntry implements IRepositoryHealtheducationDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryHealtheducationDetailView;

    constructor(data?: IRepositoryHealtheducationDetailViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RepositoryHealtheducationDetailView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRepositoryHealtheducationDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryHealtheducationDetailView;
}

/** 宣教内容分类 */
export class RepositoryHealtheducationType implements IRepositoryHealtheducationType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 封面 *封面文件路径* */
    cover?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryHealtheducationType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.cover = _data["cover"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationType {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["cover"] = this.cover;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 宣教内容分类 */
export interface IRepositoryHealtheducationType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 封面 *封面文件路径* */
    cover?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class RepositoryHealtheducationTypeEditModel implements IRepositoryHealtheducationTypeEditModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 封面 *封面文件路径* */
    cover?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRepositoryHealtheducationTypeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.cover = _data["cover"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RepositoryHealtheducationTypeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationTypeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["cover"] = this.cover;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IRepositoryHealtheducationTypeEditModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 封面 *封面文件路径* */
    cover?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

export class RepositoryHealtheducationTypeView implements IRepositoryHealtheducationTypeView {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 封面 *封面文件路径* */
    cover?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryHealtheducationTypeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.cover = _data["cover"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationTypeView {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationTypeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["cover"] = this.cover;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRepositoryHealtheducationTypeView {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 封面 *封面文件路径* */
    cover?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RepositoryHealtheducationTypeViewResult implements IRepositoryHealtheducationTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryHealtheducationTypeView[] | undefined;

    constructor(data?: IRepositoryHealtheducationTypeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RepositoryHealtheducationTypeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryHealtheducationTypeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationTypeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRepositoryHealtheducationTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryHealtheducationTypeView[] | undefined;
}

/** Reponse */
export class RepositoryHealtheducationTypeViewResultEntry implements IRepositoryHealtheducationTypeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryHealtheducationTypeView;

    constructor(data?: IRepositoryHealtheducationTypeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RepositoryHealtheducationTypeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationTypeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationTypeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRepositoryHealtheducationTypeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryHealtheducationTypeView;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

/** 角色菜单信息 */
export class RoleRightMenuListView implements IRoleRightMenuListView {
    /** 标识 */
    id?: string | undefined;
    /** 菜单名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 菜单编码 *示例：sys.user* *○同一个`parent_id`下不允许重复* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 访问路径 */
    url?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 显示 *0,1* */
    show?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 菜单权限 */
    rights?: MenuRightView[] | undefined;

    constructor(data?: IRoleRightMenuListView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.url = _data["url"];
            this.icon = _data["icon"];
            this.show = _data["show"];
            this.sequence = _data["sequence"];
            if (Array.isArray(_data["rights"])) {
                this.rights = [] as any;
                for (let item of _data["rights"])
                    this.rights!.push(MenuRightView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoleRightMenuListView {
        data = typeof data === 'object' ? data : {};
        let result = new RoleRightMenuListView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["url"] = this.url;
        data["icon"] = this.icon;
        data["show"] = this.show;
        data["sequence"] = this.sequence;
        if (Array.isArray(this.rights)) {
            data["rights"] = [];
            for (let item of this.rights)
                data["rights"].push(item.toJSON());
        }
        return data;
    }
}

/** 角色菜单信息 */
export interface IRoleRightMenuListView {
    /** 标识 */
    id?: string | undefined;
    /** 菜单名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 菜单编码 *示例：sys.user* *○同一个`parent_id`下不允许重复* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 访问路径 */
    url?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 显示 *0,1* */
    show?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 菜单权限 */
    rights?: MenuRightView[] | undefined;
}

/** 账套分组 */
export class RoomAccountGroup implements IRoomAccountGroup {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomAccountGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomAccountGroup {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 账套分组 */
export interface IRoomAccountGroup {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 账套详细 */
export class RoomAccountGroupItem implements IRoomAccountGroupItem {
    /** 标识 */
    id?: string | undefined;
    /** [账套分组标识](账套分组) */
    roomAccountGroupId?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomAccountGroups?: RoomAccountGroup;
    roomItemLists?: RoomItemList;

    constructor(data?: IRoomAccountGroupItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.roomAccountGroupId = _data["roomAccountGroupId"];
            this.roomItemListId = _data["roomItemListId"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomAccountGroups = _data["roomAccountGroups"] ? RoomAccountGroup.fromJS(_data["roomAccountGroups"]) : <any>undefined;
            this.roomItemLists = _data["roomItemLists"] ? RoomItemList.fromJS(_data["roomItemLists"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomAccountGroupItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roomAccountGroupId"] = this.roomAccountGroupId;
        data["roomItemListId"] = this.roomItemListId;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["roomAccountGroups"] = this.roomAccountGroups ? this.roomAccountGroups.toJSON() : <any>undefined;
        data["roomItemLists"] = this.roomItemLists ? this.roomItemLists.toJSON() : <any>undefined;
        return data;
    }
}

/** 账套详细 */
export interface IRoomAccountGroupItem {
    /** 标识 */
    id?: string | undefined;
    /** [账套分组标识](账套分组) */
    roomAccountGroupId?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomAccountGroups?: RoomAccountGroup;
    roomItemLists?: RoomItemList;
}

/** Reponse */
export class RoomAccountGroupItemResult implements IRoomAccountGroupItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomAccountGroupItem[] | undefined;

    constructor(data?: IRoomAccountGroupItemResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomAccountGroupItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomAccountGroupItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomAccountGroupItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomAccountGroupItem[] | undefined;
}

/** Reponse */
export class RoomAccountGroupItemResultEntry implements IRoomAccountGroupItemResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomAccountGroupItem;

    constructor(data?: IRoomAccountGroupItemResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomAccountGroupItem.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomAccountGroupItemResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupItemResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomAccountGroupItemResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomAccountGroupItem;
}

/** 账套详细 (ViewModel) */
export class RoomAccountGroupItemViewModel implements IRoomAccountGroupItemViewModel {
    /** [账套分组标识](账套分组Id) */
    roomAccountGroupId!: string;
    /** [项目标识](项目清单Id) */
    roomItemListId!: string;

    constructor(data?: IRoomAccountGroupItemViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomAccountGroupId = _data["roomAccountGroupId"];
            this.roomItemListId = _data["roomItemListId"];
        }
    }

    static fromJS(data: any): RoomAccountGroupItemViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupItemViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomAccountGroupId"] = this.roomAccountGroupId;
        data["roomItemListId"] = this.roomItemListId;
        return data;
    }
}

/** 账套详细 (ViewModel) */
export interface IRoomAccountGroupItemViewModel {
    /** [账套分组标识](账套分组Id) */
    roomAccountGroupId: string;
    /** [项目标识](项目清单Id) */
    roomItemListId: string;
}

/** Reponse */
export class RoomAccountGroupResult implements IRoomAccountGroupResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomAccountGroup[] | undefined;

    constructor(data?: IRoomAccountGroupResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomAccountGroup.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomAccountGroupResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomAccountGroupResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomAccountGroup[] | undefined;
}

/** Reponse */
export class RoomAccountGroupResultEntry implements IRoomAccountGroupResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomAccountGroup;

    constructor(data?: IRoomAccountGroupResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomAccountGroup.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomAccountGroupResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomAccountGroupResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomAccountGroup;
}

/** 账套分组 (ViewModel) */
export class RoomAccountGroupViewModel implements IRoomAccountGroupViewModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRoomAccountGroupViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RoomAccountGroupViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 账套分组 (ViewModel) */
export interface IRoomAccountGroupViewModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 备注 */
    remark?: string | undefined;
}

export class RoomEarlyWarningRecordView implements IRoomEarlyWarningRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 预警类型 *有效期预警,库存预警* */
    type?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 规格 *完整的项目规格* */
    fullSpec?: string | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
    /** 库存 */
    inventoryCount?: number;
    /** 库存预警标识 *0:↓,1:↑* */
    inventoryCountTag?: number;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 供应商 */
    suppler?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomEarlyWarningRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.fullSpec = _data["fullSpec"];
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
            this.inventoryCount = _data["inventoryCount"];
            this.inventoryCountTag = _data["inventoryCountTag"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.batchNo = _data["batchNo"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomEarlyWarningRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomEarlyWarningRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["fullSpec"] = this.fullSpec;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        data["inventoryCount"] = this.inventoryCount;
        data["inventoryCountTag"] = this.inventoryCountTag;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["batchNo"] = this.batchNo;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRoomEarlyWarningRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 预警类型 *有效期预警,库存预警* */
    type?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 规格 *完整的项目规格* */
    fullSpec?: string | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
    /** 库存 */
    inventoryCount?: number;
    /** 库存预警标识 *0:↓,1:↑* */
    inventoryCountTag?: number;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 供应商 */
    suppler?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomEarlyWarningRecordViewResult implements IRoomEarlyWarningRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomEarlyWarningRecordView[] | undefined;

    constructor(data?: IRoomEarlyWarningRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomEarlyWarningRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomEarlyWarningRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomEarlyWarningRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomEarlyWarningRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomEarlyWarningRecordView[] | undefined;
}

/** 项目清单 */
export class RoomItemList implements IRoomItemList {
    /** 标识 */
    id?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomItemTypes?: RoomItemType;

    constructor(data?: IRoomItemList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.name = _data["name"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.shortName = _data["shortName"];
            this.nameGoods = _data["nameGoods"];
            this.model = _data["model"];
            this.spec = _data["spec"];
            this.origin = _data["origin"];
            this.dealer = _data["dealer"];
            this.warningDay = _data["warningDay"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.conversionRate = _data["conversionRate"];
            this.sellingPrice = _data["sellingPrice"];
            this.batchManage = _data["batchManage"];
            this.afterCharge = _data["afterCharge"];
            this.inCharge = _data["inCharge"];
            this.costType = _data["costType"];
            this.deductionSource = _data["deductionSource"];
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
            this.usageMode = _data["usageMode"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.inventory = _data["inventory"];
            this.enabled = _data["enabled"];
            this.commonTerms = _data["commonTerms"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemTypes = _data["roomItemTypes"] ? RoomItemType.fromJS(_data["roomItemTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemList {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["name"] = this.name;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["shortName"] = this.shortName;
        data["nameGoods"] = this.nameGoods;
        data["model"] = this.model;
        data["spec"] = this.spec;
        data["origin"] = this.origin;
        data["dealer"] = this.dealer;
        data["warningDay"] = this.warningDay;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["conversionRate"] = this.conversionRate;
        data["sellingPrice"] = this.sellingPrice;
        data["batchManage"] = this.batchManage;
        data["afterCharge"] = this.afterCharge;
        data["inCharge"] = this.inCharge;
        data["costType"] = this.costType;
        data["deductionSource"] = this.deductionSource;
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        data["usageMode"] = this.usageMode;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["inventory"] = this.inventory;
        data["enabled"] = this.enabled;
        data["commonTerms"] = this.commonTerms;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["roomItemTypes"] = this.roomItemTypes ? this.roomItemTypes.toJSON() : <any>undefined;
        return data;
    }
}

/** 项目清单 */
export interface IRoomItemList {
    /** 标识 */
    id?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomItemTypes?: RoomItemType;
}

/** 项目库存 */
export class RoomItemListInventoryEditModel implements IRoomItemListInventoryEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 期初数量 */
    beginCount!: number;
    /** 库存数量 */
    inventoryCount!: number;
    /** 入库数量 */
    inCount!: number;
    /** 出库数量 */
    outCount!: number;
    /** 退库数量 */
    returnCount!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否编辑期初0,1 */
    edited!: number;
    /** 报损数量 */
    faultyCount!: number;

    constructor(data?: IRoomItemListInventoryEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.beginCount = _data["beginCount"];
            this.inventoryCount = _data["inventoryCount"];
            this.inCount = _data["inCount"];
            this.outCount = _data["outCount"];
            this.returnCount = _data["returnCount"];
            this.remark = _data["remark"];
            this.edited = _data["edited"];
            this.faultyCount = _data["faultyCount"];
        }
    }

    static fromJS(data: any): RoomItemListInventoryEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["beginCount"] = this.beginCount;
        data["inventoryCount"] = this.inventoryCount;
        data["inCount"] = this.inCount;
        data["outCount"] = this.outCount;
        data["returnCount"] = this.returnCount;
        data["remark"] = this.remark;
        data["edited"] = this.edited;
        data["faultyCount"] = this.faultyCount;
        return data;
    }
}

/** 项目库存 */
export interface IRoomItemListInventoryEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 期初数量 */
    beginCount: number;
    /** 库存数量 */
    inventoryCount: number;
    /** 入库数量 */
    inCount: number;
    /** 出库数量 */
    outCount: number;
    /** 退库数量 */
    returnCount: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否编辑期初0,1 */
    edited: number;
    /** 报损数量 */
    faultyCount: number;
}

/** 项目库存记录 */
export class RoomItemListInventoryRecordEditModel implements IRoomItemListInventoryRecordEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 库存数量 */
    inventoryCount!: number;

    constructor(data?: IRoomItemListInventoryRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.inventoryCount = _data["inventoryCount"];
        }
    }

    static fromJS(data: any): RoomItemListInventoryRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["inventoryCount"] = this.inventoryCount;
        return data;
    }
}

/** 项目库存记录 */
export interface IRoomItemListInventoryRecordEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 库存数量 */
    inventoryCount: number;
}

/** 项目库存记录 */
export class RoomItemListInventoryRecordView implements IRoomItemListInventoryRecordView {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 库存数量 */
    inventoryCount!: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomItemListInventoryRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemListInventoryRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 项目库存记录 */
export interface IRoomItemListInventoryRecordView {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 库存数量 */
    inventoryCount: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomItemListInventoryRecordViewResult implements IRoomItemListInventoryRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemListInventoryRecordView[] | undefined;

    constructor(data?: IRoomItemListInventoryRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomItemListInventoryRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomItemListInventoryRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomItemListInventoryRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemListInventoryRecordView[] | undefined;
}

/** Reponse */
export class RoomItemListInventoryRecordViewResultEntry implements IRoomItemListInventoryRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemListInventoryRecordView;

    constructor(data?: IRoomItemListInventoryRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomItemListInventoryRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemListInventoryRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomItemListInventoryRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemListInventoryRecordView;
}

/** 项目库存 */
export class RoomItemListInventoryView implements IRoomItemListInventoryView {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 期初数量 */
    beginCount!: number;
    /** 库存数量 */
    inventoryCount!: number;
    /** 入库数量 */
    inCount!: number;
    /** 出库数量 */
    outCount!: number;
    /** 退库数量 */
    returnCount!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否编辑期初0,1 */
    edited!: number;
    /** 报损数量 */
    faultyCount!: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目规格 */
    spec?: string | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;

    constructor(data?: IRoomItemListInventoryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.beginCount = _data["beginCount"];
            this.inventoryCount = _data["inventoryCount"];
            this.inCount = _data["inCount"];
            this.outCount = _data["outCount"];
            this.returnCount = _data["returnCount"];
            this.remark = _data["remark"];
            this.edited = _data["edited"];
            this.faultyCount = _data["faultyCount"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.spec = _data["spec"];
            this.batchManage = _data["batchManage"];
        }
    }

    static fromJS(data: any): RoomItemListInventoryView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["beginCount"] = this.beginCount;
        data["inventoryCount"] = this.inventoryCount;
        data["inCount"] = this.inCount;
        data["outCount"] = this.outCount;
        data["returnCount"] = this.returnCount;
        data["remark"] = this.remark;
        data["edited"] = this.edited;
        data["faultyCount"] = this.faultyCount;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["spec"] = this.spec;
        data["batchManage"] = this.batchManage;
        return data;
    }
}

/** 项目库存 */
export interface IRoomItemListInventoryView {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 期初数量 */
    beginCount: number;
    /** 库存数量 */
    inventoryCount: number;
    /** 入库数量 */
    inCount: number;
    /** 出库数量 */
    outCount: number;
    /** 退库数量 */
    returnCount: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否编辑期初0,1 */
    edited: number;
    /** 报损数量 */
    faultyCount: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目规格 */
    spec?: string | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
}

/** Reponse */
export class RoomItemListInventoryViewResult implements IRoomItemListInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemListInventoryView[] | undefined;

    constructor(data?: IRoomItemListInventoryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomItemListInventoryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomItemListInventoryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomItemListInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemListInventoryView[] | undefined;
}

export class RoomItemPriceEditModel implements IRoomItemPriceEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 原售价 */
    sellingPriceFrom?: number | undefined;
    /** 改后售价 */
    sellingPriceTo?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRoomItemPriceEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.sellingPriceFrom = _data["sellingPriceFrom"];
            this.sellingPriceTo = _data["sellingPriceTo"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RoomItemPriceEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemPriceEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["sellingPriceFrom"] = this.sellingPriceFrom;
        data["sellingPriceTo"] = this.sellingPriceTo;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IRoomItemPriceEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 原售价 */
    sellingPriceFrom?: number | undefined;
    /** 改后售价 */
    sellingPriceTo?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

export class RoomItemPriceView implements IRoomItemPriceView {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 原售价 */
    sellingPriceFrom?: number | undefined;
    /** 改后售价 */
    sellingPriceTo?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 项目分类名称 */
    typeName?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    wubiCode?: string | undefined;

    constructor(data?: IRoomItemPriceView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.sellingPriceFrom = _data["sellingPriceFrom"];
            this.sellingPriceTo = _data["sellingPriceTo"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.typeName = _data["typeName"];
            this.name = _data["name"];
            this.nameGoods = _data["nameGoods"];
            this.shortName = _data["shortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBase = _data["unitBase"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
        }
    }

    static fromJS(data: any): RoomItemPriceView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemPriceView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["sellingPriceFrom"] = this.sellingPriceFrom;
        data["sellingPriceTo"] = this.sellingPriceTo;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["typeName"] = this.typeName;
        data["name"] = this.name;
        data["nameGoods"] = this.nameGoods;
        data["shortName"] = this.shortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBase"] = this.unitBase;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        return data;
    }
}

export interface IRoomItemPriceView {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 原售价 */
    sellingPriceFrom?: number | undefined;
    /** 改后售价 */
    sellingPriceTo?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 项目分类名称 */
    typeName?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    wubiCode?: string | undefined;
}

/** Reponse */
export class RoomItemPriceViewResult implements IRoomItemPriceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemPriceView[] | undefined;

    constructor(data?: IRoomItemPriceViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomItemPriceView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomItemPriceViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemPriceViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomItemPriceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemPriceView[] | undefined;
}

/** Reponse */
export class RoomItemPriceViewResultEntry implements IRoomItemPriceViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemPriceView;

    constructor(data?: IRoomItemPriceViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomItemPriceView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemPriceViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemPriceViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomItemPriceViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemPriceView;
}

/** 项目分类 */
export class RoomItemType implements IRoomItemType {
    /** 标识 */
    id?: string | undefined;
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomItemType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.system = _data["system"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemType {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["system"] = this.system;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 项目分类 */
export interface IRoomItemType {
    /** 标识 */
    id?: string | undefined;
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class RoomItemTypeEditModel implements IRoomItemTypeEditModel {
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system!: number;

    constructor(data?: IRoomItemTypeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.remark = _data["remark"];
            this.system = _data["system"];
        }
    }

    static fromJS(data: any): RoomItemTypeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemTypeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["remark"] = this.remark;
        data["system"] = this.system;
        return data;
    }
}

export interface IRoomItemTypeEditModel {
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system: number;
}

/** Reponse */
export class RoomItemTypeResultEntry implements IRoomItemTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemType;

    constructor(data?: IRoomItemTypeResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomItemType.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemTypeResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemTypeResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomItemTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemType;
}

export class RoomItemTypeView implements IRoomItemTypeView {
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system!: number;
    /** 项目编码 */
    codeFull?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;

    constructor(data?: IRoomItemTypeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.remark = _data["remark"];
            this.system = _data["system"];
            this.codeFull = _data["codeFull"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RoomItemTypeView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemTypeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["remark"] = this.remark;
        data["system"] = this.system;
        data["codeFull"] = this.codeFull;
        data["id"] = this.id;
        return data;
    }
}

export interface IRoomItemTypeView {
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system: number;
    /** 项目编码 */
    codeFull?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
}

/** Reponse */
export class RoomItemTypeViewResult implements IRoomItemTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemTypeView[] | undefined;

    constructor(data?: IRoomItemTypeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomItemTypeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomItemTypeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemTypeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomItemTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemTypeView[] | undefined;
}

/** 药品耗材生产厂家信息 */
export class RoomManufacturerEditModel implements IRoomManufacturerEditModel {
    /** 公司法定名称 *○不允许重复* */
    name!: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRoomManufacturerEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.address = _data["address"];
            this.linkman = _data["linkman"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RoomManufacturerEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomManufacturerEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["linkman"] = this.linkman;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        return data;
    }
}

/** 药品耗材生产厂家信息 */
export interface IRoomManufacturerEditModel {
    /** 公司法定名称 *○不允许重复* */
    name: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 药品耗材生产厂家信息 */
export class RoomManufacturerView implements IRoomManufacturerView {
    /** 公司法定名称 *○不允许重复* */
    name!: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 序列 */
    sequence!: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomManufacturerView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.address = _data["address"];
            this.linkman = _data["linkman"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomManufacturerView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomManufacturerView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["linkman"] = this.linkman;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 药品耗材生产厂家信息 */
export interface IRoomManufacturerView {
    /** 公司法定名称 *○不允许重复* */
    name: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 序列 */
    sequence: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomManufacturerViewResult implements IRoomManufacturerViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomManufacturerView[] | undefined;

    constructor(data?: IRoomManufacturerViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomManufacturerView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomManufacturerViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomManufacturerViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomManufacturerViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomManufacturerView[] | undefined;
}

/** Reponse */
export class RoomManufacturerViewResultEntry implements IRoomManufacturerViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomManufacturerView;

    constructor(data?: IRoomManufacturerViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomManufacturerView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomManufacturerViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomManufacturerViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomManufacturerViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomManufacturerView;
}

/** 供应商信息 */
export class RoomSupplierEditModel implements IRoomSupplierEditModel {
    /** 供应商名称 *○不允许重复* */
    name!: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 产品名称 */
    product?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRoomSupplierEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.address = _data["address"];
            this.product = _data["product"];
            this.linkman = _data["linkman"];
            this.positionContact = _data["positionContact"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RoomSupplierEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomSupplierEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["product"] = this.product;
        data["linkman"] = this.linkman;
        data["positionContact"] = this.positionContact;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        return data;
    }
}

/** 供应商信息 */
export interface IRoomSupplierEditModel {
    /** 供应商名称 *○不允许重复* */
    name: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 产品名称 */
    product?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 供应商信息 */
export class RoomSupplierView implements IRoomSupplierView {
    /** 供应商名称 *○不允许重复* */
    name!: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 产品名称 */
    product?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 序列 */
    sequence!: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomSupplierView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.address = _data["address"];
            this.product = _data["product"];
            this.linkman = _data["linkman"];
            this.positionContact = _data["positionContact"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomSupplierView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomSupplierView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["product"] = this.product;
        data["linkman"] = this.linkman;
        data["positionContact"] = this.positionContact;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 供应商信息 */
export interface IRoomSupplierView {
    /** 供应商名称 *○不允许重复* */
    name: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 产品名称 */
    product?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 序列 */
    sequence: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomSupplierViewResult implements IRoomSupplierViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomSupplierView[] | undefined;

    constructor(data?: IRoomSupplierViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomSupplierView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomSupplierViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomSupplierViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomSupplierViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomSupplierView[] | undefined;
}

/** Reponse */
export class RoomSupplierViewResultEntry implements IRoomSupplierViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomSupplierView;

    constructor(data?: IRoomSupplierViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomSupplierView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomSupplierViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomSupplierViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomSupplierViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomSupplierView;
}

/** Reponse */
export class StringResult implements IStringResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: string[] | undefined;

    constructor(data?: IStringResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
        }
    }

    static fromJS(data: any): StringResult {
        data = typeof data === 'object' ? data : {};
        let result = new StringResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        return data;
    }
}

/** Reponse */
export interface IStringResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: string[] | undefined;
}

/** 透析室 */
export class SysHospitalArea implements ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospitalArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalArea {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析室 */
export interface ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 院区 */
export class SysHospitalAreaView implements ISysHospitalAreaView {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 标识 */
    id!: string;
    /** 序列 */
    sequence!: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospitalAreaView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalAreaView {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalAreaView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 院区 */
export interface ISysHospitalAreaView {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 标识 */
    id: string;
    /** 序列 */
    sequence: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 菜单外链 */
export class SysMenuExternalLinkEditModel implements ISysMenuExternalLinkEditModel {
    /** 名称 *不允许重复* */
    name!: string;
    /** 编码 *不允许重复* */
    code!: string;
    /** 链接地址 */
    link?: string | undefined;
    /** 描述 */
    description?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysMenuExternalLinkEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.link = _data["link"];
            this.description = _data["description"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysMenuExternalLinkEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysMenuExternalLinkEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["link"] = this.link;
        data["description"] = this.description;
        data["remark"] = this.remark;
        return data;
    }
}

/** 菜单外链 */
export interface ISysMenuExternalLinkEditModel {
    /** 名称 *不允许重复* */
    name: string;
    /** 编码 *不允许重复* */
    code: string;
    /** 链接地址 */
    link?: string | undefined;
    /** 描述 */
    description?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 菜单外链 */
export class SysMenuExternalLinkView implements ISysMenuExternalLinkView {
    /** 名称 *不允许重复* */
    name!: string;
    /** 编码 *不允许重复* */
    code!: string;
    /** 链接地址 */
    link?: string | undefined;
    /** 描述 */
    description?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysMenuExternalLinkView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.link = _data["link"];
            this.description = _data["description"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysMenuExternalLinkView {
        data = typeof data === 'object' ? data : {};
        let result = new SysMenuExternalLinkView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["link"] = this.link;
        data["description"] = this.description;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 菜单外链 */
export interface ISysMenuExternalLinkView {
    /** 名称 *不允许重复* */
    name: string;
    /** 编码 *不允许重复* */
    code: string;
    /** 链接地址 */
    link?: string | undefined;
    /** 描述 */
    description?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysMenuExternalLinkViewResult implements ISysMenuExternalLinkViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysMenuExternalLinkView[] | undefined;

    constructor(data?: ISysMenuExternalLinkViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysMenuExternalLinkView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysMenuExternalLinkViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysMenuExternalLinkViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysMenuExternalLinkViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysMenuExternalLinkView[] | undefined;
}

/** Reponse */
export class SysMenuExternalLinkViewResultEntry implements ISysMenuExternalLinkViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysMenuExternalLinkView;

    constructor(data?: ISysMenuExternalLinkViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysMenuExternalLinkView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysMenuExternalLinkViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysMenuExternalLinkViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysMenuExternalLinkViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysMenuExternalLinkView;
}

/** 用户信息 */
export class SysUser implements ISysUser {
    /** 标识 */
    id?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 密码 */
    pwd?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobNumber = _data["jobNumber"];
            this.loginName = _data["loginName"];
            this.pwd = _data["pwd"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.tel = _data["tel"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUser {
        data = typeof data === 'object' ? data : {};
        let result = new SysUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobNumber"] = this.jobNumber;
        data["loginName"] = this.loginName;
        data["pwd"] = this.pwd;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["tel"] = this.tel;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 用户信息 */
export interface ISysUser {
    /** 标识 */
    id?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 密码 */
    pwd?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 用户配置 */
export class SysUserSettingResultView implements ISysUserSettingResultView {
    /** 代码 */
    code?: string | undefined;
    /** 值 */
    value?: string | undefined;

    constructor(data?: ISysUserSettingResultView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): SysUserSettingResultView {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserSettingResultView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["value"] = this.value;
        return data;
    }
}

/** 用户配置 */
export interface ISysUserSettingResultView {
    /** 代码 */
    code?: string | undefined;
    /** 值 */
    value?: string | undefined;
}

/** 扩展注册信息 */
export class TokenViewExt implements ITokenViewExt {
    /** session id */
    sid?: string | undefined;
    /** 用户Id */
    uid?: string | undefined;
    /** 用户名称 */
    uname?: string | undefined;
    /** Token有效期 */
    expity?: number;
    /** 用户标签 */
    tags?: string[] | undefined;
    /** 用户菜单权限 */
    menus?: RoleRightMenuListView[] | undefined;
    authorizeInfo?: AuthorizeInfo;
    /** 院区Id */
    hid?: string | undefined;
    /** IP */
    ip?: string | undefined;
    /** 用户院区 */
    sysUserAreas?: SysHospitalAreaView[] | undefined;
    /** 用户自定义配置 */
    sysUserSetting?: SysUserSettingResultView[] | undefined;

    constructor(data?: ITokenViewExt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sid = _data["sid"];
            this.uid = _data["uid"];
            this.uname = _data["uname"];
            this.expity = _data["expity"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            if (Array.isArray(_data["menus"])) {
                this.menus = [] as any;
                for (let item of _data["menus"])
                    this.menus!.push(RoleRightMenuListView.fromJS(item));
            }
            this.authorizeInfo = _data["authorizeInfo"] ? AuthorizeInfo.fromJS(_data["authorizeInfo"]) : <any>undefined;
            this.hid = _data["hid"];
            this.ip = _data["ip"];
            if (Array.isArray(_data["sysUserAreas"])) {
                this.sysUserAreas = [] as any;
                for (let item of _data["sysUserAreas"])
                    this.sysUserAreas!.push(SysHospitalAreaView.fromJS(item));
            }
            if (Array.isArray(_data["sysUserSetting"])) {
                this.sysUserSetting = [] as any;
                for (let item of _data["sysUserSetting"])
                    this.sysUserSetting!.push(SysUserSettingResultView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TokenViewExt {
        data = typeof data === 'object' ? data : {};
        let result = new TokenViewExt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sid"] = this.sid;
        data["uid"] = this.uid;
        data["uname"] = this.uname;
        data["expity"] = this.expity;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        if (Array.isArray(this.menus)) {
            data["menus"] = [];
            for (let item of this.menus)
                data["menus"].push(item.toJSON());
        }
        data["authorizeInfo"] = this.authorizeInfo ? this.authorizeInfo.toJSON() : <any>undefined;
        data["hid"] = this.hid;
        data["ip"] = this.ip;
        if (Array.isArray(this.sysUserAreas)) {
            data["sysUserAreas"] = [];
            for (let item of this.sysUserAreas)
                data["sysUserAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.sysUserSetting)) {
            data["sysUserSetting"] = [];
            for (let item of this.sysUserSetting)
                data["sysUserSetting"].push(item.toJSON());
        }
        return data;
    }
}

/** 扩展注册信息 */
export interface ITokenViewExt {
    /** session id */
    sid?: string | undefined;
    /** 用户Id */
    uid?: string | undefined;
    /** 用户名称 */
    uname?: string | undefined;
    /** Token有效期 */
    expity?: number;
    /** 用户标签 */
    tags?: string[] | undefined;
    /** 用户菜单权限 */
    menus?: RoleRightMenuListView[] | undefined;
    authorizeInfo?: AuthorizeInfo;
    /** 院区Id */
    hid?: string | undefined;
    /** IP */
    ip?: string | undefined;
    /** 用户院区 */
    sysUserAreas?: SysHospitalAreaView[] | undefined;
    /** 用户自定义配置 */
    sysUserSetting?: SysUserSettingResultView[] | undefined;
}

/** Reponse */
export class TokenViewExtResultEntry implements ITokenViewExtResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: TokenViewExt;

    constructor(data?: ITokenViewExtResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? TokenViewExt.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TokenViewExtResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new TokenViewExtResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ITokenViewExtResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: TokenViewExt;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}