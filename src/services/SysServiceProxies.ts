/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class SysAppServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 系统应用 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysAppGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysAppViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysApp/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysAppGET(_response));
        });
    }

    protected processSysAppGET(response: AxiosResponse): Promise<SysAppViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysAppViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysAppViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysAppViewResultEntry>(null as any);
    }

    /**
     * 系统应用 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysAppPOST(id: string, body: SysAppEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysApp/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysAppPOST(_response));
        });
    }

    protected processSysAppPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统应用 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysAppViewResult> {
        let url_ = this.baseUrl + "/api/SysApp/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter(_response));
        });
    }

    protected processFilter(response: AxiosResponse): Promise<SysAppViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysAppViewResult.fromJS(resultData200);
            return Promise.resolve<SysAppViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysAppViewResult>(null as any);
    }

    /**
     * 系统应用 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysAppPOST2(body: SysAppEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysApp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysAppPOST2(_response));
        });
    }

    protected processSysAppPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统应用 -- 根据Id删除数据
     * @return Success
     */
    delete(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysApp/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysAppLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 系统应用更新日志 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysAppLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysAppLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysAppLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysAppLogGET(_response));
        });
    }

    protected processSysAppLogGET(response: AxiosResponse): Promise<SysAppLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysAppLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysAppLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysAppLogViewResultEntry>(null as any);
    }

    /**
     * 系统应用更新日志 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysAppLogPOST(id: string, body: SysAppLogEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysAppLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysAppLogPOST(_response));
        });
    }

    protected processSysAppLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统应用更新日志 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter2(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysAppLogViewResult> {
        let url_ = this.baseUrl + "/api/SysAppLog/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter2(_response));
        });
    }

    protected processFilter2(response: AxiosResponse): Promise<SysAppLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysAppLogViewResult.fromJS(resultData200);
            return Promise.resolve<SysAppLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysAppLogViewResult>(null as any);
    }

    /**
     * 系统应用更新日志 -- 根据条件查询数据
     * @param sysAppId 系统应用标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    sysAppGET2(sysAppId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysAppLogViewResult> {
        let url_ = this.baseUrl + "/api/SysAppLog/SysApp/{sysAppId}";
        if (sysAppId === undefined || sysAppId === null)
            throw new Error("The parameter 'sysAppId' must be defined.");
        url_ = url_.replace("{sysAppId}", encodeURIComponent("" + sysAppId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysAppGET2(_response));
        });
    }

    protected processSysAppGET2(response: AxiosResponse): Promise<SysAppLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysAppLogViewResult.fromJS(resultData200);
            return Promise.resolve<SysAppLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysAppLogViewResult>(null as any);
    }

    /**
     * 系统应用更新日志 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysAppLogPOST2(body: SysAppLogEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysAppLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysAppLogPOST2(_response));
        });
    }

    protected processSysAppLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统应用更新日志 -- 根据Id删除数据
     * @return Success
     */
    delete2(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysAppLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete2(_response));
        });
    }

    protected processDelete2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysCommonKeyServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 常用表字段映射 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysCommonKeyGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysCommonKeyResultEntry> {
        let url_ = this.baseUrl + "/api/SysCommonKey/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysCommonKeyGET(_response));
        });
    }

    protected processSysCommonKeyGET(response: AxiosResponse): Promise<SysCommonKeyResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysCommonKeyResultEntry.fromJS(resultData200);
            return Promise.resolve<SysCommonKeyResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysCommonKeyResultEntry>(null as any);
    }

    /**
     * 常用表字段映射 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysCommonKeyPOST(id: string, body: SysCommonKeyViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysCommonKey/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysCommonKeyPOST(_response));
        });
    }

    protected processSysCommonKeyPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 常用表字段映射 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter3(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysCommonKeyResult> {
        let url_ = this.baseUrl + "/api/SysCommonKey/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter3(_response));
        });
    }

    protected processFilter3(response: AxiosResponse): Promise<SysCommonKeyResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysCommonKeyResult.fromJS(resultData200);
            return Promise.resolve<SysCommonKeyResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysCommonKeyResult>(null as any);
    }

    /**
     * 常用表字段映射 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysCommonKeyPOST2(body: SysCommonKeyViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysCommonKey";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysCommonKeyPOST2(_response));
        });
    }

    protected processSysCommonKeyPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 常用表字段映射 -- 根据Id删除数据
     * @return Success
     */
    delete3(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysCommonKey/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete3(_response));
        });
    }

    protected processDelete3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysCustomPrintServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 自定义设置打印 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysCustomPrintGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysCustomPrintViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysCustomPrint/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysCustomPrintGET(_response));
        });
    }

    protected processSysCustomPrintGET(response: AxiosResponse): Promise<SysCustomPrintViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysCustomPrintViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysCustomPrintViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysCustomPrintViewResultEntry>(null as any);
    }

    /**
     * 自定义设置打印 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysCustomPrintPOST(id: string, body: SysCustomPrintEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysCustomPrint/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysCustomPrintPOST(_response));
        });
    }

    protected processSysCustomPrintPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 自定义设置打印 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter4(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysCustomPrintViewResult> {
        let url_ = this.baseUrl + "/api/SysCustomPrint/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter4(_response));
        });
    }

    protected processFilter4(response: AxiosResponse): Promise<SysCustomPrintViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysCustomPrintViewResult.fromJS(resultData200);
            return Promise.resolve<SysCustomPrintViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysCustomPrintViewResult>(null as any);
    }

    /**
     * 自定义设置打印 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysCustomPrintPOST2(body: SysCustomPrintEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysCustomPrint";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysCustomPrintPOST2(_response));
        });
    }

    protected processSysCustomPrintPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 自定义设置打印 -- 根据Id删除数据
     * @return Success
     */
    delete4(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysCustomPrint/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete4(_response));
        });
    }

    protected processDelete4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 常用模板 -- 获取可以作为标签的字段名
     * @return Success
     */
    tag(code: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysCustomPrint/Tag/{code}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTag(_response));
        });
    }

    protected processTag(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysCustomQueryScriptServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 自定义数据库脚本查询 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysCustomQueryScriptGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysCustomQueryScriptViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysCustomQueryScript/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysCustomQueryScriptGET(_response));
        });
    }

    protected processSysCustomQueryScriptGET(response: AxiosResponse): Promise<SysCustomQueryScriptViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysCustomQueryScriptViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysCustomQueryScriptViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysCustomQueryScriptViewResultEntry>(null as any);
    }

    /**
     * 自定义数据库脚本查询 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysCustomQueryScriptPOST(id: string, body: SysCustomQueryScriptEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysCustomQueryScript/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysCustomQueryScriptPOST(_response));
        });
    }

    protected processSysCustomQueryScriptPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 自定义数据库脚本查询 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter5(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysCustomQueryScriptViewResult> {
        let url_ = this.baseUrl + "/api/SysCustomQueryScript/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter5(_response));
        });
    }

    protected processFilter5(response: AxiosResponse): Promise<SysCustomQueryScriptViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysCustomQueryScriptViewResult.fromJS(resultData200);
            return Promise.resolve<SysCustomQueryScriptViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysCustomQueryScriptViewResult>(null as any);
    }

    /**
     * 自定义数据库脚本查询 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysCustomQueryScriptPOST2(body: SysCustomQueryScriptEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysCustomQueryScript";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysCustomQueryScriptPOST2(_response));
        });
    }

    protected processSysCustomQueryScriptPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 自定义数据库脚本查询 -- 根据Id删除数据
     * @return Success
     */
    delete5(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysCustomQueryScript/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete5(_response));
        });
    }

    protected processDelete5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 执行数据库查询
     * @param beginDate (optional)
     * @param endDate (optional)
     * @return Success
     */
    execQuery(id: string, beginDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysCustomQueryScript/{id}/ExecQuery?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (beginDate === null)
            throw new Error("The parameter 'beginDate' cannot be null.");
        else if (beginDate !== undefined)
            url_ += "beginDate=" + encodeURIComponent(beginDate ? "" + beginDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExecQuery(_response));
        });
    }

    protected processExecQuery(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysDicItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 字典明细表 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysDicItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysDicItemResultEntry> {
        let url_ = this.baseUrl + "/api/SysDicItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysDicItemGET(_response));
        });
    }

    protected processSysDicItemGET(response: AxiosResponse): Promise<SysDicItemResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysDicItemResultEntry.fromJS(resultData200);
            return Promise.resolve<SysDicItemResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysDicItemResultEntry>(null as any);
    }

    /**
     * 字典明细表 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysDicItemPOST(id: string, body: SysDicItemViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysDicItemPOST(_response));
        });
    }

    protected processSysDicItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字典明细表 -- 根据条件查询数据(自定义名称替换名称)
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter6(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysDicItemViewResult> {
        let url_ = this.baseUrl + "/api/SysDicItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter6(_response));
        });
    }

    protected processFilter6(response: AxiosResponse): Promise<SysDicItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysDicItemViewResult.fromJS(resultData200);
            return Promise.resolve<SysDicItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysDicItemViewResult>(null as any);
    }

    /**
     * 字典明细表 -- 根据条件查询数据(数据库原始值)
     * @param filter (optional) 查询条件
     * @return Success
     */
    new(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysDicItemViewResult> {
        let url_ = this.baseUrl + "/api/SysDicItem/Filter/New";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processNew(_response));
        });
    }

    protected processNew(response: AxiosResponse): Promise<SysDicItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysDicItemViewResult.fromJS(resultData200);
            return Promise.resolve<SysDicItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysDicItemViewResult>(null as any);
    }

    /**
     * 字典明细表 -- 根据Code查询数据(自定义名称替换名称)
     * @param code code
     * @return Success
     */
    code(code: string , cancelToken?: CancelToken | undefined): Promise<SysDicItemViewResult> {
        let url_ = this.baseUrl + "/api/SysDicItem/Code/{code}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCode(_response));
        });
    }

    protected processCode(response: AxiosResponse): Promise<SysDicItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysDicItemViewResult.fromJS(resultData200);
            return Promise.resolve<SysDicItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysDicItemViewResult>(null as any);
    }

    /**
     * 字典明细表 -- 查询所有字典项明细(自定义名称替换名称)
     * @return Success
     */
    all(  cancelToken?: CancelToken | undefined): Promise<SysDicAllViewResult> {
        let url_ = this.baseUrl + "/api/SysDicItem/All";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAll(_response));
        });
    }

    protected processAll(response: AxiosResponse): Promise<SysDicAllViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysDicAllViewResult.fromJS(resultData200);
            return Promise.resolve<SysDicAllViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysDicAllViewResult>(null as any);
    }

    /**
     * 字典明细表 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysDicItemPOST2(body: SysDicItemViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysDicItemPOST2(_response));
        });
    }

    protected processSysDicItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字典明细表 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForSysDicItem(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicItem/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForSysDicItem(_response));
        });
    }

    protected processMoveNodeForSysDicItem(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字典明细表 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForSysDicItem(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicItem/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForSysDicItem(_response));
        });
    }

    protected processUpNodeForSysDicItem(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字典明细表 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForSysDicItem(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicItem/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForSysDicItem(_response));
        });
    }

    protected processDownNodeForSysDicItem(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字典明细表 -- 更新自定义名称
     * @param customLabel (optional) 自定义名称
     * @return Success
     */
    custom(id: string, customLabel: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicItem/Custom/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (customLabel === null)
            throw new Error("The parameter 'customLabel' cannot be null.");
        else if (customLabel !== undefined)
            url_ += "customLabel=" + encodeURIComponent("" + customLabel) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCustom(_response));
        });
    }

    protected processCustom(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字典明细表 -- 更新启用状态
     * @param enabled (optional) 自定义名称
     * @return Success
     */
    status(id: string, enabled: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicItem/Status/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (enabled === null)
            throw new Error("The parameter 'enabled' cannot be null.");
        else if (enabled !== undefined)
            url_ += "enabled=" + encodeURIComponent("" + enabled) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStatus(_response));
        });
    }

    protected processStatus(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字典明细表 -- 根据Id删除数据
     * @return Success
     */
    delete6(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete6(_response));
        });
    }

    protected processDelete6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysDicTypeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 字典分类表 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysDicTypeGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysDicTypeResultEntry> {
        let url_ = this.baseUrl + "/api/SysDicType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysDicTypeGET(_response));
        });
    }

    protected processSysDicTypeGET(response: AxiosResponse): Promise<SysDicTypeResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysDicTypeResultEntry.fromJS(resultData200);
            return Promise.resolve<SysDicTypeResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysDicTypeResultEntry>(null as any);
    }

    /**
     * 字典分类表 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysDicTypePOST(id: string, body: SysDicTypeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysDicTypePOST(_response));
        });
    }

    protected processSysDicTypePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字典分类表 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter7(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysDicTypeResult> {
        let url_ = this.baseUrl + "/api/SysDicType/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter7(_response));
        });
    }

    protected processFilter7(response: AxiosResponse): Promise<SysDicTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysDicTypeResult.fromJS(resultData200);
            return Promise.resolve<SysDicTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysDicTypeResult>(null as any);
    }

    /**
     * 字典分类表 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysDicTypePOST2(body: SysDicTypeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysDicTypePOST2(_response));
        });
    }

    protected processSysDicTypePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字典分类表 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForSysDicType(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicType/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForSysDicType(_response));
        });
    }

    protected processMoveNodeForSysDicType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字典分类表 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForSysDicType(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicType/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForSysDicType(_response));
        });
    }

    protected processUpNodeForSysDicType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字典分类表 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForSysDicType(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicType/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForSysDicType(_response));
        });
    }

    protected processDownNodeForSysDicType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字典分类表 -- 根据Id删除数据
     * @return Success
     */
    delete7(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysDicType/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete7(_response));
        });
    }

    protected processDelete7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysExportTaskServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 导出任务表 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysExportTaskGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysExportTaskViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysExportTask/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysExportTaskGET(_response));
        });
    }

    protected processSysExportTaskGET(response: AxiosResponse): Promise<SysExportTaskViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysExportTaskViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysExportTaskViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysExportTaskViewResultEntry>(null as any);
    }

    /**
     * 导出任务表 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysExportTaskPOST(id: string, body: SysExportTaskEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysExportTask/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysExportTaskPOST(_response));
        });
    }

    protected processSysExportTaskPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 导出任务表 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter8(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysExportTaskViewResult> {
        let url_ = this.baseUrl + "/api/SysExportTask/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter8(_response));
        });
    }

    protected processFilter8(response: AxiosResponse): Promise<SysExportTaskViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysExportTaskViewResult.fromJS(resultData200);
            return Promise.resolve<SysExportTaskViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysExportTaskViewResult>(null as any);
    }

    /**
     * 导出任务表 -- 根据用户查询数据
     * @param sysUserId 用户ID
     * @param filter (optional) 查询条件
     * @return Success
     */
    sysUserGET(sysUserId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysExportTaskViewResult> {
        let url_ = this.baseUrl + "/api/SysExportTask/SysUser/{sysUserId}";
        if (sysUserId === undefined || sysUserId === null)
            throw new Error("The parameter 'sysUserId' must be defined.");
        url_ = url_.replace("{sysUserId}", encodeURIComponent("" + sysUserId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserGET(_response));
        });
    }

    protected processSysUserGET(response: AxiosResponse): Promise<SysExportTaskViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysExportTaskViewResult.fromJS(resultData200);
            return Promise.resolve<SysExportTaskViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysExportTaskViewResult>(null as any);
    }

    /**
     * 导出任务表 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysExportTaskPOST2(body: SysExportTaskEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysExportTask";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysExportTaskPOST2(_response));
        });
    }

    protected processSysExportTaskPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 导出任务表 -- 根据Id删除数据
     * @return Success
     */
    delete8(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysExportTask/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete8(_response));
        });
    }

    protected processDelete8(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysFieldItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 字段明细表 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysFieldItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysFieldItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysFieldItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysFieldItemGET(_response));
        });
    }

    protected processSysFieldItemGET(response: AxiosResponse): Promise<SysFieldItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFieldItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysFieldItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFieldItemViewResultEntry>(null as any);
    }

    /**
     * 字段明细表 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysFieldItemPOST(id: string, body: SysFieldItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysFieldItemPOST(_response));
        });
    }

    protected processSysFieldItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字段明细表 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter9(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysFieldItemViewResult> {
        let url_ = this.baseUrl + "/api/SysFieldItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter9(_response));
        });
    }

    protected processFilter9(response: AxiosResponse): Promise<SysFieldItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFieldItemViewResult.fromJS(resultData200);
            return Promise.resolve<SysFieldItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFieldItemViewResult>(null as any);
    }

    /**
     * 通过Id获取SysFieldItem
     * @param sysFieldTypeId 字段类型ID
     * @param filter (optional)
     * @return Success
     */
    sysFieldTypeGET(sysFieldTypeId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysFieldItemViewResult> {
        let url_ = this.baseUrl + "/api/SysFieldItem/SysFieldType/{sysFieldTypeId}";
        if (sysFieldTypeId === undefined || sysFieldTypeId === null)
            throw new Error("The parameter 'sysFieldTypeId' must be defined.");
        url_ = url_.replace("{sysFieldTypeId}", encodeURIComponent("" + sysFieldTypeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysFieldTypeGET(_response));
        });
    }

    protected processSysFieldTypeGET(response: AxiosResponse): Promise<SysFieldItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFieldItemViewResult.fromJS(resultData200);
            return Promise.resolve<SysFieldItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFieldItemViewResult>(null as any);
    }

    /**
     * 通过Code获取SysFieldItem
     * @param sysFieldTypeCode 字段类型Code
     * @param filter (optional)
     * @return Success
     */
    code2(sysFieldTypeCode: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysFieldItemViewResult> {
        let url_ = this.baseUrl + "/api/SysFieldItem/Code/{sysFieldTypeCode}";
        if (sysFieldTypeCode === undefined || sysFieldTypeCode === null)
            throw new Error("The parameter 'sysFieldTypeCode' must be defined.");
        url_ = url_.replace("{sysFieldTypeCode}", encodeURIComponent("" + sysFieldTypeCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCode2(_response));
        });
    }

    protected processCode2(response: AxiosResponse): Promise<SysFieldItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFieldItemViewResult.fromJS(resultData200);
            return Promise.resolve<SysFieldItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFieldItemViewResult>(null as any);
    }

    /**
     * 通过Code获取SysFieldItem
     * @param sysFieldTypeCodes (optional) 字段类型Code
     * @param filter (optional)
     * @return Success
     */
    codes(sysFieldTypeCodes: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysFieldItemViewResult> {
        let url_ = this.baseUrl + "/api/SysFieldItem/Codes?";
        if (sysFieldTypeCodes === null)
            throw new Error("The parameter 'sysFieldTypeCodes' cannot be null.");
        else if (sysFieldTypeCodes !== undefined)
            url_ += "sysFieldTypeCodes=" + encodeURIComponent("" + sysFieldTypeCodes) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCodes(_response));
        });
    }

    protected processCodes(response: AxiosResponse): Promise<SysFieldItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFieldItemViewResult.fromJS(resultData200);
            return Promise.resolve<SysFieldItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFieldItemViewResult>(null as any);
    }

    /**
     * 字段明细表 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysFieldItemPOST2(body: SysFieldItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysFieldItemPOST2(_response));
        });
    }

    protected processSysFieldItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字段明细表 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForSysFieldItem(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldItem/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForSysFieldItem(_response));
        });
    }

    protected processMoveNodeForSysFieldItem(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字段明细表 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForSysFieldItem(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldItem/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForSysFieldItem(_response));
        });
    }

    protected processUpNodeForSysFieldItem(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字段明细表 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForSysFieldItem(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldItem/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForSysFieldItem(_response));
        });
    }

    protected processDownNodeForSysFieldItem(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字段明细表 - 隐藏展示
     * @return Success
     */
    show(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldItem/{id}/Show";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processShow(_response));
        });
    }

    protected processShow(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 更新字段是否继承操作 - 继承
     * @return Success
     */
    inheritance(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldItem/{id}/Inheritance";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInheritance(_response));
        });
    }

    protected processInheritance(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字段明细表 - 是否必填
     * @return Success
     */
    required(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldItem/{id}/Required";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRequired(_response));
        });
    }

    protected processRequired(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字段明细表 -- 根据Id删除数据
     * @return Success
     */
    delete9(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete9(_response));
        });
    }

    protected processDelete9(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysFieldTypeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 字段分类表 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysFieldTypeGET2(id: string , cancelToken?: CancelToken | undefined): Promise<SysFieldTypeViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysFieldType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysFieldTypeGET2(_response));
        });
    }

    protected processSysFieldTypeGET2(response: AxiosResponse): Promise<SysFieldTypeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFieldTypeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysFieldTypeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFieldTypeViewResultEntry>(null as any);
    }

    /**
     * 字段分类表 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysFieldTypePOST(id: string, body: SysFieldTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysFieldTypePOST(_response));
        });
    }

    protected processSysFieldTypePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字段分类表 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter10(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysFieldTypeViewResult> {
        let url_ = this.baseUrl + "/api/SysFieldType/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter10(_response));
        });
    }

    protected processFilter10(response: AxiosResponse): Promise<SysFieldTypeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFieldTypeViewResult.fromJS(resultData200);
            return Promise.resolve<SysFieldTypeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFieldTypeViewResult>(null as any);
    }

    /**
     * 字段分类表 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysFieldTypePOST2(body: SysFieldTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysFieldTypePOST2(_response));
        });
    }

    protected processSysFieldTypePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字段分类表 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForSysFieldType(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldType/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForSysFieldType(_response));
        });
    }

    protected processMoveNodeForSysFieldType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字段分类表 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForSysFieldType(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldType/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForSysFieldType(_response));
        });
    }

    protected processUpNodeForSysFieldType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字段分类表 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForSysFieldType(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldType/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForSysFieldType(_response));
        });
    }

    protected processDownNodeForSysFieldType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 字段分类表 -- 根据Id删除数据
     * @return Success
     */
    delete10(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFieldType/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete10(_response));
        });
    }

    protected processDelete10(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysFormMapKeyServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 自定义表单映射key码 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysFormMapKeyGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysFormMapKeyViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysFormMapKey/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysFormMapKeyGET(_response));
        });
    }

    protected processSysFormMapKeyGET(response: AxiosResponse): Promise<SysFormMapKeyViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFormMapKeyViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysFormMapKeyViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFormMapKeyViewResultEntry>(null as any);
    }

    /**
     * 自定义表单映射key码 -- 更新数据名称
     * @param body (optional)
     * @return Success
     */
    sysFormMapKeyPOST(id: string, body: SysFormMapKeyBase | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFormMapKey/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysFormMapKeyPOST(_response));
        });
    }

    protected processSysFormMapKeyPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 自定义表单映射key码 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter11(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysFormMapKeyViewResult> {
        let url_ = this.baseUrl + "/api/SysFormMapKey/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter11(_response));
        });
    }

    protected processFilter11(response: AxiosResponse): Promise<SysFormMapKeyViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFormMapKeyViewResult.fromJS(resultData200);
            return Promise.resolve<SysFormMapKeyViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFormMapKeyViewResult>(null as any);
    }

    /**
     * 自定义表单映射key码 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    typeCode(typeCode: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysFormMapKeyViewResult> {
        let url_ = this.baseUrl + "/api/SysFormMapKey/TypeCode/{typeCode}";
        if (typeCode === undefined || typeCode === null)
            throw new Error("The parameter 'typeCode' must be defined.");
        url_ = url_.replace("{typeCode}", encodeURIComponent("" + typeCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTypeCode(_response));
        });
    }

    protected processTypeCode(response: AxiosResponse): Promise<SysFormMapKeyViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFormMapKeyViewResult.fromJS(resultData200);
            return Promise.resolve<SysFormMapKeyViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFormMapKeyViewResult>(null as any);
    }

    /**
     * 自定义表单映射key码 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysFormMapKeyPOST2(body: SysFormMapKeyEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFormMapKey";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysFormMapKeyPOST2(_response));
        });
    }

    protected processSysFormMapKeyPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 自定义表单映射key码 -- 根据Id删除数据
     * @return Success
     */
    delete11(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFormMapKey/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete11(_response));
        });
    }

    protected processDelete11(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysFormTypeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 自定义表单分类 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysFormTypeGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysFormTypeResultEntry> {
        let url_ = this.baseUrl + "/api/SysFormType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysFormTypeGET(_response));
        });
    }

    protected processSysFormTypeGET(response: AxiosResponse): Promise<SysFormTypeResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFormTypeResultEntry.fromJS(resultData200);
            return Promise.resolve<SysFormTypeResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFormTypeResultEntry>(null as any);
    }

    /**
     * 自定义表单分类 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter12(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysFormTypeResult> {
        let url_ = this.baseUrl + "/api/SysFormType/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter12(_response));
        });
    }

    protected processFilter12(response: AxiosResponse): Promise<SysFormTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFormTypeResult.fromJS(resultData200);
            return Promise.resolve<SysFormTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFormTypeResult>(null as any);
    }

    /**
     * 自定义表单分类大类 -- 根据条件查询数据
     * @return Success
     */
    getCategories(  cancelToken?: CancelToken | undefined): Promise<StringResult> {
        let url_ = this.baseUrl + "/api/SysFormType/GetCategories";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCategories(_response));
        });
    }

    protected processGetCategories(response: AxiosResponse): Promise<StringResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = StringResult.fromJS(resultData200);
            return Promise.resolve<StringResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<StringResult>(null as any);
    }

    /**
     * 自定义表单分类 -- 根据大类查询数据
     * @param category (optional) 大类名称
     * @return Success
     */
    byCategory(category: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysFormTypeViewResult> {
        let url_ = this.baseUrl + "/api/SysFormType/ByCategory?";
        if (category === null)
            throw new Error("The parameter 'category' cannot be null.");
        else if (category !== undefined)
            url_ += "category=" + encodeURIComponent("" + category) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByCategory(_response));
        });
    }

    protected processByCategory(response: AxiosResponse): Promise<SysFormTypeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFormTypeViewResult.fromJS(resultData200);
            return Promise.resolve<SysFormTypeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFormTypeViewResult>(null as any);
    }

    /**
     * 自定义表单分类 -- 分类树
     * @param key (optional) 查询条件
     * @return Success
     */
    tree(key: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysFormTypeTreeViewResult> {
        let url_ = this.baseUrl + "/api/SysFormType/Tree?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTree(_response));
        });
    }

    protected processTree(response: AxiosResponse): Promise<SysFormTypeTreeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysFormTypeTreeViewResult.fromJS(resultData200);
            return Promise.resolve<SysFormTypeTreeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysFormTypeTreeViewResult>(null as any);
    }

    /**
     * 自定义表单分类 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysFormTypePOST(body: SysFormTypeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysFormType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysFormTypePOST(_response));
        });
    }

    protected processSysFormTypePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysHospitalServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医院信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysHospitalGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysHospitalViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysHospital/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysHospitalGET(_response));
        });
    }

    protected processSysHospitalGET(response: AxiosResponse): Promise<SysHospitalViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysHospitalViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysHospitalViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysHospitalViewResultEntry>(null as any);
    }

    /**
     * 医院信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysHospitalPOST(id: string, body: SysHospitalEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysHospital/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysHospitalPOST(_response));
        });
    }

    protected processSysHospitalPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医院信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter13(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysHospitalViewResult> {
        let url_ = this.baseUrl + "/api/SysHospital/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter13(_response));
        });
    }

    protected processFilter13(response: AxiosResponse): Promise<SysHospitalViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysHospitalViewResult.fromJS(resultData200);
            return Promise.resolve<SysHospitalViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysHospitalViewResult>(null as any);
    }

    /**
     * 医院信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysHospitalPOST2(body: SysHospitalEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysHospital";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysHospitalPOST2(_response));
        });
    }

    protected processSysHospitalPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医院信息 -- 根据Id删除数据
     * @return Success
     */
    delete12(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysHospital/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete12(_response));
        });
    }

    protected processDelete12(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 首页
     * @return Success
     */
    indexView(  cancelToken?: CancelToken | undefined): Promise<IndexViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysHospital/IndexView";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIndexView(_response));
        });
    }

    protected processIndexView(response: AxiosResponse): Promise<IndexViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IndexViewResultEntry.fromJS(resultData200);
            return Promise.resolve<IndexViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IndexViewResultEntry>(null as any);
    }

    /**
     * 首页（血管通路）
     * @return Success
     */
    getVascularAccessIndices(source: string , cancelToken?: CancelToken | undefined): Promise<VascularAccessIndexViewResult> {
        let url_ = this.baseUrl + "/api/SysHospital/GetVascularAccessIndices/{Source}";
        if (source === undefined || source === null)
            throw new Error("The parameter 'source' must be defined.");
        url_ = url_.replace("{Source}", encodeURIComponent("" + source));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetVascularAccessIndices(_response));
        });
    }

    protected processGetVascularAccessIndices(response: AxiosResponse): Promise<VascularAccessIndexViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = VascularAccessIndexViewResult.fromJS(resultData200);
            return Promise.resolve<VascularAccessIndexViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<VascularAccessIndexViewResult>(null as any);
    }

    /**
     * 首页（透中事件）
     * @param beginTime (optional)
     * @param endTime (optional)
     * @return Success
     */
    getComplicationIndices(beginTime: dayjs.Dayjs | undefined, endTime: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<ComplicationIndexViewResult> {
        let url_ = this.baseUrl + "/api/SysHospital/GetComplicationIndices?";
        if (beginTime === null)
            throw new Error("The parameter 'beginTime' cannot be null.");
        else if (beginTime !== undefined)
            url_ += "beginTime=" + encodeURIComponent(beginTime ? "" + beginTime.toISOString() : "") + "&";
        if (endTime === null)
            throw new Error("The parameter 'endTime' cannot be null.");
        else if (endTime !== undefined)
            url_ += "endTime=" + encodeURIComponent(endTime ? "" + endTime.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetComplicationIndices(_response));
        });
    }

    protected processGetComplicationIndices(response: AxiosResponse): Promise<ComplicationIndexViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ComplicationIndexViewResult.fromJS(resultData200);
            return Promise.resolve<ComplicationIndexViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ComplicationIndexViewResult>(null as any);
    }

    /**
     * 首页（在透患者疾病相关并发症）
     * @return Success
     */
    getOnPatientComplicationIndices(source: string , cancelToken?: CancelToken | undefined): Promise<OnPatientComplicationIndexViewResult> {
        let url_ = this.baseUrl + "/api/SysHospital/GetOnPatientComplicationIndices/{Source}";
        if (source === undefined || source === null)
            throw new Error("The parameter 'source' must be defined.");
        url_ = url_.replace("{Source}", encodeURIComponent("" + source));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetOnPatientComplicationIndices(_response));
        });
    }

    protected processGetOnPatientComplicationIndices(response: AxiosResponse): Promise<OnPatientComplicationIndexViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = OnPatientComplicationIndexViewResult.fromJS(resultData200);
            return Promise.resolve<OnPatientComplicationIndexViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OnPatientComplicationIndexViewResult>(null as any);
    }
}

export class SysHospitalAreaServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 院区 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysHospitalAreaGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysHospitalAreaResultEntry> {
        let url_ = this.baseUrl + "/api/SysHospitalArea/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysHospitalAreaGET(_response));
        });
    }

    protected processSysHospitalAreaGET(response: AxiosResponse): Promise<SysHospitalAreaResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysHospitalAreaResultEntry.fromJS(resultData200);
            return Promise.resolve<SysHospitalAreaResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysHospitalAreaResultEntry>(null as any);
    }

    /**
     * 院区 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysHospitalAreaPOST(id: string, body: SysHospitalAreaViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysHospitalArea/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysHospitalAreaPOST(_response));
        });
    }

    protected processSysHospitalAreaPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院区 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter14(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysHospitalAreaResult> {
        let url_ = this.baseUrl + "/api/SysHospitalArea/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter14(_response));
        });
    }

    protected processFilter14(response: AxiosResponse): Promise<SysHospitalAreaResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysHospitalAreaResult.fromJS(resultData200);
            return Promise.resolve<SysHospitalAreaResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysHospitalAreaResult>(null as any);
    }

    /**
     * 院区 -- 查询已启用的院区(是否显示没有透析分区的院区；是否显示没有床位的院区(默认显示))
     * @param showDialysis (optional) 是否显示没有透析分区的院区(0 不显示;1 显示)
     * @param isUser (optional) 是否根据用户过滤
     * @param showBed (optional) 是否显示没有床位的院区(showDialysis=0时，该字段生效，否则默认为1)(0 不显示;1 显示)
     * @param isCurrent (optional) 是否显示当前院区
     * @return Success
     */
    hospitalArea(showDialysis: number | undefined, isUser: boolean | undefined, showBed: number | undefined, isCurrent: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<AreaTreeViewResult> {
        let url_ = this.baseUrl + "/api/SysHospitalArea/Tree/HospitalArea?";
        if (showDialysis === null)
            throw new Error("The parameter 'showDialysis' cannot be null.");
        else if (showDialysis !== undefined)
            url_ += "showDialysis=" + encodeURIComponent("" + showDialysis) + "&";
        if (isUser === null)
            throw new Error("The parameter 'isUser' cannot be null.");
        else if (isUser !== undefined)
            url_ += "isUser=" + encodeURIComponent("" + isUser) + "&";
        if (showBed === null)
            throw new Error("The parameter 'showBed' cannot be null.");
        else if (showBed !== undefined)
            url_ += "showBed=" + encodeURIComponent("" + showBed) + "&";
        if (isCurrent === null)
            throw new Error("The parameter 'isCurrent' cannot be null.");
        else if (isCurrent !== undefined)
            url_ += "isCurrent=" + encodeURIComponent("" + isCurrent) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalArea(_response));
        });
    }

    protected processHospitalArea(response: AxiosResponse): Promise<AreaTreeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AreaTreeViewResult.fromJS(resultData200);
            return Promise.resolve<AreaTreeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AreaTreeViewResult>(null as any);
    }

    /**
     * 院区 -- 查询已启用院区和透析分区（没有透析分区不显示院区）
     * @param isCurrent (optional)
     * @return Success
     */
    dialysisAreaGET(isCurrent: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<AreaTreeViewResult> {
        let url_ = this.baseUrl + "/api/SysHospitalArea/Tree/DialysisArea?";
        if (isCurrent === null)
            throw new Error("The parameter 'isCurrent' cannot be null.");
        else if (isCurrent !== undefined)
            url_ += "isCurrent=" + encodeURIComponent("" + isCurrent) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysisAreaGET(_response));
        });
    }

    protected processDialysisAreaGET(response: AxiosResponse): Promise<AreaTreeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AreaTreeViewResult.fromJS(resultData200);
            return Promise.resolve<AreaTreeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AreaTreeViewResult>(null as any);
    }

    /**
     * 院区 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysHospitalAreaPOST2(body: SysHospitalAreaViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysHospitalArea";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysHospitalAreaPOST2(_response));
        });
    }

    protected processSysHospitalAreaPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院区 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForSysHospitalArea(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysHospitalArea/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForSysHospitalArea(_response));
        });
    }

    protected processMoveNodeForSysHospitalArea(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院区 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForSysHospitalArea(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysHospitalArea/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForSysHospitalArea(_response));
        });
    }

    protected processUpNodeForSysHospitalArea(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院区 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForSysHospitalArea(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysHospitalArea/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForSysHospitalArea(_response));
        });
    }

    protected processDownNodeForSysHospitalArea(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院区 -- 切换院区
     * @return Success
     */
    switchHospitalArea(areaId: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysHospitalArea/SwitchHospitalArea/{areaId}";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSwitchHospitalArea(_response));
        });
    }

    protected processSwitchHospitalArea(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院区 -- 根据Id删除数据
     * @return Success
     */
    delete13(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysHospitalArea/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete13(_response));
        });
    }

    protected processDelete13(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysInitHistoryServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 系统初始化数据导入日志 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysInitHistoryGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysInitHistoryViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysInitHistory/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysInitHistoryGET(_response));
        });
    }

    protected processSysInitHistoryGET(response: AxiosResponse): Promise<SysInitHistoryViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysInitHistoryViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysInitHistoryViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysInitHistoryViewResultEntry>(null as any);
    }

    /**
     * 系统初始化数据导入日志 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysInitHistoryPOST(id: string, body: SysInitHistoryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInitHistory/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysInitHistoryPOST(_response));
        });
    }

    protected processSysInitHistoryPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统初始化数据导入日志 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter15(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysInitHistoryViewResult> {
        let url_ = this.baseUrl + "/api/SysInitHistory/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter15(_response));
        });
    }

    protected processFilter15(response: AxiosResponse): Promise<SysInitHistoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysInitHistoryViewResult.fromJS(resultData200);
            return Promise.resolve<SysInitHistoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysInitHistoryViewResult>(null as any);
    }

    /**
     * 系统初始化数据导入日志 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysInitHistoryPOST2(body: SysInitHistoryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInitHistory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysInitHistoryPOST2(_response));
        });
    }

    protected processSysInitHistoryPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统初始化数据导入日志 -- 根据Id删除数据
     * @return Success
     */
    delete14(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInitHistory/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete14(_response));
        });
    }

    protected processDelete14(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 从 Excel 读取患者信息
     * @param fileId Excel 文件 Id
     * @return Success
     */
    patientGET(fileId: string , cancelToken?: CancelToken | undefined): Promise<PatientExcelViewResult> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ReadPatientFromExcel/Patient/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientGET(_response));
        });
    }

    protected processPatientGET(response: AxiosResponse): Promise<PatientExcelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientExcelViewResult.fromJS(resultData200);
            return Promise.resolve<PatientExcelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientExcelViewResult>(null as any);
    }

    /**
     * 从 Excel 读取的数据 导入/更新 患者信息
     * @param body (optional) 从 Excel 读取到的患者信息
     * @return Success
     */
    patientPOST(body: PatientExcelView[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ConvertPatientFromExcel/Patient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientPOST(_response));
        });
    }

    protected processPatientPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 从 Excel 读取用户管理信息
     * @param fileId Excel 文件 Id
     * @return Success
     */
    sysUserGET2(fileId: string , cancelToken?: CancelToken | undefined): Promise<SysUserExcelViewResult> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ReadSysUerFromExcel/SysUser/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserGET2(_response));
        });
    }

    protected processSysUserGET2(response: AxiosResponse): Promise<SysUserExcelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysUserExcelViewResult.fromJS(resultData200);
            return Promise.resolve<SysUserExcelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysUserExcelViewResult>(null as any);
    }

    /**
     * 从 Excel 读取的数据 导入/更新 用户管理信息
     * @param body (optional) 从 Excel 读取到的用户管理信息
     * @return Success
     */
    sysUserPOST(body: SysUserExcelView[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ConvertSysUserFromExcel/SysUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserPOST(_response));
        });
    }

    protected processSysUserPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 从 Excel 读取设备管理信息
     * @param fileId Excel 文件 Id
     * @return Success
     */
    devInfoGET(fileId: string , cancelToken?: CancelToken | undefined): Promise<DevInfoExcelViewResult> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ReadDevInfoFromExcel/DevInfo/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevInfoGET(_response));
        });
    }

    protected processDevInfoGET(response: AxiosResponse): Promise<DevInfoExcelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevInfoExcelViewResult.fromJS(resultData200);
            return Promise.resolve<DevInfoExcelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevInfoExcelViewResult>(null as any);
    }

    /**
     * 从 Excel 读取的数据 导入/更新 读取设备管理信息
     * @param body (optional) 从 Excel 读取设备管理信息
     * @return Success
     */
    devInfoPOST(body: DevInfoExcelView[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ConvertDevInfoFromExcel/DevInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevInfoPOST(_response));
        });
    }

    protected processDevInfoPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 从 Excel 读取床位管理信息
     * @param fileId Excel 文件 Id
     * @return Success
     */
    dialysisBedGET(fileId: string , cancelToken?: CancelToken | undefined): Promise<DialysisBedExcelViewResult> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ReadDialysisBedFromExcel/DialysisBed/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysisBedGET(_response));
        });
    }

    protected processDialysisBedGET(response: AxiosResponse): Promise<DialysisBedExcelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DialysisBedExcelViewResult.fromJS(resultData200);
            return Promise.resolve<DialysisBedExcelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DialysisBedExcelViewResult>(null as any);
    }

    /**
     * 从 Excel 读取的数据 导入/更新 床位管理信息
     * @param body (optional) 从 Excel 读取床位管理信息
     * @return Success
     */
    dialysisBedPOST(body: DialysisBedExcelView[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ConvertDialysisBedFromExcel/DialysisBed";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysisBedPOST(_response));
        });
    }

    protected processDialysisBedPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 从 Excel 读取透析分区管理信息
     * @param fileId Excel 文件 Id
     * @return Success
     */
    dialysisAreaGET2(fileId: string , cancelToken?: CancelToken | undefined): Promise<DeptDialysisAreaExcelViewResult> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ReadDialysisAreaFromExcel/DialysisArea/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysisAreaGET2(_response));
        });
    }

    protected processDialysisAreaGET2(response: AxiosResponse): Promise<DeptDialysisAreaExcelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisAreaExcelViewResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisAreaExcelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisAreaExcelViewResult>(null as any);
    }

    /**
     * 从 Excel 读取的数据 导入/更新 透析分区信息
     * @param body (optional) 从 Excel 读取透析分区信息
     * @return Success
     */
    dialysisAreaPOST(body: DeptDialysisAreaExcelView[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ConvertDialysisAreaFromExcel/DialysisArea";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysisAreaPOST(_response));
        });
    }

    protected processDialysisAreaPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 从 Excel 项目管理信息
     * @param fileId Excel 文件 Id
     * @param type (optional)
     * @return Success
     */
    roomItemListGET(fileId: string, type: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomListItemExcelViewResult> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ReadRoomItemListFromExcel/RoomItemList/{fileId}?";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemListGET(_response));
        });
    }

    protected processRoomItemListGET(response: AxiosResponse): Promise<RoomListItemExcelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomListItemExcelViewResult.fromJS(resultData200);
            return Promise.resolve<RoomListItemExcelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomListItemExcelViewResult>(null as any);
    }

    /**
     * 从 Excel 读取的数据 导入/更新 项目管理信息
     * @param body (optional) 从 Excel 项目管理信息
     * @return Success
     */
    roomItemListPOST(body: RoomListItemExcelView[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ConvertRoomItemListFromExcel/RoomItemList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemListPOST(_response));
        });
    }

    protected processRoomItemListPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 从 Excel 读取患者信息
     * @param fileId Excel 文件 Id
     * @return Success
     */
    prescriptionGET(fileId: string , cancelToken?: CancelToken | undefined): Promise<PrescriptionExcelViewResult> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ReadPrescriptionFromExcel/Prescription/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrescriptionGET(_response));
        });
    }

    protected processPrescriptionGET(response: AxiosResponse): Promise<PrescriptionExcelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrescriptionExcelViewResult.fromJS(resultData200);
            return Promise.resolve<PrescriptionExcelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrescriptionExcelViewResult>(null as any);
    }

    /**
     * 从 Excel 读取的数据 导入/更新 患者信息
     * @param body (optional) 从 Excel 读取到的患者信息
     * @return Success
     */
    prescriptionPOST(body: PrescriptionExcelView[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ConvertPrescriptionFromExcel/Prescription";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrescriptionPOST(_response));
        });
    }

    protected processPrescriptionPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 从 Excel 长期医嘱
     * @param fileId Excel 文件 Id
     * @return Success
     */
    daLongtermGET(fileId: string , cancelToken?: CancelToken | undefined): Promise<DaLongtermExcelViewResult> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ReadDaLongtermFromExcel/DaLongterm/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDaLongtermGET(_response));
        });
    }

    protected processDaLongtermGET(response: AxiosResponse): Promise<DaLongtermExcelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DaLongtermExcelViewResult.fromJS(resultData200);
            return Promise.resolve<DaLongtermExcelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DaLongtermExcelViewResult>(null as any);
    }

    /**
     * 从 Excel 读取的数据 导入/更新 长期医嘱信息
     * @param body (optional) 从 Excel 长期医嘱信息
     * @return Success
     */
    daLongtermPOST(body: DaLongtermExcelView[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInitHistory/ConvertDaLongtermFromExcel/DaLongterm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDaLongtermPOST(_response));
        });
    }

    protected processDaLongtermPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysInterfaceItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 外部接口数据 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysInterfaceItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysInterfaceItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysInterfaceItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysInterfaceItemGET(_response));
        });
    }

    protected processSysInterfaceItemGET(response: AxiosResponse): Promise<SysInterfaceItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysInterfaceItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysInterfaceItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysInterfaceItemViewResultEntry>(null as any);
    }

    /**
     * 外部接口数据 -- 根据条件查询数据
     * @param code (optional)
     * @return Success
     */
    getMapItems(code: string | undefined , cancelToken?: CancelToken | undefined): Promise<ObjectResultEntry> {
        let url_ = this.baseUrl + "/api/SysInterfaceItem/GetMapItems?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetMapItems(_response));
        });
    }

    protected processGetMapItems(response: AxiosResponse): Promise<ObjectResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ObjectResultEntry.fromJS(resultData200);
            return Promise.resolve<ObjectResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ObjectResultEntry>(null as any);
    }

    /**
     * 外部接口数据 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysInterfaceItemPOST(body: SysInterfaceItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInterfaceItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysInterfaceItemPOST(_response));
        });
    }

    protected processSysInterfaceItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysInterfaceItemMapServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 接口映射关系表 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter16(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysInterfaceItemMapViewResult> {
        let url_ = this.baseUrl + "/api/SysInterfaceItemMap/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter16(_response));
        });
    }

    protected processFilter16(response: AxiosResponse): Promise<SysInterfaceItemMapViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysInterfaceItemMapViewResult.fromJS(resultData200);
            return Promise.resolve<SysInterfaceItemMapViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysInterfaceItemMapViewResult>(null as any);
    }

    /**
     * 接口映射关系表 -- 新增匹配
     * @param body (optional)
     * @return Success
     */
    sysInterfaceItemMap(body: SysInterfaceItemMapEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInterfaceItemMap";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysInterfaceItemMap(_response));
        });
    }

    protected processSysInterfaceItemMap(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 接口项自动映射
     * @param code (optional)
     * @return Success
     */
    interfaceItemAutoMap(code: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInterfaceItemMap/InterfaceItemAutoMap?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInterfaceItemAutoMap(_response));
        });
    }

    protected processInterfaceItemAutoMap(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 接口映射关系表 -- 根据id删除，取消匹配
     * @return Success
     */
    delete15(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysInterfaceItemMap/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete15(_response));
        });
    }

    protected processDelete15(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysLargeScreenServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 大屏管理 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysLargeScreenGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysLargeScreenViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysLargeScreen/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysLargeScreenGET(_response));
        });
    }

    protected processSysLargeScreenGET(response: AxiosResponse): Promise<SysLargeScreenViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysLargeScreenViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysLargeScreenViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysLargeScreenViewResultEntry>(null as any);
    }

    /**
     * 大屏管理 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysLargeScreenPOST(id: string, body: SysLargeScreenEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysLargeScreen/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysLargeScreenPOST(_response));
        });
    }

    protected processSysLargeScreenPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 大屏管理 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter17(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysLargeScreenViewResult> {
        let url_ = this.baseUrl + "/api/SysLargeScreen/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter17(_response));
        });
    }

    protected processFilter17(response: AxiosResponse): Promise<SysLargeScreenViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysLargeScreenViewResult.fromJS(resultData200);
            return Promise.resolve<SysLargeScreenViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysLargeScreenViewResult>(null as any);
    }

    /**
     * 大屏管理 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysLargeScreenPOST2(body: SysLargeScreenEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysLargeScreen";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysLargeScreenPOST2(_response));
        });
    }

    protected processSysLargeScreenPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 大屏管理 -- 根据Id删除数据
     * @return Success
     */
    delete16(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysLargeScreen/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete16(_response));
        });
    }

    protected processDelete16(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysLargeScreenConfServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 大屏配置 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysLargeScreenConfGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysLargeScreenConfViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysLargeScreenConf/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysLargeScreenConfGET(_response));
        });
    }

    protected processSysLargeScreenConfGET(response: AxiosResponse): Promise<SysLargeScreenConfViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysLargeScreenConfViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysLargeScreenConfViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysLargeScreenConfViewResultEntry>(null as any);
    }

    /**
     * 大屏配置 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysLargeScreenConfPOST(id: string, body: SysLargeScreenConfEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysLargeScreenConf/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysLargeScreenConfPOST(_response));
        });
    }

    protected processSysLargeScreenConfPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 大屏配置 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter18(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysLargeScreenConfViewResult> {
        let url_ = this.baseUrl + "/api/SysLargeScreenConf/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter18(_response));
        });
    }

    protected processFilter18(response: AxiosResponse): Promise<SysLargeScreenConfViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysLargeScreenConfViewResult.fromJS(resultData200);
            return Promise.resolve<SysLargeScreenConfViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysLargeScreenConfViewResult>(null as any);
    }

    /**
     * 预览数据
     * @param id (optional) 大屏配置记录标识
     * @param body (optional)
     * @return Success
     */
    previewPOST(id: string | undefined, body: SysLargeScreenConfEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<LargeScreenViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysLargeScreenConf/Preview?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPreviewPOST(_response));
        });
    }

    protected processPreviewPOST(response: AxiosResponse): Promise<LargeScreenViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LargeScreenViewResultEntry.fromJS(resultData200);
            return Promise.resolve<LargeScreenViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LargeScreenViewResultEntry>(null as any);
    }

    /**
     * 大屏配置 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysLargeScreenConfPOST2(body: SysLargeScreenConfEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysLargeScreenConf";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysLargeScreenConfPOST2(_response));
        });
    }

    protected processSysLargeScreenConfPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 大屏配置 -- 根据Id删除数据
     * @return Success
     */
    delete17(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysLargeScreenConf/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete17(_response));
        });
    }

    protected processDelete17(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 系统日志 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysLogResultEntry> {
        let url_ = this.baseUrl + "/api/SysLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysLogGET(_response));
        });
    }

    protected processSysLogGET(response: AxiosResponse): Promise<SysLogResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysLogResultEntry.fromJS(resultData200);
            return Promise.resolve<SysLogResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysLogResultEntry>(null as any);
    }

    /**
     * 系统日志 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysLogPOST(id: string, body: SysLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysLogPOST(_response));
        });
    }

    protected processSysLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统日志 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter19(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysLogResult> {
        let url_ = this.baseUrl + "/api/SysLog/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter19(_response));
        });
    }

    protected processFilter19(response: AxiosResponse): Promise<SysLogResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysLogResult.fromJS(resultData200);
            return Promise.resolve<SysLogResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysLogResult>(null as any);
    }

    /**
     * 系统日志 - 日志文件列表
     * @return Success
     */
    files(  cancelToken?: CancelToken | undefined): Promise<SystemLoggerDirectoryViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysLog/Files";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFiles(_response));
        });
    }

    protected processFiles(response: AxiosResponse): Promise<SystemLoggerDirectoryViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SystemLoggerDirectoryViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SystemLoggerDirectoryViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SystemLoggerDirectoryViewResultEntry>(null as any);
    }

    /**
     * 系统日志 - 预览文件
     * @param fullName (optional) 文件全路径
     * @param startIndex 文件开始行数
     * @param endIndex 文件结束行数
     * @return Success
     */
    previewGET(fullName: string | undefined, startIndex: number, endIndex: number , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysLog/Preview/{startIndex}/{endIndex}?";
        if (startIndex === undefined || startIndex === null)
            throw new Error("The parameter 'startIndex' must be defined.");
        url_ = url_.replace("{startIndex}", encodeURIComponent("" + startIndex));
        if (endIndex === undefined || endIndex === null)
            throw new Error("The parameter 'endIndex' must be defined.");
        url_ = url_.replace("{endIndex}", encodeURIComponent("" + endIndex));
        if (fullName === null)
            throw new Error("The parameter 'fullName' cannot be null.");
        else if (fullName !== undefined)
            url_ += "fullName=" + encodeURIComponent("" + fullName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPreviewGET(_response));
        });
    }

    protected processPreviewGET(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统日志 - 下载文件
     * @param fullName (optional) 文件全路径
     * @return Success
     */
    download(fullName: string | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/SysLog/Download?";
        if (fullName === null)
            throw new Error("The parameter 'fullName' cannot be null.");
        else if (fullName !== undefined)
            url_ += "fullName=" + encodeURIComponent("" + fullName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownload(_response));
        });
    }

    protected processDownload(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * 系统日志 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysLogPOST2(body: SysLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysLogPOST2(_response));
        });
    }

    protected processSysLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统日志 -- 根据Id删除数据
     * @return Success
     */
    delete18(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete18(_response));
        });
    }

    protected processDelete18(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysMenuServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 菜单信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysMenuGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysMenuResultEntry> {
        let url_ = this.baseUrl + "/api/SysMenu/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysMenuGET(_response));
        });
    }

    protected processSysMenuGET(response: AxiosResponse): Promise<SysMenuResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysMenuResultEntry.fromJS(resultData200);
            return Promise.resolve<SysMenuResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysMenuResultEntry>(null as any);
    }

    /**
     * 菜单信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysMenuPOST(id: string, body: SysMenuViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysMenu/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysMenuPOST(_response));
        });
    }

    protected processSysMenuPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 菜单信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter20(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysMenuResult> {
        let url_ = this.baseUrl + "/api/SysMenu/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter20(_response));
        });
    }

    protected processFilter20(response: AxiosResponse): Promise<SysMenuResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysMenuResult.fromJS(resultData200);
            return Promise.resolve<SysMenuResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysMenuResult>(null as any);
    }

    /**
     * 菜单信息(向下递归查询所有子项) -- 根据条件查询数据
     * @param sysMenuId 菜单ID
     * @param filter (optional) 查询条件
     * @return Success
     */
    getSysMenuDetailByFilter(sysMenuId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysMenuResult> {
        let url_ = this.baseUrl + "/api/SysMenu/{sysMenuId}/Filter";
        if (sysMenuId === undefined || sysMenuId === null)
            throw new Error("The parameter 'sysMenuId' must be defined.");
        url_ = url_.replace("{sysMenuId}", encodeURIComponent("" + sysMenuId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSysMenuDetailByFilter(_response));
        });
    }

    protected processGetSysMenuDetailByFilter(response: AxiosResponse): Promise<SysMenuResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysMenuResult.fromJS(resultData200);
            return Promise.resolve<SysMenuResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysMenuResult>(null as any);
    }

    /**
     * 菜单信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysMenuPOST2(body: SysMenuViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysMenu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysMenuPOST2(_response));
        });
    }

    protected processSysMenuPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 菜单信息 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForSysMenu(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysMenu/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForSysMenu(_response));
        });
    }

    protected processMoveNodeForSysMenu(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 菜单信息 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForSysMenu(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysMenu/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForSysMenu(_response));
        });
    }

    protected processUpNodeForSysMenu(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 菜单信息 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForSysMenu(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysMenu/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForSysMenu(_response));
        });
    }

    protected processDownNodeForSysMenu(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 菜单信息 -- 根据Id删除数据
     * @return Success
     */
    delete19(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysMenu/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete19(_response));
        });
    }

    protected processDelete19(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysMessageReceiverServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 消息接收人配置 -- 根据条件查询数据
     * @param sysMessageTypeId 消息类型标识
     * @return Success
     */
    sysMessageType(sysMessageTypeId: string , cancelToken?: CancelToken | undefined): Promise<SysMessageReceiverViewResult> {
        let url_ = this.baseUrl + "/api/SysMessageReceiver/SysMessageType/{sysMessageTypeId}";
        if (sysMessageTypeId === undefined || sysMessageTypeId === null)
            throw new Error("The parameter 'sysMessageTypeId' must be defined.");
        url_ = url_.replace("{sysMessageTypeId}", encodeURIComponent("" + sysMessageTypeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysMessageType(_response));
        });
    }

    protected processSysMessageType(response: AxiosResponse): Promise<SysMessageReceiverViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysMessageReceiverViewResult.fromJS(resultData200);
            return Promise.resolve<SysMessageReceiverViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysMessageReceiverViewResult>(null as any);
    }

    /**
     * 消息接收人配置 -- 选中/不选中
     * @return Success
     */
    check(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysMessageReceiver/Check/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCheck(_response));
        });
    }

    protected processCheck(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysMessageTypeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 消息类型 -- 大类以及包含的小类
     * @return Success
     */
    all2(  cancelToken?: CancelToken | undefined): Promise<SysMessageTypeViewResult> {
        let url_ = this.baseUrl + "/api/SysMessageType/All";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAll2(_response));
        });
    }

    protected processAll2(response: AxiosResponse): Promise<SysMessageTypeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysMessageTypeViewResult.fromJS(resultData200);
            return Promise.resolve<SysMessageTypeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysMessageTypeViewResult>(null as any);
    }
}

export class SysOpsCodeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 系统运维字典 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysOpsCodeGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysOpsCodeResultEntry> {
        let url_ = this.baseUrl + "/api/SysOpsCode/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysOpsCodeGET(_response));
        });
    }

    protected processSysOpsCodeGET(response: AxiosResponse): Promise<SysOpsCodeResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysOpsCodeResultEntry.fromJS(resultData200);
            return Promise.resolve<SysOpsCodeResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysOpsCodeResultEntry>(null as any);
    }

    /**
     * 系统运维字典 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysOpsCodePOST(id: string, body: SysOpsCodeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysOpsCode/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysOpsCodePOST(_response));
        });
    }

    protected processSysOpsCodePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统运维字典 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter21(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysOpsCodeResult> {
        let url_ = this.baseUrl + "/api/SysOpsCode/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter21(_response));
        });
    }

    protected processFilter21(response: AxiosResponse): Promise<SysOpsCodeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysOpsCodeResult.fromJS(resultData200);
            return Promise.resolve<SysOpsCodeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysOpsCodeResult>(null as any);
    }

    /**
     * 系统运维字典 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysOpsCodePOST2(body: SysOpsCodeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysOpsCode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysOpsCodePOST2(_response));
        });
    }

    protected processSysOpsCodePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统运维字典 -- 根据Id删除数据
     * @return Success
     */
    delete20(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysOpsCode/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete20(_response));
        });
    }

    protected processDelete20(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysPatientSettingServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者配置 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysPatientSettingGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysPatientSettingResultEntry> {
        let url_ = this.baseUrl + "/api/SysPatientSetting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysPatientSettingGET(_response));
        });
    }

    protected processSysPatientSettingGET(response: AxiosResponse): Promise<SysPatientSettingResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysPatientSettingResultEntry.fromJS(resultData200);
            return Promise.resolve<SysPatientSettingResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysPatientSettingResultEntry>(null as any);
    }

    /**
     * 患者配置 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysPatientSettingPOST(id: string, body: SysPatientSettingViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysPatientSetting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysPatientSettingPOST(_response));
        });
    }

    protected processSysPatientSettingPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者配置 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter22(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysPatientSettingResult> {
        let url_ = this.baseUrl + "/api/SysPatientSetting/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter22(_response));
        });
    }

    protected processFilter22(response: AxiosResponse): Promise<SysPatientSettingResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysPatientSettingResult.fromJS(resultData200);
            return Promise.resolve<SysPatientSettingResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysPatientSettingResult>(null as any);
    }

    /**
     * 患者配置 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysPatientSettingPOST2(body: SysPatientSettingViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysPatientSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysPatientSettingPOST2(_response));
        });
    }

    protected processSysPatientSettingPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者配置 -- 根据Id删除数据
     * @return Success
     */
    delete21(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysPatientSetting/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete21(_response));
        });
    }

    protected processDelete21(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysRightServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 菜单功能权限 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysRightGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysRightResultEntry> {
        let url_ = this.baseUrl + "/api/SysRight/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysRightGET(_response));
        });
    }

    protected processSysRightGET(response: AxiosResponse): Promise<SysRightResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysRightResultEntry.fromJS(resultData200);
            return Promise.resolve<SysRightResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysRightResultEntry>(null as any);
    }

    /**
     * 菜单功能权限 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysRightPOST(id: string, body: SysRightViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysRight/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysRightPOST(_response));
        });
    }

    protected processSysRightPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 菜单功能权限 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter23(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysRightResult> {
        let url_ = this.baseUrl + "/api/SysRight/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter23(_response));
        });
    }

    protected processFilter23(response: AxiosResponse): Promise<SysRightResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysRightResult.fromJS(resultData200);
            return Promise.resolve<SysRightResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysRightResult>(null as any);
    }

    /**
     * 菜单功能权限 -- 根据权限ID与菜单ID查询数据
     * @param roleId 权限ID
     * @param menuId 菜单ID
     * @return Success
     */
    menuId(roleId: string, menuId: string , cancelToken?: CancelToken | undefined): Promise<SysRightViewResult> {
        let url_ = this.baseUrl + "/api/SysRight/ByRightId/{roleId}/MenuId/{menuId}";
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined.");
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
        if (menuId === undefined || menuId === null)
            throw new Error("The parameter 'menuId' must be defined.");
        url_ = url_.replace("{menuId}", encodeURIComponent("" + menuId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMenuId(_response));
        });
    }

    protected processMenuId(response: AxiosResponse): Promise<SysRightViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysRightViewResult.fromJS(resultData200);
            return Promise.resolve<SysRightViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysRightViewResult>(null as any);
    }

    /**
     * 菜单功能权限 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysRightPOST2(body: SysRightViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysRight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysRightPOST2(_response));
        });
    }

    protected processSysRightPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 菜单功能权限 -- 根据Id删除数据
     * @return Success
     */
    delete22(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysRight/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete22(_response));
        });
    }

    protected processDelete22(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysRoleServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 角色信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysRoleGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysRoleResultEntry> {
        let url_ = this.baseUrl + "/api/SysRole/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysRoleGET(_response));
        });
    }

    protected processSysRoleGET(response: AxiosResponse): Promise<SysRoleResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysRoleResultEntry.fromJS(resultData200);
            return Promise.resolve<SysRoleResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysRoleResultEntry>(null as any);
    }

    /**
     * 角色信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysRolePOST(id: string, body: SysRoleViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysRole/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysRolePOST(_response));
        });
    }

    protected processSysRolePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 角色信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @return Success
     */
    filter24(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysRoleResult> {
        let url_ = this.baseUrl + "/api/SysRole/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter24(_response));
        });
    }

    protected processFilter24(response: AxiosResponse): Promise<SysRoleResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysRoleResult.fromJS(resultData200);
            return Promise.resolve<SysRoleResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysRoleResult>(null as any);
    }

    /**
     * 角色信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysRolePOST2(body: SysRoleViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysRolePOST2(_response));
        });
    }

    protected processSysRolePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 角色信息 -- 根据Id删除数据
     * @return Success
     */
    delete23(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysRole/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete23(_response));
        });
    }

    protected processDelete23(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysRoleRightServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 角色权限 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysRoleRightGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysRoleRightResultEntry> {
        let url_ = this.baseUrl + "/api/SysRoleRight/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysRoleRightGET(_response));
        });
    }

    protected processSysRoleRightGET(response: AxiosResponse): Promise<SysRoleRightResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysRoleRightResultEntry.fromJS(resultData200);
            return Promise.resolve<SysRoleRightResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysRoleRightResultEntry>(null as any);
    }

    /**
     * 角色权限 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter25(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysRoleRightResult> {
        let url_ = this.baseUrl + "/api/SysRoleRight/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter25(_response));
        });
    }

    protected processFilter25(response: AxiosResponse): Promise<SysRoleRightResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysRoleRightResult.fromJS(resultData200);
            return Promise.resolve<SysRoleRightResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysRoleRightResult>(null as any);
    }

    /**
     * 角色权限 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysRoleRightPOST(body: SysRoleRightViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysRoleRight";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysRoleRightPOST(_response));
        });
    }

    protected processSysRoleRightPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 角色权限 -- 批量新增数据
     * @param body (optional)
     * @return Success
     */
    batch(body: SysRoleRightViewModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysRoleRight/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch(_response));
        });
    }

    protected processBatch(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 角色权限 -- 根据Id删除数据
     * @return Success
     */
    delete24(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysRoleRight/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete24(_response));
        });
    }

    protected processDelete24(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 角色权限 -- 根据Id批量删除数据
     * @param body (optional)
     * @return Success
     */
    batch2(body: SysRoleRightViewModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysRoleRight/Delete/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch2(_response));
        });
    }

    protected processBatch2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysSafetySettingServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 安全策略 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysSafetySettingGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysSafetySettingResultEntry> {
        let url_ = this.baseUrl + "/api/SysSafetySetting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysSafetySettingGET(_response));
        });
    }

    protected processSysSafetySettingGET(response: AxiosResponse): Promise<SysSafetySettingResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysSafetySettingResultEntry.fromJS(resultData200);
            return Promise.resolve<SysSafetySettingResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysSafetySettingResultEntry>(null as any);
    }

    /**
     * 安全策略 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysSafetySettingPOST(id: string, body: SysSafetySettingViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysSafetySetting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysSafetySettingPOST(_response));
        });
    }

    protected processSysSafetySettingPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 安全策略 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter26(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysSafetySettingResult> {
        let url_ = this.baseUrl + "/api/SysSafetySetting/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter26(_response));
        });
    }

    protected processFilter26(response: AxiosResponse): Promise<SysSafetySettingResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysSafetySettingResult.fromJS(resultData200);
            return Promise.resolve<SysSafetySettingResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysSafetySettingResult>(null as any);
    }

    /**
     * 安全策略 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysSafetySettingPOST2(body: SysSafetySettingViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysSafetySetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysSafetySettingPOST2(_response));
        });
    }

    protected processSysSafetySettingPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 安全策略 -- 根据Id删除数据
     * @return Success
     */
    delete25(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysSafetySetting/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete25(_response));
        });
    }

    protected processDelete25(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysScreenDetailServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 大屏配置 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysScreenDetailGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysScreenDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysScreenDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenDetailGET(_response));
        });
    }

    protected processSysScreenDetailGET(response: AxiosResponse): Promise<SysScreenDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysScreenDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysScreenDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysScreenDetailViewResultEntry>(null as any);
    }

    /**
     * 大屏配置 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysScreenDetailPOST(id: string, body: SysScreenDetailEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysScreenDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenDetailPOST(_response));
        });
    }

    protected processSysScreenDetailPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 大屏配置 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter27(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysScreenDetailViewResult> {
        let url_ = this.baseUrl + "/api/SysScreenDetail/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter27(_response));
        });
    }

    protected processFilter27(response: AxiosResponse): Promise<SysScreenDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysScreenDetailViewResult.fromJS(resultData200);
            return Promise.resolve<SysScreenDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysScreenDetailViewResult>(null as any);
    }

    /**
     * 大屏配置 -- 根据条件查询数据
     * @param sysScreenItemId 大屏明细标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    sysScreenItemGET(sysScreenItemId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysScreenDetailViewResult> {
        let url_ = this.baseUrl + "/api/SysScreenDetail/SysScreenItem/{sysScreenItemId}";
        if (sysScreenItemId === undefined || sysScreenItemId === null)
            throw new Error("The parameter 'sysScreenItemId' must be defined.");
        url_ = url_.replace("{sysScreenItemId}", encodeURIComponent("" + sysScreenItemId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenItemGET(_response));
        });
    }

    protected processSysScreenItemGET(response: AxiosResponse): Promise<SysScreenDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysScreenDetailViewResult.fromJS(resultData200);
            return Promise.resolve<SysScreenDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysScreenDetailViewResult>(null as any);
    }

    /**
     * 大屏配置 -- 根据条件查询数据
     * @param sysScreenItemId 大屏明细标识
     * @param body (optional)
     * @return Success
     */
    sysScreenItemPOST(sysScreenItemId: string, body: SysScreenDetailEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysScreenDetail/SysScreenItem/{sysScreenItemId}";
        if (sysScreenItemId === undefined || sysScreenItemId === null)
            throw new Error("The parameter 'sysScreenItemId' must be defined.");
        url_ = url_.replace("{sysScreenItemId}", encodeURIComponent("" + sysScreenItemId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenItemPOST(_response));
        });
    }

    protected processSysScreenItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 大屏配置 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysScreenDetailPOST2(body: SysScreenDetailEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysScreenDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenDetailPOST2(_response));
        });
    }

    protected processSysScreenDetailPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 大屏配置 -- 根据Id删除数据
     * @return Success
     */
    delete26(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysScreenDetail/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete26(_response));
        });
    }

    protected processDelete26(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysScreenItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 大屏明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysScreenItemGET2(id: string , cancelToken?: CancelToken | undefined): Promise<SysScreenItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysScreenItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenItemGET2(_response));
        });
    }

    protected processSysScreenItemGET2(response: AxiosResponse): Promise<SysScreenItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysScreenItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysScreenItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysScreenItemViewResultEntry>(null as any);
    }

    /**
     * 大屏明细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysScreenItemPOST2(id: string, body: SysScreenItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysScreenItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenItemPOST2(_response));
        });
    }

    protected processSysScreenItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 大屏明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter28(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysScreenItemViewResult> {
        let url_ = this.baseUrl + "/api/SysScreenItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter28(_response));
        });
    }

    protected processFilter28(response: AxiosResponse): Promise<SysScreenItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysScreenItemViewResult.fromJS(resultData200);
            return Promise.resolve<SysScreenItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysScreenItemViewResult>(null as any);
    }

    /**
     * 大屏明细 -- 根据条件查询数据
     * @param sysScreenTypeId 大屏类型标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    sysScreenTypeGET(sysScreenTypeId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysScreenItemViewResult> {
        let url_ = this.baseUrl + "/api/SysScreenItem/SysScreenType/{sysScreenTypeId}";
        if (sysScreenTypeId === undefined || sysScreenTypeId === null)
            throw new Error("The parameter 'sysScreenTypeId' must be defined.");
        url_ = url_.replace("{sysScreenTypeId}", encodeURIComponent("" + sysScreenTypeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenTypeGET(_response));
        });
    }

    protected processSysScreenTypeGET(response: AxiosResponse): Promise<SysScreenItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysScreenItemViewResult.fromJS(resultData200);
            return Promise.resolve<SysScreenItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysScreenItemViewResult>(null as any);
    }

    /**
     * 大屏明细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysScreenItemPOST3(body: SysScreenItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysScreenItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenItemPOST3(_response));
        });
    }

    protected processSysScreenItemPOST3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 大屏明细 -- 根据Id删除数据
     * @return Success
     */
    delete27(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysScreenItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete27(_response));
        });
    }

    protected processDelete27(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysScreenTypeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 大屏分类 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysScreenTypeGET2(id: string , cancelToken?: CancelToken | undefined): Promise<SysScreenTypeViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysScreenType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenTypeGET2(_response));
        });
    }

    protected processSysScreenTypeGET2(response: AxiosResponse): Promise<SysScreenTypeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysScreenTypeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysScreenTypeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysScreenTypeViewResultEntry>(null as any);
    }

    /**
     * 大屏分类 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysScreenTypePOST(id: string, body: SysScreenTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysScreenType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenTypePOST(_response));
        });
    }

    protected processSysScreenTypePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 大屏分类 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter29(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysScreenTypeViewResult> {
        let url_ = this.baseUrl + "/api/SysScreenType/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter29(_response));
        });
    }

    protected processFilter29(response: AxiosResponse): Promise<SysScreenTypeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysScreenTypeViewResult.fromJS(resultData200);
            return Promise.resolve<SysScreenTypeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysScreenTypeViewResult>(null as any);
    }

    /**
     * 大屏分类 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysScreenTypePOST2(body: SysScreenTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysScreenType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenTypePOST2(_response));
        });
    }

    protected processSysScreenTypePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 大屏分类 -- 根据Id删除数据
     * @return Success
     */
    delete28(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysScreenType/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete28(_response));
        });
    }

    protected processDelete28(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysScreenTypeDetailServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 大屏属性明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysScreenTypeDetailGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysScreenTypeDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysScreenTypeDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenTypeDetailGET(_response));
        });
    }

    protected processSysScreenTypeDetailGET(response: AxiosResponse): Promise<SysScreenTypeDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysScreenTypeDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysScreenTypeDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysScreenTypeDetailViewResultEntry>(null as any);
    }

    /**
     * 大屏属性明细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysScreenTypeDetailPOST(id: string, body: SysScreenTypeDetailEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysScreenTypeDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenTypeDetailPOST(_response));
        });
    }

    protected processSysScreenTypeDetailPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 大屏属性明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter30(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysScreenTypeDetailViewResult> {
        let url_ = this.baseUrl + "/api/SysScreenTypeDetail/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter30(_response));
        });
    }

    protected processFilter30(response: AxiosResponse): Promise<SysScreenTypeDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysScreenTypeDetailViewResult.fromJS(resultData200);
            return Promise.resolve<SysScreenTypeDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysScreenTypeDetailViewResult>(null as any);
    }

    /**
     * 大屏属性明细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysScreenTypeDetailPOST2(body: SysScreenTypeDetailEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysScreenTypeDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysScreenTypeDetailPOST2(_response));
        });
    }

    protected processSysScreenTypeDetailPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 大屏属性明细 -- 根据Id删除数据
     * @return Success
     */
    delete29(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysScreenTypeDetail/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete29(_response));
        });
    }

    protected processDelete29(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysSettingServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 系统参数 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysSettingGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysSettingViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysSetting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysSettingGET(_response));
        });
    }

    protected processSysSettingGET(response: AxiosResponse): Promise<SysSettingViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysSettingViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysSettingViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysSettingViewResultEntry>(null as any);
    }

    /**
     * 系统参数 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysSettingPOST(id: string, body: SysSettingEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysSetting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysSettingPOST(_response));
        });
    }

    protected processSysSettingPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统参数 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter31(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysSettingViewResult> {
        let url_ = this.baseUrl + "/api/SysSetting/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter31(_response));
        });
    }

    protected processFilter31(response: AxiosResponse): Promise<SysSettingViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysSettingViewResult.fromJS(resultData200);
            return Promise.resolve<SysSettingViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysSettingViewResult>(null as any);
    }

    /**
     * 系统参数 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysSettingPOST2(body: SysSettingViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysSettingPOST2(_response));
        });
    }

    protected processSysSettingPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统参数 -- 根据Id删除数据
     * @return Success
     */
    delete30(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysSetting/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete30(_response));
        });
    }

    protected processDelete30(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysSettingGroupServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 系统参数分组 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysSettingGroupGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysSettingGroupResultEntry> {
        let url_ = this.baseUrl + "/api/SysSettingGroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysSettingGroupGET(_response));
        });
    }

    protected processSysSettingGroupGET(response: AxiosResponse): Promise<SysSettingGroupResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysSettingGroupResultEntry.fromJS(resultData200);
            return Promise.resolve<SysSettingGroupResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysSettingGroupResultEntry>(null as any);
    }

    /**
     * 系统参数分组 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysSettingGroupPOST(id: string, body: SysSettingGroupViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysSettingGroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysSettingGroupPOST(_response));
        });
    }

    protected processSysSettingGroupPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统参数分组 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter32(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysSettingGroupResult> {
        let url_ = this.baseUrl + "/api/SysSettingGroup/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter32(_response));
        });
    }

    protected processFilter32(response: AxiosResponse): Promise<SysSettingGroupResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysSettingGroupResult.fromJS(resultData200);
            return Promise.resolve<SysSettingGroupResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysSettingGroupResult>(null as any);
    }

    /**
     * 系统参数分组 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysSettingGroupPOST2(body: SysSettingGroupViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysSettingGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysSettingGroupPOST2(_response));
        });
    }

    protected processSysSettingGroupPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统参数分组 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForSysSettingGroup(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysSettingGroup/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForSysSettingGroup(_response));
        });
    }

    protected processMoveNodeForSysSettingGroup(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统参数分组 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForSysSettingGroup(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysSettingGroup/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForSysSettingGroup(_response));
        });
    }

    protected processUpNodeForSysSettingGroup(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统参数分组 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForSysSettingGroup(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysSettingGroup/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForSysSettingGroup(_response));
        });
    }

    protected processDownNodeForSysSettingGroup(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 系统参数分组 -- 根据Id删除数据
     * @return Success
     */
    delete31(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysSettingGroup/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete31(_response));
        });
    }

    protected processDelete31(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysTaskHistoryServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 任务历史 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysTaskHistoryGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysTaskHistoryViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysTaskHistory/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysTaskHistoryGET(_response));
        });
    }

    protected processSysTaskHistoryGET(response: AxiosResponse): Promise<SysTaskHistoryViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysTaskHistoryViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysTaskHistoryViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysTaskHistoryViewResultEntry>(null as any);
    }

    /**
     * 任务历史 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysTaskHistoryPOST(id: string, body: SysTaskHistoryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysTaskHistory/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysTaskHistoryPOST(_response));
        });
    }

    protected processSysTaskHistoryPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 任务历史 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter33(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysTaskHistoryViewResult> {
        let url_ = this.baseUrl + "/api/SysTaskHistory/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter33(_response));
        });
    }

    protected processFilter33(response: AxiosResponse): Promise<SysTaskHistoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysTaskHistoryViewResult.fromJS(resultData200);
            return Promise.resolve<SysTaskHistoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysTaskHistoryViewResult>(null as any);
    }

    /**
     * 任务历史 -- 根据条件查询数据
     * @param sysTaskItemId (optional) 任务清单标识（为空查全部）
     * @param result (optional) 执行结果字典值(DIC.TASK.EXEC.RESULT；为空查全部）
     * @param filter (optional) 查询条件
     * @return Success
     */
    quick(sysTaskItemId: string | undefined, result: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysTaskHistoryViewResult> {
        let url_ = this.baseUrl + "/api/SysTaskHistory/Quick?";
        if (sysTaskItemId === null)
            throw new Error("The parameter 'sysTaskItemId' cannot be null.");
        else if (sysTaskItemId !== undefined)
            url_ += "sysTaskItemId=" + encodeURIComponent("" + sysTaskItemId) + "&";
        if (result === null)
            throw new Error("The parameter 'result' cannot be null.");
        else if (result !== undefined)
            url_ += "result=" + encodeURIComponent("" + result) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuick(_response));
        });
    }

    protected processQuick(response: AxiosResponse): Promise<SysTaskHistoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysTaskHistoryViewResult.fromJS(resultData200);
            return Promise.resolve<SysTaskHistoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysTaskHistoryViewResult>(null as any);
    }

    /**
     * hangfire 执行结果汇总查询
     * @param startDate (optional)
     * @param endDate (optional)
     * @param name (optional)
     * @param result (optional)
     * @param type (optional)
     * @param filter (optional)
     * @return Success
     */
    executeResult(startDate: string | undefined, endDate: string | undefined, name: string | undefined, result: string | undefined, type: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<TaskExecuteHistoryStatisticsViewResult> {
        let url_ = this.baseUrl + "/api/SysTaskHistory/ExecuteResult?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (result === null)
            throw new Error("The parameter 'result' cannot be null.");
        else if (result !== undefined)
            url_ += "result=" + encodeURIComponent("" + result) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExecuteResult(_response));
        });
    }

    protected processExecuteResult(response: AxiosResponse): Promise<TaskExecuteHistoryStatisticsViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TaskExecuteHistoryStatisticsViewResult.fromJS(resultData200);
            return Promise.resolve<TaskExecuteHistoryStatisticsViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TaskExecuteHistoryStatisticsViewResult>(null as any);
    }

    /**
     * 任务历史 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysTaskHistoryPOST2(body: SysTaskHistoryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysTaskHistory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysTaskHistoryPOST2(_response));
        });
    }

    protected processSysTaskHistoryPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 任务历史 -- 根据Id删除数据
     * @return Success
     */
    delete32(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysTaskHistory/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete32(_response));
        });
    }

    protected processDelete32(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysTaskItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 任务清单 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysTaskItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysTaskItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysTaskItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysTaskItemGET(_response));
        });
    }

    protected processSysTaskItemGET(response: AxiosResponse): Promise<SysTaskItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysTaskItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysTaskItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysTaskItemViewResultEntry>(null as any);
    }

    /**
     * 任务清单 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysTaskItemPOST(id: string, body: SysTaskItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysTaskItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysTaskItemPOST(_response));
        });
    }

    protected processSysTaskItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 任务清单 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter34(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysTaskItemViewResult> {
        let url_ = this.baseUrl + "/api/SysTaskItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter34(_response));
        });
    }

    protected processFilter34(response: AxiosResponse): Promise<SysTaskItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysTaskItemViewResult.fromJS(resultData200);
            return Promise.resolve<SysTaskItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysTaskItemViewResult>(null as any);
    }

    /**
     * 任务清单 -- 汇总
     * @return Success
     */
    static(  cancelToken?: CancelToken | undefined): Promise<SysTaskItemStaticsViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysTaskItem/Static";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStatic(_response));
        });
    }

    protected processStatic(response: AxiosResponse): Promise<SysTaskItemStaticsViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysTaskItemStaticsViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysTaskItemStaticsViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysTaskItemStaticsViewResultEntry>(null as any);
    }

    /**
     * 任务清单 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysTaskItemPOST2(body: SysTaskItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysTaskItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysTaskItemPOST2(_response));
        });
    }

    protected processSysTaskItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 任务清单 -- 根据Id删除数据
     * @return Success
     */
    delete33(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysTaskItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete33(_response));
        });
    }

    protected processDelete33(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 远程操作
     * @param id 任务清单标识
     * @param operate 操作值 字典Code为`DIC.TASK.OPERATE`
     * @param args (optional) 操作参数，当操作为修改参数是必填
     * @return Success
     */
    remoteOperate(id: string, operate: string, args: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysTaskItem/RemoteOperate/{id}/{operate}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (operate === undefined || operate === null)
            throw new Error("The parameter 'operate' must be defined.");
        url_ = url_.replace("{operate}", encodeURIComponent("" + operate));
        if (args === null)
            throw new Error("The parameter 'args' cannot be null.");
        else if (args !== undefined)
            url_ += "args=" + encodeURIComponent("" + args) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRemoteOperate(_response));
        });
    }

    protected processRemoteOperate(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 下载日志文件
     * @param id 任务ID
     * @param fileName 文件名
     * @return Success
     */
    downLogFile(id: string, fileName: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/SysTaskItem/DownLogFile/{id}/{fileName}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined.");
        url_ = url_.replace("{fileName}", encodeURIComponent("" + fileName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownLogFile(_response));
        });
    }

    protected processDownLogFile(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * 修改配置文件
     * @param id 任务ID
     * @param fileName 文件名
     * @return Success
     */
    editConfigGET(id: string, fileName: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysTaskItem/EditConfig/{id}/{fileName}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined.");
        url_ = url_.replace("{fileName}", encodeURIComponent("" + fileName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEditConfigGET(_response));
        });
    }

    protected processEditConfigGET(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 修改配置文件
     * @param id 任务ID
     * @param fileName 文件名
     * @param body (optional)
     * @return Success
     */
    editConfigPOST(id: string, fileName: string, body: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysTaskItem/EditConfig/{id}/{fileName}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined.");
        url_ = url_.replace("{fileName}", encodeURIComponent("" + fileName));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEditConfigPOST(_response));
        });
    }

    protected processEditConfigPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysTerminalServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 终端管理 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysTerminalGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysTerminalViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysTerminal/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysTerminalGET(_response));
        });
    }

    protected processSysTerminalGET(response: AxiosResponse): Promise<SysTerminalViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysTerminalViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysTerminalViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysTerminalViewResultEntry>(null as any);
    }

    /**
     * 终端管理 -- 下线
     * @return Success
     */
    sysTerminalPOST(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysTerminal/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysTerminalPOST(_response));
        });
    }

    protected processSysTerminalPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 终端管理 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/角色/工号/登录名/拼音码/五笔码/终端类型/终端IP/在线状态
     * @return Success
     */
    filter35(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysTerminalViewResult> {
        let url_ = this.baseUrl + "/api/SysTerminal/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter35(_response));
        });
    }

    protected processFilter35(response: AxiosResponse): Promise<SysTerminalViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysTerminalViewResult.fromJS(resultData200);
            return Promise.resolve<SysTerminalViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysTerminalViewResult>(null as any);
    }

    /**
     * 终端管理 -- Docker容器性能数据
     * @return Success
     */
    pM(  cancelToken?: CancelToken | undefined): Promise<DcokerPMViewResult> {
        let url_ = this.baseUrl + "/api/SysTerminal/Docker/PM";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPM(_response));
        });
    }

    protected processPM(response: AxiosResponse): Promise<DcokerPMViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DcokerPMViewResult.fromJS(resultData200);
            return Promise.resolve<DcokerPMViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DcokerPMViewResult>(null as any);
    }

    /**
     * 系统升级日志
     * @return Success
     */
    upgradeLog(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysTerminal/UpgradeLog";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpgradeLog(_response));
        });
    }

    protected processUpgradeLog(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysTodayCardServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 今日就诊卡片配置
     * @return Success
     */
    all3(  cancelToken?: CancelToken | undefined): Promise<SysTodayCardSummaryViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysTodayCard/All";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAll3(_response));
        });
    }

    protected processAll3(response: AxiosResponse): Promise<SysTodayCardSummaryViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysTodayCardSummaryViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysTodayCardSummaryViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysTodayCardSummaryViewResultEntry>(null as any);
    }

    /**
     * 今日就诊卡片配置
     * @param version (optional) 版本
     * @param body (optional) 今日就诊卡片配置
     * @return Success
     */
    batch3(version: number | undefined, body: SysTodayCardSummaryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysTodayCard/Batch?";
        if (version === null)
            throw new Error("The parameter 'version' cannot be null.");
        else if (version !== undefined)
            url_ += "version=" + encodeURIComponent("" + version) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch3(_response));
        });
    }

    protected processBatch3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 获取卡片样式
     * @param version 版本 0:老板 1:新版
     * @param init (optional) 是否初始化
     * @return Success
     */
    sysTodayCards(version: number, init: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<SysTodayCardSummaryViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysTodayCard/SysTodayCards/{version}?";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version));
        if (init === null)
            throw new Error("The parameter 'init' cannot be null.");
        else if (init !== undefined)
            url_ += "init=" + encodeURIComponent("" + init) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysTodayCards(_response));
        });
    }

    protected processSysTodayCards(response: AxiosResponse): Promise<SysTodayCardSummaryViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysTodayCardSummaryViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysTodayCardSummaryViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysTodayCardSummaryViewResultEntry>(null as any);
    }
}

export class SysUserServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 用户信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysUserGET3(id: string , cancelToken?: CancelToken | undefined): Promise<SysUserViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysUser/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserGET3(_response));
        });
    }

    protected processSysUserGET3(response: AxiosResponse): Promise<SysUserViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysUserViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysUserViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysUserViewResultEntry>(null as any);
    }

    /**
     * 用户信息 -- 更新数据(模块：系统管理-用户管理)
     * @param body (optional)
     * @return Success
     */
    sysUserPOST2(id: string, body: SysUserEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUser/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserPOST2(_response));
        });
    }

    protected processSysUserPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 用户信息 -- 根据条件查询数据（其他模块快速查询使用）
     * @param filter (optional) 查询条件
     * @param key (optional) 拼音首字母/五笔码/拼音/工号/登录名/姓名 *选填
     * @return Success
     */
    filter36(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysUserQuickViewResult> {
        let url_ = this.baseUrl + "/api/SysUser/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter36(_response));
        });
    }

    protected processFilter36(response: AxiosResponse): Promise<SysUserQuickViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysUserQuickViewResult.fromJS(resultData200);
            return Promise.resolve<SysUserQuickViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysUserQuickViewResult>(null as any);
    }

    /**
     * 用户信息 -- 根据院区Id查询用户信息(模块：系统管理-用户管理)
     * @param sysHospitalAreaId 院区
     * @param sysRoleIds (optional) 角色集合
     * @param filter (optional) 查询条件
     * @param key (optional) 工号/登录名/姓名/拼音首字母/五笔码/拼音 *选填
     * @param isAll (optional) 查询全部包括管理员
     * @return Success
     */
    getSysUserBySysHospitalAreaId(sysHospitalAreaId: string, sysRoleIds: string | undefined, filter: string | undefined, key: string | undefined, isAll: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<SysUserViewResult> {
        let url_ = this.baseUrl + "/api/SysUser/BySysHospitalAreaId/{sysHospitalAreaId}?";
        if (sysHospitalAreaId === undefined || sysHospitalAreaId === null)
            throw new Error("The parameter 'sysHospitalAreaId' must be defined.");
        url_ = url_.replace("{sysHospitalAreaId}", encodeURIComponent("" + sysHospitalAreaId));
        if (sysRoleIds === null)
            throw new Error("The parameter 'sysRoleIds' cannot be null.");
        else if (sysRoleIds !== undefined)
            url_ += "sysRoleIds=" + encodeURIComponent("" + sysRoleIds) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (isAll === null)
            throw new Error("The parameter 'isAll' cannot be null.");
        else if (isAll !== undefined)
            url_ += "isAll=" + encodeURIComponent("" + isAll) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSysUserBySysHospitalAreaId(_response));
        });
    }

    protected processGetSysUserBySysHospitalAreaId(response: AxiosResponse): Promise<SysUserViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysUserViewResult.fromJS(resultData200);
            return Promise.resolve<SysUserViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysUserViewResult>(null as any);
    }

    /**
     * 用户信息 -- 新增用户数据(模块：系统管理-用户管理)
     * @param body (optional)
     * @return Success
     */
    sysUserPOST3(body: SysUserEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserPOST3(_response));
        });
    }

    protected processSysUserPOST3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 重置密码 - 批量
     * @param body (optional) 用户标识
     * @return Success
     */
    resetPwd(body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUser/ResetPwd";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processResetPwd(_response));
        });
    }

    protected processResetPwd(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 修改密码
     * @param id 用户标识
     * @param body (optional)
     * @return Success
     */
    updatePwd(id: string, body: SysUserUpdatePwdEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUser/{id}/UpdatePwd";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdatePwd(_response));
        });
    }

    protected processUpdatePwd(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 用户信息 -- 根据Id删除数据
     * @return Success
     */
    delete34(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUser/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete34(_response));
        });
    }

    protected processDelete34(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysUserHospitalServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 用户院区信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysUserHospitalGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysUserHospitalResultEntry> {
        let url_ = this.baseUrl + "/api/SysUserHospital/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserHospitalGET(_response));
        });
    }

    protected processSysUserHospitalGET(response: AxiosResponse): Promise<SysUserHospitalResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysUserHospitalResultEntry.fromJS(resultData200);
            return Promise.resolve<SysUserHospitalResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysUserHospitalResultEntry>(null as any);
    }

    /**
     * 用户院区信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysUserHospitalPOST(id: string, body: SysUserHospitalViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUserHospital/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserHospitalPOST(_response));
        });
    }

    protected processSysUserHospitalPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 用户院区信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter37(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysUserHospitalResult> {
        let url_ = this.baseUrl + "/api/SysUserHospital/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter37(_response));
        });
    }

    protected processFilter37(response: AxiosResponse): Promise<SysUserHospitalResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysUserHospitalResult.fromJS(resultData200);
            return Promise.resolve<SysUserHospitalResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysUserHospitalResult>(null as any);
    }

    /**
     * 用户院区信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysUserHospitalPOST2(body: SysUserHospitalViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUserHospital";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserHospitalPOST2(_response));
        });
    }

    protected processSysUserHospitalPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 用户院区信息 -- 根据Id删除数据
     * @return Success
     */
    delete35(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUserHospital/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete35(_response));
        });
    }

    protected processDelete35(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysUserLoginServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 用户登录日志记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysUserLoginGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysUserLoginViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysUserLogin/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserLoginGET(_response));
        });
    }

    protected processSysUserLoginGET(response: AxiosResponse): Promise<SysUserLoginViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysUserLoginViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysUserLoginViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysUserLoginViewResultEntry>(null as any);
    }

    /**
     * 用户登录日志记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysUserLoginPOST(id: string, body: SysUserLoginEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUserLogin/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserLoginPOST(_response));
        });
    }

    protected processSysUserLoginPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 用户登录日志记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter38(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysUserLoginViewResult> {
        let url_ = this.baseUrl + "/api/SysUserLogin/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter38(_response));
        });
    }

    protected processFilter38(response: AxiosResponse): Promise<SysUserLoginViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysUserLoginViewResult.fromJS(resultData200);
            return Promise.resolve<SysUserLoginViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysUserLoginViewResult>(null as any);
    }

    /**
     * 用户登录日志记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysUserLoginPOST2(body: SysUserLoginEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUserLogin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserLoginPOST2(_response));
        });
    }

    protected processSysUserLoginPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 用户登录日志记录 -- 根据Id删除数据
     * @return Success
     */
    delete36(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUserLogin/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete36(_response));
        });
    }

    protected processDelete36(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysUserRoleServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 用户角色 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysUserRoleGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysUserRoleResultEntry> {
        let url_ = this.baseUrl + "/api/SysUserRole/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserRoleGET(_response));
        });
    }

    protected processSysUserRoleGET(response: AxiosResponse): Promise<SysUserRoleResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysUserRoleResultEntry.fromJS(resultData200);
            return Promise.resolve<SysUserRoleResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysUserRoleResultEntry>(null as any);
    }

    /**
     * 用户角色 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysUserRolePOST(id: string, body: SysUserRoleViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUserRole/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserRolePOST(_response));
        });
    }

    protected processSysUserRolePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 用户角色 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter39(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysUserRoleResult> {
        let url_ = this.baseUrl + "/api/SysUserRole/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter39(_response));
        });
    }

    protected processFilter39(response: AxiosResponse): Promise<SysUserRoleResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysUserRoleResult.fromJS(resultData200);
            return Promise.resolve<SysUserRoleResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysUserRoleResult>(null as any);
    }

    /**
     * 用户角色 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysUserRolePOST2(body: SysUserRoleViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUserRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserRolePOST2(_response));
        });
    }

    protected processSysUserRolePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 用户角色 -- 根据Id删除数据
     * @return Success
     */
    delete37(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUserRole/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete37(_response));
        });
    }

    protected processDelete37(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysUserSettingServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 用户配置 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysUserSettingGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysUserSettingViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysUserSetting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserSettingGET(_response));
        });
    }

    protected processSysUserSettingGET(response: AxiosResponse): Promise<SysUserSettingViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysUserSettingViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysUserSettingViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysUserSettingViewResultEntry>(null as any);
    }

    /**
     * 用户配置 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter40(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysUserSettingViewResult> {
        let url_ = this.baseUrl + "/api/SysUserSetting/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter40(_response));
        });
    }

    protected processFilter40(response: AxiosResponse): Promise<SysUserSettingViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysUserSettingViewResult.fromJS(resultData200);
            return Promise.resolve<SysUserSettingViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysUserSettingViewResult>(null as any);
    }

    /**
     * 用户配置 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysUserSettingPOST(body: SysUserSettingEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUserSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserSettingPOST(_response));
        });
    }

    protected processSysUserSettingPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 更新或添加
     * @param value (optional)
     * @return Success
     */
    sysUserSettingPOST2(code: string, value: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUserSetting/{code}?";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysUserSettingPOST2(_response));
        });
    }

    protected processSysUserSettingPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 用户配置 -- 根据Id删除数据
     * @return Success
     */
    delete38(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysUserSetting/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete38(_response));
        });
    }

    protected processDelete38(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

/** 级联查询展现 */
export class AreaTreeView implements IAreaTreeView {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 父节点标识 */
    parentId?: string | undefined;
    /** 分类标识(0:透析室 1:透析分区) */
    type?: number;
    /** 是否阳性分区0,1 */
    positive?: number;

    constructor(data?: IAreaTreeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.sequence = _data["sequence"];
            this.parentId = _data["parentId"];
            this.type = _data["type"];
            this.positive = _data["positive"];
        }
    }

    static fromJS(data: any): AreaTreeView {
        data = typeof data === 'object' ? data : {};
        let result = new AreaTreeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["sequence"] = this.sequence;
        data["parentId"] = this.parentId;
        data["type"] = this.type;
        data["positive"] = this.positive;
        return data;
    }
}

/** 级联查询展现 */
export interface IAreaTreeView {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 父节点标识 */
    parentId?: string | undefined;
    /** 分类标识(0:透析室 1:透析分区) */
    type?: number;
    /** 是否阳性分区0,1 */
    positive?: number;
}

/** Reponse */
export class AreaTreeViewResult implements IAreaTreeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AreaTreeView[] | undefined;

    constructor(data?: IAreaTreeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AreaTreeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AreaTreeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new AreaTreeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IAreaTreeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AreaTreeView[] | undefined;
}

/** 透中事件 */
export class ComplicationIndexView implements IComplicationIndexView {
    /** 日期 */
    date?: string | undefined;
    /** 明细 */
    complicationDetails?: ItemIndexView[] | undefined;

    constructor(data?: IComplicationIndexView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            if (Array.isArray(_data["complicationDetails"])) {
                this.complicationDetails = [] as any;
                for (let item of _data["complicationDetails"])
                    this.complicationDetails!.push(ItemIndexView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ComplicationIndexView {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationIndexView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        if (Array.isArray(this.complicationDetails)) {
            data["complicationDetails"] = [];
            for (let item of this.complicationDetails)
                data["complicationDetails"].push(item.toJSON());
        }
        return data;
    }
}

/** 透中事件 */
export interface IComplicationIndexView {
    /** 日期 */
    date?: string | undefined;
    /** 明细 */
    complicationDetails?: ItemIndexView[] | undefined;
}

/** Reponse */
export class ComplicationIndexViewResult implements IComplicationIndexViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ComplicationIndexView[] | undefined;

    constructor(data?: IComplicationIndexViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ComplicationIndexView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ComplicationIndexViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationIndexViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IComplicationIndexViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ComplicationIndexView[] | undefined;
}

export class DaLongtermExcelView implements IDaLongtermExcelView {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 开立医生 */
    doctorName?: string | undefined;
    /** 开立时间 */
    doctorCreatTime?: dayjs.Dayjs;
    /** 医嘱类型`DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 文字医嘱内容 */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 用法`DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    interval?: string | undefined;
    /** 自备药0,1 */
    owned?: number;
    /** 透中医嘱0,1 */
    dialysis?: number;
    /** 停止日期 */
    endDate?: dayjs.Dayjs | undefined;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekday?: string | undefined;

    constructor(data?: IDaLongtermExcelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.doctorName = _data["doctorName"];
            this.doctorCreatTime = _data["doctorCreatTime"] ? dayjs(_data["doctorCreatTime"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.name = _data["name"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.interval = _data["interval"];
            this.owned = _data["owned"];
            this.dialysis = _data["dialysis"];
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
        }
    }

    static fromJS(data: any): DaLongtermExcelView {
        data = typeof data === 'object' ? data : {};
        let result = new DaLongtermExcelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["doctorName"] = this.doctorName;
        data["doctorCreatTime"] = this.doctorCreatTime ? this.doctorCreatTime.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["name"] = this.name;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["interval"] = this.interval;
        data["owned"] = this.owned;
        data["dialysis"] = this.dialysis;
        data["endDate"] = this.endDate ? this.endDate.toLocaleString() : <any>undefined;
        data["weekday"] = this.weekday;
        return data;
    }
}

export interface IDaLongtermExcelView {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 开立医生 */
    doctorName?: string | undefined;
    /** 开立时间 */
    doctorCreatTime?: dayjs.Dayjs;
    /** 医嘱类型`DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 文字医嘱内容 */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 用法`DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` *默认带出项目基本单位* */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 频次 `DIC.DA.INTERVAL` */
    interval?: string | undefined;
    /** 自备药0,1 */
    owned?: number;
    /** 透中医嘱0,1 */
    dialysis?: number;
    /** 停止日期 */
    endDate?: dayjs.Dayjs | undefined;
    /** 周执行 `DIC.DA.WEEKDAY` *多个用`;`分隔* */
    weekday?: string | undefined;
}

/** Reponse */
export class DaLongtermExcelViewResult implements IDaLongtermExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DaLongtermExcelView[] | undefined;

    constructor(data?: IDaLongtermExcelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DaLongtermExcelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DaLongtermExcelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DaLongtermExcelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDaLongtermExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DaLongtermExcelView[] | undefined;
}

export class DcokerPMView implements IDcokerPMView {
    /** 容器ID */
    containerId?: string | undefined;
    /** 容器名称 */
    name?: string | undefined;
    /** CPU使用率 */
    cpu?: string | undefined;
    /** 内存 */
    memUsage?: string | undefined;
    /** 内存使用率 */
    mem?: string | undefined;
    /** 网络使用情况(I/O) */
    net?: string | undefined;
    /** 磁盘使用情况(I/O) */
    block?: string | undefined;
    /** 线程数量 */
    pids?: string | undefined;

    constructor(data?: IDcokerPMView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.containerId = _data["containerId"];
            this.name = _data["name"];
            this.cpu = _data["cpu"];
            this.memUsage = _data["memUsage"];
            this.mem = _data["mem"];
            this.net = _data["net"];
            this.block = _data["block"];
            this.pids = _data["pids"];
        }
    }

    static fromJS(data: any): DcokerPMView {
        data = typeof data === 'object' ? data : {};
        let result = new DcokerPMView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["containerId"] = this.containerId;
        data["name"] = this.name;
        data["cpu"] = this.cpu;
        data["memUsage"] = this.memUsage;
        data["mem"] = this.mem;
        data["net"] = this.net;
        data["block"] = this.block;
        data["pids"] = this.pids;
        return data;
    }
}

export interface IDcokerPMView {
    /** 容器ID */
    containerId?: string | undefined;
    /** 容器名称 */
    name?: string | undefined;
    /** CPU使用率 */
    cpu?: string | undefined;
    /** 内存 */
    memUsage?: string | undefined;
    /** 内存使用率 */
    mem?: string | undefined;
    /** 网络使用情况(I/O) */
    net?: string | undefined;
    /** 磁盘使用情况(I/O) */
    block?: string | undefined;
    /** 线程数量 */
    pids?: string | undefined;
}

/** Reponse */
export class DcokerPMViewResult implements IDcokerPMViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DcokerPMView[] | undefined;

    constructor(data?: IDcokerPMViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DcokerPMView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DcokerPMViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DcokerPMViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDcokerPMViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DcokerPMView[] | undefined;
}

/** 从Excel 导入设备信息表所需的视图类 */
export class DeptDialysisAreaExcelView implements IDeptDialysisAreaExcelView {
    /** 名称 */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 类型 - 显示值 */
    typeLabel?: string | undefined;
    /** 阳性分区 是否阳性0,1 */
    positive?: number;
    /** 阳性分区 */
    positiveLabel?: string | undefined;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 启用状态 - 展示值 */
    enabledLabel?: string | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;

    constructor(data?: IDeptDialysisAreaExcelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.positive = _data["positive"];
            this.positiveLabel = _data["positiveLabel"];
            this.bedMax = _data["bedMax"];
            this.enabled = _data["enabled"];
            this.enabledLabel = _data["enabledLabel"];
            this.build = _data["build"];
            this.floor = _data["floor"];
        }
    }

    static fromJS(data: any): DeptDialysisAreaExcelView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisAreaExcelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["positive"] = this.positive;
        data["positiveLabel"] = this.positiveLabel;
        data["bedMax"] = this.bedMax;
        data["enabled"] = this.enabled;
        data["enabledLabel"] = this.enabledLabel;
        data["build"] = this.build;
        data["floor"] = this.floor;
        return data;
    }
}

/** 从Excel 导入设备信息表所需的视图类 */
export interface IDeptDialysisAreaExcelView {
    /** 名称 */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 类型 - 显示值 */
    typeLabel?: string | undefined;
    /** 阳性分区 是否阳性0,1 */
    positive?: number;
    /** 阳性分区 */
    positiveLabel?: string | undefined;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 启用状态 - 展示值 */
    enabledLabel?: string | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
}

/** Reponse */
export class DeptDialysisAreaExcelViewResult implements IDeptDialysisAreaExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisAreaExcelView[] | undefined;

    constructor(data?: IDeptDialysisAreaExcelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptDialysisAreaExcelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptDialysisAreaExcelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisAreaExcelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisAreaExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisAreaExcelView[] | undefined;
}

/** 从 Excel 导入 设备信息 表所需的视图类 */
export class DevInfoExcelView implements IDevInfoExcelView {
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备类型 - 显示值 */
    typeLabel?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positiveStr?: string | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    readonly positive?: number;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 病情类型 - 显示值 */
    diseaseTypeLabel?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 设备状态 - 显示值 */
    statusLabel?: string | undefined;
    /** 使用科室 */
    department?: string | undefined;

    constructor(data?: IDevInfoExcelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.model = _data["model"];
            this.sn = _data["sn"];
            this.ip = _data["ip"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.dealer = _data["dealer"];
            this.dateUsed = _data["dateUsed"] ? dayjs(_data["dateUsed"].toString()) : <any>undefined;
            this.dateWarranty = _data["dateWarranty"] ? dayjs(_data["dateWarranty"].toString()) : <any>undefined;
            this.positiveStr = _data["positiveStr"];
            (<any>this).positive = _data["positive"];
            this.sphygmomanometerCuff = _data["sphygmomanometerCuff"];
            this.diseaseType = _data["diseaseType"];
            this.diseaseTypeLabel = _data["diseaseTypeLabel"];
            this.location = _data["location"];
            this.remark = _data["remark"];
            this.status = _data["status"];
            this.statusLabel = _data["statusLabel"];
            this.department = _data["department"];
        }
    }

    static fromJS(data: any): DevInfoExcelView {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoExcelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["model"] = this.model;
        data["sn"] = this.sn;
        data["ip"] = this.ip;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toLocaleString() : <any>undefined;
        data["dealer"] = this.dealer;
        data["dateUsed"] = this.dateUsed ? this.dateUsed.toLocaleString() : <any>undefined;
        data["dateWarranty"] = this.dateWarranty ? this.dateWarranty.toLocaleString() : <any>undefined;
        data["positiveStr"] = this.positiveStr;
        data["positive"] = this.positive;
        data["sphygmomanometerCuff"] = this.sphygmomanometerCuff;
        data["diseaseType"] = this.diseaseType;
        data["diseaseTypeLabel"] = this.diseaseTypeLabel;
        data["location"] = this.location;
        data["remark"] = this.remark;
        data["status"] = this.status;
        data["statusLabel"] = this.statusLabel;
        data["department"] = this.department;
        return data;
    }
}

/** 从 Excel 导入 设备信息 表所需的视图类 */
export interface IDevInfoExcelView {
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备类型 - 显示值 */
    typeLabel?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positiveStr?: string | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive?: number;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 病情类型 - 显示值 */
    diseaseTypeLabel?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 设备状态 - 显示值 */
    statusLabel?: string | undefined;
    /** 使用科室 */
    department?: string | undefined;
}

/** Reponse */
export class DevInfoExcelViewResult implements IDevInfoExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevInfoExcelView[] | undefined;

    constructor(data?: IDevInfoExcelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevInfoExcelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevInfoExcelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoExcelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevInfoExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevInfoExcelView[] | undefined;
}

/** 透析床位Excel导入 */
export class DialysisBedExcelView implements IDialysisBedExcelView {
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 启用状态 - 展示值 */
    enabledLabel?: string | undefined;
    /** [透析区间](#透析区间) */
    deptDialysisAreaName?: string | undefined;
    /** 使用科室 */
    sysHospitalAreaName?: string | undefined;
    /** [设备标识](科室设备Id) */
    devInfoCode?: string | undefined;

    constructor(data?: IDialysisBedExcelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.enabled = _data["enabled"];
            this.enabledLabel = _data["enabledLabel"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
            this.devInfoCode = _data["devInfoCode"];
        }
    }

    static fromJS(data: any): DialysisBedExcelView {
        data = typeof data === 'object' ? data : {};
        let result = new DialysisBedExcelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["enabled"] = this.enabled;
        data["enabledLabel"] = this.enabledLabel;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        data["devInfoCode"] = this.devInfoCode;
        return data;
    }
}

/** 透析床位Excel导入 */
export interface IDialysisBedExcelView {
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 启用状态 - 展示值 */
    enabledLabel?: string | undefined;
    /** [透析区间](#透析区间) */
    deptDialysisAreaName?: string | undefined;
    /** 使用科室 */
    sysHospitalAreaName?: string | undefined;
    /** [设备标识](科室设备Id) */
    devInfoCode?: string | undefined;
}

/** Reponse */
export class DialysisBedExcelViewResult implements IDialysisBedExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DialysisBedExcelView[] | undefined;

    constructor(data?: IDialysisBedExcelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DialysisBedExcelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DialysisBedExcelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DialysisBedExcelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDialysisBedExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DialysisBedExcelView[] | undefined;
}

/** 宣教内容 */
export class HealthEducationFileView implements IHealthEducationFileView {
    /** 内容名称 */
    educationName?: string | undefined;
    /** 文件路径 */
    fileUrl?: string | undefined;
    /** 文件类型 */
    fileType?: string | undefined;
    /** 文本内容 */
    content?: string | undefined;

    constructor(data?: IHealthEducationFileView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.educationName = _data["educationName"];
            this.fileUrl = _data["fileUrl"];
            this.fileType = _data["fileType"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): HealthEducationFileView {
        data = typeof data === 'object' ? data : {};
        let result = new HealthEducationFileView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["educationName"] = this.educationName;
        data["fileUrl"] = this.fileUrl;
        data["fileType"] = this.fileType;
        data["content"] = this.content;
        return data;
    }
}

/** 宣教内容 */
export interface IHealthEducationFileView {
    /** 内容名称 */
    educationName?: string | undefined;
    /** 文件路径 */
    fileUrl?: string | undefined;
    /** 文件类型 */
    fileType?: string | undefined;
    /** 文本内容 */
    content?: string | undefined;
}

/** 宣教内容明细 */
export class HealthEducationItem implements IHealthEducationItem {
    /** 唯一标识 */
    id?: string | undefined;
    /** 封面 */
    cover?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 类型 */
    type?: string | undefined;
    /** 文件明细 */
    files?: HealthEducationItemFile[] | undefined;

    constructor(data?: IHealthEducationItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cover = _data["cover"];
            this.name = _data["name"];
            this.content = _data["content"];
            this.type = _data["type"];
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(HealthEducationItemFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HealthEducationItem {
        data = typeof data === 'object' ? data : {};
        let result = new HealthEducationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cover"] = this.cover;
        data["name"] = this.name;
        data["content"] = this.content;
        data["type"] = this.type;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        return data;
    }
}

/** 宣教内容明细 */
export interface IHealthEducationItem {
    /** 唯一标识 */
    id?: string | undefined;
    /** 封面 */
    cover?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 类型 */
    type?: string | undefined;
    /** 文件明细 */
    files?: HealthEducationItemFile[] | undefined;
}

/** 文件明细 */
export class HealthEducationItemFile implements IHealthEducationItemFile {
    /** 名称 */
    name?: string | undefined;
    /** 路径 */
    url?: string | undefined;
    /** 类型 */
    extension?: string | undefined;

    constructor(data?: IHealthEducationItemFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.url = _data["url"];
            this.extension = _data["extension"];
        }
    }

    static fromJS(data: any): HealthEducationItemFile {
        data = typeof data === 'object' ? data : {};
        let result = new HealthEducationItemFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        data["extension"] = this.extension;
        return data;
    }
}

/** 文件明细 */
export interface IHealthEducationItemFile {
    /** 名称 */
    name?: string | undefined;
    /** 路径 */
    url?: string | undefined;
    /** 类型 */
    extension?: string | undefined;
}

/** 首页 */
export class IndexView implements IIndexView {
    patientIndex?: PatientIndexView;
    shiftIndex?: ShiftIndexView;
    todayCureIndex?: TodayCureIndexView;
    /** 血管通路 */
    vascularAccessIndices?: VascularAccessIndexView[] | undefined;
    /** 透中事件 */
    complicationIndices?: ComplicationIndexView[] | undefined;
    /** 在透患者疾病相关并发症 */
    onPatientComplicationIndices?: OnPatientComplicationIndexView[] | undefined;

    constructor(data?: IIndexView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientIndex = _data["patientIndex"] ? PatientIndexView.fromJS(_data["patientIndex"]) : <any>undefined;
            this.shiftIndex = _data["shiftIndex"] ? ShiftIndexView.fromJS(_data["shiftIndex"]) : <any>undefined;
            this.todayCureIndex = _data["todayCureIndex"] ? TodayCureIndexView.fromJS(_data["todayCureIndex"]) : <any>undefined;
            if (Array.isArray(_data["vascularAccessIndices"])) {
                this.vascularAccessIndices = [] as any;
                for (let item of _data["vascularAccessIndices"])
                    this.vascularAccessIndices!.push(VascularAccessIndexView.fromJS(item));
            }
            if (Array.isArray(_data["complicationIndices"])) {
                this.complicationIndices = [] as any;
                for (let item of _data["complicationIndices"])
                    this.complicationIndices!.push(ComplicationIndexView.fromJS(item));
            }
            if (Array.isArray(_data["onPatientComplicationIndices"])) {
                this.onPatientComplicationIndices = [] as any;
                for (let item of _data["onPatientComplicationIndices"])
                    this.onPatientComplicationIndices!.push(OnPatientComplicationIndexView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IndexView {
        data = typeof data === 'object' ? data : {};
        let result = new IndexView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientIndex"] = this.patientIndex ? this.patientIndex.toJSON() : <any>undefined;
        data["shiftIndex"] = this.shiftIndex ? this.shiftIndex.toJSON() : <any>undefined;
        data["todayCureIndex"] = this.todayCureIndex ? this.todayCureIndex.toJSON() : <any>undefined;
        if (Array.isArray(this.vascularAccessIndices)) {
            data["vascularAccessIndices"] = [];
            for (let item of this.vascularAccessIndices)
                data["vascularAccessIndices"].push(item.toJSON());
        }
        if (Array.isArray(this.complicationIndices)) {
            data["complicationIndices"] = [];
            for (let item of this.complicationIndices)
                data["complicationIndices"].push(item.toJSON());
        }
        if (Array.isArray(this.onPatientComplicationIndices)) {
            data["onPatientComplicationIndices"] = [];
            for (let item of this.onPatientComplicationIndices)
                data["onPatientComplicationIndices"].push(item.toJSON());
        }
        return data;
    }
}

/** 首页 */
export interface IIndexView {
    patientIndex?: PatientIndexView;
    shiftIndex?: ShiftIndexView;
    todayCureIndex?: TodayCureIndexView;
    /** 血管通路 */
    vascularAccessIndices?: VascularAccessIndexView[] | undefined;
    /** 透中事件 */
    complicationIndices?: ComplicationIndexView[] | undefined;
    /** 在透患者疾病相关并发症 */
    onPatientComplicationIndices?: OnPatientComplicationIndexView[] | undefined;
}

/** Reponse */
export class IndexViewResultEntry implements IIndexViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IndexView;

    constructor(data?: IIndexViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? IndexView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IndexViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new IndexViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IIndexViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IndexView;
}

/** 公共 */
export class ItemIndexView implements IItemIndexView {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IItemIndexView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): ItemIndexView {
        data = typeof data === 'object' ? data : {};
        let result = new ItemIndexView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["count"] = this.count;
        return data;
    }
}

/** 公共 */
export interface IItemIndexView {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
}

/** 大屏数据预览 */
export class LargeScreenCustomView implements ILargeScreenCustomView {
    /** 序号 */
    sort?: number;
    /** 透析区间序列 */
    areaSequence?: number;
    /** 床位序列 */
    bedSequence?: number;
    /** 排床记录标识 */
    scheduleDialysisId?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者 - 是否阳性0,1 *编辑诊断-传染病时管理这个状态* */
    positive?: number | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析床位 */
    bedName?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 签到时间 */
    signOn?: dayjs.Dayjs | undefined;
    /** 上机时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 预脱 */
    ufg?: number | undefined;
    /** 流程状态 */
    status?: string | undefined;
    /** 下次透析日期 */
    nextDialysisDate?: dayjs.Dayjs | undefined;
    /** 下次透析班次名称 */
    nextShiftName?: string | undefined;
    /** 透析剩余时间 (HH:mm) */
    timeLeft?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;

    constructor(data?: ILargeScreenCustomView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sort = _data["sort"];
            this.areaSequence = _data["areaSequence"];
            this.bedSequence = _data["bedSequence"];
            this.scheduleDialysisId = _data["scheduleDialysisId"];
            this.cureRecordId = _data["cureRecordId"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.positive = _data["positive"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedName = _data["bedName"];
            this.bedId = _data["bedId"];
            this.signOn = _data["signOn"] ? dayjs(_data["signOn"].toString()) : <any>undefined;
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.ufg = _data["ufg"];
            this.status = _data["status"];
            this.nextDialysisDate = _data["nextDialysisDate"] ? dayjs(_data["nextDialysisDate"].toString()) : <any>undefined;
            this.nextShiftName = _data["nextShiftName"];
            this.timeLeft = _data["timeLeft"];
            this.dialysisMode = _data["dialysisMode"];
        }
    }

    static fromJS(data: any): LargeScreenCustomView {
        data = typeof data === 'object' ? data : {};
        let result = new LargeScreenCustomView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sort"] = this.sort;
        data["areaSequence"] = this.areaSequence;
        data["bedSequence"] = this.bedSequence;
        data["scheduleDialysisId"] = this.scheduleDialysisId;
        data["cureRecordId"] = this.cureRecordId;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["positive"] = this.positive;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedName"] = this.bedName;
        data["bedId"] = this.bedId;
        data["signOn"] = this.signOn ? this.signOn.toLocaleString() : <any>undefined;
        data["timeOn"] = this.timeOn ? this.timeOn.toLocaleString() : <any>undefined;
        data["ufg"] = this.ufg;
        data["status"] = this.status;
        data["nextDialysisDate"] = this.nextDialysisDate ? this.nextDialysisDate.toLocaleString() : <any>undefined;
        data["nextShiftName"] = this.nextShiftName;
        data["timeLeft"] = this.timeLeft;
        data["dialysisMode"] = this.dialysisMode;
        return data;
    }
}

/** 大屏数据预览 */
export interface ILargeScreenCustomView {
    /** 序号 */
    sort?: number;
    /** 透析区间序列 */
    areaSequence?: number;
    /** 床位序列 */
    bedSequence?: number;
    /** 排床记录标识 */
    scheduleDialysisId?: string | undefined;
    /** 透析记录标识 */
    cureRecordId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者 - 是否阳性0,1 *编辑诊断-传染病时管理这个状态* */
    positive?: number | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析床位 */
    bedName?: string | undefined;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 签到时间 */
    signOn?: dayjs.Dayjs | undefined;
    /** 上机时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 预脱 */
    ufg?: number | undefined;
    /** 流程状态 */
    status?: string | undefined;
    /** 下次透析日期 */
    nextDialysisDate?: dayjs.Dayjs | undefined;
    /** 下次透析班次名称 */
    nextShiftName?: string | undefined;
    /** 透析剩余时间 (HH:mm) */
    timeLeft?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
}

/** 大屏数据展现 */
export class LargeScreenView implements ILargeScreenView {
    /** 系统名称 */
    systemName?: string | undefined;
    /** 医院名称 */
    hospitalName?: string | undefined;
    /** 医院LOGO路径 */
    hospitalLogo?: string | undefined;
    /** 大屏显示比例 */
    screenScale?: string | undefined;
    /** 显示比例 */
    scale?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 星期 */
    weekday?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 脱水单位 */
    ufUnit?: string | undefined;
    conf?: SysLargeScreenConf;
    /** 大屏数据 -- 类型为排床时有数据 */
    data?: LargeScreenCustomView[] | undefined;
    /** 宣教数据 -- 类型为宣教时有数据 */
    healthEducationItems?: HealthEducationFileView[] | undefined;

    constructor(data?: ILargeScreenView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.systemName = _data["systemName"];
            this.hospitalName = _data["hospitalName"];
            this.hospitalLogo = _data["hospitalLogo"];
            this.screenScale = _data["screenScale"];
            this.scale = _data["scale"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
            this.shiftName = _data["shiftName"];
            this.ufUnit = _data["ufUnit"];
            this.conf = _data["conf"] ? SysLargeScreenConf.fromJS(_data["conf"]) : <any>undefined;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(LargeScreenCustomView.fromJS(item));
            }
            if (Array.isArray(_data["healthEducationItems"])) {
                this.healthEducationItems = [] as any;
                for (let item of _data["healthEducationItems"])
                    this.healthEducationItems!.push(HealthEducationFileView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LargeScreenView {
        data = typeof data === 'object' ? data : {};
        let result = new LargeScreenView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["systemName"] = this.systemName;
        data["hospitalName"] = this.hospitalName;
        data["hospitalLogo"] = this.hospitalLogo;
        data["screenScale"] = this.screenScale;
        data["scale"] = this.scale;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["weekday"] = this.weekday;
        data["shiftName"] = this.shiftName;
        data["ufUnit"] = this.ufUnit;
        data["conf"] = this.conf ? this.conf.toJSON() : <any>undefined;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.healthEducationItems)) {
            data["healthEducationItems"] = [];
            for (let item of this.healthEducationItems)
                data["healthEducationItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 大屏数据展现 */
export interface ILargeScreenView {
    /** 系统名称 */
    systemName?: string | undefined;
    /** 医院名称 */
    hospitalName?: string | undefined;
    /** 医院LOGO路径 */
    hospitalLogo?: string | undefined;
    /** 大屏显示比例 */
    screenScale?: string | undefined;
    /** 显示比例 */
    scale?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 星期 */
    weekday?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 脱水单位 */
    ufUnit?: string | undefined;
    conf?: SysLargeScreenConf;
    /** 大屏数据 -- 类型为排床时有数据 */
    data?: LargeScreenCustomView[] | undefined;
    /** 宣教数据 -- 类型为宣教时有数据 */
    healthEducationItems?: HealthEducationFileView[] | undefined;
}

/** Reponse */
export class LargeScreenViewResultEntry implements ILargeScreenViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: LargeScreenView;

    constructor(data?: ILargeScreenViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? LargeScreenView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LargeScreenViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new LargeScreenViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ILargeScreenViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: LargeScreenView;
}

/** Reponse */
export class ObjectResultEntry implements IObjectResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: any | undefined;

    constructor(data?: IObjectResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): ObjectResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IObjectResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: any | undefined;
}

/** 在透患者疾病相关并发症 */
export class OnPatientComplicationIndexView implements IOnPatientComplicationIndexView {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 比例 */
    ratio?: string | undefined;

    constructor(data?: IOnPatientComplicationIndexView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.count = _data["count"];
            this.ratio = _data["ratio"];
        }
    }

    static fromJS(data: any): OnPatientComplicationIndexView {
        data = typeof data === 'object' ? data : {};
        let result = new OnPatientComplicationIndexView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["count"] = this.count;
        data["ratio"] = this.ratio;
        return data;
    }
}

/** 在透患者疾病相关并发症 */
export interface IOnPatientComplicationIndexView {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 比例 */
    ratio?: string | undefined;
}

/** Reponse */
export class OnPatientComplicationIndexViewResult implements IOnPatientComplicationIndexViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: OnPatientComplicationIndexView[] | undefined;

    constructor(data?: IOnPatientComplicationIndexViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(OnPatientComplicationIndexView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OnPatientComplicationIndexViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new OnPatientComplicationIndexViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IOnPatientComplicationIndexViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: OnPatientComplicationIndexView[] | undefined;
}

/** 患者信息 */
export class Patient implements IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
    /** 附加照片路径 */
    photoAuxiliary?: string | undefined;

    constructor(data?: IPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.surnameCode = _data["surnameCode"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.photo = _data["photo"];
            this.face = _data["face"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.department = _data["department"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.archiveNumber = _data["archiveNumber"];
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.rh = _data["rh"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.educationalLevel = _data["educationalLevel"];
            this.profession = _data["profession"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisStateTransition = _data["dialysisStateTransition"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.prognosisState = _data["prognosisState"];
            this.positive = _data["positive"];
            this.complication = _data["complication"];
            this.doctor = _data["doctor"];
            this.nurse = _data["nurse"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisPathological = _data["diagnosisPathological"];
            this.diagnosisComplication = _data["diagnosisComplication"];
            this.diagnosisInfectiousDiseases = _data["diagnosisInfectiousDiseases"];
            this.diagnosisTumor = _data["diagnosisTumor"];
            this.diagnosisAllergy = _data["diagnosisAllergy"];
            this.remark = _data["remark"];
            this.initialSource = _data["initialSource"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.finger = _data["finger"];
            this.dossierNumber = _data["dossierNumber"];
            this.medicareCondition = _data["medicareCondition"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
            this.photoAuxiliary = _data["photoAuxiliary"];
        }
    }

    static fromJS(data: any): Patient {
        data = typeof data === 'object' ? data : {};
        let result = new Patient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["surnameCode"] = this.surnameCode;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["photo"] = this.photo;
        data["face"] = this.face;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["department"] = this.department;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["archiveNumber"] = this.archiveNumber;
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toLocaleString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["rh"] = this.rh;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["educationalLevel"] = this.educationalLevel;
        data["profession"] = this.profession;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toLocaleString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisStateTransition"] = this.dialysisStateTransition;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toLocaleString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["prognosisState"] = this.prognosisState;
        data["positive"] = this.positive;
        data["complication"] = this.complication;
        data["doctor"] = this.doctor;
        data["nurse"] = this.nurse;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisPathological"] = this.diagnosisPathological;
        data["diagnosisComplication"] = this.diagnosisComplication;
        data["diagnosisInfectiousDiseases"] = this.diagnosisInfectiousDiseases;
        data["diagnosisTumor"] = this.diagnosisTumor;
        data["diagnosisAllergy"] = this.diagnosisAllergy;
        data["remark"] = this.remark;
        data["initialSource"] = this.initialSource;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["finger"] = this.finger;
        data["dossierNumber"] = this.dossierNumber;
        data["medicareCondition"] = this.medicareCondition;
        data["nextDate"] = this.nextDate ? this.nextDate.toLocaleString() : <any>undefined;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        data["photoAuxiliary"] = this.photoAuxiliary;
        return data;
    }
}

/** 患者信息 */
export interface IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
    /** 附加照片路径 */
    photoAuxiliary?: string | undefined;
}

/** 从 Excel 导入 患者 表所需的视图类 */
export class PatientExcelView implements IPatientExcelView {
    /** 院区 */
    hospitalArea?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别 显示值 */
    genderLabel?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 来源 显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保类型 显示值 */
    medicareTypeLabel?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析卡号 */
    cardNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 民族 显示值 */
    nationalityLabel?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件类型 显示值 */
    idTypeLabel?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** 血型 显示值 */
    bloodTypeLabel?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** Rh 显示值 */
    rhLabel?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 婚否 显示值 */
    maritalLabel?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 并发症 */
    complication?: string | undefined;
    /** 文化程度 显示值 */
    educationalLevelLabel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 职业 显示值 */
    professionLabel?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态 显示值 */
    dialysisStateLabel?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PATIENT.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 转归状态 显示值 */
    prognosisStateLabel?: string | undefined;
    /** 是否阳性0,1 *编辑诊断-传染病时管理这个状态* */
    positive?: string | undefined;
    /** 是否阳性 */
    positiveLabel?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断 显示值 */
    diagnosisLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 与患者关系 */
    contactRelation?: string | undefined;
    /** 联系人姓名 */
    contactName?: string | undefined;
    /** 联系人移动电话 */
    contactPhone?: string | undefined;
    /** 联系人座机 */
    contactTel?: string | undefined;
    /** 联系人邮箱 */
    contactEmail?: string | undefined;
    /** 联系人省级 */
    contactProvince?: string | undefined;
    /** 联系人城市 */
    contactCity?: string | undefined;
    /** 联系人区县 */
    contactArea?: string | undefined;
    /** 联系人地址 */
    contactAddress?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs | undefined;
    /** 疾病种类 `DIC.DIAGNOSIS.ID.TYPE` *多选，用分号隔开* *丙肝;乙肝;艾滋病;梅毒;结核;其它* */
    type?: string | undefined;
    /** 疾病种类 - 显示值 */
    typeLabel?: string | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏替代治疗时血肌酐水平 */
    firstScr?: string | undefined;

    constructor(data?: IPatientExcelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hospitalArea = _data["hospitalArea"];
            this.name = _data["name"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.department = _data["department"];
            this.bed = _data["bed"];
            this.medicareType = _data["medicareType"];
            this.medicareTypeLabel = _data["medicareTypeLabel"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.cardNumber = _data["cardNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.nationalityLabel = _data["nationalityLabel"];
            this.idType = _data["idType"];
            this.idTypeLabel = _data["idTypeLabel"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.bloodTypeLabel = _data["bloodTypeLabel"];
            this.rh = _data["rh"];
            this.rhLabel = _data["rhLabel"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.maritalLabel = _data["maritalLabel"];
            this.educationalLevel = _data["educationalLevel"];
            this.complication = _data["complication"];
            this.educationalLevelLabel = _data["educationalLevelLabel"];
            this.profession = _data["profession"];
            this.professionLabel = _data["professionLabel"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisStateLabel = _data["dialysisStateLabel"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.prognosisState = _data["prognosisState"];
            this.prognosisStateLabel = _data["prognosisStateLabel"];
            this.positive = _data["positive"];
            this.positiveLabel = _data["positiveLabel"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisLabel = _data["diagnosisLabel"];
            this.remark = _data["remark"];
            this.contactRelation = _data["contactRelation"];
            this.contactName = _data["contactName"];
            this.contactPhone = _data["contactPhone"];
            this.contactTel = _data["contactTel"];
            this.contactEmail = _data["contactEmail"];
            this.contactProvince = _data["contactProvince"];
            this.contactCity = _data["contactCity"];
            this.contactArea = _data["contactArea"];
            this.contactAddress = _data["contactAddress"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
        }
    }

    static fromJS(data: any): PatientExcelView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientExcelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hospitalArea"] = this.hospitalArea;
        data["name"] = this.name;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["department"] = this.department;
        data["bed"] = this.bed;
        data["medicareType"] = this.medicareType;
        data["medicareTypeLabel"] = this.medicareTypeLabel;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["cardNumber"] = this.cardNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["nationalityLabel"] = this.nationalityLabel;
        data["idType"] = this.idType;
        data["idTypeLabel"] = this.idTypeLabel;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toLocaleString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["bloodTypeLabel"] = this.bloodTypeLabel;
        data["rh"] = this.rh;
        data["rhLabel"] = this.rhLabel;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["maritalLabel"] = this.maritalLabel;
        data["educationalLevel"] = this.educationalLevel;
        data["complication"] = this.complication;
        data["educationalLevelLabel"] = this.educationalLevelLabel;
        data["profession"] = this.profession;
        data["professionLabel"] = this.professionLabel;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toLocaleString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisStateLabel"] = this.dialysisStateLabel;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toLocaleString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["prognosisState"] = this.prognosisState;
        data["prognosisStateLabel"] = this.prognosisStateLabel;
        data["positive"] = this.positive;
        data["positiveLabel"] = this.positiveLabel;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisLabel"] = this.diagnosisLabel;
        data["remark"] = this.remark;
        data["contactRelation"] = this.contactRelation;
        data["contactName"] = this.contactName;
        data["contactPhone"] = this.contactPhone;
        data["contactTel"] = this.contactTel;
        data["contactEmail"] = this.contactEmail;
        data["contactProvince"] = this.contactProvince;
        data["contactCity"] = this.contactCity;
        data["contactArea"] = this.contactArea;
        data["contactAddress"] = this.contactAddress;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        return data;
    }
}

/** 从 Excel 导入 患者 表所需的视图类 */
export interface IPatientExcelView {
    /** 院区 */
    hospitalArea?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别 显示值 */
    genderLabel?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 来源 显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保类型 显示值 */
    medicareTypeLabel?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析卡号 */
    cardNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 民族 显示值 */
    nationalityLabel?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件类型 显示值 */
    idTypeLabel?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** 血型 显示值 */
    bloodTypeLabel?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** Rh 显示值 */
    rhLabel?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 婚否 显示值 */
    maritalLabel?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 并发症 */
    complication?: string | undefined;
    /** 文化程度 显示值 */
    educationalLevelLabel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 职业 显示值 */
    professionLabel?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态 显示值 */
    dialysisStateLabel?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PATIENT.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 转归状态 显示值 */
    prognosisStateLabel?: string | undefined;
    /** 是否阳性0,1 *编辑诊断-传染病时管理这个状态* */
    positive?: string | undefined;
    /** 是否阳性 */
    positiveLabel?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断 显示值 */
    diagnosisLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 与患者关系 */
    contactRelation?: string | undefined;
    /** 联系人姓名 */
    contactName?: string | undefined;
    /** 联系人移动电话 */
    contactPhone?: string | undefined;
    /** 联系人座机 */
    contactTel?: string | undefined;
    /** 联系人邮箱 */
    contactEmail?: string | undefined;
    /** 联系人省级 */
    contactProvince?: string | undefined;
    /** 联系人城市 */
    contactCity?: string | undefined;
    /** 联系人区县 */
    contactArea?: string | undefined;
    /** 联系人地址 */
    contactAddress?: string | undefined;
    /** 检查日期 */
    date?: dayjs.Dayjs | undefined;
    /** 疾病种类 `DIC.DIAGNOSIS.ID.TYPE` *多选，用分号隔开* *丙肝;乙肝;艾滋病;梅毒;结核;其它* */
    type?: string | undefined;
    /** 疾病种类 - 显示值 */
    typeLabel?: string | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏替代治疗时血肌酐水平 */
    firstScr?: string | undefined;
}

/** Reponse */
export class PatientExcelViewResult implements IPatientExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientExcelView[] | undefined;

    constructor(data?: IPatientExcelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientExcelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientExcelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientExcelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientExcelView[] | undefined;
}

/** 总患者人数 */
export class PatientIndexView implements IPatientIndexView {
    /** 总数 */
    readonly total?: number;
    /** 在透 */
    inCount?: number;
    readonly inRatio?: string | undefined;
    /** 转出 */
    outCount?: number;
    readonly outRatio?: string | undefined;
    /** 退出 */
    quitCount?: number;
    readonly quitRatio?: string | undefined;

    constructor(data?: IPatientIndexView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).total = _data["total"];
            this.inCount = _data["inCount"];
            (<any>this).inRatio = _data["inRatio"];
            this.outCount = _data["outCount"];
            (<any>this).outRatio = _data["outRatio"];
            this.quitCount = _data["quitCount"];
            (<any>this).quitRatio = _data["quitRatio"];
        }
    }

    static fromJS(data: any): PatientIndexView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientIndexView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["inCount"] = this.inCount;
        data["inRatio"] = this.inRatio;
        data["outCount"] = this.outCount;
        data["outRatio"] = this.outRatio;
        data["quitCount"] = this.quitCount;
        data["quitRatio"] = this.quitRatio;
        return data;
    }
}

/** 总患者人数 */
export interface IPatientIndexView {
    /** 总数 */
    total?: number;
    /** 在透 */
    inCount?: number;
    inRatio?: string | undefined;
    /** 转出 */
    outCount?: number;
    outRatio?: string | undefined;
    /** 退出 */
    quitCount?: number;
    quitRatio?: string | undefined;
}

export class PrescriptionExcelView implements IPrescriptionExcelView {
    /** [患者标识](#患者信息) */
    patientName?: string | undefined;
    /** [医生标识] */
    doctorName?: string | undefined;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type?: string | undefined;
    /** 处方日期 */
    date?: dayjs.Dayjs;
    /** 生效时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode?: string | undefined;
    /** 透析时长 *分钟* */
    dialysisDuration?: number;
    /** 干体重 *从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 是否含糖 */
    sugar?: string | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [血管通路](#患者血管通路) */
    patientVascularAccess?: string | undefined;
    /** 血管通路建立日期 */
    vascularAccessCreateDate?: dayjs.Dayjs | undefined;
    /** 血管通路启用日期 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路 */
    change?: string | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 */
    changeCause?: string | undefined;
    /** 位置 */
    position?: string | undefined;
    /** 中心静脉置管方法 */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 默认在处方应用 */
    defaultUse?: string | undefined;
    /** 位置（左-右） */
    location?: string | undefined;
    /** 血管通路备注 */
    vascularRemark?: string | undefined;

    constructor(data?: IPrescriptionExcelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.doctorName = _data["doctorName"];
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.totalCount = _data["totalCount"];
            this.usageCount = _data["usageCount"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDuration = _data["dialysisDuration"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.rfm = _data["rfm"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.dialysateName = _data["dialysateName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.sugar = _data["sugar"];
            this.glucose = _data["glucose"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.nonReason = _data["nonReason"];
            this.remark = _data["remark"];
            this.patientVascularAccess = _data["patientVascularAccess"];
            this.vascularAccessCreateDate = _data["vascularAccessCreateDate"] ? dayjs(_data["vascularAccessCreateDate"].toString()) : <any>undefined;
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.remarkOther = _data["remarkOther"];
            this.defaultUse = _data["defaultUse"];
            this.location = _data["location"];
            this.vascularRemark = _data["vascularRemark"];
        }
    }

    static fromJS(data: any): PrescriptionExcelView {
        data = typeof data === 'object' ? data : {};
        let result = new PrescriptionExcelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["doctorName"] = this.doctorName;
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["beginDate"] = this.beginDate ? this.beginDate.toLocaleString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toLocaleString() : <any>undefined;
        data["totalCount"] = this.totalCount;
        data["usageCount"] = this.usageCount;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDuration"] = this.dialysisDuration;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["rfm"] = this.rfm;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["dialysateName"] = this.dialysateName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["sugar"] = this.sugar;
        data["glucose"] = this.glucose;
        data["anticoagulantName"] = this.anticoagulantName;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["nonReason"] = this.nonReason;
        data["remark"] = this.remark;
        data["patientVascularAccess"] = this.patientVascularAccess;
        data["vascularAccessCreateDate"] = this.vascularAccessCreateDate ? this.vascularAccessCreateDate.toLocaleString() : <any>undefined;
        data["firstDate"] = this.firstDate ? this.firstDate.toLocaleString() : <any>undefined;
        data["change"] = this.change;
        data["changeDate"] = this.changeDate ? this.changeDate.toLocaleString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        data["position"] = this.position;
        data["way"] = this.way;
        data["remarkOther"] = this.remarkOther;
        data["defaultUse"] = this.defaultUse;
        data["location"] = this.location;
        data["vascularRemark"] = this.vascularRemark;
        return data;
    }
}

export interface IPrescriptionExcelView {
    /** [患者标识](#患者信息) */
    patientName?: string | undefined;
    /** [医生标识] */
    doctorName?: string | undefined;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type?: string | undefined;
    /** 处方日期 */
    date?: dayjs.Dayjs;
    /** 生效时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode?: string | undefined;
    /** 透析时长 *分钟* */
    dialysisDuration?: number;
    /** 干体重 *从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 是否含糖 */
    sugar?: string | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [血管通路](#患者血管通路) */
    patientVascularAccess?: string | undefined;
    /** 血管通路建立日期 */
    vascularAccessCreateDate?: dayjs.Dayjs | undefined;
    /** 血管通路启用日期 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路 */
    change?: string | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 */
    changeCause?: string | undefined;
    /** 位置 */
    position?: string | undefined;
    /** 中心静脉置管方法 */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 默认在处方应用 */
    defaultUse?: string | undefined;
    /** 位置（左-右） */
    location?: string | undefined;
    /** 血管通路备注 */
    vascularRemark?: string | undefined;
}

/** Reponse */
export class PrescriptionExcelViewResult implements IPrescriptionExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrescriptionExcelView[] | undefined;

    constructor(data?: IPrescriptionExcelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PrescriptionExcelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PrescriptionExcelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PrescriptionExcelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPrescriptionExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrescriptionExcelView[] | undefined;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

/** 耗材/项目/药品 Excel模板导入 */
export class RoomListItemExcelView implements IRoomListItemExcelView {
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeName?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 一级单位 */
    unitLevel1Label?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 基本单位 */
    unitBaseLabel?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 库存扣减展示值 */
    inventoryLabel?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 启用状态 - 展示值 */
    enabledLabel?: string | undefined;
    /** 医嘱用法 */
    usageMode?: string | undefined;

    constructor(data?: IRoomListItemExcelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.model = _data["model"];
            this.spec = _data["spec"];
            this.origin = _data["origin"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Label = _data["unitLevel1Label"];
            this.conversionRate = _data["conversionRate"];
            this.unitBase = _data["unitBase"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.sellingPrice = _data["sellingPrice"];
            this.inventoryCount = _data["inventoryCount"];
            this.inventory = _data["inventory"];
            this.inventoryLabel = _data["inventoryLabel"];
            this.enabled = _data["enabled"];
            this.enabledLabel = _data["enabledLabel"];
            this.usageMode = _data["usageMode"];
        }
    }

    static fromJS(data: any): RoomListItemExcelView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomListItemExcelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["model"] = this.model;
        data["spec"] = this.spec;
        data["origin"] = this.origin;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Label"] = this.unitLevel1Label;
        data["conversionRate"] = this.conversionRate;
        data["unitBase"] = this.unitBase;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["sellingPrice"] = this.sellingPrice;
        data["inventoryCount"] = this.inventoryCount;
        data["inventory"] = this.inventory;
        data["inventoryLabel"] = this.inventoryLabel;
        data["enabled"] = this.enabled;
        data["enabledLabel"] = this.enabledLabel;
        data["usageMode"] = this.usageMode;
        return data;
    }
}

/** 耗材/项目/药品 Excel模板导入 */
export interface IRoomListItemExcelView {
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeName?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 一级单位 */
    unitLevel1Label?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 基本单位 */
    unitBaseLabel?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 库存扣减展示值 */
    inventoryLabel?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 启用状态 - 展示值 */
    enabledLabel?: string | undefined;
    /** 医嘱用法 */
    usageMode?: string | undefined;
}

/** Reponse */
export class RoomListItemExcelViewResult implements IRoomListItemExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomListItemExcelView[] | undefined;

    constructor(data?: IRoomListItemExcelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomListItemExcelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomListItemExcelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomListItemExcelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomListItemExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomListItemExcelView[] | undefined;
}

/** 班次明细 */
export class ShiftDetailView implements IShiftDetailView {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 比例 */
    ratio?: string | undefined;

    constructor(data?: IShiftDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.count = _data["count"];
            this.ratio = _data["ratio"];
        }
    }

    static fromJS(data: any): ShiftDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new ShiftDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["count"] = this.count;
        data["ratio"] = this.ratio;
        return data;
    }
}

/** 班次明细 */
export interface IShiftDetailView {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
    /** 比例 */
    ratio?: string | undefined;
}

/** 当前班次透析状态 */
export class ShiftIndexView implements IShiftIndexView {
    /** 总数 */
    readonly total?: number;
    /** 透前准备 */
    prepareCount?: number;
    /** 上机 */
    onCount?: number;
    /** 下机 */
    offCount?: number;

    constructor(data?: IShiftIndexView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).total = _data["total"];
            this.prepareCount = _data["prepareCount"];
            this.onCount = _data["onCount"];
            this.offCount = _data["offCount"];
        }
    }

    static fromJS(data: any): ShiftIndexView {
        data = typeof data === 'object' ? data : {};
        let result = new ShiftIndexView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        data["prepareCount"] = this.prepareCount;
        data["onCount"] = this.onCount;
        data["offCount"] = this.offCount;
        return data;
    }
}

/** 当前班次透析状态 */
export interface IShiftIndexView {
    /** 总数 */
    total?: number;
    /** 透前准备 */
    prepareCount?: number;
    /** 上机 */
    onCount?: number;
    /** 下机 */
    offCount?: number;
}

/** Reponse */
export class StringResult implements IStringResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: string[] | undefined;

    constructor(data?: IStringResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
        }
    }

    static fromJS(data: any): StringResult {
        data = typeof data === 'object' ? data : {};
        let result = new StringResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        return data;
    }
}

/** Reponse */
export interface IStringResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: string[] | undefined;
}

/** 系统应用 */
export class SysAppEditModel implements ISysAppEditModel {
    /** 应用名称 */
    name!: string;
    /** 应用描述 */
    desc?: string | undefined;
    /** 最新版本 */
    lastVersion?: string | undefined;
    /** 最新发布时间 */
    lastPublishTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysAppEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.desc = _data["desc"];
            this.lastVersion = _data["lastVersion"];
            this.lastPublishTime = _data["lastPublishTime"] ? dayjs(_data["lastPublishTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysAppEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysAppEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["desc"] = this.desc;
        data["lastVersion"] = this.lastVersion;
        data["lastPublishTime"] = this.lastPublishTime ? this.lastPublishTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 系统应用 */
export interface ISysAppEditModel {
    /** 应用名称 */
    name: string;
    /** 应用描述 */
    desc?: string | undefined;
    /** 最新版本 */
    lastVersion?: string | undefined;
    /** 最新发布时间 */
    lastPublishTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 系统应用更新日志 */
export class SysAppLogEditModel implements ISysAppLogEditModel {
    /** 种类 *[系统应用标识](#系统应用)* */
    sysAppId!: string;
    /** 版本 */
    version?: string | undefined;
    /** 最新更新时间 */
    publishTime?: dayjs.Dayjs | undefined;
    /** 应用描述 */
    desc?: string | undefined;
    /** 应用下载地址 */
    url?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysAppLogEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysAppId = _data["sysAppId"];
            this.version = _data["version"];
            this.publishTime = _data["publishTime"] ? dayjs(_data["publishTime"].toString()) : <any>undefined;
            this.desc = _data["desc"];
            this.url = _data["url"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysAppLogEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysAppLogEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysAppId"] = this.sysAppId;
        data["version"] = this.version;
        data["publishTime"] = this.publishTime ? this.publishTime.toLocaleString() : <any>undefined;
        data["desc"] = this.desc;
        data["url"] = this.url;
        data["remark"] = this.remark;
        return data;
    }
}

/** 系统应用更新日志 */
export interface ISysAppLogEditModel {
    /** 种类 *[系统应用标识](#系统应用)* */
    sysAppId: string;
    /** 版本 */
    version?: string | undefined;
    /** 最新更新时间 */
    publishTime?: dayjs.Dayjs | undefined;
    /** 应用描述 */
    desc?: string | undefined;
    /** 应用下载地址 */
    url?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 系统应用更新日志 */
export class SysAppLogView implements ISysAppLogView {
    /** 种类 *[系统应用标识](#系统应用)* */
    sysAppId!: string;
    /** 版本 */
    version?: string | undefined;
    /** 最新更新时间 */
    publishTime?: dayjs.Dayjs | undefined;
    /** 应用描述 */
    desc?: string | undefined;
    /** 应用下载地址 */
    url?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 应用名称 */
    name?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysAppLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysAppId = _data["sysAppId"];
            this.version = _data["version"];
            this.publishTime = _data["publishTime"] ? dayjs(_data["publishTime"].toString()) : <any>undefined;
            this.desc = _data["desc"];
            this.url = _data["url"];
            this.remark = _data["remark"];
            this.name = _data["name"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysAppLogView {
        data = typeof data === 'object' ? data : {};
        let result = new SysAppLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysAppId"] = this.sysAppId;
        data["version"] = this.version;
        data["publishTime"] = this.publishTime ? this.publishTime.toLocaleString() : <any>undefined;
        data["desc"] = this.desc;
        data["url"] = this.url;
        data["remark"] = this.remark;
        data["name"] = this.name;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 系统应用更新日志 */
export interface ISysAppLogView {
    /** 种类 *[系统应用标识](#系统应用)* */
    sysAppId: string;
    /** 版本 */
    version?: string | undefined;
    /** 最新更新时间 */
    publishTime?: dayjs.Dayjs | undefined;
    /** 应用描述 */
    desc?: string | undefined;
    /** 应用下载地址 */
    url?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 应用名称 */
    name?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysAppLogViewResult implements ISysAppLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysAppLogView[] | undefined;

    constructor(data?: ISysAppLogViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysAppLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysAppLogViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysAppLogViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysAppLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysAppLogView[] | undefined;
}

/** Reponse */
export class SysAppLogViewResultEntry implements ISysAppLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysAppLogView;

    constructor(data?: ISysAppLogViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysAppLogView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysAppLogViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysAppLogViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysAppLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysAppLogView;
}

/** 系统应用 */
export class SysAppView implements ISysAppView {
    /** 应用名称 */
    name!: string;
    /** 应用描述 */
    desc?: string | undefined;
    /** 最新版本 */
    lastVersion?: string | undefined;
    /** 最新发布时间 */
    lastPublishTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysAppView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.desc = _data["desc"];
            this.lastVersion = _data["lastVersion"];
            this.lastPublishTime = _data["lastPublishTime"] ? dayjs(_data["lastPublishTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysAppView {
        data = typeof data === 'object' ? data : {};
        let result = new SysAppView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["desc"] = this.desc;
        data["lastVersion"] = this.lastVersion;
        data["lastPublishTime"] = this.lastPublishTime ? this.lastPublishTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 系统应用 */
export interface ISysAppView {
    /** 应用名称 */
    name: string;
    /** 应用描述 */
    desc?: string | undefined;
    /** 最新版本 */
    lastVersion?: string | undefined;
    /** 最新发布时间 */
    lastPublishTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysAppViewResult implements ISysAppViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysAppView[] | undefined;

    constructor(data?: ISysAppViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysAppView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysAppViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysAppViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysAppViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysAppView[] | undefined;
}

/** Reponse */
export class SysAppViewResultEntry implements ISysAppViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysAppView;

    constructor(data?: ISysAppViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysAppView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysAppViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysAppViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysAppViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysAppView;
}

/** 常用表字段映射 */
export class SysCommonKey implements ISysCommonKey {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *与表名一一对应* */
    name?: string | undefined;
    /** 代码 *与字段一一对应* */
    code?: string | undefined;
    /** 描述 *与字段一一对应* */
    desc?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysCommonKey) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.desc = _data["desc"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysCommonKey {
        data = typeof data === 'object' ? data : {};
        let result = new SysCommonKey();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["desc"] = this.desc;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 常用表字段映射 */
export interface ISysCommonKey {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *与表名一一对应* */
    name?: string | undefined;
    /** 代码 *与字段一一对应* */
    code?: string | undefined;
    /** 描述 *与字段一一对应* */
    desc?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysCommonKeyResult implements ISysCommonKeyResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysCommonKey[] | undefined;

    constructor(data?: ISysCommonKeyResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysCommonKey.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysCommonKeyResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysCommonKeyResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysCommonKeyResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysCommonKey[] | undefined;
}

/** Reponse */
export class SysCommonKeyResultEntry implements ISysCommonKeyResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysCommonKey;

    constructor(data?: ISysCommonKeyResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysCommonKey.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysCommonKeyResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysCommonKeyResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysCommonKeyResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysCommonKey;
}

/** 常用表字段映射 (ViewModel) */
export class SysCommonKeyViewModel implements ISysCommonKeyViewModel {
    /** 名称 *与表名一一对应* */
    name!: string;
    /** 代码 *与字段一一对应* */
    code!: string;
    /** 描述 *与字段一一对应* */
    desc!: string;

    constructor(data?: ISysCommonKeyViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.desc = _data["desc"];
        }
    }

    static fromJS(data: any): SysCommonKeyViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysCommonKeyViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["desc"] = this.desc;
        return data;
    }
}

/** 常用表字段映射 (ViewModel) */
export interface ISysCommonKeyViewModel {
    /** 名称 *与表名一一对应* */
    name: string;
    /** 代码 *与字段一一对应* */
    code: string;
    /** 描述 *与字段一一对应* */
    desc: string;
}

/** 自定义设置打印 */
export class SysCustomPrintEditModel implements ISysCustomPrintEditModel {
    /** 类型编码 */
    code!: string;
    /** 脚本 */
    value?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysCustomPrintEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            if (_data["value"]) {
                this.value = {} as any;
                for (let key in _data["value"]) {
                    if (_data["value"].hasOwnProperty(key))
                        (<any>this.value)![key] = _data["value"][key];
                }
            }
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysCustomPrintEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysCustomPrintEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        if (this.value) {
            data["value"] = {};
            for (let key in this.value) {
                if (this.value.hasOwnProperty(key))
                    (<any>data["value"])[key] = (<any>this.value)[key];
            }
        }
        data["remark"] = this.remark;
        return data;
    }
}

/** 自定义设置打印 */
export interface ISysCustomPrintEditModel {
    /** 类型编码 */
    code: string;
    /** 脚本 */
    value?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 自定义设置打印 */
export class SysCustomPrintView implements ISysCustomPrintView {
    /** 类型编码 */
    code!: string;
    /** 脚本 */
    value?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    valueStr?: { [key: string]: string; } | undefined;

    constructor(data?: ISysCustomPrintView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            if (_data["value"]) {
                this.value = {} as any;
                for (let key in _data["value"]) {
                    if (_data["value"].hasOwnProperty(key))
                        (<any>this.value)![key] = _data["value"][key];
                }
            }
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (_data["valueStr"]) {
                this.valueStr = {} as any;
                for (let key in _data["valueStr"]) {
                    if (_data["valueStr"].hasOwnProperty(key))
                        (<any>this.valueStr)![key] = _data["valueStr"][key];
                }
            }
        }
    }

    static fromJS(data: any): SysCustomPrintView {
        data = typeof data === 'object' ? data : {};
        let result = new SysCustomPrintView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        if (this.value) {
            data["value"] = {};
            for (let key in this.value) {
                if (this.value.hasOwnProperty(key))
                    (<any>data["value"])[key] = (<any>this.value)[key];
            }
        }
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        if (this.valueStr) {
            data["valueStr"] = {};
            for (let key in this.valueStr) {
                if (this.valueStr.hasOwnProperty(key))
                    (<any>data["valueStr"])[key] = (<any>this.valueStr)[key];
            }
        }
        return data;
    }
}

/** 自定义设置打印 */
export interface ISysCustomPrintView {
    /** 类型编码 */
    code: string;
    /** 脚本 */
    value?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    valueStr?: { [key: string]: string; } | undefined;
}

/** Reponse */
export class SysCustomPrintViewResult implements ISysCustomPrintViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysCustomPrintView[] | undefined;

    constructor(data?: ISysCustomPrintViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysCustomPrintView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysCustomPrintViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysCustomPrintViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysCustomPrintViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysCustomPrintView[] | undefined;
}

/** Reponse */
export class SysCustomPrintViewResultEntry implements ISysCustomPrintViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysCustomPrintView;

    constructor(data?: ISysCustomPrintViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysCustomPrintView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysCustomPrintViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysCustomPrintViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysCustomPrintViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysCustomPrintView;
}

/** 自定义数据库脚本查询 */
export class SysCustomQueryScriptEditModel implements ISysCustomQueryScriptEditModel {
    /** 名称 */
    name!: string;
    /** 脚本 */
    srcipt!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysCustomQueryScriptEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.srcipt = _data["srcipt"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysCustomQueryScriptEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysCustomQueryScriptEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["srcipt"] = this.srcipt;
        data["remark"] = this.remark;
        return data;
    }
}

/** 自定义数据库脚本查询 */
export interface ISysCustomQueryScriptEditModel {
    /** 名称 */
    name: string;
    /** 脚本 */
    srcipt: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 自定义数据库脚本查询 */
export class SysCustomQueryScriptView implements ISysCustomQueryScriptView {
    /** 名称 */
    name!: string;
    /** 脚本 */
    srcipt!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysCustomQueryScriptView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.srcipt = _data["srcipt"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysCustomQueryScriptView {
        data = typeof data === 'object' ? data : {};
        let result = new SysCustomQueryScriptView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["srcipt"] = this.srcipt;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 自定义数据库脚本查询 */
export interface ISysCustomQueryScriptView {
    /** 名称 */
    name: string;
    /** 脚本 */
    srcipt: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysCustomQueryScriptViewResult implements ISysCustomQueryScriptViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysCustomQueryScriptView[] | undefined;

    constructor(data?: ISysCustomQueryScriptViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysCustomQueryScriptView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysCustomQueryScriptViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysCustomQueryScriptViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysCustomQueryScriptViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysCustomQueryScriptView[] | undefined;
}

/** Reponse */
export class SysCustomQueryScriptViewResultEntry implements ISysCustomQueryScriptViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysCustomQueryScriptView;

    constructor(data?: ISysCustomQueryScriptViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysCustomQueryScriptView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysCustomQueryScriptViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysCustomQueryScriptViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysCustomQueryScriptViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysCustomQueryScriptView;
}

/** 所有字典树 */
export class SysDicAllView implements ISysDicAllView {
    /** [父节点标识](字典分类表) */
    sysDicTypeId?: string | undefined;
    /** [父节点名称](字典分类表) */
    sysDicTypeName?: string | undefined;
    /** [父节点Code](字典分类表) */
    sysDicTypeCode?: string | undefined;
    /** 字典明细 */
    child?: SysDicItemChildView[] | undefined;

    constructor(data?: ISysDicAllView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysDicTypeId = _data["sysDicTypeId"];
            this.sysDicTypeName = _data["sysDicTypeName"];
            this.sysDicTypeCode = _data["sysDicTypeCode"];
            if (Array.isArray(_data["child"])) {
                this.child = [] as any;
                for (let item of _data["child"])
                    this.child!.push(SysDicItemChildView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysDicAllView {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicAllView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysDicTypeId"] = this.sysDicTypeId;
        data["sysDicTypeName"] = this.sysDicTypeName;
        data["sysDicTypeCode"] = this.sysDicTypeCode;
        if (Array.isArray(this.child)) {
            data["child"] = [];
            for (let item of this.child)
                data["child"].push(item.toJSON());
        }
        return data;
    }
}

/** 所有字典树 */
export interface ISysDicAllView {
    /** [父节点标识](字典分类表) */
    sysDicTypeId?: string | undefined;
    /** [父节点名称](字典分类表) */
    sysDicTypeName?: string | undefined;
    /** [父节点Code](字典分类表) */
    sysDicTypeCode?: string | undefined;
    /** 字典明细 */
    child?: SysDicItemChildView[] | undefined;
}

/** Reponse */
export class SysDicAllViewResult implements ISysDicAllViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysDicAllView[] | undefined;

    constructor(data?: ISysDicAllViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysDicAllView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysDicAllViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicAllViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysDicAllViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysDicAllView[] | undefined;
}

/** 字典明细表 */
export class SysDicItem implements ISysDicItem {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`sys_dic_type_id`下不允许重复* */
    name?: string | undefined;
    /** 值 *○同一个`sys_dic_type_id`下不允许重复* */
    value?: string | undefined;
    /** 自定义名称 *同一个sys_dic_type_id下不允许重复，此属性有值情况下覆盖name* */
    customLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 启用0,1 */
    enabled?: number;
    /** 扩展或保留字段 */
    extended1?: string | undefined;
    /** [父节点标识](字典分类表) */
    sysDicTypeId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysDicTypes?: SysDicType;

    constructor(data?: ISysDicItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.customLabel = _data["customLabel"];
            this.remark = _data["remark"];
            this.system = _data["system"];
            this.enabled = _data["enabled"];
            this.extended1 = _data["extended1"];
            this.sysDicTypeId = _data["sysDicTypeId"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysDicTypes = _data["sysDicTypes"] ? SysDicType.fromJS(_data["sysDicTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysDicItem {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["value"] = this.value;
        data["customLabel"] = this.customLabel;
        data["remark"] = this.remark;
        data["system"] = this.system;
        data["enabled"] = this.enabled;
        data["extended1"] = this.extended1;
        data["sysDicTypeId"] = this.sysDicTypeId;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysDicTypes"] = this.sysDicTypes ? this.sysDicTypes.toJSON() : <any>undefined;
        return data;
    }
}

/** 字典明细表 */
export interface ISysDicItem {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`sys_dic_type_id`下不允许重复* */
    name?: string | undefined;
    /** 值 *○同一个`sys_dic_type_id`下不允许重复* */
    value?: string | undefined;
    /** 自定义名称 *同一个sys_dic_type_id下不允许重复，此属性有值情况下覆盖name* */
    customLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 启用0,1 */
    enabled?: number;
    /** 扩展或保留字段 */
    extended1?: string | undefined;
    /** [父节点标识](字典分类表) */
    sysDicTypeId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysDicTypes?: SysDicType;
}

/** 字典明细简化View Model */
export class SysDicItemChildView implements ISysDicItemChildView {
    /** 记录标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 值 */
    value?: string | undefined;
    /** 自定义名称 */
    customLabel?: string | undefined;
    /** 系统内置 *0,1* */
    system?: number;
    /** 扩展或保留字段 */
    extended1?: string | undefined;
    /** 序列 */
    sequence?: number;

    constructor(data?: ISysDicItemChildView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.customLabel = _data["customLabel"];
            this.system = _data["system"];
            this.extended1 = _data["extended1"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): SysDicItemChildView {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicItemChildView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["value"] = this.value;
        data["customLabel"] = this.customLabel;
        data["system"] = this.system;
        data["extended1"] = this.extended1;
        data["sequence"] = this.sequence;
        return data;
    }
}

/** 字典明细简化View Model */
export interface ISysDicItemChildView {
    /** 记录标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 值 */
    value?: string | undefined;
    /** 自定义名称 */
    customLabel?: string | undefined;
    /** 系统内置 *0,1* */
    system?: number;
    /** 扩展或保留字段 */
    extended1?: string | undefined;
    /** 序列 */
    sequence?: number;
}

/** Reponse */
export class SysDicItemResultEntry implements ISysDicItemResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysDicItem;

    constructor(data?: ISysDicItemResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysDicItem.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysDicItemResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicItemResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysDicItemResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysDicItem;
}

/** 字典明细 */
export class SysDicItemView implements ISysDicItemView {
    /** 记录标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 值 */
    value?: string | undefined;
    /** 自定义名称 */
    customLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 系统内置 *0,1* */
    system?: number;
    /** 是否启用 *0,1* */
    enabled?: number;
    /** 扩展或保留字段 */
    extended1?: string | undefined;
    /** [父节点标识](字典分类表) */
    sysDicTypeId?: string | undefined;
    /** [父节点名称](字典分类表) */
    sysDicTypeName?: string | undefined;
    /** [父节点Code](字典分类表) */
    sysDicTypeCode?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysDicItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.customLabel = _data["customLabel"];
            this.remark = _data["remark"];
            this.system = _data["system"];
            this.enabled = _data["enabled"];
            this.extended1 = _data["extended1"];
            this.sysDicTypeId = _data["sysDicTypeId"];
            this.sysDicTypeName = _data["sysDicTypeName"];
            this.sysDicTypeCode = _data["sysDicTypeCode"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysDicItemView {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["value"] = this.value;
        data["customLabel"] = this.customLabel;
        data["remark"] = this.remark;
        data["system"] = this.system;
        data["enabled"] = this.enabled;
        data["extended1"] = this.extended1;
        data["sysDicTypeId"] = this.sysDicTypeId;
        data["sysDicTypeName"] = this.sysDicTypeName;
        data["sysDicTypeCode"] = this.sysDicTypeCode;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 字典明细 */
export interface ISysDicItemView {
    /** 记录标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 值 */
    value?: string | undefined;
    /** 自定义名称 */
    customLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 系统内置 *0,1* */
    system?: number;
    /** 是否启用 *0,1* */
    enabled?: number;
    /** 扩展或保留字段 */
    extended1?: string | undefined;
    /** [父节点标识](字典分类表) */
    sysDicTypeId?: string | undefined;
    /** [父节点名称](字典分类表) */
    sysDicTypeName?: string | undefined;
    /** [父节点Code](字典分类表) */
    sysDicTypeCode?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 字典明细表 (ViewModel) */
export class SysDicItemViewModel implements ISysDicItemViewModel {
    /** 名称 *○同一个`sys_dic_type_id`下不允许重复* */
    name!: string;
    /** 值 *○同一个`sys_dic_type_id`下不允许重复* */
    value!: string;
    /** 自定义名称 *同一个sys_dic_type_id下不允许重复，此属性有值情况下覆盖name* */
    customLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system!: number;
    /** 启用0,1 */
    enabled!: number;
    /** 扩展或保留字段 */
    extended1?: string | undefined;
    /** 字典分类表Id) */
    sysDicTypeId!: string;

    constructor(data?: ISysDicItemViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
            this.customLabel = _data["customLabel"];
            this.remark = _data["remark"];
            this.system = _data["system"];
            this.enabled = _data["enabled"];
            this.extended1 = _data["extended1"];
            this.sysDicTypeId = _data["sysDicTypeId"];
        }
    }

    static fromJS(data: any): SysDicItemViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicItemViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        data["customLabel"] = this.customLabel;
        data["remark"] = this.remark;
        data["system"] = this.system;
        data["enabled"] = this.enabled;
        data["extended1"] = this.extended1;
        data["sysDicTypeId"] = this.sysDicTypeId;
        return data;
    }
}

/** 字典明细表 (ViewModel) */
export interface ISysDicItemViewModel {
    /** 名称 *○同一个`sys_dic_type_id`下不允许重复* */
    name: string;
    /** 值 *○同一个`sys_dic_type_id`下不允许重复* */
    value: string;
    /** 自定义名称 *同一个sys_dic_type_id下不允许重复，此属性有值情况下覆盖name* */
    customLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system: number;
    /** 启用0,1 */
    enabled: number;
    /** 扩展或保留字段 */
    extended1?: string | undefined;
    /** 字典分类表Id) */
    sysDicTypeId: string;
}

/** Reponse */
export class SysDicItemViewResult implements ISysDicItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysDicItemView[] | undefined;

    constructor(data?: ISysDicItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysDicItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysDicItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysDicItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysDicItemView[] | undefined;
}

/** 字典分类表 */
export class SysDicType implements ISysDicType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 数据类型root,string,int */
    dataType?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 是否允许编辑0,1 */
    edit?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysDicType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.dataType = _data["dataType"];
            this.parentId = _data["parentId"];
            this.edit = _data["edit"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysDicType {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["dataType"] = this.dataType;
        data["parentId"] = this.parentId;
        data["edit"] = this.edit;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 字典分类表 */
export interface ISysDicType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 数据类型root,string,int */
    dataType?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 是否允许编辑0,1 */
    edit?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysDicTypeResult implements ISysDicTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysDicType[] | undefined;

    constructor(data?: ISysDicTypeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysDicType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysDicTypeResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicTypeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysDicTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysDicType[] | undefined;
}

/** Reponse */
export class SysDicTypeResultEntry implements ISysDicTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysDicType;

    constructor(data?: ISysDicTypeResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysDicType.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysDicTypeResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicTypeResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysDicTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysDicType;
}

/** 字典分类表 (ViewModel) */
export class SysDicTypeViewModel implements ISysDicTypeViewModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 代码(用于字典检索Id) *○不允许重复,前缀继承父节点以点隔开* */
    code!: string;
    /** 数据类型root,string,int */
    dataType!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 是否允许编辑0,1 */
    edit!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysDicTypeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.dataType = _data["dataType"];
            this.parentId = _data["parentId"];
            this.edit = _data["edit"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysDicTypeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysDicTypeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["dataType"] = this.dataType;
        data["parentId"] = this.parentId;
        data["edit"] = this.edit;
        data["remark"] = this.remark;
        return data;
    }
}

/** 字典分类表 (ViewModel) */
export interface ISysDicTypeViewModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 代码(用于字典检索Id) *○不允许重复,前缀继承父节点以点隔开* */
    code: string;
    /** 数据类型root,string,int */
    dataType: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 是否允许编辑0,1 */
    edit: number;
    /** 备注 */
    remark?: string | undefined;
}

export class SysExportTaskEditModel implements ISysExportTaskEditModel {
    /** [用户标识](#用户信息) */
    sysUserId!: string;
    /** 名称 *XXX数据导出* */
    name!: string;
    /** [文件标识](#文件列表) */
    hfsFilesId?: string | undefined;
    /** 状态 *1:新任务,2:执行中,3:已完成,0:导出失败* */
    status!: number;

    constructor(data?: ISysExportTaskEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysUserId = _data["sysUserId"];
            this.name = _data["name"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): SysExportTaskEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysExportTaskEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysUserId"] = this.sysUserId;
        data["name"] = this.name;
        data["hfsFilesId"] = this.hfsFilesId;
        data["status"] = this.status;
        return data;
    }
}

export interface ISysExportTaskEditModel {
    /** [用户标识](#用户信息) */
    sysUserId: string;
    /** 名称 *XXX数据导出* */
    name: string;
    /** [文件标识](#文件列表) */
    hfsFilesId?: string | undefined;
    /** 状态 *1:新任务,2:执行中,3:已完成,0:导出失败* */
    status: number;
}

/** 文件导出 */
export class SysExportTaskView implements ISysExportTaskView {
    /** [用户标识](#用户信息) */
    sysUserId!: string;
    /** 名称 *XXX数据导出* */
    name!: string;
    /** [文件标识](#文件列表) */
    hfsFilesId?: string | undefined;
    /** 状态 *1:新任务,2:执行中,3:已完成,0:导出失败* */
    status!: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 文件大小 *字节* */
    length?: number | undefined;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;

    constructor(data?: ISysExportTaskView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysUserId = _data["sysUserId"];
            this.name = _data["name"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.status = _data["status"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): SysExportTaskView {
        data = typeof data === 'object' ? data : {};
        let result = new SysExportTaskView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysUserId"] = this.sysUserId;
        data["name"] = this.name;
        data["hfsFilesId"] = this.hfsFilesId;
        data["status"] = this.status;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        return data;
    }
}

/** 文件导出 */
export interface ISysExportTaskView {
    /** [用户标识](#用户信息) */
    sysUserId: string;
    /** 名称 *XXX数据导出* */
    name: string;
    /** [文件标识](#文件列表) */
    hfsFilesId?: string | undefined;
    /** 状态 *1:新任务,2:执行中,3:已完成,0:导出失败* */
    status: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 文件大小 *字节* */
    length?: number | undefined;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
}

/** Reponse */
export class SysExportTaskViewResult implements ISysExportTaskViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysExportTaskView[] | undefined;

    constructor(data?: ISysExportTaskViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysExportTaskView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysExportTaskViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysExportTaskViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysExportTaskViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysExportTaskView[] | undefined;
}

/** Reponse */
export class SysExportTaskViewResultEntry implements ISysExportTaskViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysExportTaskView;

    constructor(data?: ISysExportTaskViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysExportTaskView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysExportTaskViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysExportTaskViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysExportTaskViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysExportTaskView;
}

export class SysFieldItemEditModel implements ISysFieldItemEditModel {
    /** 显示名-Model描述，前端显示使用 *○同一个`sys_field_type_id`下不允许重复* */
    name!: string;
    /** 字段名-Model字段名 *○同一个`sys_field_type_id`下不允许重复* */
    value!: string;
    /** 是否显示 *0,1* */
    show?: number | undefined;
    /** [字段分类表标识](#字段分类表) */
    sysFieldTypeId!: string;
    /** 序列  *○同一个`sys_field_type_id`下从0开始；不显示的字段，自动转入不显示最后一个；从不显示转为显示，自动拉入显示最后一个* */
    sequence!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 别名 显示名-Model别名描述，前端显示使用*○同一个`sys_field_type_id`下不允许重复* */
    name2?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 默认值 */
    default?: string | undefined;
    /** 是否显示 *0,1* */
    isInheritance?: number | undefined;
    /** 是否必填 *0,1* */
    required?: number | undefined;
    /** 系统内置0,1 */
    system!: number;
    /** 数据类型 */
    dataType!: string;

    constructor(data?: ISysFieldItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
            this.show = _data["show"];
            this.sysFieldTypeId = _data["sysFieldTypeId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.name2 = _data["name2"];
            this.unit = _data["unit"];
            this.default = _data["default"];
            this.isInheritance = _data["isInheritance"];
            this.required = _data["required"];
            this.system = _data["system"];
            this.dataType = _data["dataType"];
        }
    }

    static fromJS(data: any): SysFieldItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysFieldItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        data["show"] = this.show;
        data["sysFieldTypeId"] = this.sysFieldTypeId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["name2"] = this.name2;
        data["unit"] = this.unit;
        data["default"] = this.default;
        data["isInheritance"] = this.isInheritance;
        data["required"] = this.required;
        data["system"] = this.system;
        data["dataType"] = this.dataType;
        return data;
    }
}

export interface ISysFieldItemEditModel {
    /** 显示名-Model描述，前端显示使用 *○同一个`sys_field_type_id`下不允许重复* */
    name: string;
    /** 字段名-Model字段名 *○同一个`sys_field_type_id`下不允许重复* */
    value: string;
    /** 是否显示 *0,1* */
    show?: number | undefined;
    /** [字段分类表标识](#字段分类表) */
    sysFieldTypeId: string;
    /** 序列  *○同一个`sys_field_type_id`下从0开始；不显示的字段，自动转入不显示最后一个；从不显示转为显示，自动拉入显示最后一个* */
    sequence: number;
    /** 备注 */
    remark?: string | undefined;
    /** 别名 显示名-Model别名描述，前端显示使用*○同一个`sys_field_type_id`下不允许重复* */
    name2?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 默认值 */
    default?: string | undefined;
    /** 是否显示 *0,1* */
    isInheritance?: number | undefined;
    /** 是否必填 *0,1* */
    required?: number | undefined;
    /** 系统内置0,1 */
    system: number;
    /** 数据类型 */
    dataType: string;
}

export class SysFieldItemView implements ISysFieldItemView {
    /** 显示名-Model描述，前端显示使用 *○同一个`sys_field_type_id`下不允许重复* */
    name!: string;
    /** 字段名-Model字段名 *○同一个`sys_field_type_id`下不允许重复* */
    value!: string;
    /** 是否显示 *0,1* */
    show?: number | undefined;
    /** [字段分类表标识](#字段分类表) */
    sysFieldTypeId!: string;
    /** 序列  *○同一个`sys_field_type_id`下从0开始；不显示的字段，自动转入不显示最后一个；从不显示转为显示，自动拉入显示最后一个* */
    sequence!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 别名 显示名-Model别名描述，前端显示使用*○同一个`sys_field_type_id`下不允许重复* */
    name2?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 默认值 */
    default?: string | undefined;
    /** 是否显示 *0,1* */
    isInheritance?: number | undefined;
    /** 是否必填 *0,1* */
    required?: number | undefined;
    /** 系统内置0,1 */
    system!: number;
    /** 数据类型 */
    dataType!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 名称-字段分类表名描述 *不允许重复* */
    sysFieldTypeName?: string | undefined;
    /** 字段分类表代码-Model名称 *不允许重复* */
    sysFieldTypeCode?: string | undefined;

    constructor(data?: ISysFieldItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.value = _data["value"];
            this.show = _data["show"];
            this.sysFieldTypeId = _data["sysFieldTypeId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.name2 = _data["name2"];
            this.unit = _data["unit"];
            this.default = _data["default"];
            this.isInheritance = _data["isInheritance"];
            this.required = _data["required"];
            this.system = _data["system"];
            this.dataType = _data["dataType"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysFieldTypeName = _data["sysFieldTypeName"];
            this.sysFieldTypeCode = _data["sysFieldTypeCode"];
        }
    }

    static fromJS(data: any): SysFieldItemView {
        data = typeof data === 'object' ? data : {};
        let result = new SysFieldItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        data["show"] = this.show;
        data["sysFieldTypeId"] = this.sysFieldTypeId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["name2"] = this.name2;
        data["unit"] = this.unit;
        data["default"] = this.default;
        data["isInheritance"] = this.isInheritance;
        data["required"] = this.required;
        data["system"] = this.system;
        data["dataType"] = this.dataType;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysFieldTypeName"] = this.sysFieldTypeName;
        data["sysFieldTypeCode"] = this.sysFieldTypeCode;
        return data;
    }
}

export interface ISysFieldItemView {
    /** 显示名-Model描述，前端显示使用 *○同一个`sys_field_type_id`下不允许重复* */
    name: string;
    /** 字段名-Model字段名 *○同一个`sys_field_type_id`下不允许重复* */
    value: string;
    /** 是否显示 *0,1* */
    show?: number | undefined;
    /** [字段分类表标识](#字段分类表) */
    sysFieldTypeId: string;
    /** 序列  *○同一个`sys_field_type_id`下从0开始；不显示的字段，自动转入不显示最后一个；从不显示转为显示，自动拉入显示最后一个* */
    sequence: number;
    /** 备注 */
    remark?: string | undefined;
    /** 别名 显示名-Model别名描述，前端显示使用*○同一个`sys_field_type_id`下不允许重复* */
    name2?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 默认值 */
    default?: string | undefined;
    /** 是否显示 *0,1* */
    isInheritance?: number | undefined;
    /** 是否必填 *0,1* */
    required?: number | undefined;
    /** 系统内置0,1 */
    system: number;
    /** 数据类型 */
    dataType: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 名称-字段分类表名描述 *不允许重复* */
    sysFieldTypeName?: string | undefined;
    /** 字段分类表代码-Model名称 *不允许重复* */
    sysFieldTypeCode?: string | undefined;
}

/** Reponse */
export class SysFieldItemViewResult implements ISysFieldItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysFieldItemView[] | undefined;

    constructor(data?: ISysFieldItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysFieldItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysFieldItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysFieldItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysFieldItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysFieldItemView[] | undefined;
}

/** Reponse */
export class SysFieldItemViewResultEntry implements ISysFieldItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysFieldItemView;

    constructor(data?: ISysFieldItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysFieldItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysFieldItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysFieldItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysFieldItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysFieldItemView;
}

export class SysFieldTypeEditModel implements ISysFieldTypeEditModel {
    /** 名称-表名描述 *不允许重复* */
    name!: string;
    /** 代码-Model名称 *不允许重复* */
    code!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysFieldTypeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysFieldTypeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysFieldTypeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["remark"] = this.remark;
        return data;
    }
}

export interface ISysFieldTypeEditModel {
    /** 名称-表名描述 *不允许重复* */
    name: string;
    /** 代码-Model名称 *不允许重复* */
    code: string;
    /** 备注 */
    remark?: string | undefined;
}

export class SysFieldTypeView implements ISysFieldTypeView {
    /** 名称-表名描述 *不允许重复* */
    name!: string;
    /** 代码-Model名称 *不允许重复* */
    code!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysFieldTypeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysFieldTypeView {
        data = typeof data === 'object' ? data : {};
        let result = new SysFieldTypeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface ISysFieldTypeView {
    /** 名称-表名描述 *不允许重复* */
    name: string;
    /** 代码-Model名称 *不允许重复* */
    code: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysFieldTypeViewResult implements ISysFieldTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysFieldTypeView[] | undefined;

    constructor(data?: ISysFieldTypeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysFieldTypeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysFieldTypeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysFieldTypeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysFieldTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysFieldTypeView[] | undefined;
}

/** Reponse */
export class SysFieldTypeViewResultEntry implements ISysFieldTypeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysFieldTypeView;

    constructor(data?: ISysFieldTypeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysFieldTypeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysFieldTypeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysFieldTypeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysFieldTypeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysFieldTypeView;
}

/** 自定义表单映射key码 */
export class SysFormMapKeyBase implements ISysFormMapKeyBase {
    /** 名称 *不允许重复* */
    name!: string;
    /** 是否导出 */
    isExport?: number | undefined;

    constructor(data?: ISysFormMapKeyBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.isExport = _data["isExport"];
        }
    }

    static fromJS(data: any): SysFormMapKeyBase {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormMapKeyBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isExport"] = this.isExport;
        return data;
    }
}

/** 自定义表单映射key码 */
export interface ISysFormMapKeyBase {
    /** 名称 *不允许重复* */
    name: string;
    /** 是否导出 */
    isExport?: number | undefined;
}

/** 自定义表单映射key码 */
export class SysFormMapKeyEditModel implements ISysFormMapKeyEditModel {
    /** 名称 *不允许重复* */
    name!: string;
    /** 是否导出 */
    isExport?: number | undefined;
    /** 分类代码 */
    typeCode!: string;

    constructor(data?: ISysFormMapKeyEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.isExport = _data["isExport"];
            this.typeCode = _data["typeCode"];
        }
    }

    static fromJS(data: any): SysFormMapKeyEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormMapKeyEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isExport"] = this.isExport;
        data["typeCode"] = this.typeCode;
        return data;
    }
}

/** 自定义表单映射key码 */
export interface ISysFormMapKeyEditModel {
    /** 名称 *不允许重复* */
    name: string;
    /** 是否导出 */
    isExport?: number | undefined;
    /** 分类代码 */
    typeCode: string;
}

/** 自定义表单映射key码 */
export class SysFormMapKeyView implements ISysFormMapKeyView {
    /** 名称 *不允许重复* */
    name!: string;
    /** 是否导出 */
    isExport?: number | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 分类代码 */
    typeCode?: string | undefined;
    /** 代码 *不允许重复* */
    key?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysFormMapKeyView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.isExport = _data["isExport"];
            this.id = _data["id"];
            this.typeCode = _data["typeCode"];
            this.key = _data["key"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysFormMapKeyView {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormMapKeyView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isExport"] = this.isExport;
        data["id"] = this.id;
        data["typeCode"] = this.typeCode;
        data["key"] = this.key;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 自定义表单映射key码 */
export interface ISysFormMapKeyView {
    /** 名称 *不允许重复* */
    name: string;
    /** 是否导出 */
    isExport?: number | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 分类代码 */
    typeCode?: string | undefined;
    /** 代码 *不允许重复* */
    key?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysFormMapKeyViewResult implements ISysFormMapKeyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysFormMapKeyView[] | undefined;

    constructor(data?: ISysFormMapKeyViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysFormMapKeyView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysFormMapKeyViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormMapKeyViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysFormMapKeyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysFormMapKeyView[] | undefined;
}

/** Reponse */
export class SysFormMapKeyViewResultEntry implements ISysFormMapKeyViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysFormMapKeyView;

    constructor(data?: ISysFormMapKeyViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysFormMapKeyView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysFormMapKeyViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormMapKeyViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysFormMapKeyViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysFormMapKeyView;
}

/** 自定义表单分类 */
export class SysFormType implements ISysFormType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type?: number;
    /** 序列 */
    sequence?: number;
    /** 分类 */
    category?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysFormType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.sequence = _data["sequence"];
            this.category = _data["category"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysFormType {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["type"] = this.type;
        data["sequence"] = this.sequence;
        data["category"] = this.category;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 自定义表单分类 */
export interface ISysFormType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type?: number;
    /** 序列 */
    sequence?: number;
    /** 分类 */
    category?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysFormTypeResult implements ISysFormTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysFormType[] | undefined;

    constructor(data?: ISysFormTypeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysFormType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysFormTypeResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormTypeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysFormTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysFormType[] | undefined;
}

/** Reponse */
export class SysFormTypeResultEntry implements ISysFormTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysFormType;

    constructor(data?: ISysFormTypeResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysFormType.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysFormTypeResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormTypeResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysFormTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysFormType;
}

export class SysFormTypeTreeView implements ISysFormTypeTreeView {
    /** 表单大类 */
    category?: string | undefined;
    /** 表单分类 */
    sysFormTypes?: SysFormTypeView[] | undefined;

    constructor(data?: ISysFormTypeTreeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.category = _data["category"];
            if (Array.isArray(_data["sysFormTypes"])) {
                this.sysFormTypes = [] as any;
                for (let item of _data["sysFormTypes"])
                    this.sysFormTypes!.push(SysFormTypeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysFormTypeTreeView {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormTypeTreeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category"] = this.category;
        if (Array.isArray(this.sysFormTypes)) {
            data["sysFormTypes"] = [];
            for (let item of this.sysFormTypes)
                data["sysFormTypes"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISysFormTypeTreeView {
    /** 表单大类 */
    category?: string | undefined;
    /** 表单分类 */
    sysFormTypes?: SysFormTypeView[] | undefined;
}

/** Reponse */
export class SysFormTypeTreeViewResult implements ISysFormTypeTreeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysFormTypeTreeView[] | undefined;

    constructor(data?: ISysFormTypeTreeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysFormTypeTreeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysFormTypeTreeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormTypeTreeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysFormTypeTreeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysFormTypeTreeView[] | undefined;
}

/** 自定义表单分类 */
export class SysFormTypeView implements ISysFormTypeView {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type!: number;
    /** 分类 */
    category?: string | undefined;
    /** 标识 */
    id!: string;
    /** 序列 */
    sequence!: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysFormTypeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.type = _data["type"];
            this.category = _data["category"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysFormTypeView {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormTypeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["type"] = this.type;
        data["category"] = this.category;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 自定义表单分类 */
export interface ISysFormTypeView {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type: number;
    /** 分类 */
    category?: string | undefined;
    /** 标识 */
    id: string;
    /** 序列 */
    sequence: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 自定义表单分类 (ViewModel) */
export class SysFormTypeViewModel implements ISysFormTypeViewModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 代码(用于字典检索Id) *○不允许重复,前缀继承父节点以点隔开* */
    code!: string;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type!: number;
    /** 分类 */
    category?: string | undefined;

    constructor(data?: ISysFormTypeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.category = _data["category"];
        }
    }

    static fromJS(data: any): SysFormTypeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormTypeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["type"] = this.type;
        data["category"] = this.category;
        return data;
    }
}

/** 自定义表单分类 (ViewModel) */
export interface ISysFormTypeViewModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 代码(用于字典检索Id) *○不允许重复,前缀继承父节点以点隔开* */
    code: string;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type: number;
    /** 分类 */
    category?: string | undefined;
}

/** Reponse */
export class SysFormTypeViewResult implements ISysFormTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysFormTypeView[] | undefined;

    constructor(data?: ISysFormTypeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysFormTypeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysFormTypeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormTypeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysFormTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysFormTypeView[] | undefined;
}

/** 透析室 */
export class SysHospitalArea implements ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospitalArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalArea {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透析室 */
export interface ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysHospitalAreaResult implements ISysHospitalAreaResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysHospitalArea[] | undefined;

    constructor(data?: ISysHospitalAreaResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysHospitalArea.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysHospitalAreaResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalAreaResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysHospitalAreaResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysHospitalArea[] | undefined;
}

/** Reponse */
export class SysHospitalAreaResultEntry implements ISysHospitalAreaResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysHospitalArea;

    constructor(data?: ISysHospitalAreaResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysHospitalArea.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalAreaResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalAreaResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysHospitalAreaResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysHospitalArea;
}

/** 透析室 (ViewModel) */
export class SysHospitalAreaViewModel implements ISysHospitalAreaViewModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: ISysHospitalAreaViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): SysHospitalAreaViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalAreaViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 透析室 (ViewModel) */
export interface ISysHospitalAreaViewModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 医院信息 */
export class SysHospitalEditModel implements ISysHospitalEditModel {
    /** 名称 */
    name!: string;
    /** LOGO路径 */
    logo?: string | undefined;
    /** 类型 `DIC.HOSPITAL.TYPE` *综合医院,中医医院,中西医结合医院,民族医院,专科医院,康复医院* */
    type!: string;
    /** 性质 `DIC.HOSPITAL.NATURE` *公立,民营* */
    nature!: string;
    /** 级别 `DIC.HOSPITAL.LEVEL` *三级甲等,三级乙等,三级丙等,二级甲等,二级乙等* */
    level!: string;
    /** 开展透析日期 */
    dialysisDate!: dayjs.Dayjs;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 编码 *医院编码属性* */
    code?: string | undefined;
    /** 名称字体 */
    nameFont?: string | undefined;
    /** 名称颜色 */
    nameColor?: string | undefined;
    /** LOGO类型 */
    logoType!: number;
    /** 反馈二维码 */
    feedbackQr?: string | undefined;

    constructor(data?: ISysHospitalEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.logo = _data["logo"];
            this.type = _data["type"];
            this.nature = _data["nature"];
            this.level = _data["level"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.remark = _data["remark"];
            this.code = _data["code"];
            this.nameFont = _data["nameFont"];
            this.nameColor = _data["nameColor"];
            this.logoType = _data["logoType"];
            this.feedbackQr = _data["feedbackQr"];
        }
    }

    static fromJS(data: any): SysHospitalEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["logo"] = this.logo;
        data["type"] = this.type;
        data["nature"] = this.nature;
        data["level"] = this.level;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["remark"] = this.remark;
        data["code"] = this.code;
        data["nameFont"] = this.nameFont;
        data["nameColor"] = this.nameColor;
        data["logoType"] = this.logoType;
        data["feedbackQr"] = this.feedbackQr;
        return data;
    }
}

/** 医院信息 */
export interface ISysHospitalEditModel {
    /** 名称 */
    name: string;
    /** LOGO路径 */
    logo?: string | undefined;
    /** 类型 `DIC.HOSPITAL.TYPE` *综合医院,中医医院,中西医结合医院,民族医院,专科医院,康复医院* */
    type: string;
    /** 性质 `DIC.HOSPITAL.NATURE` *公立,民营* */
    nature: string;
    /** 级别 `DIC.HOSPITAL.LEVEL` *三级甲等,三级乙等,三级丙等,二级甲等,二级乙等* */
    level: string;
    /** 开展透析日期 */
    dialysisDate: dayjs.Dayjs;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 编码 *医院编码属性* */
    code?: string | undefined;
    /** 名称字体 */
    nameFont?: string | undefined;
    /** 名称颜色 */
    nameColor?: string | undefined;
    /** LOGO类型 */
    logoType: number;
    /** 反馈二维码 */
    feedbackQr?: string | undefined;
}

/** 医院信息 */
export class SysHospitalView implements ISysHospitalView {
    /** 名称 */
    name!: string;
    /** LOGO路径 */
    logo?: string | undefined;
    /** 类型 `DIC.HOSPITAL.TYPE` *综合医院,中医医院,中西医结合医院,民族医院,专科医院,康复医院* */
    type!: string;
    /** 性质 `DIC.HOSPITAL.NATURE` *公立,民营* */
    nature!: string;
    /** 级别 `DIC.HOSPITAL.LEVEL` *三级甲等,三级乙等,三级丙等,二级甲等,二级乙等* */
    level!: string;
    /** 开展透析日期 */
    dialysisDate!: dayjs.Dayjs;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 编码 *医院编码属性* */
    code?: string | undefined;
    /** 名称字体 */
    nameFont?: string | undefined;
    /** 名称颜色 */
    nameColor?: string | undefined;
    /** LOGO类型 */
    logoType!: number;
    /** 反馈二维码 */
    feedbackQr?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospitalView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.logo = _data["logo"];
            this.type = _data["type"];
            this.nature = _data["nature"];
            this.level = _data["level"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.remark = _data["remark"];
            this.code = _data["code"];
            this.nameFont = _data["nameFont"];
            this.nameColor = _data["nameColor"];
            this.logoType = _data["logoType"];
            this.feedbackQr = _data["feedbackQr"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalView {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["logo"] = this.logo;
        data["type"] = this.type;
        data["nature"] = this.nature;
        data["level"] = this.level;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["remark"] = this.remark;
        data["code"] = this.code;
        data["nameFont"] = this.nameFont;
        data["nameColor"] = this.nameColor;
        data["logoType"] = this.logoType;
        data["feedbackQr"] = this.feedbackQr;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 医院信息 */
export interface ISysHospitalView {
    /** 名称 */
    name: string;
    /** LOGO路径 */
    logo?: string | undefined;
    /** 类型 `DIC.HOSPITAL.TYPE` *综合医院,中医医院,中西医结合医院,民族医院,专科医院,康复医院* */
    type: string;
    /** 性质 `DIC.HOSPITAL.NATURE` *公立,民营* */
    nature: string;
    /** 级别 `DIC.HOSPITAL.LEVEL` *三级甲等,三级乙等,三级丙等,二级甲等,二级乙等* */
    level: string;
    /** 开展透析日期 */
    dialysisDate: dayjs.Dayjs;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 编码 *医院编码属性* */
    code?: string | undefined;
    /** 名称字体 */
    nameFont?: string | undefined;
    /** 名称颜色 */
    nameColor?: string | undefined;
    /** LOGO类型 */
    logoType: number;
    /** 反馈二维码 */
    feedbackQr?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysHospitalViewResult implements ISysHospitalViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysHospitalView[] | undefined;

    constructor(data?: ISysHospitalViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysHospitalView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysHospitalViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysHospitalViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysHospitalView[] | undefined;
}

/** Reponse */
export class SysHospitalViewResultEntry implements ISysHospitalViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysHospitalView;

    constructor(data?: ISysHospitalViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysHospitalView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysHospitalViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysHospitalView;
}

/** 系统初始化数据导入日志 */
export class SysInitHistoryEditModel implements ISysInitHistoryEditModel {
    /** 录入日期 */
    date!: dayjs.Dayjs;
    /** 操作类型 */
    operation!: string;
    /** 模板名称 */
    object!: string;
    /** [操作者标识](#用户信息) */
    operationerId!: string;
    /** 操作者 */
    operationer?: string | undefined;
    /** 状态 *1：已完成 2：成功 3：失败* */
    state!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysInitHistoryEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.operation = _data["operation"];
            this.object = _data["object"];
            this.operationerId = _data["operationerId"];
            this.operationer = _data["operationer"];
            this.state = _data["state"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysInitHistoryEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysInitHistoryEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["operation"] = this.operation;
        data["object"] = this.object;
        data["operationerId"] = this.operationerId;
        data["operationer"] = this.operationer;
        data["state"] = this.state;
        data["remark"] = this.remark;
        return data;
    }
}

/** 系统初始化数据导入日志 */
export interface ISysInitHistoryEditModel {
    /** 录入日期 */
    date: dayjs.Dayjs;
    /** 操作类型 */
    operation: string;
    /** 模板名称 */
    object: string;
    /** [操作者标识](#用户信息) */
    operationerId: string;
    /** 操作者 */
    operationer?: string | undefined;
    /** 状态 *1：已完成 2：成功 3：失败* */
    state: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 系统初始化数据导入日志 */
export class SysInitHistoryView implements ISysInitHistoryView {
    /** 录入日期 */
    date!: dayjs.Dayjs;
    /** 操作类型 */
    operation!: string;
    /** 模板名称 */
    object!: string;
    /** [操作者标识](#用户信息) */
    operationerId!: string;
    /** 操作者 */
    operationer?: string | undefined;
    /** 状态 *1：已完成 2：成功 3：失败* */
    state!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysInitHistoryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.operation = _data["operation"];
            this.object = _data["object"];
            this.operationerId = _data["operationerId"];
            this.operationer = _data["operationer"];
            this.state = _data["state"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysInitHistoryView {
        data = typeof data === 'object' ? data : {};
        let result = new SysInitHistoryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["operation"] = this.operation;
        data["object"] = this.object;
        data["operationerId"] = this.operationerId;
        data["operationer"] = this.operationer;
        data["state"] = this.state;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 系统初始化数据导入日志 */
export interface ISysInitHistoryView {
    /** 录入日期 */
    date: dayjs.Dayjs;
    /** 操作类型 */
    operation: string;
    /** 模板名称 */
    object: string;
    /** [操作者标识](#用户信息) */
    operationerId: string;
    /** 操作者 */
    operationer?: string | undefined;
    /** 状态 *1：已完成 2：成功 3：失败* */
    state: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysInitHistoryViewResult implements ISysInitHistoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysInitHistoryView[] | undefined;

    constructor(data?: ISysInitHistoryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysInitHistoryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysInitHistoryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysInitHistoryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysInitHistoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysInitHistoryView[] | undefined;
}

/** Reponse */
export class SysInitHistoryViewResultEntry implements ISysInitHistoryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysInitHistoryView;

    constructor(data?: ISysInitHistoryViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysInitHistoryView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysInitHistoryViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysInitHistoryViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysInitHistoryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysInitHistoryView;
}

/** 系统外部接口数据 */
export class SysInterfaceItemEditModel implements ISysInterfaceItemEditModel {
    /** 种类 *[项目分类标识](#项目分类)* */
    roomItemTypeId!: string;
    /** 项目名称 */
    itemName!: string;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysInterfaceItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.itemName = _data["itemName"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.shortName = _data["shortName"];
            this.sellingPrice = _data["sellingPrice"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysInterfaceItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysInterfaceItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["itemName"] = this.itemName;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["shortName"] = this.shortName;
        data["sellingPrice"] = this.sellingPrice;
        data["remark"] = this.remark;
        return data;
    }
}

/** 系统外部接口数据 */
export interface ISysInterfaceItemEditModel {
    /** 种类 *[项目分类标识](#项目分类)* */
    roomItemTypeId: string;
    /** 项目名称 */
    itemName: string;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 接口映射关系表 */
export class SysInterfaceItemMapEditModel implements ISysInterfaceItemMapEditModel {
    /** [接口项目标识](#接口项目) */
    sysInterfaceItemId!: string;
    /** [项目清单](#项目清单) */
    roomItemListId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysInterfaceItemMapEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysInterfaceItemId = _data["sysInterfaceItemId"];
            this.roomItemListId = _data["roomItemListId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysInterfaceItemMapEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysInterfaceItemMapEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysInterfaceItemId"] = this.sysInterfaceItemId;
        data["roomItemListId"] = this.roomItemListId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 接口映射关系表 */
export interface ISysInterfaceItemMapEditModel {
    /** [接口项目标识](#接口项目) */
    sysInterfaceItemId: string;
    /** [项目清单](#项目清单) */
    roomItemListId: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 接口映射关系表 */
export class SysInterfaceItemMapView implements ISysInterfaceItemMapView {
    /** [接口项目标识](#接口项目) */
    sysInterfaceItemId!: string;
    /** [项目清单](#项目清单) */
    roomItemListId!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医院项目名称 */
    hospitalItemName?: string | undefined;
    /** 系统项目名称 */
    systemItemName?: string | undefined;
    /** 医院项目Code */
    hospitalItemCode?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysInterfaceItemMapView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysInterfaceItemId = _data["sysInterfaceItemId"];
            this.roomItemListId = _data["roomItemListId"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.hospitalItemName = _data["hospitalItemName"];
            this.systemItemName = _data["systemItemName"];
            this.hospitalItemCode = _data["hospitalItemCode"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysInterfaceItemMapView {
        data = typeof data === 'object' ? data : {};
        let result = new SysInterfaceItemMapView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysInterfaceItemId"] = this.sysInterfaceItemId;
        data["roomItemListId"] = this.roomItemListId;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["hospitalItemName"] = this.hospitalItemName;
        data["systemItemName"] = this.systemItemName;
        data["hospitalItemCode"] = this.hospitalItemCode;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 接口映射关系表 */
export interface ISysInterfaceItemMapView {
    /** [接口项目标识](#接口项目) */
    sysInterfaceItemId: string;
    /** [项目清单](#项目清单) */
    roomItemListId: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 医院项目名称 */
    hospitalItemName?: string | undefined;
    /** 系统项目名称 */
    systemItemName?: string | undefined;
    /** 医院项目Code */
    hospitalItemCode?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysInterfaceItemMapViewResult implements ISysInterfaceItemMapViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysInterfaceItemMapView[] | undefined;

    constructor(data?: ISysInterfaceItemMapViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysInterfaceItemMapView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysInterfaceItemMapViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysInterfaceItemMapViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysInterfaceItemMapViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysInterfaceItemMapView[] | undefined;
}

/** 系统外部接口数据 */
export class SysInterfaceItemView implements ISysInterfaceItemView {
    /** 种类 *[项目分类标识](#项目分类)* */
    roomItemTypeId!: string;
    /** 项目名称 */
    itemName!: string;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysInterfaceItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.itemName = _data["itemName"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.shortName = _data["shortName"];
            this.sellingPrice = _data["sellingPrice"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysInterfaceItemView {
        data = typeof data === 'object' ? data : {};
        let result = new SysInterfaceItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["itemName"] = this.itemName;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["shortName"] = this.shortName;
        data["sellingPrice"] = this.sellingPrice;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 系统外部接口数据 */
export interface ISysInterfaceItemView {
    /** 种类 *[项目分类标识](#项目分类)* */
    roomItemTypeId: string;
    /** 项目名称 */
    itemName: string;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysInterfaceItemViewResultEntry implements ISysInterfaceItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysInterfaceItemView;

    constructor(data?: ISysInterfaceItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysInterfaceItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysInterfaceItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysInterfaceItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysInterfaceItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysInterfaceItemView;
}

/** 大屏管理 */
export class SysLargeScreen implements ISysLargeScreen {
    /** 标识 */
    id?: string | undefined;
    /** 屏幕名称 */
    name?: string | undefined;
    /** 屏幕编码 */
    code?: string | undefined;
    /** 屏幕位置 */
    position?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 透析区间ID集合，使用分号分割 */
    deptDialysisAreaIds?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 缩放比例 */
    scaling?: string | undefined;
    sysHospitalAreas?: SysHospitalArea;

    constructor(data?: ISysLargeScreen) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.position = _data["position"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.deptDialysisAreaIds = _data["deptDialysisAreaIds"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.scaling = _data["scaling"];
            this.sysHospitalAreas = _data["sysHospitalAreas"] ? SysHospitalArea.fromJS(_data["sysHospitalAreas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysLargeScreen {
        data = typeof data === 'object' ? data : {};
        let result = new SysLargeScreen();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["position"] = this.position;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["deptDialysisAreaIds"] = this.deptDialysisAreaIds;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["scaling"] = this.scaling;
        data["sysHospitalAreas"] = this.sysHospitalAreas ? this.sysHospitalAreas.toJSON() : <any>undefined;
        return data;
    }
}

/** 大屏管理 */
export interface ISysLargeScreen {
    /** 标识 */
    id?: string | undefined;
    /** 屏幕名称 */
    name?: string | undefined;
    /** 屏幕编码 */
    code?: string | undefined;
    /** 屏幕位置 */
    position?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 透析区间ID集合，使用分号分割 */
    deptDialysisAreaIds?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 缩放比例 */
    scaling?: string | undefined;
    sysHospitalAreas?: SysHospitalArea;
}

/** 大屏配置 */
export class SysLargeScreenConf implements ISysLargeScreenConf {
    /** 标识 */
    id?: string | undefined;
    /** [大屏管理标识](大屏管理) */
    sysLargeScreenId?: string | undefined;
    /** 类型 *长期;临时* */
    type?: string | undefined;
    /** 开始时间 */
    startTime?: string | undefined;
    /** 结束时间 */
    endTime?: string | undefined;
    /** 刷新时间 *秒* */
    refreshTime?: number;
    /** 大屏标题 */
    title?: string | undefined;
    /** 屏幕类型 *排班;宣教;通知* */
    screenType?: string | undefined;
    /** logo *公司;医院* */
    logo?: string | undefined;
    /** 大屏风格 */
    style?: number | undefined;
    /** 隐私保护 */
    privacy?: number | undefined;
    /** 患者分区 */
    patientArea?: number | undefined;
    /** 显示空床 */
    bedEmpty?: number | undefined;
    /** 显示进度 */
    progressShow?: number | undefined;
    /** 字体大小 */
    fontSize?: string | undefined;
    /** 通知内容 */
    noticeContent?: string | undefined;
    /** 落款内容 */
    signatureContent?: string | undefined;
    /** 讲课日期 */
    dateLecture?: string | undefined;
    /** 讲课标题 */
    titleLecture?: string | undefined;
    /** 讲课人 */
    lecturer?: string | undefined;
    /** 宣教 */
    healthEducationContent?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大屏背景色 */
    bgColor?: string | undefined;
    /** 卡片背景色-未使用 */
    cardNouseColor?: string | undefined;
    /** 卡片背景色-治疗中 */
    cardCureColor?: string | undefined;
    /** 卡片背景色-已结束 */
    cardEndColor?: string | undefined;
    sysLargeScreens?: SysLargeScreen;

    constructor(data?: ISysLargeScreenConf) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysLargeScreenId = _data["sysLargeScreenId"];
            this.type = _data["type"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.refreshTime = _data["refreshTime"];
            this.title = _data["title"];
            this.screenType = _data["screenType"];
            this.logo = _data["logo"];
            this.style = _data["style"];
            this.privacy = _data["privacy"];
            this.patientArea = _data["patientArea"];
            this.bedEmpty = _data["bedEmpty"];
            this.progressShow = _data["progressShow"];
            this.fontSize = _data["fontSize"];
            this.noticeContent = _data["noticeContent"];
            this.signatureContent = _data["signatureContent"];
            this.dateLecture = _data["dateLecture"];
            this.titleLecture = _data["titleLecture"];
            this.lecturer = _data["lecturer"];
            this.healthEducationContent = _data["healthEducationContent"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.bgColor = _data["bgColor"];
            this.cardNouseColor = _data["cardNouseColor"];
            this.cardCureColor = _data["cardCureColor"];
            this.cardEndColor = _data["cardEndColor"];
            this.sysLargeScreens = _data["sysLargeScreens"] ? SysLargeScreen.fromJS(_data["sysLargeScreens"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysLargeScreenConf {
        data = typeof data === 'object' ? data : {};
        let result = new SysLargeScreenConf();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysLargeScreenId"] = this.sysLargeScreenId;
        data["type"] = this.type;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["refreshTime"] = this.refreshTime;
        data["title"] = this.title;
        data["screenType"] = this.screenType;
        data["logo"] = this.logo;
        data["style"] = this.style;
        data["privacy"] = this.privacy;
        data["patientArea"] = this.patientArea;
        data["bedEmpty"] = this.bedEmpty;
        data["progressShow"] = this.progressShow;
        data["fontSize"] = this.fontSize;
        data["noticeContent"] = this.noticeContent;
        data["signatureContent"] = this.signatureContent;
        data["dateLecture"] = this.dateLecture;
        data["titleLecture"] = this.titleLecture;
        data["lecturer"] = this.lecturer;
        data["healthEducationContent"] = this.healthEducationContent;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["bgColor"] = this.bgColor;
        data["cardNouseColor"] = this.cardNouseColor;
        data["cardCureColor"] = this.cardCureColor;
        data["cardEndColor"] = this.cardEndColor;
        data["sysLargeScreens"] = this.sysLargeScreens ? this.sysLargeScreens.toJSON() : <any>undefined;
        return data;
    }
}

/** 大屏配置 */
export interface ISysLargeScreenConf {
    /** 标识 */
    id?: string | undefined;
    /** [大屏管理标识](大屏管理) */
    sysLargeScreenId?: string | undefined;
    /** 类型 *长期;临时* */
    type?: string | undefined;
    /** 开始时间 */
    startTime?: string | undefined;
    /** 结束时间 */
    endTime?: string | undefined;
    /** 刷新时间 *秒* */
    refreshTime?: number;
    /** 大屏标题 */
    title?: string | undefined;
    /** 屏幕类型 *排班;宣教;通知* */
    screenType?: string | undefined;
    /** logo *公司;医院* */
    logo?: string | undefined;
    /** 大屏风格 */
    style?: number | undefined;
    /** 隐私保护 */
    privacy?: number | undefined;
    /** 患者分区 */
    patientArea?: number | undefined;
    /** 显示空床 */
    bedEmpty?: number | undefined;
    /** 显示进度 */
    progressShow?: number | undefined;
    /** 字体大小 */
    fontSize?: string | undefined;
    /** 通知内容 */
    noticeContent?: string | undefined;
    /** 落款内容 */
    signatureContent?: string | undefined;
    /** 讲课日期 */
    dateLecture?: string | undefined;
    /** 讲课标题 */
    titleLecture?: string | undefined;
    /** 讲课人 */
    lecturer?: string | undefined;
    /** 宣教 */
    healthEducationContent?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大屏背景色 */
    bgColor?: string | undefined;
    /** 卡片背景色-未使用 */
    cardNouseColor?: string | undefined;
    /** 卡片背景色-治疗中 */
    cardCureColor?: string | undefined;
    /** 卡片背景色-已结束 */
    cardEndColor?: string | undefined;
    sysLargeScreens?: SysLargeScreen;
}

/** 大屏配置 */
export class SysLargeScreenConfEditModel implements ISysLargeScreenConfEditModel {
    /** [大屏管理标识](#大屏管理) */
    sysLargeScreenId!: string;
    /** 类型 *长期;临时* */
    type!: string;
    /** 开始时间 */
    startTime!: string;
    /** 结束时间 */
    endTime!: string;
    /** 刷新时间 *秒* */
    refreshTime!: number;
    /** 大屏标题 */
    title!: string;
    /** 屏幕类型 *排班;宣教;通知* */
    screenType?: string | undefined;
    /** logo *公司;医院* */
    logo?: string | undefined;
    /** 大屏风格 */
    style?: number | undefined;
    /** 隐私保护 */
    privacy?: number | undefined;
    /** 患者分区 */
    patientArea?: number | undefined;
    /** 显示空床 */
    bedEmpty?: number | undefined;
    /** 字体大小 */
    fontSize?: string | undefined;
    /** 通知内容 */
    noticeContent?: string | undefined;
    /** 落款内容 */
    signatureContent?: string | undefined;
    /** 讲课日期 */
    dateLecture?: string | undefined;
    /** 讲课标题 */
    titleLecture?: string | undefined;
    /** 讲课人 */
    lecturer?: string | undefined;
    /** 宣教 */
    healthEducationContent?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏背景色 */
    bgColor?: string | undefined;
    /** 卡片背景色-未使用 */
    cardNouseColor?: string | undefined;
    /** 卡片背景色-治疗中 */
    cardCureColor?: string | undefined;
    /** 卡片背景色-已结束 */
    cardEndColor?: string | undefined;
    /** 显示进度 */
    progressShow?: number | undefined;

    constructor(data?: ISysLargeScreenConfEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysLargeScreenId = _data["sysLargeScreenId"];
            this.type = _data["type"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.refreshTime = _data["refreshTime"];
            this.title = _data["title"];
            this.screenType = _data["screenType"];
            this.logo = _data["logo"];
            this.style = _data["style"];
            this.privacy = _data["privacy"];
            this.patientArea = _data["patientArea"];
            this.bedEmpty = _data["bedEmpty"];
            this.fontSize = _data["fontSize"];
            this.noticeContent = _data["noticeContent"];
            this.signatureContent = _data["signatureContent"];
            this.dateLecture = _data["dateLecture"];
            this.titleLecture = _data["titleLecture"];
            this.lecturer = _data["lecturer"];
            this.healthEducationContent = _data["healthEducationContent"];
            this.remark = _data["remark"];
            this.bgColor = _data["bgColor"];
            this.cardNouseColor = _data["cardNouseColor"];
            this.cardCureColor = _data["cardCureColor"];
            this.cardEndColor = _data["cardEndColor"];
            this.progressShow = _data["progressShow"];
        }
    }

    static fromJS(data: any): SysLargeScreenConfEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysLargeScreenConfEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysLargeScreenId"] = this.sysLargeScreenId;
        data["type"] = this.type;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["refreshTime"] = this.refreshTime;
        data["title"] = this.title;
        data["screenType"] = this.screenType;
        data["logo"] = this.logo;
        data["style"] = this.style;
        data["privacy"] = this.privacy;
        data["patientArea"] = this.patientArea;
        data["bedEmpty"] = this.bedEmpty;
        data["fontSize"] = this.fontSize;
        data["noticeContent"] = this.noticeContent;
        data["signatureContent"] = this.signatureContent;
        data["dateLecture"] = this.dateLecture;
        data["titleLecture"] = this.titleLecture;
        data["lecturer"] = this.lecturer;
        data["healthEducationContent"] = this.healthEducationContent;
        data["remark"] = this.remark;
        data["bgColor"] = this.bgColor;
        data["cardNouseColor"] = this.cardNouseColor;
        data["cardCureColor"] = this.cardCureColor;
        data["cardEndColor"] = this.cardEndColor;
        data["progressShow"] = this.progressShow;
        return data;
    }
}

/** 大屏配置 */
export interface ISysLargeScreenConfEditModel {
    /** [大屏管理标识](#大屏管理) */
    sysLargeScreenId: string;
    /** 类型 *长期;临时* */
    type: string;
    /** 开始时间 */
    startTime: string;
    /** 结束时间 */
    endTime: string;
    /** 刷新时间 *秒* */
    refreshTime: number;
    /** 大屏标题 */
    title: string;
    /** 屏幕类型 *排班;宣教;通知* */
    screenType?: string | undefined;
    /** logo *公司;医院* */
    logo?: string | undefined;
    /** 大屏风格 */
    style?: number | undefined;
    /** 隐私保护 */
    privacy?: number | undefined;
    /** 患者分区 */
    patientArea?: number | undefined;
    /** 显示空床 */
    bedEmpty?: number | undefined;
    /** 字体大小 */
    fontSize?: string | undefined;
    /** 通知内容 */
    noticeContent?: string | undefined;
    /** 落款内容 */
    signatureContent?: string | undefined;
    /** 讲课日期 */
    dateLecture?: string | undefined;
    /** 讲课标题 */
    titleLecture?: string | undefined;
    /** 讲课人 */
    lecturer?: string | undefined;
    /** 宣教 */
    healthEducationContent?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏背景色 */
    bgColor?: string | undefined;
    /** 卡片背景色-未使用 */
    cardNouseColor?: string | undefined;
    /** 卡片背景色-治疗中 */
    cardCureColor?: string | undefined;
    /** 卡片背景色-已结束 */
    cardEndColor?: string | undefined;
    /** 显示进度 */
    progressShow?: number | undefined;
}

/** 大屏配置 */
export class SysLargeScreenConfView implements ISysLargeScreenConfView {
    /** [大屏管理标识](#大屏管理) */
    sysLargeScreenId!: string;
    /** 类型 *长期;临时* */
    type!: string;
    /** 开始时间 */
    startTime!: string;
    /** 结束时间 */
    endTime!: string;
    /** 刷新时间 *秒* */
    refreshTime!: number;
    /** 大屏标题 */
    title!: string;
    /** 屏幕类型 *排班;宣教;通知* */
    screenType?: string | undefined;
    /** logo *公司;医院* */
    logo?: string | undefined;
    /** 大屏风格 */
    style?: number | undefined;
    /** 隐私保护 */
    privacy?: number | undefined;
    /** 患者分区 */
    patientArea?: number | undefined;
    /** 显示空床 */
    bedEmpty?: number | undefined;
    /** 字体大小 */
    fontSize?: string | undefined;
    /** 通知内容 */
    noticeContent?: string | undefined;
    /** 落款内容 */
    signatureContent?: string | undefined;
    /** 讲课日期 */
    dateLecture?: string | undefined;
    /** 讲课标题 */
    titleLecture?: string | undefined;
    /** 讲课人 */
    lecturer?: string | undefined;
    /** 宣教 */
    healthEducationContent?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏背景色 */
    bgColor?: string | undefined;
    /** 卡片背景色-未使用 */
    cardNouseColor?: string | undefined;
    /** 卡片背景色-治疗中 */
    cardCureColor?: string | undefined;
    /** 卡片背景色-已结束 */
    cardEndColor?: string | undefined;
    /** 显示进度 */
    progressShow?: number | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 宣教内容 */
    healthEducationItems?: HealthEducationItem[] | undefined;

    constructor(data?: ISysLargeScreenConfView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysLargeScreenId = _data["sysLargeScreenId"];
            this.type = _data["type"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.refreshTime = _data["refreshTime"];
            this.title = _data["title"];
            this.screenType = _data["screenType"];
            this.logo = _data["logo"];
            this.style = _data["style"];
            this.privacy = _data["privacy"];
            this.patientArea = _data["patientArea"];
            this.bedEmpty = _data["bedEmpty"];
            this.fontSize = _data["fontSize"];
            this.noticeContent = _data["noticeContent"];
            this.signatureContent = _data["signatureContent"];
            this.dateLecture = _data["dateLecture"];
            this.titleLecture = _data["titleLecture"];
            this.lecturer = _data["lecturer"];
            this.healthEducationContent = _data["healthEducationContent"];
            this.remark = _data["remark"];
            this.bgColor = _data["bgColor"];
            this.cardNouseColor = _data["cardNouseColor"];
            this.cardCureColor = _data["cardCureColor"];
            this.cardEndColor = _data["cardEndColor"];
            this.progressShow = _data["progressShow"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["healthEducationItems"])) {
                this.healthEducationItems = [] as any;
                for (let item of _data["healthEducationItems"])
                    this.healthEducationItems!.push(HealthEducationItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysLargeScreenConfView {
        data = typeof data === 'object' ? data : {};
        let result = new SysLargeScreenConfView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysLargeScreenId"] = this.sysLargeScreenId;
        data["type"] = this.type;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["refreshTime"] = this.refreshTime;
        data["title"] = this.title;
        data["screenType"] = this.screenType;
        data["logo"] = this.logo;
        data["style"] = this.style;
        data["privacy"] = this.privacy;
        data["patientArea"] = this.patientArea;
        data["bedEmpty"] = this.bedEmpty;
        data["fontSize"] = this.fontSize;
        data["noticeContent"] = this.noticeContent;
        data["signatureContent"] = this.signatureContent;
        data["dateLecture"] = this.dateLecture;
        data["titleLecture"] = this.titleLecture;
        data["lecturer"] = this.lecturer;
        data["healthEducationContent"] = this.healthEducationContent;
        data["remark"] = this.remark;
        data["bgColor"] = this.bgColor;
        data["cardNouseColor"] = this.cardNouseColor;
        data["cardCureColor"] = this.cardCureColor;
        data["cardEndColor"] = this.cardEndColor;
        data["progressShow"] = this.progressShow;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        if (Array.isArray(this.healthEducationItems)) {
            data["healthEducationItems"] = [];
            for (let item of this.healthEducationItems)
                data["healthEducationItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 大屏配置 */
export interface ISysLargeScreenConfView {
    /** [大屏管理标识](#大屏管理) */
    sysLargeScreenId: string;
    /** 类型 *长期;临时* */
    type: string;
    /** 开始时间 */
    startTime: string;
    /** 结束时间 */
    endTime: string;
    /** 刷新时间 *秒* */
    refreshTime: number;
    /** 大屏标题 */
    title: string;
    /** 屏幕类型 *排班;宣教;通知* */
    screenType?: string | undefined;
    /** logo *公司;医院* */
    logo?: string | undefined;
    /** 大屏风格 */
    style?: number | undefined;
    /** 隐私保护 */
    privacy?: number | undefined;
    /** 患者分区 */
    patientArea?: number | undefined;
    /** 显示空床 */
    bedEmpty?: number | undefined;
    /** 字体大小 */
    fontSize?: string | undefined;
    /** 通知内容 */
    noticeContent?: string | undefined;
    /** 落款内容 */
    signatureContent?: string | undefined;
    /** 讲课日期 */
    dateLecture?: string | undefined;
    /** 讲课标题 */
    titleLecture?: string | undefined;
    /** 讲课人 */
    lecturer?: string | undefined;
    /** 宣教 */
    healthEducationContent?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏背景色 */
    bgColor?: string | undefined;
    /** 卡片背景色-未使用 */
    cardNouseColor?: string | undefined;
    /** 卡片背景色-治疗中 */
    cardCureColor?: string | undefined;
    /** 卡片背景色-已结束 */
    cardEndColor?: string | undefined;
    /** 显示进度 */
    progressShow?: number | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 宣教内容 */
    healthEducationItems?: HealthEducationItem[] | undefined;
}

/** Reponse */
export class SysLargeScreenConfViewResult implements ISysLargeScreenConfViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysLargeScreenConfView[] | undefined;

    constructor(data?: ISysLargeScreenConfViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysLargeScreenConfView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysLargeScreenConfViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysLargeScreenConfViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysLargeScreenConfViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysLargeScreenConfView[] | undefined;
}

/** Reponse */
export class SysLargeScreenConfViewResultEntry implements ISysLargeScreenConfViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysLargeScreenConfView;

    constructor(data?: ISysLargeScreenConfViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysLargeScreenConfView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysLargeScreenConfViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysLargeScreenConfViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysLargeScreenConfViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysLargeScreenConfView;
}

/** 大屏管理 */
export class SysLargeScreenEditModel implements ISysLargeScreenEditModel {
    /** 屏幕名称 */
    name!: string;
    /** 屏幕编码 */
    code!: string;
    /** 屏幕位置 */
    position!: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 透析区间ID集合，使用分号分割 */
    deptDialysisAreaIds!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 缩放比例 */
    scaling?: string | undefined;

    constructor(data?: ISysLargeScreenEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.position = _data["position"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.deptDialysisAreaIds = _data["deptDialysisAreaIds"];
            this.remark = _data["remark"];
            this.scaling = _data["scaling"];
        }
    }

    static fromJS(data: any): SysLargeScreenEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysLargeScreenEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["position"] = this.position;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["deptDialysisAreaIds"] = this.deptDialysisAreaIds;
        data["remark"] = this.remark;
        data["scaling"] = this.scaling;
        return data;
    }
}

/** 大屏管理 */
export interface ISysLargeScreenEditModel {
    /** 屏幕名称 */
    name: string;
    /** 屏幕编码 */
    code: string;
    /** 屏幕位置 */
    position: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 透析区间ID集合，使用分号分割 */
    deptDialysisAreaIds: string;
    /** 备注 */
    remark?: string | undefined;
    /** 缩放比例 */
    scaling?: string | undefined;
}

/** 大屏管理 */
export class SysLargeScreenView implements ISysLargeScreenView {
    /** 屏幕名称 */
    name!: string;
    /** 屏幕编码 */
    code!: string;
    /** 屏幕位置 */
    position!: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 透析区间ID集合，使用分号分割 */
    deptDialysisAreaIds!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 缩放比例 */
    scaling?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 院区信息 */
    sysHospitalAreaName?: string | undefined;
    /** 透析区间集合，使用分号分割 */
    deptDialysisAreaNames?: string | undefined;

    constructor(data?: ISysLargeScreenView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.position = _data["position"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.deptDialysisAreaIds = _data["deptDialysisAreaIds"];
            this.remark = _data["remark"];
            this.scaling = _data["scaling"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
            this.deptDialysisAreaNames = _data["deptDialysisAreaNames"];
        }
    }

    static fromJS(data: any): SysLargeScreenView {
        data = typeof data === 'object' ? data : {};
        let result = new SysLargeScreenView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["position"] = this.position;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["deptDialysisAreaIds"] = this.deptDialysisAreaIds;
        data["remark"] = this.remark;
        data["scaling"] = this.scaling;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        data["deptDialysisAreaNames"] = this.deptDialysisAreaNames;
        return data;
    }
}

/** 大屏管理 */
export interface ISysLargeScreenView {
    /** 屏幕名称 */
    name: string;
    /** 屏幕编码 */
    code: string;
    /** 屏幕位置 */
    position: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 透析区间ID集合，使用分号分割 */
    deptDialysisAreaIds: string;
    /** 备注 */
    remark?: string | undefined;
    /** 缩放比例 */
    scaling?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 院区信息 */
    sysHospitalAreaName?: string | undefined;
    /** 透析区间集合，使用分号分割 */
    deptDialysisAreaNames?: string | undefined;
}

/** Reponse */
export class SysLargeScreenViewResult implements ISysLargeScreenViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysLargeScreenView[] | undefined;

    constructor(data?: ISysLargeScreenViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysLargeScreenView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysLargeScreenViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysLargeScreenViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysLargeScreenViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysLargeScreenView[] | undefined;
}

/** Reponse */
export class SysLargeScreenViewResultEntry implements ISysLargeScreenViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysLargeScreenView;

    constructor(data?: ISysLargeScreenViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysLargeScreenView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysLargeScreenViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysLargeScreenViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysLargeScreenViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysLargeScreenView;
}

/** 系统日志 */
export class SysLog implements ISysLog {
    /** 标识 */
    id?: string | undefined;
    /** 模块 `DIC.LOG.MODULE` *系统模块,患者模块,透析模块等* */
    module?: string | undefined;
    /** 类型 *用户登录,重置密码,用户注销,新增用户等等* */
    type?: string | undefined;
    /** 级别 *ERROR,WARN,INFO,DEBUG* */
    level?: string | undefined;
    /** 代码 */
    code?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.module = _data["module"];
            this.type = _data["type"];
            this.level = _data["level"];
            this.code = _data["code"];
            this.content = _data["content"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysLog {
        data = typeof data === 'object' ? data : {};
        let result = new SysLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["module"] = this.module;
        data["type"] = this.type;
        data["level"] = this.level;
        data["code"] = this.code;
        data["content"] = this.content;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 系统日志 */
export interface ISysLog {
    /** 标识 */
    id?: string | undefined;
    /** 模块 `DIC.LOG.MODULE` *系统模块,患者模块,透析模块等* */
    module?: string | undefined;
    /** 类型 *用户登录,重置密码,用户注销,新增用户等等* */
    type?: string | undefined;
    /** 级别 *ERROR,WARN,INFO,DEBUG* */
    level?: string | undefined;
    /** 代码 */
    code?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysLogResult implements ISysLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysLog[] | undefined;

    constructor(data?: ISysLogResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysLog.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysLogResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysLogResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysLog[] | undefined;
}

/** Reponse */
export class SysLogResultEntry implements ISysLogResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysLog;

    constructor(data?: ISysLogResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysLog.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysLogResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysLogResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysLogResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysLog;
}

/** 系统日志 (ViewModel) */
export class SysLogViewModel implements ISysLogViewModel {
    /** 模块 `DIC.LOG.MODULE` *系统模块,患者模块,透析模块等* */
    module!: string;
    /** 类型 *用户登录,重置密码,用户注销,新增用户等等* */
    type!: string;
    /** 级别 *ERROR,WARN,INFO,DEBUG* */
    level!: string;
    /** 代码 */
    code?: string | undefined;
    /** 内容 */
    content?: string | undefined;

    constructor(data?: ISysLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.module = _data["module"];
            this.type = _data["type"];
            this.level = _data["level"];
            this.code = _data["code"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): SysLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["module"] = this.module;
        data["type"] = this.type;
        data["level"] = this.level;
        data["code"] = this.code;
        data["content"] = this.content;
        return data;
    }
}

/** 系统日志 (ViewModel) */
export interface ISysLogViewModel {
    /** 模块 `DIC.LOG.MODULE` *系统模块,患者模块,透析模块等* */
    module: string;
    /** 类型 *用户登录,重置密码,用户注销,新增用户等等* */
    type: string;
    /** 级别 *ERROR,WARN,INFO,DEBUG* */
    level: string;
    /** 代码 */
    code?: string | undefined;
    /** 内容 */
    content?: string | undefined;
}

/** 菜单信息 */
export class SysMenu implements ISysMenu {
    /** 标识 */
    id?: string | undefined;
    /** 菜单名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 菜单编码 *示例：sys.user* *○同一个`parent_id`下不允许重复* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 访问路径 */
    url?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 显示 *0,1* */
    show?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysMenu) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.url = _data["url"];
            this.icon = _data["icon"];
            this.show = _data["show"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysMenu {
        data = typeof data === 'object' ? data : {};
        let result = new SysMenu();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["url"] = this.url;
        data["icon"] = this.icon;
        data["show"] = this.show;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 菜单信息 */
export interface ISysMenu {
    /** 标识 */
    id?: string | undefined;
    /** 菜单名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 菜单编码 *示例：sys.user* *○同一个`parent_id`下不允许重复* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 访问路径 */
    url?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 显示 *0,1* */
    show?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysMenuResult implements ISysMenuResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysMenu[] | undefined;

    constructor(data?: ISysMenuResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysMenu.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysMenuResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysMenuResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysMenuResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysMenu[] | undefined;
}

/** Reponse */
export class SysMenuResultEntry implements ISysMenuResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysMenu;

    constructor(data?: ISysMenuResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysMenu.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysMenuResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysMenuResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysMenuResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysMenu;
}

/** 菜单信息 (ViewModel) */
export class SysMenuViewModel implements ISysMenuViewModel {
    /** 菜单名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 菜单编码 *示例：sys.user* *○同一个`parent_id`下不允许重复* */
    code!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 访问路径 */
    url?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 显示 *0,1* */
    show?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysMenuViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.url = _data["url"];
            this.icon = _data["icon"];
            this.show = _data["show"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysMenuViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysMenuViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["url"] = this.url;
        data["icon"] = this.icon;
        data["show"] = this.show;
        data["remark"] = this.remark;
        return data;
    }
}

/** 菜单信息 (ViewModel) */
export interface ISysMenuViewModel {
    /** 菜单名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 菜单编码 *示例：sys.user* *○同一个`parent_id`下不允许重复* */
    code: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 访问路径 */
    url?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 显示 *0,1* */
    show?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 消息接收人配置 */
export class SysMessageReceiverView implements ISysMessageReceiverView {
    /** [消息类型标识](#消息类型) */
    sysMessageTypeId!: string;
    /** 接收人 */
    name!: string;
    /** 接收人字段code */
    code!: string;
    /** 是否选中 *0/否；1/是* */
    checked!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 消息Id */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysMessageReceiverView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysMessageTypeId = _data["sysMessageTypeId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.checked = _data["checked"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysMessageReceiverView {
        data = typeof data === 'object' ? data : {};
        let result = new SysMessageReceiverView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysMessageTypeId"] = this.sysMessageTypeId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["checked"] = this.checked;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 消息接收人配置 */
export interface ISysMessageReceiverView {
    /** [消息类型标识](#消息类型) */
    sysMessageTypeId: string;
    /** 接收人 */
    name: string;
    /** 接收人字段code */
    code: string;
    /** 是否选中 *0/否；1/是* */
    checked: number;
    /** 备注 */
    remark?: string | undefined;
    /** 消息Id */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysMessageReceiverViewResult implements ISysMessageReceiverViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysMessageReceiverView[] | undefined;

    constructor(data?: ISysMessageReceiverViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysMessageReceiverView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysMessageReceiverViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysMessageReceiverViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysMessageReceiverViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysMessageReceiverView[] | undefined;
}

/** 消息类型 -- 子项 */
export class SysMessageTypeItemView implements ISysMessageTypeItemView {
    /** 标识 */
    id?: string | undefined;
    /** 操作类型 *CHANGE_BED,PRESCRIPTION_REFUSE,PRESCRIPTION_AGAIN* */
    operationType?: string | undefined;
    /** 操作类型显示值 *换床,拒绝处方,修改处方* */
    operationTypeLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysMessageTypeItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.operationType = _data["operationType"];
            this.operationTypeLabel = _data["operationTypeLabel"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysMessageTypeItemView {
        data = typeof data === 'object' ? data : {};
        let result = new SysMessageTypeItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["operationType"] = this.operationType;
        data["operationTypeLabel"] = this.operationTypeLabel;
        data["remark"] = this.remark;
        return data;
    }
}

/** 消息类型 -- 子项 */
export interface ISysMessageTypeItemView {
    /** 标识 */
    id?: string | undefined;
    /** 操作类型 *CHANGE_BED,PRESCRIPTION_REFUSE,PRESCRIPTION_AGAIN* */
    operationType?: string | undefined;
    /** 操作类型显示值 *换床,拒绝处方,修改处方* */
    operationTypeLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 消息类型 */
export class SysMessageTypeView implements ISysMessageTypeView {
    /** 消息类型 *NOTIFICATION,TODO,WARN,WARN_EARLY* */
    type?: string | undefined;
    /** 消息类型显示值 *通知,待办,报警,预警* */
    typeLabel?: string | undefined;
    /** 子类型 */
    items?: SysMessageTypeItemView[] | undefined;

    constructor(data?: ISysMessageTypeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(SysMessageTypeItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysMessageTypeView {
        data = typeof data === 'object' ? data : {};
        let result = new SysMessageTypeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 消息类型 */
export interface ISysMessageTypeView {
    /** 消息类型 *NOTIFICATION,TODO,WARN,WARN_EARLY* */
    type?: string | undefined;
    /** 消息类型显示值 *通知,待办,报警,预警* */
    typeLabel?: string | undefined;
    /** 子类型 */
    items?: SysMessageTypeItemView[] | undefined;
}

/** Reponse */
export class SysMessageTypeViewResult implements ISysMessageTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysMessageTypeView[] | undefined;

    constructor(data?: ISysMessageTypeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysMessageTypeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysMessageTypeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysMessageTypeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysMessageTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysMessageTypeView[] | undefined;
}

/** 系统运维字典 */
export class SysOpsCode implements ISysOpsCode {
    /** 标识 */
    id?: string | undefined;
    /** 类型 *1:提示类,9:错误类* */
    type?: string | undefined;
    /** 编码 *10001,90001* *○不允许重复* */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 处理建议 */
    suggestion?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysOpsCode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.suggestion = _data["suggestion"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysOpsCode {
        data = typeof data === 'object' ? data : {};
        let result = new SysOpsCode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["code"] = this.code;
        data["message"] = this.message;
        data["suggestion"] = this.suggestion;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 系统运维字典 */
export interface ISysOpsCode {
    /** 标识 */
    id?: string | undefined;
    /** 类型 *1:提示类,9:错误类* */
    type?: string | undefined;
    /** 编码 *10001,90001* *○不允许重复* */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 处理建议 */
    suggestion?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysOpsCodeResult implements ISysOpsCodeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysOpsCode[] | undefined;

    constructor(data?: ISysOpsCodeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysOpsCode.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysOpsCodeResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysOpsCodeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysOpsCodeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysOpsCode[] | undefined;
}

/** Reponse */
export class SysOpsCodeResultEntry implements ISysOpsCodeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysOpsCode;

    constructor(data?: ISysOpsCodeResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysOpsCode.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysOpsCodeResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysOpsCodeResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysOpsCodeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysOpsCode;
}

/** 系统运维字典 (ViewModel) */
export class SysOpsCodeViewModel implements ISysOpsCodeViewModel {
    /** 类型 *1:提示类,9:错误类* */
    type!: string;
    /** 编码 *10001,90001* *○不允许重复* */
    code!: string;
    /** 消息 */
    message!: string;
    /** 处理建议 */
    suggestion?: string | undefined;

    constructor(data?: ISysOpsCodeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.suggestion = _data["suggestion"];
        }
    }

    static fromJS(data: any): SysOpsCodeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysOpsCodeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["code"] = this.code;
        data["message"] = this.message;
        data["suggestion"] = this.suggestion;
        return data;
    }
}

/** 系统运维字典 (ViewModel) */
export interface ISysOpsCodeViewModel {
    /** 类型 *1:提示类,9:错误类* */
    type: string;
    /** 编码 *10001,90001* *○不允许重复* */
    code: string;
    /** 消息 */
    message: string;
    /** 处理建议 */
    suggestion?: string | undefined;
}

/** 患者配置 */
export class SysPatientSetting implements ISysPatientSetting {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 名称 *○同一个`patient_id`下不允许重复* */
    name?: string | undefined;
    /** 代码 *用于检索* *○同一个`patient_id`下不允许重复* */
    code?: string | undefined;
    /** 值 */
    value?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: ISysPatientSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.value = _data["value"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysPatientSetting {
        data = typeof data === 'object' ? data : {};
        let result = new SysPatientSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["value"] = this.value;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者配置 */
export interface ISysPatientSetting {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 名称 *○同一个`patient_id`下不允许重复* */
    name?: string | undefined;
    /** 代码 *用于检索* *○同一个`patient_id`下不允许重复* */
    code?: string | undefined;
    /** 值 */
    value?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** Reponse */
export class SysPatientSettingResult implements ISysPatientSettingResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysPatientSetting[] | undefined;

    constructor(data?: ISysPatientSettingResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysPatientSetting.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysPatientSettingResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysPatientSettingResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysPatientSettingResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysPatientSetting[] | undefined;
}

/** Reponse */
export class SysPatientSettingResultEntry implements ISysPatientSettingResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysPatientSetting;

    constructor(data?: ISysPatientSettingResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysPatientSetting.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysPatientSettingResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysPatientSettingResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysPatientSettingResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysPatientSetting;
}

/** 患者配置 (ViewModel) */
export class SysPatientSettingViewModel implements ISysPatientSettingViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 名称 *○同一个`patient_id`下不允许重复* */
    name!: string;
    /** 代码 *用于检索* *○同一个`patient_id`下不允许重复* */
    code!: string;
    /** 值 */
    value!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysPatientSettingViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.value = _data["value"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysPatientSettingViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysPatientSettingViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["value"] = this.value;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者配置 (ViewModel) */
export interface ISysPatientSettingViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 名称 *○同一个`patient_id`下不允许重复* */
    name: string;
    /** 代码 *用于检索* *○同一个`patient_id`下不允许重复* */
    code: string;
    /** 值 */
    value: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 菜单功能权限 */
export class SysRight implements ISysRight {
    /** 标识 */
    id?: string | undefined;
    /** [菜单标识](菜单信息) */
    sysMenuId?: string | undefined;
    /** 类型 *1.页面,2.按钮,3.表格* */
    type?: number;
    /** 代码 *○同一个`sys_menu_id`下不允许重复* */
    code?: string | undefined;
    /** 名称 *○同一个`sys_menu_id`下不允许重复* */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysMenus?: SysMenu;

    constructor(data?: ISysRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysMenuId = _data["sysMenuId"];
            this.type = _data["type"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysMenus = _data["sysMenus"] ? SysMenu.fromJS(_data["sysMenus"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysRight {
        data = typeof data === 'object' ? data : {};
        let result = new SysRight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysMenuId"] = this.sysMenuId;
        data["type"] = this.type;
        data["code"] = this.code;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysMenus"] = this.sysMenus ? this.sysMenus.toJSON() : <any>undefined;
        return data;
    }
}

/** 菜单功能权限 */
export interface ISysRight {
    /** 标识 */
    id?: string | undefined;
    /** [菜单标识](菜单信息) */
    sysMenuId?: string | undefined;
    /** 类型 *1.页面,2.按钮,3.表格* */
    type?: number;
    /** 代码 *○同一个`sys_menu_id`下不允许重复* */
    code?: string | undefined;
    /** 名称 *○同一个`sys_menu_id`下不允许重复* */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysMenus?: SysMenu;
}

/** Reponse */
export class SysRightResult implements ISysRightResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysRight[] | undefined;

    constructor(data?: ISysRightResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysRight.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysRightResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysRightResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysRightResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysRight[] | undefined;
}

/** Reponse */
export class SysRightResultEntry implements ISysRightResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysRight;

    constructor(data?: ISysRightResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysRight.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysRightResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysRightResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysRightResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysRight;
}

/** 菜单功能权限 */
export class SysRightView implements ISysRightView {
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** [菜单标识](菜单信息) */
    sysMenuId?: string | undefined;
    /** 角色权限表ID（用于删除权限） */
    sysRoleRightId?: string | undefined;
    /** 类型 *1.页面,2.按钮,3.表格* */
    type?: number;
    /** 代码 */
    code?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否勾选 */
    enble?: boolean;

    constructor(data?: ISysRightView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysMenuId = _data["sysMenuId"];
            this.sysRoleRightId = _data["sysRoleRightId"];
            this.type = _data["type"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.enble = _data["enble"];
        }
    }

    static fromJS(data: any): SysRightView {
        data = typeof data === 'object' ? data : {};
        let result = new SysRightView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysMenuId"] = this.sysMenuId;
        data["sysRoleRightId"] = this.sysRoleRightId;
        data["type"] = this.type;
        data["code"] = this.code;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["enble"] = this.enble;
        return data;
    }
}

/** 菜单功能权限 */
export interface ISysRightView {
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** [菜单标识](菜单信息) */
    sysMenuId?: string | undefined;
    /** 角色权限表ID（用于删除权限） */
    sysRoleRightId?: string | undefined;
    /** 类型 *1.页面,2.按钮,3.表格* */
    type?: number;
    /** 代码 */
    code?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否勾选 */
    enble?: boolean;
}

/** 菜单功能权限 (ViewModel) */
export class SysRightViewModel implements ISysRightViewModel {
    /** [菜单标识](菜单信息Id) */
    sysMenuId!: string;
    /** 类型 *1.页面,2.按钮,3.表格* */
    type!: number;
    /** 代码 *○同一个`sys_menu_id`下不允许重复* */
    code!: string;
    /** 名称 *○同一个`sys_menu_id`下不允许重复* */
    name!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysRightViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysMenuId = _data["sysMenuId"];
            this.type = _data["type"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysRightViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysRightViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysMenuId"] = this.sysMenuId;
        data["type"] = this.type;
        data["code"] = this.code;
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

/** 菜单功能权限 (ViewModel) */
export interface ISysRightViewModel {
    /** [菜单标识](菜单信息Id) */
    sysMenuId: string;
    /** 类型 *1.页面,2.按钮,3.表格* */
    type: number;
    /** 代码 *○同一个`sys_menu_id`下不允许重复* */
    code: string;
    /** 名称 *○同一个`sys_menu_id`下不允许重复* */
    name: string;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class SysRightViewResult implements ISysRightViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysRightView[] | undefined;

    constructor(data?: ISysRightViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysRightView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysRightViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysRightViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysRightViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysRightView[] | undefined;
}

/** 角色信息 */
export class SysRole implements ISysRole {
    /** 标识 */
    id?: string | undefined;
    /** 角色名 *主任,医生,护士长,护士,工程师,管理员* *○不允许重复* */
    name?: string | undefined;
    /** 代码 *○不允许重复* */
    code?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.remark = _data["remark"];
            this.system = _data["system"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysRole {
        data = typeof data === 'object' ? data : {};
        let result = new SysRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["remark"] = this.remark;
        data["system"] = this.system;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 角色信息 */
export interface ISysRole {
    /** 标识 */
    id?: string | undefined;
    /** 角色名 *主任,医生,护士长,护士,工程师,管理员* *○不允许重复* */
    name?: string | undefined;
    /** 代码 *○不允许重复* */
    code?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysRoleResult implements ISysRoleResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysRole[] | undefined;

    constructor(data?: ISysRoleResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysRole.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysRoleResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysRoleResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysRoleResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysRole[] | undefined;
}

/** Reponse */
export class SysRoleResultEntry implements ISysRoleResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysRole;

    constructor(data?: ISysRoleResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysRole.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysRoleResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysRoleResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysRoleResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysRole;
}

/** 角色权限 */
export class SysRoleRight implements ISysRoleRight {
    /** 标识 */
    id?: string | undefined;
    /** [角色标识](用户角色) */
    sysRoleId?: string | undefined;
    /** [权限标识](菜单功能权限) */
    sysRightId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysRoles?: SysRole;
    sysRights?: SysRight;

    constructor(data?: ISysRoleRight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysRoleId = _data["sysRoleId"];
            this.sysRightId = _data["sysRightId"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysRoles = _data["sysRoles"] ? SysRole.fromJS(_data["sysRoles"]) : <any>undefined;
            this.sysRights = _data["sysRights"] ? SysRight.fromJS(_data["sysRights"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysRoleRight {
        data = typeof data === 'object' ? data : {};
        let result = new SysRoleRight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysRoleId"] = this.sysRoleId;
        data["sysRightId"] = this.sysRightId;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysRoles"] = this.sysRoles ? this.sysRoles.toJSON() : <any>undefined;
        data["sysRights"] = this.sysRights ? this.sysRights.toJSON() : <any>undefined;
        return data;
    }
}

/** 角色权限 */
export interface ISysRoleRight {
    /** 标识 */
    id?: string | undefined;
    /** [角色标识](用户角色) */
    sysRoleId?: string | undefined;
    /** [权限标识](菜单功能权限) */
    sysRightId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysRoles?: SysRole;
    sysRights?: SysRight;
}

/** Reponse */
export class SysRoleRightResult implements ISysRoleRightResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysRoleRight[] | undefined;

    constructor(data?: ISysRoleRightResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysRoleRight.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysRoleRightResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysRoleRightResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysRoleRightResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysRoleRight[] | undefined;
}

/** Reponse */
export class SysRoleRightResultEntry implements ISysRoleRightResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysRoleRight;

    constructor(data?: ISysRoleRightResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysRoleRight.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysRoleRightResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysRoleRightResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysRoleRightResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysRoleRight;
}

/** 角色权限 (ViewModel) */
export class SysRoleRightViewModel implements ISysRoleRightViewModel {
    /** [角色标识](用户角色Id) */
    sysRoleId!: string;
    /** [权限标识](菜单功能权限Id) */
    sysRightId!: string;

    constructor(data?: ISysRoleRightViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysRoleId = _data["sysRoleId"];
            this.sysRightId = _data["sysRightId"];
        }
    }

    static fromJS(data: any): SysRoleRightViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysRoleRightViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysRoleId"] = this.sysRoleId;
        data["sysRightId"] = this.sysRightId;
        return data;
    }
}

/** 角色权限 (ViewModel) */
export interface ISysRoleRightViewModel {
    /** [角色标识](用户角色Id) */
    sysRoleId: string;
    /** [权限标识](菜单功能权限Id) */
    sysRightId: string;
}

/** 角色信息 (ViewModel) */
export class SysRoleViewModel implements ISysRoleViewModel {
    /** 角色名 *主任,医生,护士长,护士,工程师,管理员* *○不允许重复* */
    name!: string;
    /** 代码 *○不允许重复* */
    code!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system!: number;

    constructor(data?: ISysRoleViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.remark = _data["remark"];
            this.system = _data["system"];
        }
    }

    static fromJS(data: any): SysRoleViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysRoleViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["remark"] = this.remark;
        data["system"] = this.system;
        return data;
    }
}

/** 角色信息 (ViewModel) */
export interface ISysRoleViewModel {
    /** 角色名 *主任,医生,护士长,护士,工程师,管理员* *○不允许重复* */
    name: string;
    /** 代码 *○不允许重复* */
    code: string;
    /** 备注 */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system: number;
}

/** 安全策略 */
export class SysSafetySetting implements ISysSafetySetting {
    /** 标识 */
    id?: string | undefined;
    /** 单用户多会话0,1 */
    multiSession?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysSafetySetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.multiSession = _data["multiSession"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysSafetySetting {
        data = typeof data === 'object' ? data : {};
        let result = new SysSafetySetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["multiSession"] = this.multiSession;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 安全策略 */
export interface ISysSafetySetting {
    /** 标识 */
    id?: string | undefined;
    /** 单用户多会话0,1 */
    multiSession?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysSafetySettingResult implements ISysSafetySettingResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysSafetySetting[] | undefined;

    constructor(data?: ISysSafetySettingResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysSafetySetting.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysSafetySettingResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysSafetySettingResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysSafetySettingResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysSafetySetting[] | undefined;
}

/** Reponse */
export class SysSafetySettingResultEntry implements ISysSafetySettingResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysSafetySetting;

    constructor(data?: ISysSafetySettingResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysSafetySetting.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysSafetySettingResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysSafetySettingResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysSafetySettingResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysSafetySetting;
}

/** 安全策略 (ViewModel) */
export class SysSafetySettingViewModel implements ISysSafetySettingViewModel {
    /** 单用户多会话0,1 */
    multiSession!: number;

    constructor(data?: ISysSafetySettingViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.multiSession = _data["multiSession"];
        }
    }

    static fromJS(data: any): SysSafetySettingViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysSafetySettingViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["multiSession"] = this.multiSession;
        return data;
    }
}

/** 安全策略 (ViewModel) */
export interface ISysSafetySettingViewModel {
    /** 单用户多会话0,1 */
    multiSession: number;
}

/** 大屏配置 */
export class SysScreenDetailEditModel implements ISysScreenDetailEditModel {
    /** [大屏明细标识](#大屏明细) */
    sysScreenItemId!: string;
    /** 大屏属性 例如: BACKCOLOR、FONTCOLOR、REFRESHTIME *○同一个`sys_screen_item_id`下不允许重复* */
    code!: string;
    /** 大屏属性值 例如：#FFFFFF、60 */
    value?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType?: string | undefined;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 大屏属性名称 *○同一个`sys_screen_item_id`下不允许重复* */
    name!: string;
    /** 序列 */
    sequence?: number;

    constructor(data?: ISysScreenDetailEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysScreenItemId = _data["sysScreenItemId"];
            this.code = _data["code"];
            this.value = _data["value"];
            this.remark = _data["remark"];
            this.inputType = _data["inputType"];
            this.availableValue = _data["availableValue"];
            this.name = _data["name"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): SysScreenDetailEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenDetailEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysScreenItemId"] = this.sysScreenItemId;
        data["code"] = this.code;
        data["value"] = this.value;
        data["remark"] = this.remark;
        data["inputType"] = this.inputType;
        data["availableValue"] = this.availableValue;
        data["name"] = this.name;
        data["sequence"] = this.sequence;
        return data;
    }
}

/** 大屏配置 */
export interface ISysScreenDetailEditModel {
    /** [大屏明细标识](#大屏明细) */
    sysScreenItemId: string;
    /** 大屏属性 例如: BACKCOLOR、FONTCOLOR、REFRESHTIME *○同一个`sys_screen_item_id`下不允许重复* */
    code: string;
    /** 大屏属性值 例如：#FFFFFF、60 */
    value?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType?: string | undefined;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 大屏属性名称 *○同一个`sys_screen_item_id`下不允许重复* */
    name: string;
    /** 序列 */
    sequence?: number;
}

/** 大屏配置 */
export class SysScreenDetailView implements ISysScreenDetailView {
    /** [大屏明细标识](#大屏明细) */
    sysScreenItemId!: string;
    /** 大屏属性 例如: BACKCOLOR、FONTCOLOR、REFRESHTIME *○同一个`sys_screen_item_id`下不允许重复* */
    code!: string;
    /** 大屏属性值 例如：#FFFFFF、60 */
    value?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType?: string | undefined;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 大屏属性名称 *○同一个`sys_screen_item_id`下不允许重复* */
    name!: string;
    /** 序列 */
    sequence?: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysScreenDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysScreenItemId = _data["sysScreenItemId"];
            this.code = _data["code"];
            this.value = _data["value"];
            this.remark = _data["remark"];
            this.inputType = _data["inputType"];
            this.availableValue = _data["availableValue"];
            this.name = _data["name"];
            this.sequence = _data["sequence"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysScreenDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysScreenItemId"] = this.sysScreenItemId;
        data["code"] = this.code;
        data["value"] = this.value;
        data["remark"] = this.remark;
        data["inputType"] = this.inputType;
        data["availableValue"] = this.availableValue;
        data["name"] = this.name;
        data["sequence"] = this.sequence;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 大屏配置 */
export interface ISysScreenDetailView {
    /** [大屏明细标识](#大屏明细) */
    sysScreenItemId: string;
    /** 大屏属性 例如: BACKCOLOR、FONTCOLOR、REFRESHTIME *○同一个`sys_screen_item_id`下不允许重复* */
    code: string;
    /** 大屏属性值 例如：#FFFFFF、60 */
    value?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType?: string | undefined;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 大屏属性名称 *○同一个`sys_screen_item_id`下不允许重复* */
    name: string;
    /** 序列 */
    sequence?: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysScreenDetailViewResult implements ISysScreenDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysScreenDetailView[] | undefined;

    constructor(data?: ISysScreenDetailViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysScreenDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysScreenDetailViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenDetailViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysScreenDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysScreenDetailView[] | undefined;
}

/** Reponse */
export class SysScreenDetailViewResultEntry implements ISysScreenDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysScreenDetailView;

    constructor(data?: ISysScreenDetailViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysScreenDetailView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysScreenDetailViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenDetailViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysScreenDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysScreenDetailView;
}

/** 大屏明细 */
export class SysScreenItemEditModel implements ISysScreenItemEditModel {
    /** [大屏分类标识](#大屏分类) */
    sysScreenTypeId!: string;
    /** 大屏名称 */
    name!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏标识，客户端使用 */
    code!: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId?: string | undefined;

    constructor(data?: ISysScreenItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysScreenTypeId = _data["sysScreenTypeId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.code = _data["code"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
        }
    }

    static fromJS(data: any): SysScreenItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysScreenTypeId"] = this.sysScreenTypeId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["code"] = this.code;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        return data;
    }
}

/** 大屏明细 */
export interface ISysScreenItemEditModel {
    /** [大屏分类标识](#大屏分类) */
    sysScreenTypeId: string;
    /** 大屏名称 */
    name: string;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏标识，客户端使用 */
    code: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId?: string | undefined;
}

/** 大屏明细 */
export class SysScreenItemView implements ISysScreenItemView {
    /** [大屏分类标识](#大屏分类) */
    sysScreenTypeId!: string;
    /** 大屏名称 */
    name!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏标识，客户端使用 */
    code!: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大屏分类名称 */
    sysScreenTypeName?: string | undefined;
    /** 大屏分类路径 */
    sysScreenTypeUrl?: string | undefined;
    /** 归属透析室名称 */
    sysHospitalAreaName?: string | undefined;
    /** 大屏属性 */
    details?: SysScreenDetailView[] | undefined;

    constructor(data?: ISysScreenItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysScreenTypeId = _data["sysScreenTypeId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.code = _data["code"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysScreenTypeName = _data["sysScreenTypeName"];
            this.sysScreenTypeUrl = _data["sysScreenTypeUrl"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(SysScreenDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysScreenItemView {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysScreenTypeId"] = this.sysScreenTypeId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["code"] = this.code;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysScreenTypeName"] = this.sysScreenTypeName;
        data["sysScreenTypeUrl"] = this.sysScreenTypeUrl;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        return data;
    }
}

/** 大屏明细 */
export interface ISysScreenItemView {
    /** [大屏分类标识](#大屏分类) */
    sysScreenTypeId: string;
    /** 大屏名称 */
    name: string;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏标识，客户端使用 */
    code: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 大屏分类名称 */
    sysScreenTypeName?: string | undefined;
    /** 大屏分类路径 */
    sysScreenTypeUrl?: string | undefined;
    /** 归属透析室名称 */
    sysHospitalAreaName?: string | undefined;
    /** 大屏属性 */
    details?: SysScreenDetailView[] | undefined;
}

/** Reponse */
export class SysScreenItemViewResult implements ISysScreenItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysScreenItemView[] | undefined;

    constructor(data?: ISysScreenItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysScreenItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysScreenItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysScreenItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysScreenItemView[] | undefined;
}

/** Reponse */
export class SysScreenItemViewResultEntry implements ISysScreenItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysScreenItemView;

    constructor(data?: ISysScreenItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysScreenItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysScreenItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysScreenItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysScreenItemView;
}

/** 大屏属性明细 */
export class SysScreenTypeDetailEditModel implements ISysScreenTypeDetailEditModel {
    /** [大屏分类标识](#大屏分类) */
    sysScreenTypeId!: string;
    /** 大屏属性名称 *○同一个`sys_screen_type_id`下不允许重复* */
    name!: string;
    /** 大屏属性 例如: BACKCOLOR、FONTCOLOR、REFRESHTIME *○同一个`sys_screen_type_id`下不允许重复* */
    code!: string;
    /** 大屏属性值 例如：#FFFFFF、60 */
    value!: string;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType?: string | undefined;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysScreenTypeDetailEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysScreenTypeId = _data["sysScreenTypeId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.value = _data["value"];
            this.inputType = _data["inputType"];
            this.availableValue = _data["availableValue"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysScreenTypeDetailEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenTypeDetailEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysScreenTypeId"] = this.sysScreenTypeId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["value"] = this.value;
        data["inputType"] = this.inputType;
        data["availableValue"] = this.availableValue;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        return data;
    }
}

/** 大屏属性明细 */
export interface ISysScreenTypeDetailEditModel {
    /** [大屏分类标识](#大屏分类) */
    sysScreenTypeId: string;
    /** 大屏属性名称 *○同一个`sys_screen_type_id`下不允许重复* */
    name: string;
    /** 大屏属性 例如: BACKCOLOR、FONTCOLOR、REFRESHTIME *○同一个`sys_screen_type_id`下不允许重复* */
    code: string;
    /** 大屏属性值 例如：#FFFFFF、60 */
    value: string;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType?: string | undefined;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 大屏属性明细 */
export class SysScreenTypeDetailView implements ISysScreenTypeDetailView {
    /** [大屏分类标识](#大屏分类) */
    sysScreenTypeId!: string;
    /** 大屏属性名称 *○同一个`sys_screen_type_id`下不允许重复* */
    name!: string;
    /** 大屏属性 例如: BACKCOLOR、FONTCOLOR、REFRESHTIME *○同一个`sys_screen_type_id`下不允许重复* */
    code!: string;
    /** 大屏属性值 例如：#FFFFFF、60 */
    value!: string;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType?: string | undefined;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysScreenTypeDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysScreenTypeId = _data["sysScreenTypeId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.value = _data["value"];
            this.inputType = _data["inputType"];
            this.availableValue = _data["availableValue"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysScreenTypeDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenTypeDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysScreenTypeId"] = this.sysScreenTypeId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["value"] = this.value;
        data["inputType"] = this.inputType;
        data["availableValue"] = this.availableValue;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 大屏属性明细 */
export interface ISysScreenTypeDetailView {
    /** [大屏分类标识](#大屏分类) */
    sysScreenTypeId: string;
    /** 大屏属性名称 *○同一个`sys_screen_type_id`下不允许重复* */
    name: string;
    /** 大屏属性 例如: BACKCOLOR、FONTCOLOR、REFRESHTIME *○同一个`sys_screen_type_id`下不允许重复* */
    code: string;
    /** 大屏属性值 例如：#FFFFFF、60 */
    value: string;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType?: string | undefined;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysScreenTypeDetailViewResult implements ISysScreenTypeDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysScreenTypeDetailView[] | undefined;

    constructor(data?: ISysScreenTypeDetailViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysScreenTypeDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysScreenTypeDetailViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenTypeDetailViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysScreenTypeDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysScreenTypeDetailView[] | undefined;
}

/** Reponse */
export class SysScreenTypeDetailViewResultEntry implements ISysScreenTypeDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysScreenTypeDetailView;

    constructor(data?: ISysScreenTypeDetailViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysScreenTypeDetailView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysScreenTypeDetailViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenTypeDetailViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysScreenTypeDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysScreenTypeDetailView;
}

/** 大屏分类 */
export class SysScreenTypeEditModel implements ISysScreenTypeEditModel {
    /** 大屏分类名称 *不允许重复* */
    name!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏分类路径 */
    url!: string;

    constructor(data?: ISysScreenTypeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): SysScreenTypeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenTypeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["url"] = this.url;
        return data;
    }
}

/** 大屏分类 */
export interface ISysScreenTypeEditModel {
    /** 大屏分类名称 *不允许重复* */
    name: string;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏分类路径 */
    url: string;
}

/** 大屏分类 */
export class SysScreenTypeView implements ISysScreenTypeView {
    /** 大屏分类名称 *不允许重复* */
    name!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏分类路径 */
    url!: string;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysScreenTypeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.url = _data["url"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysScreenTypeView {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenTypeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["url"] = this.url;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 大屏分类 */
export interface ISysScreenTypeView {
    /** 大屏分类名称 *不允许重复* */
    name: string;
    /** 备注 */
    remark?: string | undefined;
    /** 大屏分类路径 */
    url: string;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysScreenTypeViewResult implements ISysScreenTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysScreenTypeView[] | undefined;

    constructor(data?: ISysScreenTypeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysScreenTypeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysScreenTypeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenTypeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysScreenTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysScreenTypeView[] | undefined;
}

/** Reponse */
export class SysScreenTypeViewResultEntry implements ISysScreenTypeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysScreenTypeView;

    constructor(data?: ISysScreenTypeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysScreenTypeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysScreenTypeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysScreenTypeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysScreenTypeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysScreenTypeView;
}

export class SysSettingEditModel implements ISysSettingEditModel {
    /** [系统参数分组标识](#系统参数分组) */
    sysSettingGroupId!: string;
    /** 名称 *○不允许重复* */
    name!: string;
    /** 代码 *用于检索* *○不允许重复* */
    code!: string;
    /** 值 */
    value?: string | undefined;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType!: string;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 字典代码 *当输入类型为下拉框时该字段非空的情况下可选值加载字典* */
    dicTypeCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysSettingEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysSettingGroupId = _data["sysSettingGroupId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.value = _data["value"];
            this.inputType = _data["inputType"];
            this.availableValue = _data["availableValue"];
            this.dicTypeCode = _data["dicTypeCode"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysSettingEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysSettingEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysSettingGroupId"] = this.sysSettingGroupId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["value"] = this.value;
        data["inputType"] = this.inputType;
        data["availableValue"] = this.availableValue;
        data["dicTypeCode"] = this.dicTypeCode;
        data["remark"] = this.remark;
        return data;
    }
}

export interface ISysSettingEditModel {
    /** [系统参数分组标识](#系统参数分组) */
    sysSettingGroupId: string;
    /** 名称 *○不允许重复* */
    name: string;
    /** 代码 *用于检索* *○不允许重复* */
    code: string;
    /** 值 */
    value?: string | undefined;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType: string;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 字典代码 *当输入类型为下拉框时该字段非空的情况下可选值加载字典* */
    dicTypeCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 系统参数分组 */
export class SysSettingGroup implements ISysSettingGroup {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysSettingGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysSettingGroup {
        data = typeof data === 'object' ? data : {};
        let result = new SysSettingGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 系统参数分组 */
export interface ISysSettingGroup {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysSettingGroupResult implements ISysSettingGroupResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysSettingGroup[] | undefined;

    constructor(data?: ISysSettingGroupResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysSettingGroup.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysSettingGroupResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysSettingGroupResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysSettingGroupResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysSettingGroup[] | undefined;
}

/** Reponse */
export class SysSettingGroupResultEntry implements ISysSettingGroupResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysSettingGroup;

    constructor(data?: ISysSettingGroupResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysSettingGroup.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysSettingGroupResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysSettingGroupResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysSettingGroupResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysSettingGroup;
}

/** 系统参数分组 (ViewModel) */
export class SysSettingGroupViewModel implements ISysSettingGroupViewModel {
    /** 名称 *○不允许重复* */
    name!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysSettingGroupViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysSettingGroupViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysSettingGroupViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

/** 系统参数分组 (ViewModel) */
export interface ISysSettingGroupViewModel {
    /** 名称 *○不允许重复* */
    name: string;
    /** 备注 */
    remark?: string | undefined;
}

export class SysSettingView implements ISysSettingView {
    /** 标识 */
    id?: string | undefined;
    /** [系统参数分组标识](系统参数分组) */
    sysSettingGroupId?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 分组序列 */
    groupSequence?: number;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 代码 *用于检索* *○不允许重复* */
    code?: string | undefined;
    /** 值 */
    value?: string | undefined;
    /** 值的显示值 */
    valueLabel?: string | undefined;
    /** 输入类型INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType?: string | undefined;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 字典代码 *当输入类型为下拉框时该字段非空的情况下可选值加载字典* */
    dicTypeCode?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysSettingView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysSettingGroupId = _data["sysSettingGroupId"];
            this.group = _data["group"];
            this.groupSequence = _data["groupSequence"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.value = _data["value"];
            this.valueLabel = _data["valueLabel"];
            this.inputType = _data["inputType"];
            this.availableValue = _data["availableValue"];
            this.dicTypeCode = _data["dicTypeCode"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysSettingView {
        data = typeof data === 'object' ? data : {};
        let result = new SysSettingView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysSettingGroupId"] = this.sysSettingGroupId;
        data["group"] = this.group;
        data["groupSequence"] = this.groupSequence;
        data["name"] = this.name;
        data["code"] = this.code;
        data["value"] = this.value;
        data["valueLabel"] = this.valueLabel;
        data["inputType"] = this.inputType;
        data["availableValue"] = this.availableValue;
        data["dicTypeCode"] = this.dicTypeCode;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface ISysSettingView {
    /** 标识 */
    id?: string | undefined;
    /** [系统参数分组标识](系统参数分组) */
    sysSettingGroupId?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 分组序列 */
    groupSequence?: number;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 代码 *用于检索* *○不允许重复* */
    code?: string | undefined;
    /** 值 */
    value?: string | undefined;
    /** 值的显示值 */
    valueLabel?: string | undefined;
    /** 输入类型INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType?: string | undefined;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 字典代码 *当输入类型为下拉框时该字段非空的情况下可选值加载字典* */
    dicTypeCode?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 系统参数 (ViewModel) */
export class SysSettingViewModel implements ISysSettingViewModel {
    /** [系统参数分组标识](系统参数分组Id) */
    sysSettingGroupId!: string;
    /** 名称 *○不允许重复* */
    name!: string;
    /** 代码 *用于检索* *○不允许重复* */
    code!: string;
    /** 值 */
    value!: string;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType!: string;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 字典代码 *当输入类型为下拉框时该字段非空的情况下可选值加载字典* */
    dicTypeCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysSettingViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysSettingGroupId = _data["sysSettingGroupId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.value = _data["value"];
            this.inputType = _data["inputType"];
            this.availableValue = _data["availableValue"];
            this.dicTypeCode = _data["dicTypeCode"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysSettingViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysSettingViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysSettingGroupId"] = this.sysSettingGroupId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["value"] = this.value;
        data["inputType"] = this.inputType;
        data["availableValue"] = this.availableValue;
        data["dicTypeCode"] = this.dicTypeCode;
        data["remark"] = this.remark;
        return data;
    }
}

/** 系统参数 (ViewModel) */
export interface ISysSettingViewModel {
    /** [系统参数分组标识](系统参数分组Id) */
    sysSettingGroupId: string;
    /** 名称 *○不允许重复* */
    name: string;
    /** 代码 *用于检索* *○不允许重复* */
    code: string;
    /** 值 */
    value: string;
    /** 输入类型 INPUT:文本框,SELECT:下拉框,BUTTONGROUP:按钮组,SWITCH:开关 */
    inputType: string;
    /** 可选值 *输入类型为下拉框/按钮组时必填* */
    availableValue?: string | undefined;
    /** 字典代码 *当输入类型为下拉框时该字段非空的情况下可选值加载字典* */
    dicTypeCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class SysSettingViewResult implements ISysSettingViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysSettingView[] | undefined;

    constructor(data?: ISysSettingViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysSettingView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysSettingViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysSettingViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysSettingViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysSettingView[] | undefined;
}

/** Reponse */
export class SysSettingViewResultEntry implements ISysSettingViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysSettingView;

    constructor(data?: ISysSettingViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysSettingView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysSettingViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysSettingViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysSettingViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysSettingView;
}

/** 任务历史 */
export class SysTaskHistoryEditModel implements ISysTaskHistoryEditModel {
    /** [任务清单标识](#任务清单) */
    sysTaskItemId!: string;
    /** 执行时间 */
    time?: dayjs.Dayjs | undefined;
    /** 执行耗时（s） */
    cost?: number | undefined;
    /** 执行结果 `DIC.TASK.EXEC.RESULT` */
    result?: string | undefined;
    /** 执行失败原因 */
    failReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysTaskHistoryEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysTaskItemId = _data["sysTaskItemId"];
            this.time = _data["time"] ? dayjs(_data["time"].toString()) : <any>undefined;
            this.cost = _data["cost"];
            this.result = _data["result"];
            this.failReason = _data["failReason"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysTaskHistoryEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysTaskHistoryEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysTaskItemId"] = this.sysTaskItemId;
        data["time"] = this.time ? this.time.toLocaleString() : <any>undefined;
        data["cost"] = this.cost;
        data["result"] = this.result;
        data["failReason"] = this.failReason;
        data["remark"] = this.remark;
        return data;
    }
}

/** 任务历史 */
export interface ISysTaskHistoryEditModel {
    /** [任务清单标识](#任务清单) */
    sysTaskItemId: string;
    /** 执行时间 */
    time?: dayjs.Dayjs | undefined;
    /** 执行耗时（s） */
    cost?: number | undefined;
    /** 执行结果 `DIC.TASK.EXEC.RESULT` */
    result?: string | undefined;
    /** 执行失败原因 */
    failReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 任务历史 */
export class SysTaskHistoryView implements ISysTaskHistoryView {
    /** [任务清单标识](#任务清单) */
    sysTaskItemId!: string;
    /** 执行时间 */
    time?: dayjs.Dayjs | undefined;
    /** 执行耗时（s） */
    cost?: number | undefined;
    /** 执行结果 `DIC.TASK.EXEC.RESULT` */
    result?: string | undefined;
    /** 执行失败原因 */
    failReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 任务名称 */
    name?: string | undefined;
    /** 任务类型 */
    type?: string | undefined;
    /** 任务类型展示值 */
    typeLabel?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 执行结果显示值 */
    resultLabel?: string | undefined;

    constructor(data?: ISysTaskHistoryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysTaskItemId = _data["sysTaskItemId"];
            this.time = _data["time"] ? dayjs(_data["time"].toString()) : <any>undefined;
            this.cost = _data["cost"];
            this.result = _data["result"];
            this.failReason = _data["failReason"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.resultLabel = _data["resultLabel"];
        }
    }

    static fromJS(data: any): SysTaskHistoryView {
        data = typeof data === 'object' ? data : {};
        let result = new SysTaskHistoryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysTaskItemId"] = this.sysTaskItemId;
        data["time"] = this.time ? this.time.toLocaleString() : <any>undefined;
        data["cost"] = this.cost;
        data["result"] = this.result;
        data["failReason"] = this.failReason;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["name"] = this.name;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["resultLabel"] = this.resultLabel;
        return data;
    }
}

/** 任务历史 */
export interface ISysTaskHistoryView {
    /** [任务清单标识](#任务清单) */
    sysTaskItemId: string;
    /** 执行时间 */
    time?: dayjs.Dayjs | undefined;
    /** 执行耗时（s） */
    cost?: number | undefined;
    /** 执行结果 `DIC.TASK.EXEC.RESULT` */
    result?: string | undefined;
    /** 执行失败原因 */
    failReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 任务名称 */
    name?: string | undefined;
    /** 任务类型 */
    type?: string | undefined;
    /** 任务类型展示值 */
    typeLabel?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 执行结果显示值 */
    resultLabel?: string | undefined;
}

/** Reponse */
export class SysTaskHistoryViewResult implements ISysTaskHistoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysTaskHistoryView[] | undefined;

    constructor(data?: ISysTaskHistoryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysTaskHistoryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysTaskHistoryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysTaskHistoryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysTaskHistoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysTaskHistoryView[] | undefined;
}

/** Reponse */
export class SysTaskHistoryViewResultEntry implements ISysTaskHistoryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysTaskHistoryView;

    constructor(data?: ISysTaskHistoryViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysTaskHistoryView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysTaskHistoryViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysTaskHistoryViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysTaskHistoryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysTaskHistoryView;
}

/** 任务清单 */
export class SysTaskItemEditModel implements ISysTaskItemEditModel {
    /** 类型 `DIC.TASK.TYPE` */
    type!: string;
    /** 名称 *不允许重复* */
    name!: string;
    /** 当前状态 `DIC.TASK.RUN.STATE` */
    status?: string | undefined;
    /** 上次执行时间 */
    lastTime?: dayjs.Dayjs | undefined;
    /** 上次执行耗时（s） */
    lastCost?: number | undefined;
    /** 上次执行结果 `DIC.TASK.EXEC.RESULT` */
    lastResult?: string | undefined;
    /** 上次执行失败原因 */
    lastFailReason?: string | undefined;
    /** 下次执行时间 */
    nextTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 编码 `DIC.TASK.CODE` *不允许重复* */
    code!: string;
    /** Cron表达式 */
    cron?: string | undefined;

    constructor(data?: ISysTaskItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.name = _data["name"];
            this.status = _data["status"];
            this.lastTime = _data["lastTime"] ? dayjs(_data["lastTime"].toString()) : <any>undefined;
            this.lastCost = _data["lastCost"];
            this.lastResult = _data["lastResult"];
            this.lastFailReason = _data["lastFailReason"];
            this.nextTime = _data["nextTime"] ? dayjs(_data["nextTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.code = _data["code"];
            this.cron = _data["cron"];
        }
    }

    static fromJS(data: any): SysTaskItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysTaskItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["name"] = this.name;
        data["status"] = this.status;
        data["lastTime"] = this.lastTime ? this.lastTime.toLocaleString() : <any>undefined;
        data["lastCost"] = this.lastCost;
        data["lastResult"] = this.lastResult;
        data["lastFailReason"] = this.lastFailReason;
        data["nextTime"] = this.nextTime ? this.nextTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["code"] = this.code;
        data["cron"] = this.cron;
        return data;
    }
}

/** 任务清单 */
export interface ISysTaskItemEditModel {
    /** 类型 `DIC.TASK.TYPE` */
    type: string;
    /** 名称 *不允许重复* */
    name: string;
    /** 当前状态 `DIC.TASK.RUN.STATE` */
    status?: string | undefined;
    /** 上次执行时间 */
    lastTime?: dayjs.Dayjs | undefined;
    /** 上次执行耗时（s） */
    lastCost?: number | undefined;
    /** 上次执行结果 `DIC.TASK.EXEC.RESULT` */
    lastResult?: string | undefined;
    /** 上次执行失败原因 */
    lastFailReason?: string | undefined;
    /** 下次执行时间 */
    nextTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 编码 `DIC.TASK.CODE` *不允许重复* */
    code: string;
    /** Cron表达式 */
    cron?: string | undefined;
}

export class SysTaskItemStaticsItemView implements ISysTaskItemStaticsItemView {
    /** 状态名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: ISysTaskItemStaticsItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): SysTaskItemStaticsItemView {
        data = typeof data === 'object' ? data : {};
        let result = new SysTaskItemStaticsItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["count"] = this.count;
        return data;
    }
}

export interface ISysTaskItemStaticsItemView {
    /** 状态名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
}

export class SysTaskItemStaticsView implements ISysTaskItemStaticsView {
    /** 分类汇总 */
    types?: SysTaskItemStaticsItemView[] | undefined;
    /** 状态汇总 */
    status?: SysTaskItemStaticsItemView[] | undefined;

    constructor(data?: ISysTaskItemStaticsView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["types"])) {
                this.types = [] as any;
                for (let item of _data["types"])
                    this.types!.push(SysTaskItemStaticsItemView.fromJS(item));
            }
            if (Array.isArray(_data["status"])) {
                this.status = [] as any;
                for (let item of _data["status"])
                    this.status!.push(SysTaskItemStaticsItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysTaskItemStaticsView {
        data = typeof data === 'object' ? data : {};
        let result = new SysTaskItemStaticsView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.types)) {
            data["types"] = [];
            for (let item of this.types)
                data["types"].push(item.toJSON());
        }
        if (Array.isArray(this.status)) {
            data["status"] = [];
            for (let item of this.status)
                data["status"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISysTaskItemStaticsView {
    /** 分类汇总 */
    types?: SysTaskItemStaticsItemView[] | undefined;
    /** 状态汇总 */
    status?: SysTaskItemStaticsItemView[] | undefined;
}

/** Reponse */
export class SysTaskItemStaticsViewResultEntry implements ISysTaskItemStaticsViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysTaskItemStaticsView;

    constructor(data?: ISysTaskItemStaticsViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysTaskItemStaticsView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysTaskItemStaticsViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysTaskItemStaticsViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysTaskItemStaticsViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysTaskItemStaticsView;
}

/** 任务清单 */
export class SysTaskItemView implements ISysTaskItemView {
    /** 类型 `DIC.TASK.TYPE` */
    type!: string;
    /** 名称 *不允许重复* */
    name!: string;
    /** 当前状态 `DIC.TASK.RUN.STATE` */
    status?: string | undefined;
    /** 上次执行时间 */
    lastTime?: dayjs.Dayjs | undefined;
    /** 上次执行耗时（s） */
    lastCost?: number | undefined;
    /** 上次执行结果 `DIC.TASK.EXEC.RESULT` */
    lastResult?: string | undefined;
    /** 上次执行失败原因 */
    lastFailReason?: string | undefined;
    /** 下次执行时间 */
    nextTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 编码 `DIC.TASK.CODE` *不允许重复* */
    code!: string;
    /** Cron表达式 */
    cron?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 类型显示值 */
    typeLabel?: string | undefined;
    /** 当前状态显示值 */
    statusLabel?: string | undefined;
    /** 上次执行结果显示值 */
    lastResultLabel?: string | undefined;
    /** 任务编码显示值 */
    codeLabel?: string | undefined;

    constructor(data?: ISysTaskItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.name = _data["name"];
            this.status = _data["status"];
            this.lastTime = _data["lastTime"] ? dayjs(_data["lastTime"].toString()) : <any>undefined;
            this.lastCost = _data["lastCost"];
            this.lastResult = _data["lastResult"];
            this.lastFailReason = _data["lastFailReason"];
            this.nextTime = _data["nextTime"] ? dayjs(_data["nextTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.code = _data["code"];
            this.cron = _data["cron"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.typeLabel = _data["typeLabel"];
            this.statusLabel = _data["statusLabel"];
            this.lastResultLabel = _data["lastResultLabel"];
            this.codeLabel = _data["codeLabel"];
        }
    }

    static fromJS(data: any): SysTaskItemView {
        data = typeof data === 'object' ? data : {};
        let result = new SysTaskItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["name"] = this.name;
        data["status"] = this.status;
        data["lastTime"] = this.lastTime ? this.lastTime.toLocaleString() : <any>undefined;
        data["lastCost"] = this.lastCost;
        data["lastResult"] = this.lastResult;
        data["lastFailReason"] = this.lastFailReason;
        data["nextTime"] = this.nextTime ? this.nextTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["code"] = this.code;
        data["cron"] = this.cron;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["typeLabel"] = this.typeLabel;
        data["statusLabel"] = this.statusLabel;
        data["lastResultLabel"] = this.lastResultLabel;
        data["codeLabel"] = this.codeLabel;
        return data;
    }
}

/** 任务清单 */
export interface ISysTaskItemView {
    /** 类型 `DIC.TASK.TYPE` */
    type: string;
    /** 名称 *不允许重复* */
    name: string;
    /** 当前状态 `DIC.TASK.RUN.STATE` */
    status?: string | undefined;
    /** 上次执行时间 */
    lastTime?: dayjs.Dayjs | undefined;
    /** 上次执行耗时（s） */
    lastCost?: number | undefined;
    /** 上次执行结果 `DIC.TASK.EXEC.RESULT` */
    lastResult?: string | undefined;
    /** 上次执行失败原因 */
    lastFailReason?: string | undefined;
    /** 下次执行时间 */
    nextTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 编码 `DIC.TASK.CODE` *不允许重复* */
    code: string;
    /** Cron表达式 */
    cron?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 类型显示值 */
    typeLabel?: string | undefined;
    /** 当前状态显示值 */
    statusLabel?: string | undefined;
    /** 上次执行结果显示值 */
    lastResultLabel?: string | undefined;
    /** 任务编码显示值 */
    codeLabel?: string | undefined;
}

/** Reponse */
export class SysTaskItemViewResult implements ISysTaskItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysTaskItemView[] | undefined;

    constructor(data?: ISysTaskItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysTaskItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysTaskItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysTaskItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysTaskItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysTaskItemView[] | undefined;
}

/** Reponse */
export class SysTaskItemViewResultEntry implements ISysTaskItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysTaskItemView;

    constructor(data?: ISysTaskItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysTaskItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysTaskItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysTaskItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysTaskItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysTaskItemView;
}

/** 在线终端管理 */
export class SysTerminalView implements ISysTerminalView {
    /** [用户标识](#用户信息) */
    sysUserId!: string;
    /** 终端类型 */
    type!: string;
    /** 终端IP */
    ip!: string;
    /** 上线时间 */
    onlineTime!: dayjs.Dayjs;
    /** 下线时间 */
    offlineTime?: dayjs.Dayjs | undefined;
    /** 最后一次操作时间 */
    oprateTime!: dayjs.Dayjs;
    /** 标识 */
    id?: string | undefined;
    /** 在线状态 */
    status?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 归属角色名称集合(使用英文逗号分隔) */
    sysRoleNames?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;

    constructor(data?: ISysTerminalView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysUserId = _data["sysUserId"];
            this.type = _data["type"];
            this.ip = _data["ip"];
            this.onlineTime = _data["onlineTime"] ? dayjs(_data["onlineTime"].toString()) : <any>undefined;
            this.offlineTime = _data["offlineTime"] ? dayjs(_data["offlineTime"].toString()) : <any>undefined;
            this.oprateTime = _data["oprateTime"] ? dayjs(_data["oprateTime"].toString()) : <any>undefined;
            this.id = _data["id"];
            this.status = _data["status"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.fullName = _data["fullName"];
            this.sysRoleNames = _data["sysRoleNames"];
            this.jobNumber = _data["jobNumber"];
            this.loginName = _data["loginName"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
        }
    }

    static fromJS(data: any): SysTerminalView {
        data = typeof data === 'object' ? data : {};
        let result = new SysTerminalView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysUserId"] = this.sysUserId;
        data["type"] = this.type;
        data["ip"] = this.ip;
        data["onlineTime"] = this.onlineTime ? this.onlineTime.toLocaleString() : <any>undefined;
        data["offlineTime"] = this.offlineTime ? this.offlineTime.toLocaleString() : <any>undefined;
        data["oprateTime"] = this.oprateTime ? this.oprateTime.toLocaleString() : <any>undefined;
        data["id"] = this.id;
        data["status"] = this.status;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["fullName"] = this.fullName;
        data["sysRoleNames"] = this.sysRoleNames;
        data["jobNumber"] = this.jobNumber;
        data["loginName"] = this.loginName;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        return data;
    }
}

/** 在线终端管理 */
export interface ISysTerminalView {
    /** [用户标识](#用户信息) */
    sysUserId: string;
    /** 终端类型 */
    type: string;
    /** 终端IP */
    ip: string;
    /** 上线时间 */
    onlineTime: dayjs.Dayjs;
    /** 下线时间 */
    offlineTime?: dayjs.Dayjs | undefined;
    /** 最后一次操作时间 */
    oprateTime: dayjs.Dayjs;
    /** 标识 */
    id?: string | undefined;
    /** 在线状态 */
    status?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 全名 */
    fullName?: string | undefined;
    /** 归属角色名称集合(使用英文逗号分隔) */
    sysRoleNames?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
}

/** Reponse */
export class SysTerminalViewResult implements ISysTerminalViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysTerminalView[] | undefined;

    constructor(data?: ISysTerminalViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysTerminalView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysTerminalViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysTerminalViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysTerminalViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysTerminalView[] | undefined;
}

/** Reponse */
export class SysTerminalViewResultEntry implements ISysTerminalViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysTerminalView;

    constructor(data?: ISysTerminalViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysTerminalView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysTerminalViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysTerminalViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysTerminalViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysTerminalView;
}

/** 根据流程重组 */
export class SysTodayCardAllView implements ISysTodayCardAllView {
    /** 流程状态 */
    stats?: string | undefined;
    /** 卡片配置 */
    cardItems?: SysTodayCardView[] | undefined;

    constructor(data?: ISysTodayCardAllView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.stats = _data["stats"];
            if (Array.isArray(_data["cardItems"])) {
                this.cardItems = [] as any;
                for (let item of _data["cardItems"])
                    this.cardItems!.push(SysTodayCardView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysTodayCardAllView {
        data = typeof data === 'object' ? data : {};
        let result = new SysTodayCardAllView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stats"] = this.stats;
        if (Array.isArray(this.cardItems)) {
            data["cardItems"] = [];
            for (let item of this.cardItems)
                data["cardItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 根据流程重组 */
export interface ISysTodayCardAllView {
    /** 流程状态 */
    stats?: string | undefined;
    /** 卡片配置 */
    cardItems?: SysTodayCardView[] | undefined;
}

/** 今日就诊卡片自定义字段配置 */
export class SysTodayCardCustomEditModel implements ISysTodayCardCustomEditModel {
    /** 区域，示例：M-L-R1-C1/中间-左起-第1行-第1列 栏位 *左侧/L;右侧/R；中间/M；上面/U;下面/D;行/R;列/C;* */
    code!: string;
    /** 名称 */
    name!: string;
    /** 自定义名称 */
    nameCustom?: string | undefined;
    /** 值 */
    value!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 版本 */
    version!: number;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: ISysTodayCardCustomEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
            this.nameCustom = _data["nameCustom"];
            this.value = _data["value"];
            this.remark = _data["remark"];
            this.version = _data["version"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): SysTodayCardCustomEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysTodayCardCustomEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["nameCustom"] = this.nameCustom;
        data["value"] = this.value;
        data["remark"] = this.remark;
        data["version"] = this.version;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 今日就诊卡片自定义字段配置 */
export interface ISysTodayCardCustomEditModel {
    /** 区域，示例：M-L-R1-C1/中间-左起-第1行-第1列 栏位 *左侧/L;右侧/R；中间/M；上面/U;下面/D;行/R;列/C;* */
    code: string;
    /** 名称 */
    name: string;
    /** 自定义名称 */
    nameCustom?: string | undefined;
    /** 值 */
    value: string;
    /** 备注 */
    remark?: string | undefined;
    /** 版本 */
    version: number;
    /** 启用状态0,1 */
    enabled: number;
}

export class SysTodayCardCustomItemView implements ISysTodayCardCustomItemView {
    /** 名称 */
    name?: string | undefined;
    /** 名称 */
    nameCustom?: string | undefined;
    /** 值 */
    value?: string | undefined;

    constructor(data?: ISysTodayCardCustomItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.nameCustom = _data["nameCustom"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): SysTodayCardCustomItemView {
        data = typeof data === 'object' ? data : {};
        let result = new SysTodayCardCustomItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["nameCustom"] = this.nameCustom;
        data["value"] = this.value;
        return data;
    }
}

export interface ISysTodayCardCustomItemView {
    /** 名称 */
    name?: string | undefined;
    /** 名称 */
    nameCustom?: string | undefined;
    /** 值 */
    value?: string | undefined;
}

/** 今日就诊卡片自定义字段配置 */
export class SysTodayCardCustomView implements ISysTodayCardCustomView {
    /** 区域，示例：M-L-R1-C1/中间-左起-第1行-第1列 栏位 *左侧/L;右侧/R；中间/M；上面/U;下面/D;行/R;列/C;* */
    code!: string;
    /** 名称 */
    name!: string;
    /** 自定义名称 */
    nameCustom?: string | undefined;
    /** 值 */
    value!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 版本 */
    version!: number;
    /** 启用状态0,1 */
    enabled!: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysTodayCardCustomView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
            this.nameCustom = _data["nameCustom"];
            this.value = _data["value"];
            this.remark = _data["remark"];
            this.version = _data["version"];
            this.enabled = _data["enabled"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysTodayCardCustomView {
        data = typeof data === 'object' ? data : {};
        let result = new SysTodayCardCustomView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["nameCustom"] = this.nameCustom;
        data["value"] = this.value;
        data["remark"] = this.remark;
        data["version"] = this.version;
        data["enabled"] = this.enabled;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 今日就诊卡片自定义字段配置 */
export interface ISysTodayCardCustomView {
    /** 区域，示例：M-L-R1-C1/中间-左起-第1行-第1列 栏位 *左侧/L;右侧/R；中间/M；上面/U;下面/D;行/R;列/C;* */
    code: string;
    /** 名称 */
    name: string;
    /** 自定义名称 */
    nameCustom?: string | undefined;
    /** 值 */
    value: string;
    /** 备注 */
    remark?: string | undefined;
    /** 版本 */
    version: number;
    /** 启用状态0,1 */
    enabled: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 今日就诊卡片配置 */
export class SysTodayCardEditModel implements ISysTodayCardEditModel {
    /** 流程状态 */
    stats!: string;
    /** 类别Code *颜色/COLOR；字体/FONT；大小/SIZE；是否显示/SHOW* */
    code!: string;
    /** 名称 */
    name!: string;
    /** 值 */
    value!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 版本 */
    version!: number;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: ISysTodayCardEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.stats = _data["stats"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.remark = _data["remark"];
            this.version = _data["version"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): SysTodayCardEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysTodayCardEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stats"] = this.stats;
        data["code"] = this.code;
        data["name"] = this.name;
        data["value"] = this.value;
        data["remark"] = this.remark;
        data["version"] = this.version;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 今日就诊卡片配置 */
export interface ISysTodayCardEditModel {
    /** 流程状态 */
    stats: string;
    /** 类别Code *颜色/COLOR；字体/FONT；大小/SIZE；是否显示/SHOW* */
    code: string;
    /** 名称 */
    name: string;
    /** 值 */
    value: string;
    /** 备注 */
    remark?: string | undefined;
    /** 版本 */
    version: number;
    /** 启用状态0,1 */
    enabled: number;
}

/** 今日就诊卡片汇总配置 */
export class SysTodayCardSummaryEditModel implements ISysTodayCardSummaryEditModel {
    /** 今日就诊卡片颜色字体配置 */
    cardEditModels?: SysTodayCardEditModel[] | undefined;
    /** 今日就诊卡片自定义字段配置 */
    cardCustomEditModels?: SysTodayCardCustomEditModel[] | undefined;

    constructor(data?: ISysTodayCardSummaryEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["cardEditModels"])) {
                this.cardEditModels = [] as any;
                for (let item of _data["cardEditModels"])
                    this.cardEditModels!.push(SysTodayCardEditModel.fromJS(item));
            }
            if (Array.isArray(_data["cardCustomEditModels"])) {
                this.cardCustomEditModels = [] as any;
                for (let item of _data["cardCustomEditModels"])
                    this.cardCustomEditModels!.push(SysTodayCardCustomEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysTodayCardSummaryEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysTodayCardSummaryEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.cardEditModels)) {
            data["cardEditModels"] = [];
            for (let item of this.cardEditModels)
                data["cardEditModels"].push(item.toJSON());
        }
        if (Array.isArray(this.cardCustomEditModels)) {
            data["cardCustomEditModels"] = [];
            for (let item of this.cardCustomEditModels)
                data["cardCustomEditModels"].push(item.toJSON());
        }
        return data;
    }
}

/** 今日就诊卡片汇总配置 */
export interface ISysTodayCardSummaryEditModel {
    /** 今日就诊卡片颜色字体配置 */
    cardEditModels?: SysTodayCardEditModel[] | undefined;
    /** 今日就诊卡片自定义字段配置 */
    cardCustomEditModels?: SysTodayCardCustomEditModel[] | undefined;
}

/** 今日就诊卡片汇总配置 */
export class SysTodayCardSummaryView implements ISysTodayCardSummaryView {
    /** 今日就诊卡片颜色字体配置 */
    cards?: SysTodayCardAllView[] | undefined;
    /** 今日就诊卡片自定义字段配置 */
    cardCustoms?: SysTodayCardCustomView[] | undefined;
    /** 今日就诊卡片自定义字段配置 -- 待绑定的数据 */
    cardCustomItems?: SysTodayCardCustomItemView[] | undefined;
    /** 今日就诊卡片颜色字体配置当前版本 */
    readonly version?: number;

    constructor(data?: ISysTodayCardSummaryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["cards"])) {
                this.cards = [] as any;
                for (let item of _data["cards"])
                    this.cards!.push(SysTodayCardAllView.fromJS(item));
            }
            if (Array.isArray(_data["cardCustoms"])) {
                this.cardCustoms = [] as any;
                for (let item of _data["cardCustoms"])
                    this.cardCustoms!.push(SysTodayCardCustomView.fromJS(item));
            }
            if (Array.isArray(_data["cardCustomItems"])) {
                this.cardCustomItems = [] as any;
                for (let item of _data["cardCustomItems"])
                    this.cardCustomItems!.push(SysTodayCardCustomItemView.fromJS(item));
            }
            (<any>this).version = _data["version"];
        }
    }

    static fromJS(data: any): SysTodayCardSummaryView {
        data = typeof data === 'object' ? data : {};
        let result = new SysTodayCardSummaryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.cards)) {
            data["cards"] = [];
            for (let item of this.cards)
                data["cards"].push(item.toJSON());
        }
        if (Array.isArray(this.cardCustoms)) {
            data["cardCustoms"] = [];
            for (let item of this.cardCustoms)
                data["cardCustoms"].push(item.toJSON());
        }
        if (Array.isArray(this.cardCustomItems)) {
            data["cardCustomItems"] = [];
            for (let item of this.cardCustomItems)
                data["cardCustomItems"].push(item.toJSON());
        }
        data["version"] = this.version;
        return data;
    }
}

/** 今日就诊卡片汇总配置 */
export interface ISysTodayCardSummaryView {
    /** 今日就诊卡片颜色字体配置 */
    cards?: SysTodayCardAllView[] | undefined;
    /** 今日就诊卡片自定义字段配置 */
    cardCustoms?: SysTodayCardCustomView[] | undefined;
    /** 今日就诊卡片自定义字段配置 -- 待绑定的数据 */
    cardCustomItems?: SysTodayCardCustomItemView[] | undefined;
    /** 今日就诊卡片颜色字体配置当前版本 */
    version?: number;
}

/** Reponse */
export class SysTodayCardSummaryViewResultEntry implements ISysTodayCardSummaryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysTodayCardSummaryView;

    constructor(data?: ISysTodayCardSummaryViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysTodayCardSummaryView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysTodayCardSummaryViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysTodayCardSummaryViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysTodayCardSummaryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysTodayCardSummaryView;
}

/** 今日就诊卡片配置 */
export class SysTodayCardView implements ISysTodayCardView {
    /** 流程状态 */
    stats!: string;
    /** 类别Code *颜色/COLOR；字体/FONT；大小/SIZE；是否显示/SHOW* */
    code!: string;
    /** 名称 */
    name!: string;
    /** 值 */
    value!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 版本 */
    version!: number;
    /** 启用状态0,1 */
    enabled!: number;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysTodayCardView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.stats = _data["stats"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.value = _data["value"];
            this.remark = _data["remark"];
            this.version = _data["version"];
            this.enabled = _data["enabled"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysTodayCardView {
        data = typeof data === 'object' ? data : {};
        let result = new SysTodayCardView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["stats"] = this.stats;
        data["code"] = this.code;
        data["name"] = this.name;
        data["value"] = this.value;
        data["remark"] = this.remark;
        data["version"] = this.version;
        data["enabled"] = this.enabled;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 今日就诊卡片配置 */
export interface ISysTodayCardView {
    /** 流程状态 */
    stats: string;
    /** 类别Code *颜色/COLOR；字体/FONT；大小/SIZE；是否显示/SHOW* */
    code: string;
    /** 名称 */
    name: string;
    /** 值 */
    value: string;
    /** 备注 */
    remark?: string | undefined;
    /** 版本 */
    version: number;
    /** 启用状态0,1 */
    enabled: number;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 用户信息 */
export class SysUser implements ISysUser {
    /** 标识 */
    id?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 密码 */
    pwd?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobNumber = _data["jobNumber"];
            this.loginName = _data["loginName"];
            this.pwd = _data["pwd"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.tel = _data["tel"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUser {
        data = typeof data === 'object' ? data : {};
        let result = new SysUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobNumber"] = this.jobNumber;
        data["loginName"] = this.loginName;
        data["pwd"] = this.pwd;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["tel"] = this.tel;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 用户信息 */
export interface ISysUser {
    /** 标识 */
    id?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 密码 */
    pwd?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 用户信息-新增用户以及权限 */
export class SysUserEditModel implements ISysUserEditModel {
    /** 工号 */
    sysUserJobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* */
    sysUserLoginName!: string;
    /** 密码 */
    pwd!: string;
    /** 姓名 */
    sysUserName!: string;
    /** 别名 */
    sysUserName2?: string | undefined;
    /** 拼音码 *首字母* */
    sysUserPinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    sysUserWubiCode?: string | undefined;
    /** 电话 */
    sysUserTel?: string | undefined;
    /** 启用0,1 */
    sysUserEnabled!: number;
    /** 备注 */
    sysUserRemark?: string | undefined;
    /** 归属角色ID集合 */
    sysRoleIds!: string[];
    /** 归属院区ID集合 */
    sysHospitalAreaIds?: string[] | undefined;

    constructor(data?: ISysUserEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sysRoleIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysUserJobNumber = _data["sysUserJobNumber"];
            this.sysUserLoginName = _data["sysUserLoginName"];
            this.pwd = _data["pwd"];
            this.sysUserName = _data["sysUserName"];
            this.sysUserName2 = _data["sysUserName2"];
            this.sysUserPinyinCode = _data["sysUserPinyinCode"];
            this.sysUserWubiCode = _data["sysUserWubiCode"];
            this.sysUserTel = _data["sysUserTel"];
            this.sysUserEnabled = _data["sysUserEnabled"];
            this.sysUserRemark = _data["sysUserRemark"];
            if (Array.isArray(_data["sysRoleIds"])) {
                this.sysRoleIds = [] as any;
                for (let item of _data["sysRoleIds"])
                    this.sysRoleIds!.push(item);
            }
            if (Array.isArray(_data["sysHospitalAreaIds"])) {
                this.sysHospitalAreaIds = [] as any;
                for (let item of _data["sysHospitalAreaIds"])
                    this.sysHospitalAreaIds!.push(item);
            }
        }
    }

    static fromJS(data: any): SysUserEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysUserJobNumber"] = this.sysUserJobNumber;
        data["sysUserLoginName"] = this.sysUserLoginName;
        data["pwd"] = this.pwd;
        data["sysUserName"] = this.sysUserName;
        data["sysUserName2"] = this.sysUserName2;
        data["sysUserPinyinCode"] = this.sysUserPinyinCode;
        data["sysUserWubiCode"] = this.sysUserWubiCode;
        data["sysUserTel"] = this.sysUserTel;
        data["sysUserEnabled"] = this.sysUserEnabled;
        data["sysUserRemark"] = this.sysUserRemark;
        if (Array.isArray(this.sysRoleIds)) {
            data["sysRoleIds"] = [];
            for (let item of this.sysRoleIds)
                data["sysRoleIds"].push(item);
        }
        if (Array.isArray(this.sysHospitalAreaIds)) {
            data["sysHospitalAreaIds"] = [];
            for (let item of this.sysHospitalAreaIds)
                data["sysHospitalAreaIds"].push(item);
        }
        return data;
    }
}

/** 用户信息-新增用户以及权限 */
export interface ISysUserEditModel {
    /** 工号 */
    sysUserJobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* */
    sysUserLoginName: string;
    /** 密码 */
    pwd: string;
    /** 姓名 */
    sysUserName: string;
    /** 别名 */
    sysUserName2?: string | undefined;
    /** 拼音码 *首字母* */
    sysUserPinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    sysUserWubiCode?: string | undefined;
    /** 电话 */
    sysUserTel?: string | undefined;
    /** 启用0,1 */
    sysUserEnabled: number;
    /** 备注 */
    sysUserRemark?: string | undefined;
    /** 归属角色ID集合 */
    sysRoleIds: string[];
    /** 归属院区ID集合 */
    sysHospitalAreaIds?: string[] | undefined;
}

/** 用户导入Excel视图 */
export class SysUserExcelView implements ISysUserExcelView {
    /** 院区 */
    hospitalArea?: string | undefined;
    /** 工号 */
    sysUserJobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* */
    sysUserLoginName?: string | undefined;
    /** 姓名 */
    sysUserName?: string | undefined;
    /** 别名 */
    sysUserName2?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别 - 显示值 */
    genderLabel?: string | undefined;
    /** 电话 */
    sysUserTel?: string | undefined;
    /** 角色 */
    sysRoles?: string | undefined;
    /** 代码 */
    code?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 文化程度 - 显示值 */
    educationalLevelLabel?: string | undefined;
    /** 职务 `DIC.PEOPLE.MEDICAL.TITLE` *主任,副主任,医生,护士长,护士* */
    title?: string | undefined;
    /** 职称 `DIC.MEDICAL.PROFESSIONALTITLE` *主任医师,副主任医师,主治医师,住院医师* */
    professionalTitle?: string | undefined;
    /** 参工时间 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入院时间 */
    hiredate?: dayjs.Dayjs | undefined;

    constructor(data?: ISysUserExcelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hospitalArea = _data["hospitalArea"];
            this.sysUserJobNumber = _data["sysUserJobNumber"];
            this.sysUserLoginName = _data["sysUserLoginName"];
            this.sysUserName = _data["sysUserName"];
            this.sysUserName2 = _data["sysUserName2"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.sysUserTel = _data["sysUserTel"];
            this.sysRoles = _data["sysRoles"];
            this.code = _data["code"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.educationalLevel = _data["educationalLevel"];
            this.educationalLevelLabel = _data["educationalLevelLabel"];
            this.title = _data["title"];
            this.professionalTitle = _data["professionalTitle"];
            this.workdate = _data["workdate"] ? dayjs(_data["workdate"].toString()) : <any>undefined;
            this.hiredate = _data["hiredate"] ? dayjs(_data["hiredate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUserExcelView {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserExcelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hospitalArea"] = this.hospitalArea;
        data["sysUserJobNumber"] = this.sysUserJobNumber;
        data["sysUserLoginName"] = this.sysUserLoginName;
        data["sysUserName"] = this.sysUserName;
        data["sysUserName2"] = this.sysUserName2;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["sysUserTel"] = this.sysUserTel;
        data["sysRoles"] = this.sysRoles;
        data["code"] = this.code;
        data["birthdate"] = this.birthdate ? this.birthdate.toLocaleString() : <any>undefined;
        data["educationalLevel"] = this.educationalLevel;
        data["educationalLevelLabel"] = this.educationalLevelLabel;
        data["title"] = this.title;
        data["professionalTitle"] = this.professionalTitle;
        data["workdate"] = this.workdate ? this.workdate.toLocaleString() : <any>undefined;
        data["hiredate"] = this.hiredate ? this.hiredate.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 用户导入Excel视图 */
export interface ISysUserExcelView {
    /** 院区 */
    hospitalArea?: string | undefined;
    /** 工号 */
    sysUserJobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* */
    sysUserLoginName?: string | undefined;
    /** 姓名 */
    sysUserName?: string | undefined;
    /** 别名 */
    sysUserName2?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别 - 显示值 */
    genderLabel?: string | undefined;
    /** 电话 */
    sysUserTel?: string | undefined;
    /** 角色 */
    sysRoles?: string | undefined;
    /** 代码 */
    code?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 文化程度 - 显示值 */
    educationalLevelLabel?: string | undefined;
    /** 职务 `DIC.PEOPLE.MEDICAL.TITLE` *主任,副主任,医生,护士长,护士* */
    title?: string | undefined;
    /** 职称 `DIC.MEDICAL.PROFESSIONALTITLE` *主任医师,副主任医师,主治医师,住院医师* */
    professionalTitle?: string | undefined;
    /** 参工时间 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入院时间 */
    hiredate?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysUserExcelViewResult implements ISysUserExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserExcelView[] | undefined;

    constructor(data?: ISysUserExcelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysUserExcelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysUserExcelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserExcelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysUserExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserExcelView[] | undefined;
}

/** 用户透析室 */
export class SysUserHospital implements ISysUserHospital {
    /** 标识 */
    id?: string | undefined;
    /** [用户标识](用户信息) */
    sysUserId?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysUsers?: SysUser;
    sysHospitalAreas?: SysHospitalArea;

    constructor(data?: ISysUserHospital) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysUserId = _data["sysUserId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysUsers = _data["sysUsers"] ? SysUser.fromJS(_data["sysUsers"]) : <any>undefined;
            this.sysHospitalAreas = _data["sysHospitalAreas"] ? SysHospitalArea.fromJS(_data["sysHospitalAreas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUserHospital {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserHospital();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysUserId"] = this.sysUserId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysUsers"] = this.sysUsers ? this.sysUsers.toJSON() : <any>undefined;
        data["sysHospitalAreas"] = this.sysHospitalAreas ? this.sysHospitalAreas.toJSON() : <any>undefined;
        return data;
    }
}

/** 用户透析室 */
export interface ISysUserHospital {
    /** 标识 */
    id?: string | undefined;
    /** [用户标识](用户信息) */
    sysUserId?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysUsers?: SysUser;
    sysHospitalAreas?: SysHospitalArea;
}

/** Reponse */
export class SysUserHospitalResult implements ISysUserHospitalResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserHospital[] | undefined;

    constructor(data?: ISysUserHospitalResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysUserHospital.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysUserHospitalResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserHospitalResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysUserHospitalResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserHospital[] | undefined;
}

/** Reponse */
export class SysUserHospitalResultEntry implements ISysUserHospitalResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysUserHospital;

    constructor(data?: ISysUserHospitalResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysUserHospital.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUserHospitalResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserHospitalResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysUserHospitalResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysUserHospital;
}

/** 用户透析室 (ViewModel) */
export class SysUserHospitalViewModel implements ISysUserHospitalViewModel {
    /** [用户标识](用户信息Id) */
    sysUserId!: string;
    /** [归属透析室标识](透析室Id) */
    sysHospitalAreaId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysUserHospitalViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysUserId = _data["sysUserId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysUserHospitalViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserHospitalViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysUserId"] = this.sysUserId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 用户透析室 (ViewModel) */
export interface ISysUserHospitalViewModel {
    /** [用户标识](用户信息Id) */
    sysUserId: string;
    /** [归属透析室标识](透析室Id) */
    sysHospitalAreaId: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 用户登录日志记录 */
export class SysUserLoginEditModel implements ISysUserLoginEditModel {
    /** [用户标识](#用户信息) */
    sysUserId!: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 登录时间 */
    loginTime!: dayjs.Dayjs;
    /** 登录设备 *PC/PAD* */
    type!: string;
    /** 设备信息 */
    info!: string;
    /** 终端IP */
    ip?: string | undefined;

    constructor(data?: ISysUserLoginEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysUserId = _data["sysUserId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.loginTime = _data["loginTime"] ? dayjs(_data["loginTime"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.info = _data["info"];
            this.ip = _data["ip"];
        }
    }

    static fromJS(data: any): SysUserLoginEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserLoginEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysUserId"] = this.sysUserId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["loginTime"] = this.loginTime ? this.loginTime.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["info"] = this.info;
        data["ip"] = this.ip;
        return data;
    }
}

/** 用户登录日志记录 */
export interface ISysUserLoginEditModel {
    /** [用户标识](#用户信息) */
    sysUserId: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 登录时间 */
    loginTime: dayjs.Dayjs;
    /** 登录设备 *PC/PAD* */
    type: string;
    /** 设备信息 */
    info: string;
    /** 终端IP */
    ip?: string | undefined;
}

/** 用户登录日志记录 */
export class SysUserLoginView implements ISysUserLoginView {
    /** [用户标识](#用户信息) */
    sysUserId!: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 登录时间 */
    loginTime!: dayjs.Dayjs;
    /** 登录设备 *PC/PAD* */
    type!: string;
    /** 设备信息 */
    info!: string;
    /** 终端IP */
    ip?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 用户名 */
    sysUserName?: string | undefined;
    /** 透析室名 */
    sysHospitalAreaName?: string | undefined;

    constructor(data?: ISysUserLoginView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysUserId = _data["sysUserId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.loginTime = _data["loginTime"] ? dayjs(_data["loginTime"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.info = _data["info"];
            this.ip = _data["ip"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysUserName = _data["sysUserName"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
        }
    }

    static fromJS(data: any): SysUserLoginView {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserLoginView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysUserId"] = this.sysUserId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["loginTime"] = this.loginTime ? this.loginTime.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["info"] = this.info;
        data["ip"] = this.ip;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysUserName"] = this.sysUserName;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        return data;
    }
}

/** 用户登录日志记录 */
export interface ISysUserLoginView {
    /** [用户标识](#用户信息) */
    sysUserId: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 登录时间 */
    loginTime: dayjs.Dayjs;
    /** 登录设备 *PC/PAD* */
    type: string;
    /** 设备信息 */
    info: string;
    /** 终端IP */
    ip?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 用户名 */
    sysUserName?: string | undefined;
    /** 透析室名 */
    sysHospitalAreaName?: string | undefined;
}

/** Reponse */
export class SysUserLoginViewResult implements ISysUserLoginViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserLoginView[] | undefined;

    constructor(data?: ISysUserLoginViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysUserLoginView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysUserLoginViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserLoginViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysUserLoginViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserLoginView[] | undefined;
}

/** Reponse */
export class SysUserLoginViewResultEntry implements ISysUserLoginViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysUserLoginView;

    constructor(data?: ISysUserLoginViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysUserLoginView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUserLoginViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserLoginViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysUserLoginViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysUserLoginView;
}

export class SysUserQuickView implements ISysUserQuickView {
    /** 标识 */
    id?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 密码 */
    pwd?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别 名称 */
    genderName?: string | undefined;
    /** 启用0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysUserQuickView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobNumber = _data["jobNumber"];
            this.loginName = _data["loginName"];
            this.pwd = _data["pwd"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.tel = _data["tel"];
            this.gender = _data["gender"];
            this.genderName = _data["genderName"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUserQuickView {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserQuickView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobNumber"] = this.jobNumber;
        data["loginName"] = this.loginName;
        data["pwd"] = this.pwd;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["tel"] = this.tel;
        data["gender"] = this.gender;
        data["genderName"] = this.genderName;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface ISysUserQuickView {
    /** 标识 */
    id?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 密码 */
    pwd?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别 名称 */
    genderName?: string | undefined;
    /** 启用0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysUserQuickViewResult implements ISysUserQuickViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserQuickView[] | undefined;

    constructor(data?: ISysUserQuickViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysUserQuickView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysUserQuickViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserQuickViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysUserQuickViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserQuickView[] | undefined;
}

/** 用户角色 */
export class SysUserRole implements ISysUserRole {
    /** 标识 */
    id?: string | undefined;
    /** [用户标识](用户信息) */
    sysUserId?: string | undefined;
    /** [角色标识](角色信息) */
    sysRoleId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysUsers?: SysUser;
    sysRoles?: SysRole;

    constructor(data?: ISysUserRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysUserId = _data["sysUserId"];
            this.sysRoleId = _data["sysRoleId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysUsers = _data["sysUsers"] ? SysUser.fromJS(_data["sysUsers"]) : <any>undefined;
            this.sysRoles = _data["sysRoles"] ? SysRole.fromJS(_data["sysRoles"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUserRole {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysUserId"] = this.sysUserId;
        data["sysRoleId"] = this.sysRoleId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysUsers"] = this.sysUsers ? this.sysUsers.toJSON() : <any>undefined;
        data["sysRoles"] = this.sysRoles ? this.sysRoles.toJSON() : <any>undefined;
        return data;
    }
}

/** 用户角色 */
export interface ISysUserRole {
    /** 标识 */
    id?: string | undefined;
    /** [用户标识](用户信息) */
    sysUserId?: string | undefined;
    /** [角色标识](角色信息) */
    sysRoleId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysUsers?: SysUser;
    sysRoles?: SysRole;
}

/** Reponse */
export class SysUserRoleResult implements ISysUserRoleResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserRole[] | undefined;

    constructor(data?: ISysUserRoleResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysUserRole.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysUserRoleResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserRoleResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysUserRoleResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserRole[] | undefined;
}

/** Reponse */
export class SysUserRoleResultEntry implements ISysUserRoleResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysUserRole;

    constructor(data?: ISysUserRoleResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysUserRole.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUserRoleResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserRoleResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysUserRoleResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysUserRole;
}

/** 用户角色 (ViewModel) */
export class SysUserRoleViewModel implements ISysUserRoleViewModel {
    /** [用户标识](用户信息Id) */
    sysUserId!: string;
    /** [角色标识](角色信息Id) */
    sysRoleId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysUserRoleViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysUserId = _data["sysUserId"];
            this.sysRoleId = _data["sysRoleId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysUserRoleViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserRoleViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysUserId"] = this.sysUserId;
        data["sysRoleId"] = this.sysRoleId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 用户角色 (ViewModel) */
export interface ISysUserRoleViewModel {
    /** [用户标识](用户信息Id) */
    sysUserId: string;
    /** [角色标识](角色信息Id) */
    sysRoleId: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 用户配置 */
export class SysUserSettingEditModel implements ISysUserSettingEditModel {
    /** [用户标识](#用户信息) */
    sysUserId!: string;
    /** 名称 */
    name!: string;
    /** 代码 *用于检索* *○同一个`sys_user_id`下不允许重复* */
    code!: string;
    /** 值 */
    value!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysUserSettingEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysUserId = _data["sysUserId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.value = _data["value"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysUserSettingEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserSettingEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysUserId"] = this.sysUserId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["value"] = this.value;
        data["remark"] = this.remark;
        return data;
    }
}

/** 用户配置 */
export interface ISysUserSettingEditModel {
    /** [用户标识](#用户信息) */
    sysUserId: string;
    /** 名称 */
    name: string;
    /** 代码 *用于检索* *○同一个`sys_user_id`下不允许重复* */
    code: string;
    /** 值 */
    value: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 用户配置 */
export class SysUserSettingView implements ISysUserSettingView {
    /** [用户标识](#用户信息) */
    sysUserId!: string;
    /** 名称 */
    name!: string;
    /** 代码 *用于检索* *○同一个`sys_user_id`下不允许重复* */
    code!: string;
    /** 值 */
    value!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysUserSettingView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysUserId = _data["sysUserId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.value = _data["value"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUserSettingView {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserSettingView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysUserId"] = this.sysUserId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["value"] = this.value;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 用户配置 */
export interface ISysUserSettingView {
    /** [用户标识](#用户信息) */
    sysUserId: string;
    /** 名称 */
    name: string;
    /** 代码 *用于检索* *○同一个`sys_user_id`下不允许重复* */
    code: string;
    /** 值 */
    value: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysUserSettingViewResult implements ISysUserSettingViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserSettingView[] | undefined;

    constructor(data?: ISysUserSettingViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysUserSettingView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysUserSettingViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserSettingViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysUserSettingViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserSettingView[] | undefined;
}

/** Reponse */
export class SysUserSettingViewResultEntry implements ISysUserSettingViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysUserSettingView;

    constructor(data?: ISysUserSettingViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysUserSettingView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUserSettingViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserSettingViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysUserSettingViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysUserSettingView;
}

/** 修改密码 */
export class SysUserUpdatePwdEditModel implements ISysUserUpdatePwdEditModel {
    /** 旧密码 */
    oldPwd!: string;
    /** 新密码 */
    newPwd!: string;

    constructor(data?: ISysUserUpdatePwdEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oldPwd = _data["oldPwd"];
            this.newPwd = _data["newPwd"];
        }
    }

    static fromJS(data: any): SysUserUpdatePwdEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserUpdatePwdEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oldPwd"] = this.oldPwd;
        data["newPwd"] = this.newPwd;
        return data;
    }
}

/** 修改密码 */
export interface ISysUserUpdatePwdEditModel {
    /** 旧密码 */
    oldPwd: string;
    /** 新密码 */
    newPwd: string;
}

/** 用户信息-展现用户以及权限 */
export class SysUserView implements ISysUserView {
    /** 工号 */
    sysUserJobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* */
    sysUserLoginName!: string;
    /** 密码 */
    pwd!: string;
    /** 姓名 */
    sysUserName!: string;
    /** 别名 */
    sysUserName2?: string | undefined;
    /** 拼音码 *首字母* */
    sysUserPinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    sysUserWubiCode?: string | undefined;
    /** 电话 */
    sysUserTel?: string | undefined;
    /** 启用0,1 */
    sysUserEnabled!: number;
    /** 备注 */
    sysUserRemark?: string | undefined;
    /** 归属角色ID集合 */
    sysRoleIds!: string[];
    /** 归属院区ID集合 */
    sysHospitalAreaIds?: string[] | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 用户标识 */
    sysUserId?: string | undefined;
    /** 归属角色名称集合(使用英文逗号分隔) */
    sysRoleNames?: string | undefined;
    /** 归属角色编码集合 */
    sysRoleCodes?: string[] | undefined;
    /** 归属院区名称集合(使用英文逗号分隔) */
    sysHospitalAreaNames?: string | undefined;

    constructor(data?: ISysUserView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sysRoleIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysUserJobNumber = _data["sysUserJobNumber"];
            this.sysUserLoginName = _data["sysUserLoginName"];
            this.pwd = _data["pwd"];
            this.sysUserName = _data["sysUserName"];
            this.sysUserName2 = _data["sysUserName2"];
            this.sysUserPinyinCode = _data["sysUserPinyinCode"];
            this.sysUserWubiCode = _data["sysUserWubiCode"];
            this.sysUserTel = _data["sysUserTel"];
            this.sysUserEnabled = _data["sysUserEnabled"];
            this.sysUserRemark = _data["sysUserRemark"];
            if (Array.isArray(_data["sysRoleIds"])) {
                this.sysRoleIds = [] as any;
                for (let item of _data["sysRoleIds"])
                    this.sysRoleIds!.push(item);
            }
            if (Array.isArray(_data["sysHospitalAreaIds"])) {
                this.sysHospitalAreaIds = [] as any;
                for (let item of _data["sysHospitalAreaIds"])
                    this.sysHospitalAreaIds!.push(item);
            }
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysUserId = _data["sysUserId"];
            this.sysRoleNames = _data["sysRoleNames"];
            if (Array.isArray(_data["sysRoleCodes"])) {
                this.sysRoleCodes = [] as any;
                for (let item of _data["sysRoleCodes"])
                    this.sysRoleCodes!.push(item);
            }
            this.sysHospitalAreaNames = _data["sysHospitalAreaNames"];
        }
    }

    static fromJS(data: any): SysUserView {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysUserJobNumber"] = this.sysUserJobNumber;
        data["sysUserLoginName"] = this.sysUserLoginName;
        data["pwd"] = this.pwd;
        data["sysUserName"] = this.sysUserName;
        data["sysUserName2"] = this.sysUserName2;
        data["sysUserPinyinCode"] = this.sysUserPinyinCode;
        data["sysUserWubiCode"] = this.sysUserWubiCode;
        data["sysUserTel"] = this.sysUserTel;
        data["sysUserEnabled"] = this.sysUserEnabled;
        data["sysUserRemark"] = this.sysUserRemark;
        if (Array.isArray(this.sysRoleIds)) {
            data["sysRoleIds"] = [];
            for (let item of this.sysRoleIds)
                data["sysRoleIds"].push(item);
        }
        if (Array.isArray(this.sysHospitalAreaIds)) {
            data["sysHospitalAreaIds"] = [];
            for (let item of this.sysHospitalAreaIds)
                data["sysHospitalAreaIds"].push(item);
        }
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysUserId"] = this.sysUserId;
        data["sysRoleNames"] = this.sysRoleNames;
        if (Array.isArray(this.sysRoleCodes)) {
            data["sysRoleCodes"] = [];
            for (let item of this.sysRoleCodes)
                data["sysRoleCodes"].push(item);
        }
        data["sysHospitalAreaNames"] = this.sysHospitalAreaNames;
        return data;
    }
}

/** 用户信息-展现用户以及权限 */
export interface ISysUserView {
    /** 工号 */
    sysUserJobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* */
    sysUserLoginName: string;
    /** 密码 */
    pwd: string;
    /** 姓名 */
    sysUserName: string;
    /** 别名 */
    sysUserName2?: string | undefined;
    /** 拼音码 *首字母* */
    sysUserPinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    sysUserWubiCode?: string | undefined;
    /** 电话 */
    sysUserTel?: string | undefined;
    /** 启用0,1 */
    sysUserEnabled: number;
    /** 备注 */
    sysUserRemark?: string | undefined;
    /** 归属角色ID集合 */
    sysRoleIds: string[];
    /** 归属院区ID集合 */
    sysHospitalAreaIds?: string[] | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 用户标识 */
    sysUserId?: string | undefined;
    /** 归属角色名称集合(使用英文逗号分隔) */
    sysRoleNames?: string | undefined;
    /** 归属角色编码集合 */
    sysRoleCodes?: string[] | undefined;
    /** 归属院区名称集合(使用英文逗号分隔) */
    sysHospitalAreaNames?: string | undefined;
}

/** Reponse */
export class SysUserViewResult implements ISysUserViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserView[] | undefined;

    constructor(data?: ISysUserViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysUserView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysUserViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysUserViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysUserView[] | undefined;
}

/** Reponse */
export class SysUserViewResultEntry implements ISysUserViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysUserView;

    constructor(data?: ISysUserViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysUserView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUserViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysUserViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysUserView;
}

/** 系统日志文件信息 */
export class SystemLoggerDirectoryView implements ISystemLoggerDirectoryView {
    /** 名称 */
    name?: string | undefined;
    /** 全称 */
    fullName?: string | undefined;
    /** 创建时间 */
    creationTime?: dayjs.Dayjs;
    /** 子目录 */
    directories?: SystemLoggerDirectoryView[] | undefined;
    /** 文件 */
    files?: SystemLoggerFileView[] | undefined;

    constructor(data?: ISystemLoggerDirectoryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.creationTime = _data["creationTime"] ? dayjs(_data["creationTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["directories"])) {
                this.directories = [] as any;
                for (let item of _data["directories"])
                    this.directories!.push(SystemLoggerDirectoryView.fromJS(item));
            }
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(SystemLoggerFileView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SystemLoggerDirectoryView {
        data = typeof data === 'object' ? data : {};
        let result = new SystemLoggerDirectoryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["creationTime"] = this.creationTime ? this.creationTime.toLocaleString() : <any>undefined;
        if (Array.isArray(this.directories)) {
            data["directories"] = [];
            for (let item of this.directories)
                data["directories"].push(item.toJSON());
        }
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        return data;
    }
}

/** 系统日志文件信息 */
export interface ISystemLoggerDirectoryView {
    /** 名称 */
    name?: string | undefined;
    /** 全称 */
    fullName?: string | undefined;
    /** 创建时间 */
    creationTime?: dayjs.Dayjs;
    /** 子目录 */
    directories?: SystemLoggerDirectoryView[] | undefined;
    /** 文件 */
    files?: SystemLoggerFileView[] | undefined;
}

/** Reponse */
export class SystemLoggerDirectoryViewResultEntry implements ISystemLoggerDirectoryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SystemLoggerDirectoryView;

    constructor(data?: ISystemLoggerDirectoryViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SystemLoggerDirectoryView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SystemLoggerDirectoryViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SystemLoggerDirectoryViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISystemLoggerDirectoryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SystemLoggerDirectoryView;
}

/** 系统日志文件信息 */
export class SystemLoggerFileView implements ISystemLoggerFileView {
    /** 名称 */
    name?: string | undefined;
    /** 全称 -- 下载时使用 */
    fullName?: string | undefined;
    /** 创建时间 */
    creationTime?: dayjs.Dayjs;
    /** 文件大小 - 字节 */
    size?: number;

    constructor(data?: ISystemLoggerFileView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.fullName = _data["fullName"];
            this.creationTime = _data["creationTime"] ? dayjs(_data["creationTime"].toString()) : <any>undefined;
            this.size = _data["size"];
        }
    }

    static fromJS(data: any): SystemLoggerFileView {
        data = typeof data === 'object' ? data : {};
        let result = new SystemLoggerFileView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["fullName"] = this.fullName;
        data["creationTime"] = this.creationTime ? this.creationTime.toLocaleString() : <any>undefined;
        data["size"] = this.size;
        return data;
    }
}

/** 系统日志文件信息 */
export interface ISystemLoggerFileView {
    /** 名称 */
    name?: string | undefined;
    /** 全称 -- 下载时使用 */
    fullName?: string | undefined;
    /** 创建时间 */
    creationTime?: dayjs.Dayjs;
    /** 文件大小 - 字节 */
    size?: number;
}

/** 任务执行历史汇总 */
export class TaskExecuteHistoryStatisticsView implements ITaskExecuteHistoryStatisticsView {
    /** 任务ID */
    sysTaskItemId?: string | undefined;
    /** 任务名称 */
    name?: string | undefined;
    /** 任务类型 */
    type?: string | undefined;
    /** 执行次数 */
    executeCount?: number;
    /** 执行失败次数 */
    failCount?: number;
    /** 执行成功次数 */
    sucessCount?: number;
    /** 执行花费总时间 */
    togatherCost?: number | undefined;
    /** 失败执行花费总时间 */
    failCost?: number | undefined;
    /** 成功执行花费总时间 */
    sucessCost?: number | undefined;

    constructor(data?: ITaskExecuteHistoryStatisticsView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysTaskItemId = _data["sysTaskItemId"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.executeCount = _data["executeCount"];
            this.failCount = _data["failCount"];
            this.sucessCount = _data["sucessCount"];
            this.togatherCost = _data["togatherCost"];
            this.failCost = _data["failCost"];
            this.sucessCost = _data["sucessCost"];
        }
    }

    static fromJS(data: any): TaskExecuteHistoryStatisticsView {
        data = typeof data === 'object' ? data : {};
        let result = new TaskExecuteHistoryStatisticsView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysTaskItemId"] = this.sysTaskItemId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["executeCount"] = this.executeCount;
        data["failCount"] = this.failCount;
        data["sucessCount"] = this.sucessCount;
        data["togatherCost"] = this.togatherCost;
        data["failCost"] = this.failCost;
        data["sucessCost"] = this.sucessCost;
        return data;
    }
}

/** 任务执行历史汇总 */
export interface ITaskExecuteHistoryStatisticsView {
    /** 任务ID */
    sysTaskItemId?: string | undefined;
    /** 任务名称 */
    name?: string | undefined;
    /** 任务类型 */
    type?: string | undefined;
    /** 执行次数 */
    executeCount?: number;
    /** 执行失败次数 */
    failCount?: number;
    /** 执行成功次数 */
    sucessCount?: number;
    /** 执行花费总时间 */
    togatherCost?: number | undefined;
    /** 失败执行花费总时间 */
    failCost?: number | undefined;
    /** 成功执行花费总时间 */
    sucessCost?: number | undefined;
}

/** Reponse */
export class TaskExecuteHistoryStatisticsViewResult implements ITaskExecuteHistoryStatisticsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TaskExecuteHistoryStatisticsView[] | undefined;

    constructor(data?: ITaskExecuteHistoryStatisticsViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TaskExecuteHistoryStatisticsView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TaskExecuteHistoryStatisticsViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new TaskExecuteHistoryStatisticsViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ITaskExecuteHistoryStatisticsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TaskExecuteHistoryStatisticsView[] | undefined;
}

/** 今日透析患者人数 */
export class TodayCureIndexView implements ITodayCureIndexView {
    /** 总数 */
    readonly total?: number;
    /** 明细 */
    shiftDetailViews?: ShiftDetailView[] | undefined;

    constructor(data?: ITodayCureIndexView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).total = _data["total"];
            if (Array.isArray(_data["shiftDetailViews"])) {
                this.shiftDetailViews = [] as any;
                for (let item of _data["shiftDetailViews"])
                    this.shiftDetailViews!.push(ShiftDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TodayCureIndexView {
        data = typeof data === 'object' ? data : {};
        let result = new TodayCureIndexView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total;
        if (Array.isArray(this.shiftDetailViews)) {
            data["shiftDetailViews"] = [];
            for (let item of this.shiftDetailViews)
                data["shiftDetailViews"].push(item.toJSON());
        }
        return data;
    }
}

/** 今日透析患者人数 */
export interface ITodayCureIndexView {
    /** 总数 */
    total?: number;
    /** 明细 */
    shiftDetailViews?: ShiftDetailView[] | undefined;
}

/** 血管通路 */
export class VascularAccessIndexView implements IVascularAccessIndexView {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IVascularAccessIndexView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): VascularAccessIndexView {
        data = typeof data === 'object' ? data : {};
        let result = new VascularAccessIndexView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["count"] = this.count;
        return data;
    }
}

/** 血管通路 */
export interface IVascularAccessIndexView {
    /** 名称 */
    name?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class VascularAccessIndexViewResult implements IVascularAccessIndexViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: VascularAccessIndexView[] | undefined;

    constructor(data?: IVascularAccessIndexViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(VascularAccessIndexView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VascularAccessIndexViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new VascularAccessIndexViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IVascularAccessIndexViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: VascularAccessIndexView[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}
