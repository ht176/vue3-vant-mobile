/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class CostArrearageRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者欠费记录 -- 根据患者查询
     * @param filter (optional) 查询条件
     * @param patientId 患者编号
     * @return Success
     */
    unpaid(filter: string | undefined, patientId: string , cancelToken?: CancelToken | undefined): Promise<CostArrearageRecordViewResult> {
        let url_ = this.baseUrl + "/api/CostArrearageRecord/Unpaid/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUnpaid(_response));
        });
    }

    protected processUnpaid(response: AxiosResponse): Promise<CostArrearageRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostArrearageRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CostArrearageRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostArrearageRecordViewResult>(null as any);
    }

    /**
     * 患者欠费记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientKey (optional) 患者姓名/别名/首字母/拼音码/五笔码
     * @param itemKey (optional) 项目-分类/名称/简称/商品名/用法/厂家/拼音码/五笔码
     * @param deductKey (optional) 扣费人
     * @return Success
     */
    filter(filter: string | undefined, patientKey: string | undefined, itemKey: string | undefined, deductKey: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostArrearageRecordViewResult> {
        let url_ = this.baseUrl + "/api/CostArrearageRecord/Filter?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (itemKey === null)
            throw new Error("The parameter 'itemKey' cannot be null.");
        else if (itemKey !== undefined)
            url_ += "itemKey=" + encodeURIComponent("" + itemKey) + "&";
        if (deductKey === null)
            throw new Error("The parameter 'deductKey' cannot be null.");
        else if (deductKey !== undefined)
            url_ += "deductKey=" + encodeURIComponent("" + deductKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter(_response));
        });
    }

    protected processFilter(response: AxiosResponse): Promise<CostArrearageRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostArrearageRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CostArrearageRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostArrearageRecordViewResult>(null as any);
    }

    /**
     * 患者欠费记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    costArrearageRecord(body: CostArrearageRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostArrearageRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostArrearageRecord(_response));
        });
    }

    protected processCostArrearageRecord(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者欠费记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    costArrearageRecord2(id: string, body: CostArrearageRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostArrearageRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostArrearageRecord2(_response));
        });
    }

    protected processCostArrearageRecord2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 撤销欠费记录
     * @return Success
     */
    revoke(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostArrearageRecord/Revoke/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRevoke(_response));
        });
    }

    protected processRevoke(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者欠费记录 -- 根据Id删除数据
     * @return Success
     */
    delete(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostArrearageRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CostBalanceServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者费用查询 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 项目-分类/名称/简称/商品名/用法/厂家/拼音码/五笔码
     * @return Success
     */
    filter2(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostBalanceViewResult> {
        let url_ = this.baseUrl + "/api/CostBalance/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter2(_response));
        });
    }

    protected processFilter2(response: AxiosResponse): Promise<CostBalanceViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostBalanceViewResult.fromJS(resultData200);
            return Promise.resolve<CostBalanceViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostBalanceViewResult>(null as any);
    }

    /**
     * 患者费用余额 - 根据条件查询明细
     * @param filter (optional)
     * @param type (optional)
     * @param costBalanceId (optional)
     * @return Success
     */
    detail(filter: string | undefined, type: number | undefined, costBalanceId: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostBalanceDetailViewResult> {
        let url_ = this.baseUrl + "/api/CostBalance/Detail?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (costBalanceId === null)
            throw new Error("The parameter 'costBalanceId' cannot be null.");
        else if (costBalanceId !== undefined)
            url_ += "costBalanceId=" + encodeURIComponent("" + costBalanceId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail(_response));
        });
    }

    protected processDetail(response: AxiosResponse): Promise<CostBalanceDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostBalanceDetailViewResult.fromJS(resultData200);
            return Promise.resolve<CostBalanceDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostBalanceDetailViewResult>(null as any);
    }

    /**
     * 患者费用余额 - 费用统计
     * @param patientId (optional)
     * @return Success
     */
    summary(patientId: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostBalanceViewResult> {
        let url_ = this.baseUrl + "/api/CostBalance/Summary?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSummary(_response));
        });
    }

    protected processSummary(response: AxiosResponse): Promise<CostBalanceViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostBalanceViewResult.fromJS(resultData200);
            return Promise.resolve<CostBalanceViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostBalanceViewResult>(null as any);
    }

    /**
     * 患者费用打印
     * @param filter (optional) 查询条件
     * @param startDate (optional)
     * @param endDate (optional)
     * @param patientId (optional)
     * @return Success
     */
    print(filter: string | undefined, startDate: string | undefined, endDate: string | undefined, patientId: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostPrintViewResult> {
        let url_ = this.baseUrl + "/api/CostBalance/Print?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrint(_response));
        });
    }

    protected processPrint(response: AxiosResponse): Promise<CostPrintViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostPrintViewResult.fromJS(resultData200);
            return Promise.resolve<CostPrintViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostPrintViewResult>(null as any);
    }

    /**
     * 费用 - 费用统计
     * @param filter (optional)
     * @param patientKey (optional)
     * @param isFu (optional)
     * @return Success
     */
    allSummary(filter: string | undefined, patientKey: string | undefined, isFu: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<CostBalanceSummaryResult> {
        let url_ = this.baseUrl + "/api/CostBalance/AllSummary?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (isFu === null)
            throw new Error("The parameter 'isFu' cannot be null.");
        else if (isFu !== undefined)
            url_ += "isFu=" + encodeURIComponent("" + isFu) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAllSummary(_response));
        });
    }

    protected processAllSummary(response: AxiosResponse): Promise<CostBalanceSummaryResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostBalanceSummaryResult.fromJS(resultData200);
            return Promise.resolve<CostBalanceSummaryResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostBalanceSummaryResult>(null as any);
    }

    /**
     * 费用 - 费用统计-导出
     * @param filter (optional)
     * @param patientKey (optional)
     * @param isFu (optional)
     * @return Success
     */
    export(filter: string | undefined, patientKey: string | undefined, isFu: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostBalance/AllSummary/Export?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (isFu === null)
            throw new Error("The parameter 'isFu' cannot be null.");
        else if (isFu !== undefined)
            url_ += "isFu=" + encodeURIComponent("" + isFu) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport(_response));
        });
    }

    protected processExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 费用 - 费用导出
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/拼音码/五笔码/id *选填
     * @return Success
     */
    export2(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostBalance/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport2(_response));
        });
    }

    protected processExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 收费通知 -- 收费通知查询
     * @param patientId (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @return Success
     */
    chargeNotice(patientId: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<CostListRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/CostBalance/ChargeNotice?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processChargeNotice(_response));
        });
    }

    protected processChargeNotice(response: AxiosResponse): Promise<CostListRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostListRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CostListRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostListRecordViewResultEntry>(null as any);
    }

    /**
     * 费用清单 -- 费用清单明细查询
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    checkList(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostBalanceDetailResult> {
        let url_ = this.baseUrl + "/api/CostBalance/CheckList?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCheckList(_response));
        });
    }

    protected processCheckList(response: AxiosResponse): Promise<CostBalanceDetailResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostBalanceDetailResult.fromJS(resultData200);
            return Promise.resolve<CostBalanceDetailResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostBalanceDetailResult>(null as any);
    }
}

export class CostDeductionRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 扣费记录 -- 根据id获取对应缴费记录的扣费记录
     * @param filter (optional) 查询条件
     * @param rechargeId 缴费标识
     * @return Success
     */
    costDeductionRecordGET(filter: string | undefined, rechargeId: string , cancelToken?: CancelToken | undefined): Promise<CostDeductionRecordViewResult> {
        let url_ = this.baseUrl + "/api/CostDeductionRecord/{rechargeId}";
        if (rechargeId === undefined || rechargeId === null)
            throw new Error("The parameter 'rechargeId' must be defined.");
        url_ = url_.replace("{rechargeId}", encodeURIComponent("" + rechargeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostDeductionRecordGET(_response));
        });
    }

    protected processCostDeductionRecordGET(response: AxiosResponse): Promise<CostDeductionRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostDeductionRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CostDeductionRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostDeductionRecordViewResult>(null as any);
    }

    /**
     * 患者扣费记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientKey (optional) 患者 - 姓名/别名/首字母/拼音码/五笔码
     * @param drugKey (optional) 项目 - 分类/名称/简称/商品名/用法/厂家/拼音码/五笔码
     * @param deductKey (optional) 扣费人
     * @return Success
     */
    filter3(filter: string | undefined, patientKey: string | undefined, drugKey: string | undefined, deductKey: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostDeductionRecordViewResult> {
        let url_ = this.baseUrl + "/api/CostDeductionRecord/Filter?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (drugKey === null)
            throw new Error("The parameter 'drugKey' cannot be null.");
        else if (drugKey !== undefined)
            url_ += "drugKey=" + encodeURIComponent("" + drugKey) + "&";
        if (deductKey === null)
            throw new Error("The parameter 'deductKey' cannot be null.");
        else if (deductKey !== undefined)
            url_ += "deductKey=" + encodeURIComponent("" + deductKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter3(_response));
        });
    }

    protected processFilter3(response: AxiosResponse): Promise<CostDeductionRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostDeductionRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CostDeductionRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostDeductionRecordViewResult>(null as any);
    }

    /**
     * 患者扣费记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    costDeductionRecordPOST(body: CostDeductionRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostDeductionRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostDeductionRecordPOST(_response));
        });
    }

    protected processCostDeductionRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者扣费记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    costDeductionRecordPOST2(id: string, body: CostDeductionRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostDeductionRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostDeductionRecordPOST2(_response));
        });
    }

    protected processCostDeductionRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者扣费记录 -- 根据Id删除数据
     * @return Success
     */
    delete2(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostDeductionRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete2(_response));
        });
    }

    protected processDelete2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CostGroupServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 费用组套 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    costGroupGET(id: string , cancelToken?: CancelToken | undefined): Promise<CostGroupViewResultEntry> {
        let url_ = this.baseUrl + "/api/CostGroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostGroupGET(_response));
        });
    }

    protected processCostGroupGET(response: AxiosResponse): Promise<CostGroupViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostGroupViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CostGroupViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostGroupViewResultEntry>(null as any);
    }

    /**
     * 费用组套 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    costGroupPOST(id: string, body: CostGroupEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostGroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostGroupPOST(_response));
        });
    }

    protected processCostGroupPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 费用组套 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 组合名称/透析方式/通路类型
     * @return Success
     */
    filter4(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostGroupViewResult> {
        let url_ = this.baseUrl + "/api/CostGroup/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter4(_response));
        });
    }

    protected processFilter4(response: AxiosResponse): Promise<CostGroupViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostGroupViewResult.fromJS(resultData200);
            return Promise.resolve<CostGroupViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostGroupViewResult>(null as any);
    }

    /**
     * 费用组套 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    costGroupPOST2(body: CostGroupEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostGroupPOST2(_response));
        });
    }

    protected processCostGroupPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 费用组套 -- 根据Id删除数据
     * @return Success
     */
    delete3(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostGroup/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete3(_response));
        });
    }

    protected processDelete3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CostGroupItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 费用组套明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    costGroupItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<CostGroupItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/CostGroupItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostGroupItemGET(_response));
        });
    }

    protected processCostGroupItemGET(response: AxiosResponse): Promise<CostGroupItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostGroupItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CostGroupItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostGroupItemViewResultEntry>(null as any);
    }

    /**
     * 费用组套明细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    costGroupItemPOST(id: string, body: CostGroupItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostGroupItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostGroupItemPOST(_response));
        });
    }

    protected processCostGroupItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 费用组套明细 -- 根据费用组套ID查询数据
     * @param costGroupId 费用组套ID
     * @param filter (optional) 查询条件
     * @return Success
     */
    costGroupGET2(costGroupId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostGroupItemViewResult> {
        let url_ = this.baseUrl + "/api/CostGroupItem/CostGroup/{costGroupId}";
        if (costGroupId === undefined || costGroupId === null)
            throw new Error("The parameter 'costGroupId' must be defined.");
        url_ = url_.replace("{costGroupId}", encodeURIComponent("" + costGroupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostGroupGET2(_response));
        });
    }

    protected processCostGroupGET2(response: AxiosResponse): Promise<CostGroupItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostGroupItemViewResult.fromJS(resultData200);
            return Promise.resolve<CostGroupItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostGroupItemViewResult>(null as any);
    }

    /**
     * 费用组套明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 组套 - 组合名称/透析方式/通路类型;项目 - 分类/名称/简称/商品名/用法/厂家/拼音码/五笔码
     * @return Success
     */
    filter5(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostGroupItemViewResult> {
        let url_ = this.baseUrl + "/api/CostGroupItem/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter5(_response));
        });
    }

    protected processFilter5(response: AxiosResponse): Promise<CostGroupItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostGroupItemViewResult.fromJS(resultData200);
            return Promise.resolve<CostGroupItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostGroupItemViewResult>(null as any);
    }

    /**
     * 费用组套明细 -- 透析机型号绑定 > 患者处方 > 通用模版
     * @param patientId (optional) 患者标识
     * @param devModel (optional) 透析机型号 `DIC.DEV.DIALYSIS.MODEL`
     * @param dialysisMode (optional) 透析方式 `DIC.DIALYSIS.MODE`
     * @param filter (optional) 查询条件
     * @return Success
     */
    patient(patientId: string | undefined, devModel: string | undefined, dialysisMode: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureCostGroupViewResult> {
        let url_ = this.baseUrl + "/api/CostGroupItem/Patient?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (devModel === null)
            throw new Error("The parameter 'devModel' cannot be null.");
        else if (devModel !== undefined)
            url_ += "devModel=" + encodeURIComponent("" + devModel) + "&";
        if (dialysisMode === null)
            throw new Error("The parameter 'dialysisMode' cannot be null.");
        else if (dialysisMode !== undefined)
            url_ += "dialysisMode=" + encodeURIComponent("" + dialysisMode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient(_response));
        });
    }

    protected processPatient(response: AxiosResponse): Promise<CureCostGroupViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCostGroupViewResult.fromJS(resultData200);
            return Promise.resolve<CureCostGroupViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCostGroupViewResult>(null as any);
    }

    /**
     * 费用组套明细 -- 患者费用项目通用模版
     * @param dialysisMode (optional) 透析方式
     * @param vascularAccess (optional) 通路类型
     * @param filter (optional)
     * @return Success
     */
    common(dialysisMode: string | undefined, vascularAccess: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureCostGroupViewResult> {
        let url_ = this.baseUrl + "/api/CostGroupItem/Common?";
        if (dialysisMode === null)
            throw new Error("The parameter 'dialysisMode' cannot be null.");
        else if (dialysisMode !== undefined)
            url_ += "dialysisMode=" + encodeURIComponent("" + dialysisMode) + "&";
        if (vascularAccess === null)
            throw new Error("The parameter 'vascularAccess' cannot be null.");
        else if (vascularAccess !== undefined)
            url_ += "vascularAccess=" + encodeURIComponent("" + vascularAccess) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCommon(_response));
        });
    }

    protected processCommon(response: AxiosResponse): Promise<CureCostGroupViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCostGroupViewResult.fromJS(resultData200);
            return Promise.resolve<CureCostGroupViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCostGroupViewResult>(null as any);
    }

    /**
     * 费用组套明细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    costGroupItemPOST2(body: CostGroupItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostGroupItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostGroupItemPOST2(_response));
        });
    }

    protected processCostGroupItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 费用组套明细 -- 根据Id删除数据
     * @return Success
     */
    delete4(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostGroupItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete4(_response));
        });
    }

    protected processDelete4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CostRechargeRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者缴费记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientKey (optional) 患者姓名/别名/首字母/拼音码/五笔码
     * @param itemKey (optional) 项目-分类/名称/简称/商品名/用法/厂家/拼音码/五笔码
     * @return Success
     */
    filter6(filter: string | undefined, patientKey: string | undefined, itemKey: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostRechargeRecordViewResult> {
        let url_ = this.baseUrl + "/api/CostRechargeRecord/Filter?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (itemKey === null)
            throw new Error("The parameter 'itemKey' cannot be null.");
        else if (itemKey !== undefined)
            url_ += "itemKey=" + encodeURIComponent("" + itemKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter6(_response));
        });
    }

    protected processFilter6(response: AxiosResponse): Promise<CostRechargeRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostRechargeRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CostRechargeRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostRechargeRecordViewResult>(null as any);
    }

    /**
     * 患者缴费记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    costRechargeRecord(body: CostRechargeRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostRechargeRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostRechargeRecord(_response));
        });
    }

    protected processCostRechargeRecord(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CostRefundRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者退费记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    costRefundRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<CostRefundRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/CostRefundRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostRefundRecordGET(_response));
        });
    }

    protected processCostRefundRecordGET(response: AxiosResponse): Promise<CostRefundRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostRefundRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CostRefundRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostRefundRecordViewResultEntry>(null as any);
    }

    /**
     * 患者退费记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    costRefundRecordPOST(id: string, body: CostRefundRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostRefundRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostRefundRecordPOST(_response));
        });
    }

    protected processCostRefundRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者退费记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientKey (optional)
     * @param drugKey (optional)
     * @param refundType (optional)
     * @return Success
     */
    filter7(filter: string | undefined, patientKey: string | undefined, drugKey: string | undefined, refundType: string | undefined , cancelToken?: CancelToken | undefined): Promise<CostRefundRecordViewResult> {
        let url_ = this.baseUrl + "/api/CostRefundRecord/Filter?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (drugKey === null)
            throw new Error("The parameter 'drugKey' cannot be null.");
        else if (drugKey !== undefined)
            url_ += "drugKey=" + encodeURIComponent("" + drugKey) + "&";
        if (refundType === null)
            throw new Error("The parameter 'refundType' cannot be null.");
        else if (refundType !== undefined)
            url_ += "RefundType=" + encodeURIComponent("" + refundType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter7(_response));
        });
    }

    protected processFilter7(response: AxiosResponse): Promise<CostRefundRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CostRefundRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CostRefundRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CostRefundRecordViewResult>(null as any);
    }

    /**
     * 患者退费记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    costRefundRecordPOST2(body: CostRefundRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostRefundRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCostRefundRecordPOST2(_response));
        });
    }

    protected processCostRefundRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者退费记录 -- 根据Id删除数据
     * @return Success
     */
    delete5(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CostRefundRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete5(_response));
        });
    }

    protected processDelete5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomItemListServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 项目清单 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomItemListGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomItemListResultEntry> {
        let url_ = this.baseUrl + "/api/RoomItemList/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemListGET(_response));
        });
    }

    protected processRoomItemListGET(response: AxiosResponse): Promise<RoomItemListResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemListResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomItemListResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemListResultEntry>(null as any);
    }

    /**
     * 项目清单 -- 更新数据(不包含启用禁用)
     * @param body (optional)
     * @return Success
     */
    roomItemListPOST(id: string, body: RoomItemListEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemList/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemListPOST(_response));
        });
    }

    protected processRoomItemListPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目清单 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional)
     * @return Success
     */
    filter8(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<InventoryViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter8(_response));
        });
    }

    protected processFilter8(response: AxiosResponse): Promise<InventoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = InventoryViewResult.fromJS(resultData200);
            return Promise.resolve<InventoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InventoryViewResult>(null as any);
    }

    /**
     * 项目清单 -- 根据 名称/拼音码/五笔码/id  条件查询数据，用于快速定位项目
     * @param filter (optional)
     * @param key (optional) 名称/拼音码/五笔码/id
     * @return Success
     */
    quick(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemQuickListViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/Quick?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuick(_response));
        });
    }

    protected processQuick(response: AxiosResponse): Promise<RoomItemQuickListViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemQuickListViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemQuickListViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemQuickListViewResult>(null as any);
    }

    /**
     * 期初库存(向下递归查询所有子项) -- 根据账套分组标识查询信息
     * @param roomAccountGroupId 账套分组标识(未分类填0)
     * @param filter (optional) 查询条件
     * @return Success
     */
    byRoomAccountGroupId(roomAccountGroupId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<InventoryViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/ByRoomAccountGroupId/{roomAccountGroupId}";
        if (roomAccountGroupId === undefined || roomAccountGroupId === null)
            throw new Error("The parameter 'roomAccountGroupId' must be defined.");
        url_ = url_.replace("{roomAccountGroupId}", encodeURIComponent("" + roomAccountGroupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByRoomAccountGroupId(_response));
        });
    }

    protected processByRoomAccountGroupId(response: AxiosResponse): Promise<InventoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = InventoryViewResult.fromJS(resultData200);
            return Promise.resolve<InventoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InventoryViewResult>(null as any);
    }

    /**
     * 期初库存(向下递归查询所有子项) -- 根据账套分组标识查询信息导出
     * @param roomAccountGroupId (optional) 账套分组标识(未分类填0)
     * @param filter (optional) 查询条件
     * @return Success
     */
    export3(roomAccountGroupId: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemList/ByRoomAccountGroupId/Filter/Export?";
        if (roomAccountGroupId === null)
            throw new Error("The parameter 'roomAccountGroupId' cannot be null.");
        else if (roomAccountGroupId !== undefined)
            url_ += "roomAccountGroupId=" + encodeURIComponent("" + roomAccountGroupId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport3(_response));
        });
    }

    protected processExport3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目清单 -- 获取所有药品
     * @param filter (optional) 查询条件
     * @return Success
     */
    drug(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemFullViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/Drug";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrug(_response));
        });
    }

    protected processDrug(response: AxiosResponse): Promise<RoomItemFullViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemFullViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemFullViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemFullViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有耗材
     * @param filter (optional) 查询条件
     * @return Success
     */
    consumable(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemFullViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/Consumable";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processConsumable(_response));
        });
    }

    protected processConsumable(response: AxiosResponse): Promise<RoomItemFullViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemFullViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemFullViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemFullViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有项目
     * @param filter (optional) 查询条件
     * @return Success
     */
    project(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemFullViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/Project";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processProject(_response));
        });
    }

    protected processProject(response: AxiosResponse): Promise<RoomItemFullViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemFullViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemFullViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemFullViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有启用的其他耗材
     * @param filter (optional) 查询条件
     * @return Success
     */
    other(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemQuickConsumableViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/Consumable/Other";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOther(_response));
        });
    }

    protected processOther(response: AxiosResponse): Promise<RoomItemQuickConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemQuickConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemQuickConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemQuickConsumableViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有启用的透析器
     * @param filter (optional) 查询条件
     * @return Success
     */
    tXQ(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemQuickConsumableViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/TXQ";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTXQ(_response));
        });
    }

    protected processTXQ(response: AxiosResponse): Promise<RoomItemQuickConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemQuickConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemQuickConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemQuickConsumableViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有启用的灌流器
     * @param filter (optional) 查询条件
     * @return Success
     */
    gLQ(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemQuickConsumableViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/GLQ";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGLQ(_response));
        });
    }

    protected processGLQ(response: AxiosResponse): Promise<RoomItemQuickConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemQuickConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemQuickConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemQuickConsumableViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有启用的血滤器
     * @param filter (optional) 查询条件
     * @return Success
     */
    xLQ(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemQuickConsumableViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/XLQ";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processXLQ(_response));
        });
    }

    protected processXLQ(response: AxiosResponse): Promise<RoomItemQuickConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemQuickConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemQuickConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemQuickConsumableViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有启用的血路管
     * @param filter (optional) 查询条件
     * @return Success
     */
    xLG(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemQuickConsumableViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/XLG";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processXLG(_response));
        });
    }

    protected processXLG(response: AxiosResponse): Promise<RoomItemQuickConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemQuickConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemQuickConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemQuickConsumableViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有启用的内瘘针
     * @param filter (optional) 查询条件
     * @return Success
     */
    nLZ(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemQuickConsumableViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/NLZ";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processNLZ(_response));
        });
    }

    protected processNLZ(response: AxiosResponse): Promise<RoomItemQuickConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemQuickConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemQuickConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemQuickConsumableViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有启用的置换液管路
     * @param filter (optional) 查询条件
     * @return Success
     */
    zHYGL(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemQuickConsumableViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/ZHYGL";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processZHYGL(_response));
        });
    }

    protected processZHYGL(response: AxiosResponse): Promise<RoomItemQuickConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemQuickConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemQuickConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemQuickConsumableViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有启用的细菌过滤器
     * @param filter (optional) 查询条件
     * @return Success
     */
    xJGLQ(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemQuickConsumableViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/XJGLQ";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processXJGLQ(_response));
        });
    }

    protected processXJGLQ(response: AxiosResponse): Promise<RoomItemQuickConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemQuickConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemQuickConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemQuickConsumableViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有启用的透析液
     * @param filter (optional) 查询条件
     * @return Success
     */
    tXY(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemQuickConsumableViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/TXY";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTXY(_response));
        });
    }

    protected processTXY(response: AxiosResponse): Promise<RoomItemQuickConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemQuickConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemQuickConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemQuickConsumableViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有启用的透析类项目
     * @param filter (optional) 查询条件
     * @return Success
     */
    dialysis(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemQuickConsumableViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/Dialysis";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDialysis(_response));
        });
    }

    protected processDialysis(response: AxiosResponse): Promise<RoomItemQuickConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemQuickConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemQuickConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemQuickConsumableViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有启用的护理类项目
     * @param filter (optional) 查询条件
     * @return Success
     */
    nursing(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemQuickConsumableViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/Nursing";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processNursing(_response));
        });
    }

    protected processNursing(response: AxiosResponse): Promise<RoomItemQuickConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemQuickConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemQuickConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemQuickConsumableViewResult>(null as any);
    }

    /**
     * 项目清单 -- 获取所有启用的项目
     * @param code (optional) 项目大类code，例如：护理类 - ROOM.ITEM.PROJECT.DIALYSIS
     * @param keyname (optional) 搜索条件
     * @param filter (optional) 查询条件
     * @return Success
     */
    custom(code: string | undefined, keyname: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemQuickConsumableViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemList/Code/Custom?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (keyname === null)
            throw new Error("The parameter 'keyname' cannot be null.");
        else if (keyname !== undefined)
            url_ += "keyname=" + encodeURIComponent("" + keyname) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCustom(_response));
        });
    }

    protected processCustom(response: AxiosResponse): Promise<RoomItemQuickConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemQuickConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemQuickConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemQuickConsumableViewResult>(null as any);
    }

    /**
     * 项目清单 -- 新增数据(不包含启用禁用)
     * @param body (optional)
     * @return Success
     */
    roomItemListPOST2(body: RoomItemListEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemListPOST2(_response));
        });
    }

    protected processRoomItemListPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目清单 -- 停用/启用
     * @param id 项目标识
     * @return Success
     */
    disabled(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemList/Disabled/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDisabled(_response));
        });
    }

    protected processDisabled(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目清单 -- 根据Id删除数据
     * @return Success
     */
    delete6(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemList/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete6(_response));
        });
    }

    protected processDelete6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomRecordFaultyItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 报损记录明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomRecordFaultyItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomRecordFaultyItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordFaultyItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordFaultyItemGET(_response));
        });
    }

    protected processRoomRecordFaultyItemGET(response: AxiosResponse): Promise<RoomRecordFaultyItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordFaultyItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordFaultyItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordFaultyItemViewResultEntry>(null as any);
    }

    /**
     * 报损记录明细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomRecordFaultyItemPOST(id: string, body: RoomRecordFaultyItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordFaultyItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordFaultyItemPOST(_response));
        });
    }

    protected processRoomRecordFaultyItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 报损记录明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter9(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordFaultyItemViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordFaultyItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter9(_response));
        });
    }

    protected processFilter9(response: AxiosResponse): Promise<RoomRecordFaultyItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordFaultyItemViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordFaultyItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordFaultyItemViewResult>(null as any);
    }

    /**
     * 报损记录明细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomRecordFaultyItemPOST2(body: FaultyItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordFaultyItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordFaultyItemPOST2(_response));
        });
    }

    protected processRoomRecordFaultyItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 报损记录明细 -- 根据Id删除数据
     * @return Success
     */
    delete7(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordFaultyItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete7(_response));
        });
    }

    protected processDelete7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomRecordFaultyOrderServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 报损单 -- 根据条件查询数据
     * @param key (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter10(key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordFaultyOrderViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordFaultyOrder/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter10(_response));
        });
    }

    protected processFilter10(response: AxiosResponse): Promise<RoomRecordFaultyOrderViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordFaultyOrderViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordFaultyOrderViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordFaultyOrderViewResult>(null as any);
    }
}

export class RoomRecordInServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 入库记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomRecordInGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomRecordInViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordIn/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordInGET(_response));
        });
    }

    protected processRoomRecordInGET(response: AxiosResponse): Promise<RoomRecordInViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordInViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInViewResultEntry>(null as any);
    }

    /**
     * 入库记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomRecordInPOST(id: string, body: RoomRecordInViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordIn/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordInPOST(_response));
        });
    }

    protected processRoomRecordInPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 入库记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter11(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordInViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordIn/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter11(_response));
        });
    }

    protected processFilter11(response: AxiosResponse): Promise<RoomRecordInViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordInViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInViewResult>(null as any);
    }

    /**
     * 入库记录 -- 根据条件查询数据
     * @param roomItemListId (optional) 项目标识
     * @param cureRecordId (optional) 透析记录单标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    getByRoomItemList(roomItemListId: string | undefined, cureRecordId: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordInViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordIn/GetByRoomItemList?";
        if (roomItemListId === null)
            throw new Error("The parameter 'roomItemListId' cannot be null.");
        else if (roomItemListId !== undefined)
            url_ += "roomItemListId=" + encodeURIComponent("" + roomItemListId) + "&";
        if (cureRecordId === null)
            throw new Error("The parameter 'cureRecordId' cannot be null.");
        else if (cureRecordId !== undefined)
            url_ += "cureRecordId=" + encodeURIComponent("" + cureRecordId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByRoomItemList(_response));
        });
    }

    protected processGetByRoomItemList(response: AxiosResponse): Promise<RoomRecordInViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordInViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInViewResult>(null as any);
    }

    /**
     * 入库记录 -- 报损明细
     * @param roomRecordInId (optional) 入库标识
     * @param startDate (optional)
     * @param endDate (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    getRoomRecordFaulty(roomRecordInId: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordOperateViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordIn/GetRoomRecordFaulty?";
        if (roomRecordInId === null)
            throw new Error("The parameter 'roomRecordInId' cannot be null.");
        else if (roomRecordInId !== undefined)
            url_ += "roomRecordInId=" + encodeURIComponent("" + roomRecordInId) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetRoomRecordFaulty(_response));
        });
    }

    protected processGetRoomRecordFaulty(response: AxiosResponse): Promise<RoomRecordOperateViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordOperateViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordOperateViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordOperateViewResult>(null as any);
    }

    /**
     * 入库记录 -- 保存数据
     * @param body (optional)
     * @return Success
     */
    save(roomRecordInOrderId: string, body: RoomRecordInEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordIn/Save/{roomRecordInOrderId}";
        if (roomRecordInOrderId === undefined || roomRecordInOrderId === null)
            throw new Error("The parameter 'roomRecordInOrderId' must be defined.");
        url_ = url_.replace("{roomRecordInOrderId}", encodeURIComponent("" + roomRecordInOrderId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSave(_response));
        });
    }

    protected processSave(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 入库记录 -- 根据Id删除数据
     * @return Success
     */
    delete8(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordIn/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete8(_response));
        });
    }

    protected processDelete8(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomRecordInOrderServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 入库单 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomRecordInOrderGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomRecordInOrderViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordInOrder/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordInOrderGET(_response));
        });
    }

    protected processRoomRecordInOrderGET(response: AxiosResponse): Promise<RoomRecordInOrderViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInOrderViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordInOrderViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInOrderViewResultEntry>(null as any);
    }

    /**
     * 入库单 -- 编辑
     * @param body (optional)
     * @return Success
     */
    roomRecordInOrderPOST(id: string, body: RoomRecordInOrderEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInOrder/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordInOrderPOST(_response));
        });
    }

    protected processRoomRecordInOrderPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 入库单 -- 根据条件查询数据
     * @param key (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter12(key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordInOrderViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordInOrder/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter12(_response));
        });
    }

    protected processFilter12(response: AxiosResponse): Promise<RoomRecordInOrderViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInOrderViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordInOrderViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInOrderViewResult>(null as any);
    }

    /**
     * 入库单 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomRecordInOrderPOST2(body: RoomRecordInOrderEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordInOrderPOST2(_response));
        });
    }

    protected processRoomRecordInOrderPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 入库单 -- 提交数据(提交后，将不允许编辑该记录)
     * @return Success
     */
    submit(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInOrder/Submit/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSubmit(_response));
        });
    }

    protected processSubmit(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 入库单 -- 根据Id删除数据
     * @return Success
     */
    delete9(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInOrder/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete9(_response));
        });
    }

    protected processDelete9(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomRecordInventoryServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 盘库记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomRecordInventoryGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomRecordInventoryViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordInventory/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordInventoryGET(_response));
        });
    }

    protected processRoomRecordInventoryGET(response: AxiosResponse): Promise<RoomRecordInventoryViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInventoryViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordInventoryViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInventoryViewResultEntry>(null as any);
    }

    /**
     * 盘库记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter13(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordInventoryViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordInventory/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter13(_response));
        });
    }

    protected processFilter13(response: AxiosResponse): Promise<RoomRecordInventoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInventoryViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordInventoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInventoryViewResult>(null as any);
    }

    /**
     * 盘库记录 -- 根据单据编号查询
     * @param billNo (optional) 单据编号
     * @param filter (optional) 查询条件
     * @return Success
     */
    billNo(billNo: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordInventoryViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordInventory/BillNo?";
        if (billNo === null)
            throw new Error("The parameter 'billNo' cannot be null.");
        else if (billNo !== undefined)
            url_ += "billNo=" + encodeURIComponent("" + billNo) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBillNo(_response));
        });
    }

    protected processBillNo(response: AxiosResponse): Promise<RoomRecordInventoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInventoryViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordInventoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInventoryViewResult>(null as any);
    }

    /**
     * 盘库记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomRecordInventoryPOST(body: RoomRecordInventoryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInventory";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordInventoryPOST(_response));
        });
    }

    protected processRoomRecordInventoryPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 盘库记录 -- 暂存数据
     * @param body (optional)
     * @return Success
     */
    stage(id: string, body: RoomRecordInventoryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInventory/Stage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStage(_response));
        });
    }

    protected processStage(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 盘库记录 -- 提交数据(提交后，将不允许编辑该记录)
     * @param body (optional)
     * @return Success
     */
    submit2(id: string, body: RoomRecordInventoryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInventory/Submit/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSubmit2(_response));
        });
    }

    protected processSubmit2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 盘库记录 -- 查询盘库锁是否已经锁定(data=true已锁定/data=false未锁定)
     * @return Success
     */
    check(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInventory/Locker/Check";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCheck(_response));
        });
    }

    protected processCheck(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 盘库记录 -- 盘库锁 - 锁定
     * @return Success
     */
    set(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInventory/Locker/Set";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSet(_response));
        });
    }

    protected processSet(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 盘库记录 -- 盘库锁 - 解锁
     * @return Success
     */
    remove(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInventory/Locker/Remove";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRemove(_response));
        });
    }

    protected processRemove(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 盘库记录 -- 根据Id删除数据
     * @return Success
     */
    delete10(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInventory/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete10(_response));
        });
    }

    protected processDelete10(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomRecordInventoryItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 盘库记录详细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomRecordInventoryItem(id: string , cancelToken?: CancelToken | undefined): Promise<RoomRecordInventoryItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordInventoryItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordInventoryItem(_response));
        });
    }

    protected processRoomRecordInventoryItem(response: AxiosResponse): Promise<RoomRecordInventoryItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInventoryItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordInventoryItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInventoryItemViewResultEntry>(null as any);
    }

    /**
     * 盘库记录详细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter14(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordInventoryItemViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordInventoryItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter14(_response));
        });
    }

    protected processFilter14(response: AxiosResponse): Promise<RoomRecordInventoryItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInventoryItemViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordInventoryItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInventoryItemViewResult>(null as any);
    }

    /**
     * 盘库记录详细 -- 根据盘库记录标识查询数据
     * @param roomRecordInventoryId 盘库记录标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    roomRecordInventoryGET2(roomRecordInventoryId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordInventoryItemViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordInventoryItem/RoomRecordInventory/{roomRecordInventoryId}";
        if (roomRecordInventoryId === undefined || roomRecordInventoryId === null)
            throw new Error("The parameter 'roomRecordInventoryId' must be defined.");
        url_ = url_.replace("{roomRecordInventoryId}", encodeURIComponent("" + roomRecordInventoryId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordInventoryGET2(_response));
        });
    }

    protected processRoomRecordInventoryGET2(response: AxiosResponse): Promise<RoomRecordInventoryItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInventoryItemViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordInventoryItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInventoryItemViewResult>(null as any);
    }

    /**
     * 盘库记录详细 -- 根据项目标识查询数据
     * @param roomItemListId 项目标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    roomItemListGET2(roomItemListId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordInventoryItemViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordInventoryItem/RoomItemList/{roomItemListId}";
        if (roomItemListId === undefined || roomItemListId === null)
            throw new Error("The parameter 'roomItemListId' must be defined.");
        url_ = url_.replace("{roomItemListId}", encodeURIComponent("" + roomItemListId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemListGET2(_response));
        });
    }

    protected processRoomItemListGET2(response: AxiosResponse): Promise<RoomRecordInventoryItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInventoryItemViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordInventoryItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInventoryItemViewResult>(null as any);
    }
}

export class RoomRecordOutItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 出库记录明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomRecordOutItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomRecordOutItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordOutItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordOutItemGET(_response));
        });
    }

    protected processRoomRecordOutItemGET(response: AxiosResponse): Promise<RoomRecordOutItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordOutItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordOutItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordOutItemViewResultEntry>(null as any);
    }

    /**
     * 出库记录明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional)
     * @param stock (optional)
     * @return Success
     */
    filter15(filter: string | undefined, key: string | undefined, stock: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordOutItemViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordOutItem/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (stock === null)
            throw new Error("The parameter 'stock' cannot be null.");
        else if (stock !== undefined)
            url_ += "stock=" + encodeURIComponent("" + stock) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter15(_response));
        });
    }

    protected processFilter15(response: AxiosResponse): Promise<RoomRecordOutItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordOutItemViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordOutItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordOutItemViewResult>(null as any);
    }

    /**
     * 出库记录 -- 退库报损明细
     * @param roomRecordOutItemId (optional) 出库记录标识
     * @param filter (optional)
     * @return Success
     */
    getRoomRecordRestoreFaulty(roomRecordOutItemId: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordOperateViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordOutItem/GetRoomRecordRestoreFaulty?";
        if (roomRecordOutItemId === null)
            throw new Error("The parameter 'roomRecordOutItemId' cannot be null.");
        else if (roomRecordOutItemId !== undefined)
            url_ += "roomRecordOutItemId=" + encodeURIComponent("" + roomRecordOutItemId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetRoomRecordRestoreFaulty(_response));
        });
    }

    protected processGetRoomRecordRestoreFaulty(response: AxiosResponse): Promise<RoomRecordOperateViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordOperateViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordOperateViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordOperateViewResult>(null as any);
    }

    /**
     * 出库记录 -- 新增数据
     * @param roomRecordOutOrderId (optional)
     * @param force (optional)
     * @param body (optional)
     * @return Success
     */
    roomRecordOutItemPOST(roomRecordOutOrderId: string | undefined, force: boolean | undefined, body: RoomRecordItem[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordOutItem?";
        if (roomRecordOutOrderId === null)
            throw new Error("The parameter 'roomRecordOutOrderId' cannot be null.");
        else if (roomRecordOutOrderId !== undefined)
            url_ += "roomRecordOutOrderId=" + encodeURIComponent("" + roomRecordOutOrderId) + "&";
        if (force === null)
            throw new Error("The parameter 'force' cannot be null.");
        else if (force !== undefined)
            url_ += "force=" + encodeURIComponent("" + force) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordOutItemPOST(_response));
        });
    }

    protected processRoomRecordOutItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 出库记录明细 -- 根据Id删除数据
     * @return Success
     */
    delete11(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordOutItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete11(_response));
        });
    }

    protected processDelete11(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomRecordOutOrderServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 出库单 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomRecordOutOrderGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomRecordOutOrderViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordOutOrder/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordOutOrderGET(_response));
        });
    }

    protected processRoomRecordOutOrderGET(response: AxiosResponse): Promise<RoomRecordOutOrderViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordOutOrderViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordOutOrderViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordOutOrderViewResultEntry>(null as any);
    }

    /**
     * 出库单 -- 根据条件查询数据
     * @param key (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter16(key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordOutOrderViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordOutOrder/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter16(_response));
        });
    }

    protected processFilter16(response: AxiosResponse): Promise<RoomRecordOutOrderViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordOutOrderViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordOutOrderViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordOutOrderViewResult>(null as any);
    }

    /**
     * 出库单 -- 根据透析日期与班次查询
     * @param dialysisDate (optional)
     * @param shiftId (optional)
     * @return Success
     */
    cure(dialysisDate: dayjs.Dayjs | undefined, shiftId: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordOutOrderViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordOutOrder/Cure?";
        if (dialysisDate === null)
            throw new Error("The parameter 'dialysisDate' cannot be null.");
        else if (dialysisDate !== undefined)
            url_ += "dialysisDate=" + encodeURIComponent(dialysisDate ? "" + dialysisDate.toISOString() : "") + "&";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCure(_response));
        });
    }

    protected processCure(response: AxiosResponse): Promise<RoomRecordOutOrderViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordOutOrderViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordOutOrderViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordOutOrderViewResultEntry>(null as any);
    }

    /**
     * 出库单 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomRecordOutOrderPOST(body: RoomRecordOutOrderEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordOutOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordOutOrderPOST(_response));
        });
    }

    protected processRoomRecordOutOrderPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomRecordRestoreItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 退库记录明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomRecordRestoreItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomRecordRestoreItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordRestoreItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordRestoreItemGET(_response));
        });
    }

    protected processRoomRecordRestoreItemGET(response: AxiosResponse): Promise<RoomRecordRestoreItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordRestoreItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordRestoreItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordRestoreItemViewResultEntry>(null as any);
    }

    /**
     * 退库记录明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter17(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordRestoreItemViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordRestoreItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter17(_response));
        });
    }

    protected processFilter17(response: AxiosResponse): Promise<RoomRecordRestoreItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordRestoreItemViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordRestoreItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordRestoreItemViewResult>(null as any);
    }

    /**
     * 退库记录明细 -- 根据退库单ID查询数据
     * @param roomRecordRestoreOrderId 退库单ID
     * @param filter (optional) 查询条件
     * @return Success
     */
    roomRecordRestoreOrderGET(roomRecordRestoreOrderId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordRestoreItemViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordRestoreItem/RoomRecordRestoreOrder/{roomRecordRestoreOrderId}";
        if (roomRecordRestoreOrderId === undefined || roomRecordRestoreOrderId === null)
            throw new Error("The parameter 'roomRecordRestoreOrderId' must be defined.");
        url_ = url_.replace("{roomRecordRestoreOrderId}", encodeURIComponent("" + roomRecordRestoreOrderId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordRestoreOrderGET(_response));
        });
    }

    protected processRoomRecordRestoreOrderGET(response: AxiosResponse): Promise<RoomRecordRestoreItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordRestoreItemViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordRestoreItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordRestoreItemViewResult>(null as any);
    }

    /**
     * 退库记录明细 -- 根据出库记录ID查询数据
     * @param roomRecordOutItemId 出库记录ID
     * @param filter (optional) 查询条件
     * @return Success
     */
    roomRecordRestoreOrderGET2(roomRecordOutItemId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordRestoreItemViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordRestoreItem/RoomRecordRestoreOrder/{roomRecordOutItemId}";
        if (roomRecordOutItemId === undefined || roomRecordOutItemId === null)
            throw new Error("The parameter 'roomRecordOutItemId' must be defined.");
        url_ = url_.replace("{roomRecordOutItemId}", encodeURIComponent("" + roomRecordOutItemId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordRestoreOrderGET2(_response));
        });
    }

    protected processRoomRecordRestoreOrderGET2(response: AxiosResponse): Promise<RoomRecordRestoreItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordRestoreItemViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordRestoreItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordRestoreItemViewResult>(null as any);
    }

    /**
     * 退库记录明细 -- 新增数据
     * @param roomRecordOutOrderId (optional)
     * @param body (optional)
     * @return Success
     */
    roomRecordRestoreItemPOST(roomRecordOutOrderId: string | undefined, body: RestoreItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordRestoreItem?";
        if (roomRecordOutOrderId === null)
            throw new Error("The parameter 'roomRecordOutOrderId' cannot be null.");
        else if (roomRecordOutOrderId !== undefined)
            url_ += "roomRecordOutOrderId=" + encodeURIComponent("" + roomRecordOutOrderId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordRestoreItemPOST(_response));
        });
    }

    protected processRoomRecordRestoreItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomRecordRestoreOrderServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 退库单 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)，退库单查看按钮使用
     * @return Success
     */
    roomRecordRestoreOrderGET3(id: string , cancelToken?: CancelToken | undefined): Promise<RoomRecordRestoreOrderViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordRestoreOrder/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordRestoreOrderGET3(_response));
        });
    }

    protected processRoomRecordRestoreOrderGET3(response: AxiosResponse): Promise<RoomRecordRestoreOrderViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordRestoreOrderViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordRestoreOrderViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordRestoreOrderViewResultEntry>(null as any);
    }

    /**
     * 退库单 -- 根据 单据编号/编码/出库单标识 查询
     * @param key (optional) 查询条件
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter18(key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordRestoreOrderViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordRestoreOrder/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter18(_response));
        });
    }

    protected processFilter18(response: AxiosResponse): Promise<RoomRecordRestoreOrderViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordRestoreOrderViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordRestoreOrderViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordRestoreOrderViewResult>(null as any);
    }

    /**
     * 退库单 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomRecordRestoreOrderPOST(body: RoomRecordRestoreOrderEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordRestoreOrder";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordRestoreOrderPOST(_response));
        });
    }

    protected processRoomRecordRestoreOrderPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 退库单 -- 根据出库单标识生成退库单(新增按钮调用)
     * @param roomRecordOutOrderId 出库单标识
     * @return Success
     */
    roomRecordOutOrderPOST2(roomRecordOutOrderId: string , cancelToken?: CancelToken | undefined): Promise<RoomRecordRestoreOrderViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordRestoreOrder/RoomRecordOutOrder/{roomRecordOutOrderId}";
        if (roomRecordOutOrderId === undefined || roomRecordOutOrderId === null)
            throw new Error("The parameter 'roomRecordOutOrderId' must be defined.");
        url_ = url_.replace("{roomRecordOutOrderId}", encodeURIComponent("" + roomRecordOutOrderId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordOutOrderPOST2(_response));
        });
    }

    protected processRoomRecordOutOrderPOST2(response: AxiosResponse): Promise<RoomRecordRestoreOrderViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordRestoreOrderViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordRestoreOrderViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordRestoreOrderViewResultEntry>(null as any);
    }

    /**
     * 退库单 -- 暂存数据
     * @param body (optional)
     * @return Success
     */
    stage2(id: string, body: RoomRecordRestoreOrderEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordRestoreOrder/Stage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStage2(_response));
        });
    }

    protected processStage2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 退库单 -- 提交数据(提交后，将不允许编辑该记录)
     * @param body (optional)
     * @return Success
     */
    submit3(id: string, body: RoomRecordRestoreOrderEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordRestoreOrder/Submit/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSubmit3(_response));
        });
    }

    protected processSubmit3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 退库单 -- 根据Id删除数据
     * @return Success
     */
    delete12(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordRestoreOrder/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete12(_response));
        });
    }

    protected processDelete12(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomRecordUsageServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 库房使用记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomRecordUsage(id: string , cancelToken?: CancelToken | undefined): Promise<RoomRecordUsageViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordUsage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordUsage(_response));
        });
    }

    protected processRoomRecordUsage(response: AxiosResponse): Promise<RoomRecordUsageViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordUsageViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordUsageViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordUsageViewResultEntry>(null as any);
    }

    /**
     * 库房使用记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter19(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordUsageViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordUsage/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter19(_response));
        });
    }

    protected processFilter19(response: AxiosResponse): Promise<RoomRecordUsageViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordUsageViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordUsageViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordUsageViewResult>(null as any);
    }

    /**
     * 库房使用记录 -- 根据条件查询数据
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @param roomListItemKey (optional) 项目：项目名称/项目类型名称/批号
     * @param patientKey (optional) 患者：姓名/别名/五笔码/拼音码/
     * @param typeCode (optional) 项目类型Code：灌流器-ROOM.ITEM.CONSUMABLE.GLQ
     * @return Success
     */
    getByKeys(startDate: string | undefined, endDate: string | undefined, filter: string | undefined, roomListItemKey: string | undefined, patientKey: string | undefined, typeCode: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordUsageViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordUsage/GetByKeys?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (roomListItemKey === null)
            throw new Error("The parameter 'roomListItemKey' cannot be null.");
        else if (roomListItemKey !== undefined)
            url_ += "roomListItemKey=" + encodeURIComponent("" + roomListItemKey) + "&";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (typeCode === null)
            throw new Error("The parameter 'typeCode' cannot be null.");
        else if (typeCode !== undefined)
            url_ += "typeCode=" + encodeURIComponent("" + typeCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByKeys(_response));
        });
    }

    protected processGetByKeys(response: AxiosResponse): Promise<RoomRecordUsageViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordUsageViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordUsageViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordUsageViewResult>(null as any);
    }

    /**
     * 使用记录 -- 退库报损明细
     * @param roomRecordUsageId (optional) 使用记录标识
     * @param filter (optional)
     * @return Success
     */
    getRoomRecordUsageOperate(roomRecordUsageId: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordOperateViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordUsage/GetRoomRecordUsageOperate?";
        if (roomRecordUsageId === null)
            throw new Error("The parameter 'roomRecordUsageId' cannot be null.");
        else if (roomRecordUsageId !== undefined)
            url_ += "roomRecordUsageId=" + encodeURIComponent("" + roomRecordUsageId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetRoomRecordUsageOperate(_response));
        });
    }

    protected processGetRoomRecordUsageOperate(response: AxiosResponse): Promise<RoomRecordOperateViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordOperateViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordOperateViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordOperateViewResult>(null as any);
    }

    /**
     * 库房使用记录 -- 导出
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param filter (optional) 查询条件
     * @param roomListItemKey (optional) 项目：项目名称/项目类型名称/批号
     * @param patientKey (optional) 患者：姓名/别名/五笔码/拼音码/
     * @param typeCode (optional) 项目类型Code：灌流器-ROOM.ITEM.CONSUMABLE.GLQ
     * @return Success
     */
    export4(startDate: string | undefined, endDate: string | undefined, filter: string | undefined, roomListItemKey: string | undefined, patientKey: string | undefined, typeCode: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordUsage/GetByKeys/Export?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        if (roomListItemKey === null)
            throw new Error("The parameter 'roomListItemKey' cannot be null.");
        else if (roomListItemKey !== undefined)
            url_ += "roomListItemKey=" + encodeURIComponent("" + roomListItemKey) + "&";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (typeCode === null)
            throw new Error("The parameter 'typeCode' cannot be null.");
        else if (typeCode !== undefined)
            url_ += "typeCode=" + encodeURIComponent("" + typeCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport4(_response));
        });
    }

    protected processExport4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 库房使用记录 -- 根据项目标识查询数据
     * @param roomListItemId 项目标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    roomListItem(roomListItemId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordUsageViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordUsage/RoomListItem/{roomListItemId}";
        if (roomListItemId === undefined || roomListItemId === null)
            throw new Error("The parameter 'roomListItemId' must be defined.");
        url_ = url_.replace("{roomListItemId}", encodeURIComponent("" + roomListItemId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomListItem(_response));
        });
    }

    protected processRoomListItem(response: AxiosResponse): Promise<RoomRecordUsageViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordUsageViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordUsageViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordUsageViewResult>(null as any);
    }

    /**
     * 库房使用记录 -- 通过透析记录ID查询使用记录
     * @param cureRecordId 透析记录标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    cureRecord(cureRecordId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordUsageViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordUsage/CureRecord/{cureRecordId}";
        if (cureRecordId === undefined || cureRecordId === null)
            throw new Error("The parameter 'cureRecordId' must be defined.");
        url_ = url_.replace("{cureRecordId}", encodeURIComponent("" + cureRecordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecord(_response));
        });
    }

    protected processCureRecord(response: AxiosResponse): Promise<RoomRecordUsageViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordUsageViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordUsageViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordUsageViewResult>(null as any);
    }
}

export class RoomRecordUsageOperateServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 使用记录操作明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomRecordUsageOperateGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomRecordUsageOperateViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordUsageOperate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordUsageOperateGET(_response));
        });
    }

    protected processRoomRecordUsageOperateGET(response: AxiosResponse): Promise<RoomRecordUsageOperateViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordUsageOperateViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordUsageOperateViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordUsageOperateViewResultEntry>(null as any);
    }

    /**
     * 使用记录操作明细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomRecordUsageOperatePOST(id: string, body: RoomRecordUsageOperateEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordUsageOperate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordUsageOperatePOST(_response));
        });
    }

    protected processRoomRecordUsageOperatePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 使用记录操作明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter20(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordUsageOperateViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordUsageOperate/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter20(_response));
        });
    }

    protected processFilter20(response: AxiosResponse): Promise<RoomRecordUsageOperateViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordUsageOperateViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordUsageOperateViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordUsageOperateViewResult>(null as any);
    }

    /**
     * 使用记录操作明细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomRecordUsageOperatePOST2(body: RoomRecordUsageOperateEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordUsageOperate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordUsageOperatePOST2(_response));
        });
    }

    protected processRoomRecordUsageOperatePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 使用记录操作明细 -- 根据Id删除数据
     * @return Success
     */
    delete13(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordUsageOperate/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete13(_response));
        });
    }

    protected processDelete13(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

/** 患者欠费记录 */
export class CostArrearageRecordEditModel implements ICostArrearageRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 欠费时间 */
    date!: dayjs.Dayjs;
    /** 数量 */
    count!: number;
    /** 补缴数量 */
    backCount!: number;
    /** 是否已结算0,1 */
    settlement!: number;
    /** 经办人 */
    settlementOperator?: string | undefined;
    /** 是否补缴0,1 */
    status!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否撤销0,1 */
    revoke!: number;

    constructor(data?: ICostArrearageRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.count = _data["count"];
            this.backCount = _data["backCount"];
            this.settlement = _data["settlement"];
            this.settlementOperator = _data["settlementOperator"];
            this.status = _data["status"];
            this.remark = _data["remark"];
            this.revoke = _data["revoke"];
        }
    }

    static fromJS(data: any): CostArrearageRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CostArrearageRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["count"] = this.count;
        data["backCount"] = this.backCount;
        data["settlement"] = this.settlement;
        data["settlementOperator"] = this.settlementOperator;
        data["status"] = this.status;
        data["remark"] = this.remark;
        data["revoke"] = this.revoke;
        return data;
    }
}

/** 患者欠费记录 */
export interface ICostArrearageRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 欠费时间 */
    date: dayjs.Dayjs;
    /** 数量 */
    count: number;
    /** 补缴数量 */
    backCount: number;
    /** 是否已结算0,1 */
    settlement: number;
    /** 经办人 */
    settlementOperator?: string | undefined;
    /** 是否补缴0,1 */
    status: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否撤销0,1 */
    revoke: number;
}

/** 患者欠费记录 */
export class CostArrearageRecordView implements ICostArrearageRecordView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 欠费时间 */
    date!: dayjs.Dayjs;
    /** 数量 */
    count!: number;
    /** 补缴数量 */
    backCount!: number;
    /** 是否已结算0,1 */
    settlement!: number;
    /** 经办人 */
    settlementOperator?: string | undefined;
    /** 是否补缴0,1 */
    status!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否撤销0,1 */
    revoke!: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 可以取消 */
    cancel?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` */
    unitBase?: string | undefined;

    constructor(data?: ICostArrearageRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.count = _data["count"];
            this.backCount = _data["backCount"];
            this.settlement = _data["settlement"];
            this.settlementOperator = _data["settlementOperator"];
            this.status = _data["status"];
            this.remark = _data["remark"];
            this.revoke = _data["revoke"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cancel = _data["cancel"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.sourceLabel = _data["sourceLabel"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
            this.unitBase = _data["unitBase"];
        }
    }

    static fromJS(data: any): CostArrearageRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new CostArrearageRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["count"] = this.count;
        data["backCount"] = this.backCount;
        data["settlement"] = this.settlement;
        data["settlementOperator"] = this.settlementOperator;
        data["status"] = this.status;
        data["remark"] = this.remark;
        data["revoke"] = this.revoke;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["cancel"] = this.cancel;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["sourceLabel"] = this.sourceLabel;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        data["unitBase"] = this.unitBase;
        return data;
    }
}

/** 患者欠费记录 */
export interface ICostArrearageRecordView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 欠费时间 */
    date: dayjs.Dayjs;
    /** 数量 */
    count: number;
    /** 补缴数量 */
    backCount: number;
    /** 是否已结算0,1 */
    settlement: number;
    /** 经办人 */
    settlementOperator?: string | undefined;
    /** 是否补缴0,1 */
    status: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否撤销0,1 */
    revoke: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 可以取消 */
    cancel?: boolean;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
}

/** Reponse */
export class CostArrearageRecordViewResult implements ICostArrearageRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostArrearageRecordView[] | undefined;

    constructor(data?: ICostArrearageRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostArrearageRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostArrearageRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostArrearageRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostArrearageRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostArrearageRecordView[] | undefined;
}

export class CostBalanceDetail implements ICostBalanceDetail {
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 费用类型 (缴费、扣费、欠费、退费) */
    costType?: string | undefined;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 单位 */
    unitBase?: string | undefined;
    /** 单位文本 */
    unitBaseLabel?: string | undefined;
    /** 数量 */
    count?: number;
    /** 剩余数量 */
    surplusCount?: number;
    /** 数量 */
    money?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 项目名称 */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 患者来源文本 */
    sourceLabel?: string | undefined;
    /** 费用单号 */
    billNumber?: string | undefined;
    /** 操作人 */
    operator?: string | undefined;

    constructor(data?: ICostBalanceDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.costType = _data["costType"];
            this.unitPrice = _data["unitPrice"];
            this.unitBase = _data["unitBase"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.count = _data["count"];
            this.surplusCount = _data["surplusCount"];
            this.money = _data["money"];
            this.remark = _data["remark"];
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.billNumber = _data["billNumber"];
            this.operator = _data["operator"];
        }
    }

    static fromJS(data: any): CostBalanceDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CostBalanceDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["costType"] = this.costType;
        data["unitPrice"] = this.unitPrice;
        data["unitBase"] = this.unitBase;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["count"] = this.count;
        data["surplusCount"] = this.surplusCount;
        data["money"] = this.money;
        data["remark"] = this.remark;
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["billNumber"] = this.billNumber;
        data["operator"] = this.operator;
        return data;
    }
}

export interface ICostBalanceDetail {
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 费用类型 (缴费、扣费、欠费、退费) */
    costType?: string | undefined;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 单位 */
    unitBase?: string | undefined;
    /** 单位文本 */
    unitBaseLabel?: string | undefined;
    /** 数量 */
    count?: number;
    /** 剩余数量 */
    surplusCount?: number;
    /** 数量 */
    money?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 项目名称 */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 患者来源 */
    source?: string | undefined;
    /** 患者来源文本 */
    sourceLabel?: string | undefined;
    /** 费用单号 */
    billNumber?: string | undefined;
    /** 操作人 */
    operator?: string | undefined;
}

/** Reponse */
export class CostBalanceDetailResult implements ICostBalanceDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostBalanceDetail[] | undefined;

    constructor(data?: ICostBalanceDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostBalanceDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostBalanceDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostBalanceDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostBalanceDetailResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostBalanceDetail[] | undefined;
}

/** 费用明细 */
export class CostBalanceDetailView implements ICostBalanceDetailView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 费用类型 (缴费、扣费、欠费、退费) */
    costType?: string | undefined;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 数量 */
    count?: number;
    /** 剩余数量 */
    surplusCount?: number;
    /** 数量 */
    money?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 项目名称 */
    roomItemListId?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;

    constructor(data?: ICostBalanceDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.costType = _data["costType"];
            this.unitPrice = _data["unitPrice"];
            this.count = _data["count"];
            this.surplusCount = _data["surplusCount"];
            this.money = _data["money"];
            this.remark = _data["remark"];
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
        }
    }

    static fromJS(data: any): CostBalanceDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new CostBalanceDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["costType"] = this.costType;
        data["unitPrice"] = this.unitPrice;
        data["count"] = this.count;
        data["surplusCount"] = this.surplusCount;
        data["money"] = this.money;
        data["remark"] = this.remark;
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        return data;
    }
}

/** 费用明细 */
export interface ICostBalanceDetailView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 费用类型 (缴费、扣费、欠费、退费) */
    costType?: string | undefined;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 数量 */
    count?: number;
    /** 剩余数量 */
    surplusCount?: number;
    /** 数量 */
    money?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 项目名称 */
    roomItemListId?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
}

/** Reponse */
export class CostBalanceDetailViewResult implements ICostBalanceDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostBalanceDetailView[] | undefined;

    constructor(data?: ICostBalanceDetailViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostBalanceDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostBalanceDetailViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostBalanceDetailViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostBalanceDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostBalanceDetailView[] | undefined;
}

/** 费用 - 费用统计 */
export class CostBalanceSummary implements ICostBalanceSummary {
    /** 姓名 */
    patientName?: string | undefined;
    /** 并发症 */
    items?: CostBalanceSummaryDetail[] | undefined;

    constructor(data?: ICostBalanceSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CostBalanceSummaryDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostBalanceSummary {
        data = typeof data === 'object' ? data : {};
        let result = new CostBalanceSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 费用 - 费用统计 */
export interface ICostBalanceSummary {
    /** 姓名 */
    patientName?: string | undefined;
    /** 并发症 */
    items?: CostBalanceSummaryDetail[] | undefined;
}

/** 费用 - 费用统计 */
export class CostBalanceSummaryDetail implements ICostBalanceSummaryDetail {
    /** 费用项 */
    itemName?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: ICostBalanceSummaryDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.itemName = _data["itemName"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CostBalanceSummaryDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CostBalanceSummaryDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemName"] = this.itemName;
        data["count"] = this.count;
        return data;
    }
}

/** 费用 - 费用统计 */
export interface ICostBalanceSummaryDetail {
    /** 费用项 */
    itemName?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class CostBalanceSummaryResult implements ICostBalanceSummaryResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostBalanceSummary[] | undefined;

    constructor(data?: ICostBalanceSummaryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostBalanceSummary.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostBalanceSummaryResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostBalanceSummaryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostBalanceSummaryResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostBalanceSummary[] | undefined;
}

export class CostBalanceView implements ICostBalanceView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 金额 */
    balanceSum?: number | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 剩余数量 */
    surplusCount!: number;
    /** 主键标识 */
    id?: string | undefined;
    /** 上次缴费时间 */
    lastRechargeTime?: dayjs.Dayjs | undefined;
    /** 上次扣费时间 */
    lastDeductionTime?: dayjs.Dayjs | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者来源显示值 */
    sourceLabel?: string | undefined;
    /** 序号 */
    index?: number | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;

    constructor(data?: ICostBalanceView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.balanceSum = _data["balanceSum"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.unitPrice = _data["unitPrice"];
            this.surplusCount = _data["surplusCount"];
            this.id = _data["id"];
            this.lastRechargeTime = _data["lastRechargeTime"] ? dayjs(_data["lastRechargeTime"].toString()) : <any>undefined;
            this.lastDeductionTime = _data["lastDeductionTime"] ? dayjs(_data["lastDeductionTime"].toString()) : <any>undefined;
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sourceLabel = _data["sourceLabel"];
            this.index = _data["index"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
        }
    }

    static fromJS(data: any): CostBalanceView {
        data = typeof data === 'object' ? data : {};
        let result = new CostBalanceView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["balanceSum"] = this.balanceSum;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["unitPrice"] = this.unitPrice;
        data["surplusCount"] = this.surplusCount;
        data["id"] = this.id;
        data["lastRechargeTime"] = this.lastRechargeTime ? this.lastRechargeTime.toISOString() : <any>undefined;
        data["lastDeductionTime"] = this.lastDeductionTime ? this.lastDeductionTime.toISOString() : <any>undefined;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["sourceLabel"] = this.sourceLabel;
        data["index"] = this.index;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        return data;
    }
}

export interface ICostBalanceView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 金额 */
    balanceSum?: number | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 剩余数量 */
    surplusCount: number;
    /** 主键标识 */
    id?: string | undefined;
    /** 上次缴费时间 */
    lastRechargeTime?: dayjs.Dayjs | undefined;
    /** 上次扣费时间 */
    lastDeductionTime?: dayjs.Dayjs | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者来源显示值 */
    sourceLabel?: string | undefined;
    /** 序号 */
    index?: number | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
}

/** Reponse */
export class CostBalanceViewResult implements ICostBalanceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostBalanceView[] | undefined;

    constructor(data?: ICostBalanceViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostBalanceView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostBalanceViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostBalanceViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostBalanceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostBalanceView[] | undefined;
}

export class CostDeductionRecordEditModel implements ICostDeductionRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 扣费时间 */
    date?: dayjs.Dayjs;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 数量 */
    count!: number;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 金额 */
    money?: number | undefined;
    /** 缴费记录标识 */
    costRechargeRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否已退费0,1 */
    refunded?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;

    constructor(data?: ICostDeductionRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.unitPrice = _data["unitPrice"];
            this.source = _data["source"];
            this.money = _data["money"];
            this.costRechargeRecordId = _data["costRechargeRecordId"];
            this.remark = _data["remark"];
            this.refunded = _data["refunded"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
        }
    }

    static fromJS(data: any): CostDeductionRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CostDeductionRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["unitPrice"] = this.unitPrice;
        data["source"] = this.source;
        data["money"] = this.money;
        data["costRechargeRecordId"] = this.costRechargeRecordId;
        data["remark"] = this.remark;
        data["refunded"] = this.refunded;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        return data;
    }
}

export interface ICostDeductionRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 扣费时间 */
    date?: dayjs.Dayjs;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 数量 */
    count: number;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 金额 */
    money?: number | undefined;
    /** 缴费记录标识 */
    costRechargeRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否已退费0,1 */
    refunded?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
}

export class CostDeductionRecordView implements ICostDeductionRecordView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 扣费时间 */
    date?: dayjs.Dayjs;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 数量 */
    count!: number;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 金额 */
    money?: number | undefined;
    /** 缴费记录标识 */
    costRechargeRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否已退费0,1 */
    refunded?: number | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 是否已结算0,1 */
    settlement?: number;
    /** 经办人 */
    settlementOperator?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 缴费单号 (发票号码) */
    paymentNumber?: string | undefined;
    /** 是否为收费项目 */
    isChargeItem?: number;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    roomItemTypeCode?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` */
    unitBase?: string | undefined;

    constructor(data?: ICostDeductionRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.unitPrice = _data["unitPrice"];
            this.source = _data["source"];
            this.money = _data["money"];
            this.costRechargeRecordId = _data["costRechargeRecordId"];
            this.remark = _data["remark"];
            this.refunded = _data["refunded"];
            this.id = _data["id"];
            this.settlement = _data["settlement"];
            this.settlementOperator = _data["settlementOperator"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.paymentNumber = _data["paymentNumber"];
            this.isChargeItem = _data["isChargeItem"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.sourceLabel = _data["sourceLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
            this.unitBase = _data["unitBase"];
        }
    }

    static fromJS(data: any): CostDeductionRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new CostDeductionRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["unitPrice"] = this.unitPrice;
        data["source"] = this.source;
        data["money"] = this.money;
        data["costRechargeRecordId"] = this.costRechargeRecordId;
        data["remark"] = this.remark;
        data["refunded"] = this.refunded;
        data["id"] = this.id;
        data["settlement"] = this.settlement;
        data["settlementOperator"] = this.settlementOperator;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["paymentNumber"] = this.paymentNumber;
        data["isChargeItem"] = this.isChargeItem;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["sourceLabel"] = this.sourceLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        data["unitBase"] = this.unitBase;
        return data;
    }
}

export interface ICostDeductionRecordView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 扣费时间 */
    date?: dayjs.Dayjs;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 数量 */
    count: number;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 金额 */
    money?: number | undefined;
    /** 缴费记录标识 */
    costRechargeRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否已退费0,1 */
    refunded?: number | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 是否已结算0,1 */
    settlement?: number;
    /** 经办人 */
    settlementOperator?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 缴费单号 (发票号码) */
    paymentNumber?: string | undefined;
    /** 是否为收费项目 */
    isChargeItem?: number;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    roomItemTypeCode?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
}

/** Reponse */
export class CostDeductionRecordViewResult implements ICostDeductionRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostDeductionRecordView[] | undefined;

    constructor(data?: ICostDeductionRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostDeductionRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostDeductionRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostDeductionRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostDeductionRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostDeductionRecordView[] | undefined;
}

export class CostGroupEditModel implements ICostGroupEditModel {
    /** 组套名称 */
    name!: string;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *多选使用;分割* */
    vascularAccessTypes?: string | undefined;
    /** 透析机型号 `DIC.DEV.DIALYSIS.MODEL` */
    devModel?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: ICostGroupEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.dialysisMode = _data["dialysisMode"];
            this.vascularAccessTypes = _data["vascularAccessTypes"];
            this.devModel = _data["devModel"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): CostGroupEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CostGroupEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["dialysisMode"] = this.dialysisMode;
        data["vascularAccessTypes"] = this.vascularAccessTypes;
        data["devModel"] = this.devModel;
        data["enabled"] = this.enabled;
        return data;
    }
}

export interface ICostGroupEditModel {
    /** 组套名称 */
    name: string;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *多选使用;分割* */
    vascularAccessTypes?: string | undefined;
    /** 透析机型号 `DIC.DEV.DIALYSIS.MODEL` */
    devModel?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

export class CostGroupItemEditModel implements ICostGroupItemEditModel {
    /** [费用组套标识](#费用组套) */
    costGroupId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 数量 */
    count!: number;

    constructor(data?: ICostGroupItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.costGroupId = _data["costGroupId"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CostGroupItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CostGroupItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["costGroupId"] = this.costGroupId;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        return data;
    }
}

export interface ICostGroupItemEditModel {
    /** [费用组套标识](#费用组套) */
    costGroupId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 数量 */
    count: number;
}

export class CostGroupItemView implements ICostGroupItemView {
    /** [费用组套标识](#费用组套) */
    costGroupId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 数量 */
    count!: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 血透机型号 `DIC.DEV.DIALYSIS.MODEL` */
    devModel?: string | undefined;
    /** 血透机型号显示值 */
    devModelLabel?: string | undefined;
    /** 组套名称 */
    name?: string | undefined;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *多选使用;分割* */
    vascularAccessTypes?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 通路类型显示值 */
    vascularAccessTypesLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 转换率 */
    conversionRate?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;

    constructor(data?: ICostGroupItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.costGroupId = _data["costGroupId"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.devModel = _data["devModel"];
            this.devModelLabel = _data["devModelLabel"];
            this.name = _data["name"];
            this.dialysisMode = _data["dialysisMode"];
            this.vascularAccessTypes = _data["vascularAccessTypes"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.vascularAccessTypesLabel = _data["vascularAccessTypesLabel"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.unitBase = _data["unitBase"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Label = _data["unitLevel1Label"];
            this.unitPrice = _data["unitPrice"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
            this.sellingPrice = _data["sellingPrice"];
            this.conversionRate = _data["conversionRate"];
            this.afterCharge = _data["afterCharge"];
            this.enabled = _data["enabled"];
            this.batchManage = _data["batchManage"];
            this.inventoryCount = _data["inventoryCount"];
        }
    }

    static fromJS(data: any): CostGroupItemView {
        data = typeof data === 'object' ? data : {};
        let result = new CostGroupItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["costGroupId"] = this.costGroupId;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["devModel"] = this.devModel;
        data["devModelLabel"] = this.devModelLabel;
        data["name"] = this.name;
        data["dialysisMode"] = this.dialysisMode;
        data["vascularAccessTypes"] = this.vascularAccessTypes;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["vascularAccessTypesLabel"] = this.vascularAccessTypesLabel;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["unitBase"] = this.unitBase;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Label"] = this.unitLevel1Label;
        data["unitPrice"] = this.unitPrice;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        data["sellingPrice"] = this.sellingPrice;
        data["conversionRate"] = this.conversionRate;
        data["afterCharge"] = this.afterCharge;
        data["enabled"] = this.enabled;
        data["batchManage"] = this.batchManage;
        data["inventoryCount"] = this.inventoryCount;
        return data;
    }
}

export interface ICostGroupItemView {
    /** [费用组套标识](#费用组套) */
    costGroupId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 数量 */
    count: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 血透机型号 `DIC.DEV.DIALYSIS.MODEL` */
    devModel?: string | undefined;
    /** 血透机型号显示值 */
    devModelLabel?: string | undefined;
    /** 组套名称 */
    name?: string | undefined;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *多选使用;分割* */
    vascularAccessTypes?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 通路类型显示值 */
    vascularAccessTypesLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 转换率 */
    conversionRate?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
}

/** Reponse */
export class CostGroupItemViewResult implements ICostGroupItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostGroupItemView[] | undefined;

    constructor(data?: ICostGroupItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostGroupItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostGroupItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostGroupItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostGroupItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostGroupItemView[] | undefined;
}

/** Reponse */
export class CostGroupItemViewResultEntry implements ICostGroupItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CostGroupItemView;

    constructor(data?: ICostGroupItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CostGroupItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CostGroupItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CostGroupItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICostGroupItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CostGroupItemView;
}

export class CostGroupView implements ICostGroupView {
    /** 组套名称 */
    name!: string;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *多选使用;分割* */
    vascularAccessTypes?: string | undefined;
    /** 透析机型号 `DIC.DEV.DIALYSIS.MODEL` */
    devModel?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 通路类型显示值 */
    vascularAccessTypesLabel?: string | undefined;
    /** 血透机型号显示值 */
    devModelLabel?: string | undefined;
    /** 透析区间 */
    deptDialysisAreaName?: string | undefined;
    /** 透析床位 */
    deptDialysisBedName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;

    constructor(data?: ICostGroupView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.dialysisMode = _data["dialysisMode"];
            this.vascularAccessTypes = _data["vascularAccessTypes"];
            this.devModel = _data["devModel"];
            this.enabled = _data["enabled"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.vascularAccessTypesLabel = _data["vascularAccessTypesLabel"];
            this.devModelLabel = _data["devModelLabel"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.deptDialysisBedName = _data["deptDialysisBedName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
        }
    }

    static fromJS(data: any): CostGroupView {
        data = typeof data === 'object' ? data : {};
        let result = new CostGroupView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["dialysisMode"] = this.dialysisMode;
        data["vascularAccessTypes"] = this.vascularAccessTypes;
        data["devModel"] = this.devModel;
        data["enabled"] = this.enabled;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["vascularAccessTypesLabel"] = this.vascularAccessTypesLabel;
        data["devModelLabel"] = this.devModelLabel;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["deptDialysisBedName"] = this.deptDialysisBedName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        return data;
    }
}

export interface ICostGroupView {
    /** 组套名称 */
    name: string;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *多选使用;分割* */
    vascularAccessTypes?: string | undefined;
    /** 透析机型号 `DIC.DEV.DIALYSIS.MODEL` */
    devModel?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 通路类型显示值 */
    vascularAccessTypesLabel?: string | undefined;
    /** 血透机型号显示值 */
    devModelLabel?: string | undefined;
    /** 透析区间 */
    deptDialysisAreaName?: string | undefined;
    /** 透析床位 */
    deptDialysisBedName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
}

/** Reponse */
export class CostGroupViewResult implements ICostGroupViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostGroupView[] | undefined;

    constructor(data?: ICostGroupViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostGroupView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostGroupViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostGroupViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostGroupViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostGroupView[] | undefined;
}

/** Reponse */
export class CostGroupViewResultEntry implements ICostGroupViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CostGroupView;

    constructor(data?: ICostGroupViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CostGroupView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CostGroupViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CostGroupViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICostGroupViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CostGroupView;
}

export class CostListDetail implements ICostListDetail {
    /** 费用类型 */
    costType?: string | undefined;
    /** 数量小计 */
    subtotal?: number | undefined;
    /** 金额小计 */
    subtotalAmount?: number | undefined;
    /** 费用明细项 */
    items?: CostListItem[] | undefined;

    constructor(data?: ICostListDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.costType = _data["costType"];
            this.subtotal = _data["subtotal"];
            this.subtotalAmount = _data["subtotalAmount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CostListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostListDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CostListDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["costType"] = this.costType;
        data["subtotal"] = this.subtotal;
        data["subtotalAmount"] = this.subtotalAmount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICostListDetail {
    /** 费用类型 */
    costType?: string | undefined;
    /** 数量小计 */
    subtotal?: number | undefined;
    /** 金额小计 */
    subtotalAmount?: number | undefined;
    /** 费用明细项 */
    items?: CostListItem[] | undefined;
}

export class CostListItem implements ICostListItem {
    /** 项目名称 */
    deptProjectListName?: string | undefined;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 数量 */
    count?: number;
    /** 规格单位 */
    spec?: string | undefined;
    /** 金额 */
    money?: number | undefined;

    constructor(data?: ICostListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptProjectListName = _data["deptProjectListName"];
            this.unitPrice = _data["unitPrice"];
            this.count = _data["count"];
            this.spec = _data["spec"];
            this.money = _data["money"];
        }
    }

    static fromJS(data: any): CostListItem {
        data = typeof data === 'object' ? data : {};
        let result = new CostListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptProjectListName"] = this.deptProjectListName;
        data["unitPrice"] = this.unitPrice;
        data["count"] = this.count;
        data["spec"] = this.spec;
        data["money"] = this.money;
        return data;
    }
}

export interface ICostListItem {
    /** 项目名称 */
    deptProjectListName?: string | undefined;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 数量 */
    count?: number;
    /** 规格单位 */
    spec?: string | undefined;
    /** 金额 */
    money?: number | undefined;
}

export class CostListRecordView implements ICostListRecordView {
    /** 患者姓名 */
    name?: string | undefined;
    /** 患者别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 患者全名 */
    nameFull?: string | undefined;
    /** 患者来源 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 医保类型 */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 数量合计 */
    total?: number | undefined;
    /** 金额合计 */
    totalAmount?: number | undefined;
    /** 费用明细 */
    details?: CostListDetail[] | undefined;

    constructor(data?: ICostListRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.nameFull = _data["nameFull"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.department = _data["department"];
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.total = _data["total"];
            this.totalAmount = _data["totalAmount"];
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(CostListDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostListRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new CostListRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["nameFull"] = this.nameFull;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["department"] = this.department;
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["total"] = this.total;
        data["totalAmount"] = this.totalAmount;
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICostListRecordView {
    /** 患者姓名 */
    name?: string | undefined;
    /** 患者别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 患者全名 */
    nameFull?: string | undefined;
    /** 患者来源 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 医保类型 */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 数量合计 */
    total?: number | undefined;
    /** 金额合计 */
    totalAmount?: number | undefined;
    /** 费用明细 */
    details?: CostListDetail[] | undefined;
}

/** Reponse */
export class CostListRecordViewResultEntry implements ICostListRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CostListRecordView;

    constructor(data?: ICostListRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CostListRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CostListRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CostListRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICostListRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CostListRecordView;
}

export class CostPrintView implements ICostPrintView {
    /** 序号 */
    index?: number | undefined;
    /** 记录日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 记录日期（页面展示） */
    recordDateLabel?: string | undefined;
    /** 操作类型 */
    operationType?: string | undefined;
    /** 发票号码 */
    invoiceNumber?: string | undefined;
    /** 费用名称 */
    roomItemName?: string | undefined;
    /** 缴费（扣费）数量 */
    costCount?: number | undefined;
    /** 操作人员 */
    operator?: string | undefined;

    constructor(data?: ICostPrintView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.index = _data["index"];
            this.recordDate = _data["recordDate"] ? dayjs(_data["recordDate"].toString()) : <any>undefined;
            this.recordDateLabel = _data["recordDateLabel"];
            this.operationType = _data["operationType"];
            this.invoiceNumber = _data["invoiceNumber"];
            this.roomItemName = _data["roomItemName"];
            this.costCount = _data["costCount"];
            this.operator = _data["operator"];
        }
    }

    static fromJS(data: any): CostPrintView {
        data = typeof data === 'object' ? data : {};
        let result = new CostPrintView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>undefined;
        data["recordDateLabel"] = this.recordDateLabel;
        data["operationType"] = this.operationType;
        data["invoiceNumber"] = this.invoiceNumber;
        data["roomItemName"] = this.roomItemName;
        data["costCount"] = this.costCount;
        data["operator"] = this.operator;
        return data;
    }
}

export interface ICostPrintView {
    /** 序号 */
    index?: number | undefined;
    /** 记录日期 */
    recordDate?: dayjs.Dayjs | undefined;
    /** 记录日期（页面展示） */
    recordDateLabel?: string | undefined;
    /** 操作类型 */
    operationType?: string | undefined;
    /** 发票号码 */
    invoiceNumber?: string | undefined;
    /** 费用名称 */
    roomItemName?: string | undefined;
    /** 缴费（扣费）数量 */
    costCount?: number | undefined;
    /** 操作人员 */
    operator?: string | undefined;
}

/** Reponse */
export class CostPrintViewResult implements ICostPrintViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostPrintView[] | undefined;

    constructor(data?: ICostPrintViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostPrintView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostPrintViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostPrintViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostPrintViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostPrintView[] | undefined;
}

export class CostRechargeRecordEditModel implements ICostRechargeRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 缴费时间 */
    date!: dayjs.Dayjs;
    /** 金额 */
    money?: number | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [患者费用余额](#患者费用) */
    costBalanceId?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 缴费数量 */
    payCount!: number;
    /** 剩余数量 */
    surplusCount!: number;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 缴费单号(发票号码) */
    paymentNumber?: string | undefined;
    /** 住院号 */
    hospitalNumber?: string | undefined;
    /** 住院序号 */
    hospitalSeq?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否已退费0,1 */
    refunded?: number | undefined;
    /** 退费数量 */
    refundedCount!: number;

    constructor(data?: ICostRechargeRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.money = _data["money"];
            this.roomItemListId = _data["roomItemListId"];
            this.costBalanceId = _data["costBalanceId"];
            this.source = _data["source"];
            this.payCount = _data["payCount"];
            this.surplusCount = _data["surplusCount"];
            this.unitPrice = _data["unitPrice"];
            this.paymentNumber = _data["paymentNumber"];
            this.hospitalNumber = _data["hospitalNumber"];
            this.hospitalSeq = _data["hospitalSeq"];
            this.remark = _data["remark"];
            this.refunded = _data["refunded"];
            this.refundedCount = _data["refundedCount"];
        }
    }

    static fromJS(data: any): CostRechargeRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CostRechargeRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["money"] = this.money;
        data["roomItemListId"] = this.roomItemListId;
        data["costBalanceId"] = this.costBalanceId;
        data["source"] = this.source;
        data["payCount"] = this.payCount;
        data["surplusCount"] = this.surplusCount;
        data["unitPrice"] = this.unitPrice;
        data["paymentNumber"] = this.paymentNumber;
        data["hospitalNumber"] = this.hospitalNumber;
        data["hospitalSeq"] = this.hospitalSeq;
        data["remark"] = this.remark;
        data["refunded"] = this.refunded;
        data["refundedCount"] = this.refundedCount;
        return data;
    }
}

export interface ICostRechargeRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 缴费时间 */
    date: dayjs.Dayjs;
    /** 金额 */
    money?: number | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [患者费用余额](#患者费用) */
    costBalanceId?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 缴费数量 */
    payCount: number;
    /** 剩余数量 */
    surplusCount: number;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 缴费单号(发票号码) */
    paymentNumber?: string | undefined;
    /** 住院号 */
    hospitalNumber?: string | undefined;
    /** 住院序号 */
    hospitalSeq?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否已退费0,1 */
    refunded?: number | undefined;
    /** 退费数量 */
    refundedCount: number;
}

export class CostRechargeRecordView implements ICostRechargeRecordView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 缴费时间 */
    date!: dayjs.Dayjs;
    /** 金额 */
    money?: number | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [患者费用余额](#患者费用) */
    costBalanceId?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 缴费数量 */
    payCount!: number;
    /** 剩余数量 */
    surplusCount!: number;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 缴费单号(发票号码) */
    paymentNumber?: string | undefined;
    /** 住院号 */
    hospitalNumber?: string | undefined;
    /** 住院序号 */
    hospitalSeq?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否已退费0,1 */
    refunded?: number | undefined;
    /** 退费数量 */
    refundedCount!: number;
    /** 标识 */
    id?: string | undefined;
    /** 上次扣费时间 */
    lastDeductionTime?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;

    constructor(data?: ICostRechargeRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.money = _data["money"];
            this.roomItemListId = _data["roomItemListId"];
            this.costBalanceId = _data["costBalanceId"];
            this.source = _data["source"];
            this.payCount = _data["payCount"];
            this.surplusCount = _data["surplusCount"];
            this.unitPrice = _data["unitPrice"];
            this.paymentNumber = _data["paymentNumber"];
            this.hospitalNumber = _data["hospitalNumber"];
            this.hospitalSeq = _data["hospitalSeq"];
            this.remark = _data["remark"];
            this.refunded = _data["refunded"];
            this.refundedCount = _data["refundedCount"];
            this.id = _data["id"];
            this.lastDeductionTime = _data["lastDeductionTime"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.sourceLabel = _data["sourceLabel"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBase = _data["unitBase"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
        }
    }

    static fromJS(data: any): CostRechargeRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new CostRechargeRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["money"] = this.money;
        data["roomItemListId"] = this.roomItemListId;
        data["costBalanceId"] = this.costBalanceId;
        data["source"] = this.source;
        data["payCount"] = this.payCount;
        data["surplusCount"] = this.surplusCount;
        data["unitPrice"] = this.unitPrice;
        data["paymentNumber"] = this.paymentNumber;
        data["hospitalNumber"] = this.hospitalNumber;
        data["hospitalSeq"] = this.hospitalSeq;
        data["remark"] = this.remark;
        data["refunded"] = this.refunded;
        data["refundedCount"] = this.refundedCount;
        data["id"] = this.id;
        data["lastDeductionTime"] = this.lastDeductionTime;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["sourceLabel"] = this.sourceLabel;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBase"] = this.unitBase;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        return data;
    }
}

export interface ICostRechargeRecordView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 缴费时间 */
    date: dayjs.Dayjs;
    /** 金额 */
    money?: number | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [患者费用余额](#患者费用) */
    costBalanceId?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 缴费数量 */
    payCount: number;
    /** 剩余数量 */
    surplusCount: number;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 缴费单号(发票号码) */
    paymentNumber?: string | undefined;
    /** 住院号 */
    hospitalNumber?: string | undefined;
    /** 住院序号 */
    hospitalSeq?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否已退费0,1 */
    refunded?: number | undefined;
    /** 退费数量 */
    refundedCount: number;
    /** 标识 */
    id?: string | undefined;
    /** 上次扣费时间 */
    lastDeductionTime?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
}

/** Reponse */
export class CostRechargeRecordViewResult implements ICostRechargeRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostRechargeRecordView[] | undefined;

    constructor(data?: ICostRechargeRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostRechargeRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostRechargeRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostRechargeRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostRechargeRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostRechargeRecordView[] | undefined;
}

/** 患者退费记录 */
export class CostRefundRecordEditModel implements ICostRefundRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [扣费记录标识](#患者扣费记录) */
    costDeductionRecordId?: string | undefined;
    /** 退费时间 */
    date!: dayjs.Dayjs;
    /** 退费类型0,1 */
    refundType?: number;
    /** [患者缴费记录](#患者缴费记录) */
    costRechargeRecordId?: string | undefined;
    /** 缴费退费数量 */
    refundedCount!: number;

    constructor(data?: ICostRefundRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.costDeductionRecordId = _data["costDeductionRecordId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.refundType = _data["refundType"];
            this.costRechargeRecordId = _data["costRechargeRecordId"];
            this.refundedCount = _data["refundedCount"];
        }
    }

    static fromJS(data: any): CostRefundRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CostRefundRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["costDeductionRecordId"] = this.costDeductionRecordId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["refundType"] = this.refundType;
        data["costRechargeRecordId"] = this.costRechargeRecordId;
        data["refundedCount"] = this.refundedCount;
        return data;
    }
}

/** 患者退费记录 */
export interface ICostRefundRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [扣费记录标识](#患者扣费记录) */
    costDeductionRecordId?: string | undefined;
    /** 退费时间 */
    date: dayjs.Dayjs;
    /** 退费类型0,1 */
    refundType?: number;
    /** [患者缴费记录](#患者缴费记录) */
    costRechargeRecordId?: string | undefined;
    /** 缴费退费数量 */
    refundedCount: number;
}

/** 患者退费记录 */
export class CostRefundRecordView implements ICostRefundRecordView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [扣费记录标识](#患者扣费记录) */
    costDeductionRecordId?: string | undefined;
    /** 退费时间 */
    date!: dayjs.Dayjs;
    /** 退费类型0,1 */
    refundType?: number;
    /** [患者缴费记录](#患者缴费记录) */
    costRechargeRecordId?: string | undefined;
    /** 缴费退费数量 */
    refundedCount!: number;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目分类Code */
    roomItemTypeCode?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 金额 */
    money?: number | undefined;

    constructor(data?: ICostRefundRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.costDeductionRecordId = _data["costDeductionRecordId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.refundType = _data["refundType"];
            this.costRechargeRecordId = _data["costRechargeRecordId"];
            this.refundedCount = _data["refundedCount"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.source = _data["source"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.sourceLabel = _data["sourceLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
            this.unitBase = _data["unitBase"];
            this.count = _data["count"];
            this.unitPrice = _data["unitPrice"];
            this.money = _data["money"];
        }
    }

    static fromJS(data: any): CostRefundRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new CostRefundRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["costDeductionRecordId"] = this.costDeductionRecordId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["refundType"] = this.refundType;
        data["costRechargeRecordId"] = this.costRechargeRecordId;
        data["refundedCount"] = this.refundedCount;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["source"] = this.source;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["sourceLabel"] = this.sourceLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        data["unitBase"] = this.unitBase;
        data["count"] = this.count;
        data["unitPrice"] = this.unitPrice;
        data["money"] = this.money;
        return data;
    }
}

/** 患者退费记录 */
export interface ICostRefundRecordView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [扣费记录标识](#患者扣费记录) */
    costDeductionRecordId?: string | undefined;
    /** 退费时间 */
    date: dayjs.Dayjs;
    /** 退费类型0,1 */
    refundType?: number;
    /** [患者缴费记录](#患者缴费记录) */
    costRechargeRecordId?: string | undefined;
    /** 缴费退费数量 */
    refundedCount: number;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目分类Code */
    roomItemTypeCode?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 数量 */
    count?: number;
    /** 单价 */
    unitPrice?: number | undefined;
    /** 金额 */
    money?: number | undefined;
}

/** Reponse */
export class CostRefundRecordViewResult implements ICostRefundRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostRefundRecordView[] | undefined;

    constructor(data?: ICostRefundRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CostRefundRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CostRefundRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CostRefundRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICostRefundRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CostRefundRecordView[] | undefined;
}

/** Reponse */
export class CostRefundRecordViewResultEntry implements ICostRefundRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CostRefundRecordView;

    constructor(data?: ICostRefundRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CostRefundRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CostRefundRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CostRefundRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICostRefundRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CostRefundRecordView;
}

export class CureCostGroupView implements ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 批号管理 */
    batchManage!: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: ICureCostGroupView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.batchManage = _data["batchManage"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.devBarCode = _data["devBarCode"];
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.sequence = _data["sequence"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.spec = _data["spec"];
            this.sellingPrice = _data["sellingPrice"];
            this.unit = _data["unit"];
            this.unitLabel = _data["unitLabel"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Label = _data["unitLevel1Label"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.enabled = _data["enabled"];
            this.inventoryCount = _data["inventoryCount"];
            this.batchNo = _data["batchNo"];
            if (Array.isArray(_data["batchItems"])) {
                this.batchItems = [] as any;
                for (let item of _data["batchItems"])
                    this.batchItems!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCostGroupView {
        data = typeof data === 'object' ? data : {};
        let result = new CureCostGroupView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["batchManage"] = this.batchManage;
        data["code"] = this.code;
        data["name"] = this.name;
        data["devBarCode"] = this.devBarCode;
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["sequence"] = this.sequence;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["spec"] = this.spec;
        data["sellingPrice"] = this.sellingPrice;
        data["unit"] = this.unit;
        data["unitLabel"] = this.unitLabel;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Label"] = this.unitLevel1Label;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["enabled"] = this.enabled;
        data["inventoryCount"] = this.inventoryCount;
        data["batchNo"] = this.batchNo;
        if (Array.isArray(this.batchItems)) {
            data["batchItems"] = [];
            for (let item of this.batchItems)
                data["batchItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 批号管理 */
    batchManage: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;
}

/** Reponse */
export class CureCostGroupViewResult implements ICureCostGroupViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCostGroupView[] | undefined;

    constructor(data?: ICureCostGroupViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureCostGroupView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCostGroupViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureCostGroupViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureCostGroupViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCostGroupView[] | undefined;
}

/** 透析耗材 */
export class CureRecordConsumableItemView implements ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount!: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordConsumableItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.roomRecordInId = _data["roomRecordInId"];
            this.batchCount = _data["batchCount"];
            this.batchNo = _data["batchNo"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.surplusCount = _data["surplusCount"];
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordConsumableItemView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["roomRecordInId"] = this.roomRecordInId;
        data["batchCount"] = this.batchCount;
        data["batchNo"] = this.batchNo;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["surplusCount"] = this.surplusCount;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析耗材 */
export interface ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
}

export class FaultyItemEditModel implements IFaultyItemEditModel {
    /** [出库记录明细标识](#出库记录明细) */
    roomRecordOutItemId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 报损数量 */
    count?: number;
    /** 报损原因 */
    cause?: string | undefined;

    constructor(data?: IFaultyItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordOutItemId = _data["roomRecordOutItemId"];
            this.roomRecordInId = _data["roomRecordInId"];
            this.count = _data["count"];
            this.cause = _data["cause"];
        }
    }

    static fromJS(data: any): FaultyItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new FaultyItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordOutItemId"] = this.roomRecordOutItemId;
        data["roomRecordInId"] = this.roomRecordInId;
        data["count"] = this.count;
        data["cause"] = this.cause;
        return data;
    }
}

export interface IFaultyItemEditModel {
    /** [出库记录明细标识](#出库记录明细) */
    roomRecordOutItemId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 报损数量 */
    count?: number;
    /** 报损原因 */
    cause?: string | undefined;
}

/** 项目清单/账套管理/库存记录/期初库存(以项目清单为主表) 入库记录/出库记录(以库存为主表) */
export class InventoryView implements IInventoryView {
    /** 项目清单-标识 */
    roomItemListId?: string | undefined;
    /** 项目清单-项目名称 */
    roomItemListName?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    roomItemTypeName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天)  *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 一级单位名称 */
    unitLevel1Name?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 基本单位名称 */
    unitBaseName?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式名称 */
    usageModeName?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 期初库存 *基本单位的库存* */
    inventoryBegin?: number | undefined;
    /** 库存扣减 */
    inventory?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 使用说明 */
    remark?: string | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否编码管理 *0:否,1:是* */
    codeManage?: number | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 项目类型Code */
    typeCode?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 完整规格 */
    fullSpecLabel?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 一级单位、基本单位、规格单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 一级单位与基本单位集合 */
    unitListBase?: LabelModel[] | undefined;
    /** 项目类型:1-药品 2-耗材 0-其他 */
    type?: number;
    /** 扣减来源 0：科室扣减  1：个人库存 */
    deductionSource?: number;
    /** 费用类型 */
    costType?: string | undefined;
    /** 账套分组标识 */
    roomAccountGroupId?: string | undefined;
    /** 账套分组名称 */
    roomAccountGroupName?: string | undefined;
    /** 账套分组全称 */
    roomAccountGroupNameFull?: string | undefined;

    constructor(data?: IInventoryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemTypeNameFull = _data["roomItemTypeNameFull"];
            this.name = _data["name"];
            this.nameGoods = _data["nameGoods"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.shortName = _data["shortName"];
            this.model = _data["model"];
            this.spec = _data["spec"];
            this.origin = _data["origin"];
            this.dealer = _data["dealer"];
            this.warningDay = _data["warningDay"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Name = _data["unitLevel1Name"];
            this.unitBase = _data["unitBase"];
            this.unitBaseName = _data["unitBaseName"];
            this.conversionRate = _data["conversionRate"];
            this.sellingPrice = _data["sellingPrice"];
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
            this.usageMode = _data["usageMode"];
            this.usageModeName = _data["usageModeName"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.inventoryBegin = _data["inventoryBegin"];
            this.inventory = _data["inventory"];
            this.inventoryCount = _data["inventoryCount"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.afterCharge = _data["afterCharge"];
            this.inCharge = _data["inCharge"];
            this.codeManage = _data["codeManage"];
            this.batchManage = _data["batchManage"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.typeCode = _data["typeCode"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.specLabel = _data["specLabel"];
            this.fullSpecLabel = _data["fullSpecLabel"];
            this.unitLabel = _data["unitLabel"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            if (Array.isArray(_data["unitListBase"])) {
                this.unitListBase = [] as any;
                for (let item of _data["unitListBase"])
                    this.unitListBase!.push(LabelModel.fromJS(item));
            }
            this.type = _data["type"];
            this.deductionSource = _data["deductionSource"];
            this.costType = _data["costType"];
            this.roomAccountGroupId = _data["roomAccountGroupId"];
            this.roomAccountGroupName = _data["roomAccountGroupName"];
            this.roomAccountGroupNameFull = _data["roomAccountGroupNameFull"];
        }
    }

    static fromJS(data: any): InventoryView {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemTypeNameFull"] = this.roomItemTypeNameFull;
        data["name"] = this.name;
        data["nameGoods"] = this.nameGoods;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["shortName"] = this.shortName;
        data["model"] = this.model;
        data["spec"] = this.spec;
        data["origin"] = this.origin;
        data["dealer"] = this.dealer;
        data["warningDay"] = this.warningDay;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Name"] = this.unitLevel1Name;
        data["unitBase"] = this.unitBase;
        data["unitBaseName"] = this.unitBaseName;
        data["conversionRate"] = this.conversionRate;
        data["sellingPrice"] = this.sellingPrice;
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        data["usageMode"] = this.usageMode;
        data["usageModeName"] = this.usageModeName;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["inventoryBegin"] = this.inventoryBegin;
        data["inventory"] = this.inventory;
        data["inventoryCount"] = this.inventoryCount;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["afterCharge"] = this.afterCharge;
        data["inCharge"] = this.inCharge;
        data["codeManage"] = this.codeManage;
        data["batchManage"] = this.batchManage;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["typeCode"] = this.typeCode;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["specLabel"] = this.specLabel;
        data["fullSpecLabel"] = this.fullSpecLabel;
        data["unitLabel"] = this.unitLabel;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        if (Array.isArray(this.unitListBase)) {
            data["unitListBase"] = [];
            for (let item of this.unitListBase)
                data["unitListBase"].push(item.toJSON());
        }
        data["type"] = this.type;
        data["deductionSource"] = this.deductionSource;
        data["costType"] = this.costType;
        data["roomAccountGroupId"] = this.roomAccountGroupId;
        data["roomAccountGroupName"] = this.roomAccountGroupName;
        data["roomAccountGroupNameFull"] = this.roomAccountGroupNameFull;
        return data;
    }
}

/** 项目清单/账套管理/库存记录/期初库存(以项目清单为主表) 入库记录/出库记录(以库存为主表) */
export interface IInventoryView {
    /** 项目清单-标识 */
    roomItemListId?: string | undefined;
    /** 项目清单-项目名称 */
    roomItemListName?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    roomItemTypeName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天)  *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 一级单位名称 */
    unitLevel1Name?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 基本单位名称 */
    unitBaseName?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式名称 */
    usageModeName?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 期初库存 *基本单位的库存* */
    inventoryBegin?: number | undefined;
    /** 库存扣减 */
    inventory?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 使用说明 */
    remark?: string | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否编码管理 *0:否,1:是* */
    codeManage?: number | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 项目类型Code */
    typeCode?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 完整规格 */
    fullSpecLabel?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 一级单位、基本单位、规格单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 一级单位与基本单位集合 */
    unitListBase?: LabelModel[] | undefined;
    /** 项目类型:1-药品 2-耗材 0-其他 */
    type?: number;
    /** 扣减来源 0：科室扣减  1：个人库存 */
    deductionSource?: number;
    /** 费用类型 */
    costType?: string | undefined;
    /** 账套分组标识 */
    roomAccountGroupId?: string | undefined;
    /** 账套分组名称 */
    roomAccountGroupName?: string | undefined;
    /** 账套分组全称 */
    roomAccountGroupNameFull?: string | undefined;
}

/** Reponse */
export class InventoryViewResult implements IInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InventoryView[] | undefined;

    constructor(data?: IInventoryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(InventoryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InventoryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InventoryView[] | undefined;
}

export class LabelModel implements ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;

    constructor(data?: ILabelModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LabelModel {
        data = typeof data === 'object' ? data : {};
        let result = new LabelModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data;
    }
}

export interface ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;
}

export class RestoreItemEditModel implements IRestoreItemEditModel {
    /** 出库明细 */
    roomRecordOutItemId?: string | undefined;
    /** 退库数量 */
    restoreCount?: number;
    /** 退库原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRestoreItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordOutItemId = _data["roomRecordOutItemId"];
            this.restoreCount = _data["restoreCount"];
            this.cause = _data["cause"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RestoreItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RestoreItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordOutItemId"] = this.roomRecordOutItemId;
        data["restoreCount"] = this.restoreCount;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IRestoreItemEditModel {
    /** 出库明细 */
    roomRecordOutItemId?: string | undefined;
    /** 退库数量 */
    restoreCount?: number;
    /** 退库原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

export class RoomItemFullView implements IRoomItemFullView {
    /** 项目清单-标识 */
    id?: string | undefined;
    /** 项目清单-项目名称 */
    name?: string | undefined;
    /** 项目清单-商品名 */
    nameGoods?: string | undefined;
    /** 项目清单-简称 */
    shortName?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    typeId?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    typeName?: string | undefined;
    /** 种类名称全称 */
    typeNameFull?: string | undefined;
    /** 耗材分类代码 */
    typeCode?: string | undefined;
    /** 一级单位 */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式 */
    usageModeLabel?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否编码管理 *0:否,1:是* */
    codeManage?: number | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否库存扣减 *0:否,1:是* */
    inventory?: number;

    constructor(data?: IRoomItemFullView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.nameGoods = _data["nameGoods"];
            this.shortName = _data["shortName"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.unitBase = _data["unitBase"];
            this.conversionRate = _data["conversionRate"];
            this.sellingPrice = _data["sellingPrice"];
            this.unit = _data["unit"];
            this.unitLabel = _data["unitLabel"];
            this.typeId = _data["typeId"];
            this.typeName = _data["typeName"];
            this.typeNameFull = _data["typeNameFull"];
            this.typeCode = _data["typeCode"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Label = _data["unitLevel1Label"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.enabled = _data["enabled"];
            this.inventoryCount = _data["inventoryCount"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.inCharge = _data["inCharge"];
            this.codeManage = _data["codeManage"];
            this.batchManage = _data["batchManage"];
            this.inventory = _data["inventory"];
        }
    }

    static fromJS(data: any): RoomItemFullView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemFullView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["nameGoods"] = this.nameGoods;
        data["shortName"] = this.shortName;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["unitBase"] = this.unitBase;
        data["conversionRate"] = this.conversionRate;
        data["sellingPrice"] = this.sellingPrice;
        data["unit"] = this.unit;
        data["unitLabel"] = this.unitLabel;
        data["typeId"] = this.typeId;
        data["typeName"] = this.typeName;
        data["typeNameFull"] = this.typeNameFull;
        data["typeCode"] = this.typeCode;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Label"] = this.unitLevel1Label;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["enabled"] = this.enabled;
        data["inventoryCount"] = this.inventoryCount;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["inCharge"] = this.inCharge;
        data["codeManage"] = this.codeManage;
        data["batchManage"] = this.batchManage;
        data["inventory"] = this.inventory;
        return data;
    }
}

export interface IRoomItemFullView {
    /** 项目清单-标识 */
    id?: string | undefined;
    /** 项目清单-项目名称 */
    name?: string | undefined;
    /** 项目清单-商品名 */
    nameGoods?: string | undefined;
    /** 项目清单-简称 */
    shortName?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    typeId?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    typeName?: string | undefined;
    /** 种类名称全称 */
    typeNameFull?: string | undefined;
    /** 耗材分类代码 */
    typeCode?: string | undefined;
    /** 一级单位 */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式 */
    usageModeLabel?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否编码管理 *0:否,1:是* */
    codeManage?: number | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否库存扣减 *0:否,1:是* */
    inventory?: number;
}

/** Reponse */
export class RoomItemFullViewResult implements IRoomItemFullViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemFullView[] | undefined;

    constructor(data?: IRoomItemFullViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomItemFullView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomItemFullViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemFullViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomItemFullViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemFullView[] | undefined;
}

/** 项目清单 */
export class RoomItemList implements IRoomItemList {
    /** 标识 */
    id?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomItemTypes?: RoomItemType;

    constructor(data?: IRoomItemList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.name = _data["name"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.shortName = _data["shortName"];
            this.nameGoods = _data["nameGoods"];
            this.model = _data["model"];
            this.spec = _data["spec"];
            this.origin = _data["origin"];
            this.dealer = _data["dealer"];
            this.warningDay = _data["warningDay"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.conversionRate = _data["conversionRate"];
            this.sellingPrice = _data["sellingPrice"];
            this.batchManage = _data["batchManage"];
            this.afterCharge = _data["afterCharge"];
            this.inCharge = _data["inCharge"];
            this.costType = _data["costType"];
            this.deductionSource = _data["deductionSource"];
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
            this.usageMode = _data["usageMode"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.inventory = _data["inventory"];
            this.enabled = _data["enabled"];
            this.commonTerms = _data["commonTerms"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemTypes = _data["roomItemTypes"] ? RoomItemType.fromJS(_data["roomItemTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemList {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["name"] = this.name;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["shortName"] = this.shortName;
        data["nameGoods"] = this.nameGoods;
        data["model"] = this.model;
        data["spec"] = this.spec;
        data["origin"] = this.origin;
        data["dealer"] = this.dealer;
        data["warningDay"] = this.warningDay;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["conversionRate"] = this.conversionRate;
        data["sellingPrice"] = this.sellingPrice;
        data["batchManage"] = this.batchManage;
        data["afterCharge"] = this.afterCharge;
        data["inCharge"] = this.inCharge;
        data["costType"] = this.costType;
        data["deductionSource"] = this.deductionSource;
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        data["usageMode"] = this.usageMode;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["inventory"] = this.inventory;
        data["enabled"] = this.enabled;
        data["commonTerms"] = this.commonTerms;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["roomItemTypes"] = this.roomItemTypes ? this.roomItemTypes.toJSON() : <any>undefined;
        return data;
    }
}

/** 项目清单 */
export interface IRoomItemList {
    /** 标识 */
    id?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomItemTypes?: RoomItemType;
}

export class RoomItemListEditModel implements IRoomItemListEditModel {
    /** 种类 *[项目分类标识](#项目分类)* */
    roomItemTypeId!: string;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name!: string;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay!: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1!: string;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase!: string;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate!: number;
    /** 售价 */
    sellingPrice!: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource!: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory!: number;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 期初库存 */
    beginCount?: number | undefined;

    constructor(data?: IRoomItemListEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.name = _data["name"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.shortName = _data["shortName"];
            this.nameGoods = _data["nameGoods"];
            this.model = _data["model"];
            this.spec = _data["spec"];
            this.origin = _data["origin"];
            this.dealer = _data["dealer"];
            this.warningDay = _data["warningDay"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.conversionRate = _data["conversionRate"];
            this.sellingPrice = _data["sellingPrice"];
            this.batchManage = _data["batchManage"];
            this.afterCharge = _data["afterCharge"];
            this.inCharge = _data["inCharge"];
            this.costType = _data["costType"];
            this.deductionSource = _data["deductionSource"];
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
            this.usageMode = _data["usageMode"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.inventory = _data["inventory"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.commonTerms = _data["commonTerms"];
            this.beginCount = _data["beginCount"];
        }
    }

    static fromJS(data: any): RoomItemListEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["name"] = this.name;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["shortName"] = this.shortName;
        data["nameGoods"] = this.nameGoods;
        data["model"] = this.model;
        data["spec"] = this.spec;
        data["origin"] = this.origin;
        data["dealer"] = this.dealer;
        data["warningDay"] = this.warningDay;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["conversionRate"] = this.conversionRate;
        data["sellingPrice"] = this.sellingPrice;
        data["batchManage"] = this.batchManage;
        data["afterCharge"] = this.afterCharge;
        data["inCharge"] = this.inCharge;
        data["costType"] = this.costType;
        data["deductionSource"] = this.deductionSource;
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        data["usageMode"] = this.usageMode;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["inventory"] = this.inventory;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["commonTerms"] = this.commonTerms;
        data["beginCount"] = this.beginCount;
        return data;
    }
}

export interface IRoomItemListEditModel {
    /** 种类 *[项目分类标识](#项目分类)* */
    roomItemTypeId: string;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name: string;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1: string;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase: string;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate: number;
    /** 售价 */
    sellingPrice: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory: number;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 期初库存 */
    beginCount?: number | undefined;
}

/** Reponse */
export class RoomItemListResultEntry implements IRoomItemListResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemList;

    constructor(data?: IRoomItemListResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomItemList.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemListResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomItemListResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemList;
}

/** 简洁版的耗材清单 */
export class RoomItemQuickConsumableView implements IRoomItemQuickConsumableView {
    /** 项目清单-标识 */
    id?: string | undefined;
    /** 项目清单-项目名称 */
    name?: string | undefined;
    /** 项目清单-商品名 */
    nameGoods?: string | undefined;
    /** 项目清单-简称 */
    shortName?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 种类 *[项目分类标识](项目分类)* */
    typeId?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    typeName?: string | undefined;
    /** 种类名称全称 */
    typeNameFull?: string | undefined;
    /** 耗材分类代码 */
    typeCode?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式 */
    usageModeLabel?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 供应商 */
    suppler?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否库存扣减 *0:否,1:是* */
    inventory?: number | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;

    constructor(data?: IRoomItemQuickConsumableView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.nameGoods = _data["nameGoods"];
            this.shortName = _data["shortName"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.conversionRate = _data["conversionRate"];
            this.typeId = _data["typeId"];
            this.typeName = _data["typeName"];
            this.typeNameFull = _data["typeNameFull"];
            this.typeCode = _data["typeCode"];
            this.sellingPrice = _data["sellingPrice"];
            this.unit = _data["unit"];
            this.unitLabel = _data["unitLabel"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.model = _data["model"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.enabled = _data["enabled"];
            this.inventoryCount = _data["inventoryCount"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.inCharge = _data["inCharge"];
            this.batchManage = _data["batchManage"];
            this.inventory = _data["inventory"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.deductionSource = _data["deductionSource"];
        }
    }

    static fromJS(data: any): RoomItemQuickConsumableView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemQuickConsumableView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["nameGoods"] = this.nameGoods;
        data["shortName"] = this.shortName;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["conversionRate"] = this.conversionRate;
        data["typeId"] = this.typeId;
        data["typeName"] = this.typeName;
        data["typeNameFull"] = this.typeNameFull;
        data["typeCode"] = this.typeCode;
        data["sellingPrice"] = this.sellingPrice;
        data["unit"] = this.unit;
        data["unitLabel"] = this.unitLabel;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["model"] = this.model;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["enabled"] = this.enabled;
        data["inventoryCount"] = this.inventoryCount;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["inCharge"] = this.inCharge;
        data["batchManage"] = this.batchManage;
        data["inventory"] = this.inventory;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["deductionSource"] = this.deductionSource;
        return data;
    }
}

/** 简洁版的耗材清单 */
export interface IRoomItemQuickConsumableView {
    /** 项目清单-标识 */
    id?: string | undefined;
    /** 项目清单-项目名称 */
    name?: string | undefined;
    /** 项目清单-商品名 */
    nameGoods?: string | undefined;
    /** 项目清单-简称 */
    shortName?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 种类 *[项目分类标识](项目分类)* */
    typeId?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    typeName?: string | undefined;
    /** 种类名称全称 */
    typeNameFull?: string | undefined;
    /** 耗材分类代码 */
    typeCode?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式 */
    usageModeLabel?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 供应商 */
    suppler?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否库存扣减 *0:否,1:是* */
    inventory?: number | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;
}

/** Reponse */
export class RoomItemQuickConsumableViewResult implements IRoomItemQuickConsumableViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemQuickConsumableView[] | undefined;

    constructor(data?: IRoomItemQuickConsumableViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomItemQuickConsumableView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomItemQuickConsumableViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemQuickConsumableViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomItemQuickConsumableViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemQuickConsumableView[] | undefined;
}

/** 简洁版的项目清单 */
export class RoomItemQuickListView implements IRoomItemQuickListView {
    /** 项目清单-标识 */
    roomItemListId?: string | undefined;
    /** 项目清单-项目名称 */
    roomItemListName?: string | undefined;
    /** 项目清单-商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 项目清单-简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式 */
    usageModeName?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目类型:1-药品 2-耗材 0-其他 */
    type?: number;
    /** 种类编码 */
    typeCode?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    roomItemTypeName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 换算率 */
    conversionRate?: number | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 完整规格 */
    fullSpecLabel?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 一级单位、基本单位、规格单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 一级单位与基本单位集合 */
    unitListBase?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否编码管理 *0:否,1:是* */
    codeManage?: number | undefined;
    /** 扣减来源 0：科室扣减  1：个人库存 */
    deductionSource?: number;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomItemQuickListView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeName = _data["usageModeName"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.type = _data["type"];
            this.typeCode = _data["typeCode"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemTypeNameFull = _data["roomItemTypeNameFull"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Label = _data["unitLevel1Label"];
            this.conversionRate = _data["conversionRate"];
            this.unitBase = _data["unitBase"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.spec = _data["spec"];
            this.fullSpecLabel = _data["fullSpecLabel"];
            this.sellingPrice = _data["sellingPrice"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            if (Array.isArray(_data["unitListBase"])) {
                this.unitListBase = [] as any;
                for (let item of _data["unitListBase"])
                    this.unitListBase!.push(LabelModel.fromJS(item));
            }
            this.enabled = _data["enabled"];
            this.inventoryCount = _data["inventoryCount"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.inCharge = _data["inCharge"];
            this.codeManage = _data["codeManage"];
            this.deductionSource = _data["deductionSource"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemQuickListView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemQuickListView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeName"] = this.usageModeName;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["type"] = this.type;
        data["typeCode"] = this.typeCode;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemTypeNameFull"] = this.roomItemTypeNameFull;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Label"] = this.unitLevel1Label;
        data["conversionRate"] = this.conversionRate;
        data["unitBase"] = this.unitBase;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["spec"] = this.spec;
        data["fullSpecLabel"] = this.fullSpecLabel;
        data["sellingPrice"] = this.sellingPrice;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        if (Array.isArray(this.unitListBase)) {
            data["unitListBase"] = [];
            for (let item of this.unitListBase)
                data["unitListBase"].push(item.toJSON());
        }
        data["enabled"] = this.enabled;
        data["inventoryCount"] = this.inventoryCount;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["inCharge"] = this.inCharge;
        data["codeManage"] = this.codeManage;
        data["deductionSource"] = this.deductionSource;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 简洁版的项目清单 */
export interface IRoomItemQuickListView {
    /** 项目清单-标识 */
    roomItemListId?: string | undefined;
    /** 项目清单-项目名称 */
    roomItemListName?: string | undefined;
    /** 项目清单-商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 项目清单-简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式 */
    usageModeName?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目类型:1-药品 2-耗材 0-其他 */
    type?: number;
    /** 种类编码 */
    typeCode?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    roomItemTypeName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 换算率 */
    conversionRate?: number | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 完整规格 */
    fullSpecLabel?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 一级单位、基本单位、规格单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 一级单位与基本单位集合 */
    unitListBase?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否编码管理 *0:否,1:是* */
    codeManage?: number | undefined;
    /** 扣减来源 0：科室扣减  1：个人库存 */
    deductionSource?: number;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomItemQuickListViewResult implements IRoomItemQuickListViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemQuickListView[] | undefined;

    constructor(data?: IRoomItemQuickListViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomItemQuickListView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomItemQuickListViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemQuickListViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomItemQuickListViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemQuickListView[] | undefined;
}

/** 项目分类 */
export class RoomItemType implements IRoomItemType {
    /** 标识 */
    id?: string | undefined;
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomItemType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.system = _data["system"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemType {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["system"] = this.system;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 项目分类 */
export interface IRoomItemType {
    /** 标识 */
    id?: string | undefined;
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 报损记录明细 */
export class RoomRecordFaultyItemEditModel implements IRoomRecordFaultyItemEditModel {
    /** [报损单标识](#报损单) */
    roomRecordFaultyOrderId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [出库记录明细标识](#出库记录明细) */
    roomRecordOutItemId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 报损数量 */
    count!: number;
    /** 报损原因,不填写默认为[报损单]的报损原因 */
    cause?: string | undefined;
    /** 报损时间 */
    faultyTime!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRoomRecordFaultyItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordFaultyOrderId = _data["roomRecordFaultyOrderId"];
            this.roomItemListId = _data["roomItemListId"];
            this.roomRecordOutItemId = _data["roomRecordOutItemId"];
            this.roomRecordInId = _data["roomRecordInId"];
            this.groupId = _data["groupId"];
            this.batchNo = _data["batchNo"];
            this.count = _data["count"];
            this.cause = _data["cause"];
            this.faultyTime = _data["faultyTime"] ? dayjs(_data["faultyTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RoomRecordFaultyItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordFaultyItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordFaultyOrderId"] = this.roomRecordFaultyOrderId;
        data["roomItemListId"] = this.roomItemListId;
        data["roomRecordOutItemId"] = this.roomRecordOutItemId;
        data["roomRecordInId"] = this.roomRecordInId;
        data["groupId"] = this.groupId;
        data["batchNo"] = this.batchNo;
        data["count"] = this.count;
        data["cause"] = this.cause;
        data["faultyTime"] = this.faultyTime ? this.faultyTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 报损记录明细 */
export interface IRoomRecordFaultyItemEditModel {
    /** [报损单标识](#报损单) */
    roomRecordFaultyOrderId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [出库记录明细标识](#出库记录明细) */
    roomRecordOutItemId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 报损数量 */
    count: number;
    /** 报损原因,不填写默认为[报损单]的报损原因 */
    cause?: string | undefined;
    /** 报损时间 */
    faultyTime: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
}

/** 报损记录明细 */
export class RoomRecordFaultyItemView implements IRoomRecordFaultyItemView {
    /** [报损单标识](#报损单) */
    roomRecordFaultyOrderId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [出库记录明细标识](#出库记录明细) */
    roomRecordOutItemId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 报损数量 */
    count!: number;
    /** 报损原因,不填写默认为[报损单]的报损原因 */
    cause?: string | undefined;
    /** 报损时间 */
    faultyTime!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品规格 */
    spec?: string | undefined;
    /** 商品规格全称 */
    specLabel?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 生产厂家  `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商  `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 报损单号 */
    billNo?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 编码 */
    code?: string | undefined;

    constructor(data?: IRoomRecordFaultyItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordFaultyOrderId = _data["roomRecordFaultyOrderId"];
            this.roomItemListId = _data["roomItemListId"];
            this.roomRecordOutItemId = _data["roomRecordOutItemId"];
            this.roomRecordInId = _data["roomRecordInId"];
            this.groupId = _data["groupId"];
            this.batchNo = _data["batchNo"];
            this.count = _data["count"];
            this.cause = _data["cause"];
            this.faultyTime = _data["faultyTime"] ? dayjs(_data["faultyTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.unit = _data["unit"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.billNo = _data["billNo"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): RoomRecordFaultyItemView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordFaultyItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordFaultyOrderId"] = this.roomRecordFaultyOrderId;
        data["roomItemListId"] = this.roomItemListId;
        data["roomRecordOutItemId"] = this.roomRecordOutItemId;
        data["roomRecordInId"] = this.roomRecordInId;
        data["groupId"] = this.groupId;
        data["batchNo"] = this.batchNo;
        data["count"] = this.count;
        data["cause"] = this.cause;
        data["faultyTime"] = this.faultyTime ? this.faultyTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["unit"] = this.unit;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["billNo"] = this.billNo;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["code"] = this.code;
        return data;
    }
}

/** 报损记录明细 */
export interface IRoomRecordFaultyItemView {
    /** [报损单标识](#报损单) */
    roomRecordFaultyOrderId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [出库记录明细标识](#出库记录明细) */
    roomRecordOutItemId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 报损数量 */
    count: number;
    /** 报损原因,不填写默认为[报损单]的报损原因 */
    cause?: string | undefined;
    /** 报损时间 */
    faultyTime: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品规格 */
    spec?: string | undefined;
    /** 商品规格全称 */
    specLabel?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 生产厂家  `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商  `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 报损单号 */
    billNo?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 编码 */
    code?: string | undefined;
}

/** Reponse */
export class RoomRecordFaultyItemViewResult implements IRoomRecordFaultyItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordFaultyItemView[] | undefined;

    constructor(data?: IRoomRecordFaultyItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordFaultyItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordFaultyItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordFaultyItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordFaultyItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordFaultyItemView[] | undefined;
}

/** Reponse */
export class RoomRecordFaultyItemViewResultEntry implements IRoomRecordFaultyItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordFaultyItemView;

    constructor(data?: IRoomRecordFaultyItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomRecordFaultyItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordFaultyItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordFaultyItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomRecordFaultyItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordFaultyItemView;
}

/** 报损单 */
export class RoomRecordFaultyOrderView implements IRoomRecordFaultyOrderView {
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 报损时间 */
    faultyTime!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 报损单详细记录 */
    items?: RoomRecordFaultyItemView[] | undefined;

    constructor(data?: IRoomRecordFaultyOrderView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.billNo = _data["billNo"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.faultyTime = _data["faultyTime"] ? dayjs(_data["faultyTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoomRecordFaultyItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordFaultyOrderView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordFaultyOrderView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["billNo"] = this.billNo;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["faultyTime"] = this.faultyTime ? this.faultyTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 报损单 */
export interface IRoomRecordFaultyOrderView {
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 报损时间 */
    faultyTime: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 报损单详细记录 */
    items?: RoomRecordFaultyItemView[] | undefined;
}

/** Reponse */
export class RoomRecordFaultyOrderViewResult implements IRoomRecordFaultyOrderViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordFaultyOrderView[] | undefined;

    constructor(data?: IRoomRecordFaultyOrderViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordFaultyOrderView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordFaultyOrderViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordFaultyOrderViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordFaultyOrderViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordFaultyOrderView[] | undefined;
}

/** 入库记录 */
export class RoomRecordInEditModel implements IRoomRecordInEditModel {
    /** [入库单标识](#入库单) */
    roomRecordInOrderId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 入库时间 */
    inTime?: dayjs.Dayjs | undefined;
    /** 入库数量 */
    count!: number;
    /** 剩余数量 */
    surplusCount!: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 生产日期 */
    productionDate?: dayjs.Dayjs | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
    /** 进价 */
    purchasePrice!: number;
    /** 标识 */
    id?: string | undefined;

    constructor(data?: IRoomRecordInEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordInOrderId = _data["roomRecordInOrderId"];
            this.roomItemListId = _data["roomItemListId"];
            this.inTime = _data["inTime"] ? dayjs(_data["inTime"].toString()) : <any>undefined;
            this.count = _data["count"];
            this.surplusCount = _data["surplusCount"];
            this.batchNo = _data["batchNo"];
            this.productionDate = _data["productionDate"] ? dayjs(_data["productionDate"].toString()) : <any>undefined;
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
            this.purchasePrice = _data["purchasePrice"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RoomRecordInEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordInOrderId"] = this.roomRecordInOrderId;
        data["roomItemListId"] = this.roomItemListId;
        data["inTime"] = this.inTime ? this.inTime.toISOString() : <any>undefined;
        data["count"] = this.count;
        data["surplusCount"] = this.surplusCount;
        data["batchNo"] = this.batchNo;
        data["productionDate"] = this.productionDate ? this.productionDate.toISOString() : <any>undefined;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        data["purchasePrice"] = this.purchasePrice;
        data["id"] = this.id;
        return data;
    }
}

/** 入库记录 */
export interface IRoomRecordInEditModel {
    /** [入库单标识](#入库单) */
    roomRecordInOrderId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 入库时间 */
    inTime?: dayjs.Dayjs | undefined;
    /** 入库数量 */
    count: number;
    /** 剩余数量 */
    surplusCount: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 生产日期 */
    productionDate?: dayjs.Dayjs | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
    /** 进价 */
    purchasePrice: number;
    /** 标识 */
    id?: string | undefined;
}

/** 入库单 */
export class RoomRecordInOrderEditModel implements IRoomRecordInOrderEditModel {
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** 入库时间 */
    inTime!: dayjs.Dayjs;
    /** 是否已完成 *0-否,1-是* */
    completed!: number;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 入库记录 */
    roomRecordIns?: RoomRecordInEditModel[] | undefined;

    constructor(data?: IRoomRecordInOrderEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.billNo = _data["billNo"];
            this.inTime = _data["inTime"] ? dayjs(_data["inTime"].toString()) : <any>undefined;
            this.completed = _data["completed"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.operatorId = _data["operatorId"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["roomRecordIns"])) {
                this.roomRecordIns = [] as any;
                for (let item of _data["roomRecordIns"])
                    this.roomRecordIns!.push(RoomRecordInEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordInOrderEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInOrderEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["billNo"] = this.billNo;
        data["inTime"] = this.inTime ? this.inTime.toISOString() : <any>undefined;
        data["completed"] = this.completed;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["operatorId"] = this.operatorId;
        data["remark"] = this.remark;
        if (Array.isArray(this.roomRecordIns)) {
            data["roomRecordIns"] = [];
            for (let item of this.roomRecordIns)
                data["roomRecordIns"].push(item.toJSON());
        }
        return data;
    }
}

/** 入库单 */
export interface IRoomRecordInOrderEditModel {
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** 入库时间 */
    inTime: dayjs.Dayjs;
    /** 是否已完成 *0-否,1-是* */
    completed: number;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 备注 */
    remark?: string | undefined;
    /** 入库记录 */
    roomRecordIns?: RoomRecordInEditModel[] | undefined;
}

/** 入库单 */
export class RoomRecordInOrderView implements IRoomRecordInOrderView {
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** 入库时间 */
    inTime!: dayjs.Dayjs;
    /** 是否已完成 *0-否,1-是* */
    completed!: number;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 操作人 */
    operator?: string | undefined;
    /** 入库记录 */
    items?: RoomRecordInView[] | undefined;
    /** 报损单ID 为空则显示生成报损单；不为空则显示查看报损单 */
    roomRecordFaultyOrderId?: string | undefined;

    constructor(data?: IRoomRecordInOrderView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.billNo = _data["billNo"];
            this.inTime = _data["inTime"] ? dayjs(_data["inTime"].toString()) : <any>undefined;
            this.completed = _data["completed"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.operatorId = _data["operatorId"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.operator = _data["operator"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoomRecordInView.fromJS(item));
            }
            this.roomRecordFaultyOrderId = _data["roomRecordFaultyOrderId"];
        }
    }

    static fromJS(data: any): RoomRecordInOrderView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInOrderView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["billNo"] = this.billNo;
        data["inTime"] = this.inTime ? this.inTime.toISOString() : <any>undefined;
        data["completed"] = this.completed;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["operatorId"] = this.operatorId;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["operator"] = this.operator;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["roomRecordFaultyOrderId"] = this.roomRecordFaultyOrderId;
        return data;
    }
}

/** 入库单 */
export interface IRoomRecordInOrderView {
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** 入库时间 */
    inTime: dayjs.Dayjs;
    /** 是否已完成 *0-否,1-是* */
    completed: number;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 操作人 */
    operator?: string | undefined;
    /** 入库记录 */
    items?: RoomRecordInView[] | undefined;
    /** 报损单ID 为空则显示生成报损单；不为空则显示查看报损单 */
    roomRecordFaultyOrderId?: string | undefined;
}

/** Reponse */
export class RoomRecordInOrderViewResult implements IRoomRecordInOrderViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordInOrderView[] | undefined;

    constructor(data?: IRoomRecordInOrderViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordInOrderView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordInOrderViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInOrderViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordInOrderViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordInOrderView[] | undefined;
}

/** Reponse */
export class RoomRecordInOrderViewResultEntry implements IRoomRecordInOrderViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordInOrderView;

    constructor(data?: IRoomRecordInOrderViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomRecordInOrderView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordInOrderViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInOrderViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomRecordInOrderViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordInOrderView;
}

/** 入库记录 */
export class RoomRecordInView implements IRoomRecordInView {
    /** [入库单标识](#入库单) */
    roomRecordInOrderId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 入库时间 */
    inTime?: dayjs.Dayjs | undefined;
    /** 入库数量 */
    count!: number;
    /** 剩余数量 */
    surplusCount!: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 生产日期 */
    productionDate?: dayjs.Dayjs | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
    /** 进价 */
    purchasePrice!: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品规格 */
    spec?: string | undefined;
    /** 商品规格全称 */
    specLabel?: string | undefined;
    /** 入库单位 */
    unit?: string | undefined;
    /** 入库单位显示值 */
    unitLabel?: string | undefined;
    /** 生产厂家  `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商  `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 入库单号 */
    billNo?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 流程中项目批号数量 */
    consumableItemCount?: number | undefined;

    constructor(data?: IRoomRecordInView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordInOrderId = _data["roomRecordInOrderId"];
            this.roomItemListId = _data["roomItemListId"];
            this.inTime = _data["inTime"] ? dayjs(_data["inTime"].toString()) : <any>undefined;
            this.count = _data["count"];
            this.surplusCount = _data["surplusCount"];
            this.batchNo = _data["batchNo"];
            this.productionDate = _data["productionDate"] ? dayjs(_data["productionDate"].toString()) : <any>undefined;
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
            this.purchasePrice = _data["purchasePrice"];
            this.batchManage = _data["batchManage"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.unit = _data["unit"];
            this.unitLabel = _data["unitLabel"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.billNo = _data["billNo"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.consumableItemCount = _data["consumableItemCount"];
        }
    }

    static fromJS(data: any): RoomRecordInView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordInOrderId"] = this.roomRecordInOrderId;
        data["roomItemListId"] = this.roomItemListId;
        data["inTime"] = this.inTime ? this.inTime.toISOString() : <any>undefined;
        data["count"] = this.count;
        data["surplusCount"] = this.surplusCount;
        data["batchNo"] = this.batchNo;
        data["productionDate"] = this.productionDate ? this.productionDate.toISOString() : <any>undefined;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        data["purchasePrice"] = this.purchasePrice;
        data["batchManage"] = this.batchManage;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["unit"] = this.unit;
        data["unitLabel"] = this.unitLabel;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["billNo"] = this.billNo;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["consumableItemCount"] = this.consumableItemCount;
        return data;
    }
}

/** 入库记录 */
export interface IRoomRecordInView {
    /** [入库单标识](#入库单) */
    roomRecordInOrderId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 入库时间 */
    inTime?: dayjs.Dayjs | undefined;
    /** 入库数量 */
    count: number;
    /** 剩余数量 */
    surplusCount: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 生产日期 */
    productionDate?: dayjs.Dayjs | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
    /** 进价 */
    purchasePrice: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品规格 */
    spec?: string | undefined;
    /** 商品规格全称 */
    specLabel?: string | undefined;
    /** 入库单位 */
    unit?: string | undefined;
    /** 入库单位显示值 */
    unitLabel?: string | undefined;
    /** 生产厂家  `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商  `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 入库单号 */
    billNo?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 流程中项目批号数量 */
    consumableItemCount?: number | undefined;
}

/** 入库记录 (ViewModel) */
export class RoomRecordInViewModel implements IRoomRecordInViewModel {
    /** [入库单标识](入库单Id) */
    roomRecordInOrderId!: string;
    /** [项目标识](项目清单Id) */
    roomItemListId!: string;
    /** 入库时间 */
    inTime?: dayjs.Dayjs | undefined;
    /** 入库数量 */
    count!: number;
    /** 剩余数量 */
    surplusCount!: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 生产日期 */
    productionDate?: dayjs.Dayjs | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
    /** 进价 */
    purchasePrice!: number;

    constructor(data?: IRoomRecordInViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordInOrderId = _data["roomRecordInOrderId"];
            this.roomItemListId = _data["roomItemListId"];
            this.inTime = _data["inTime"] ? dayjs(_data["inTime"].toString()) : <any>undefined;
            this.count = _data["count"];
            this.surplusCount = _data["surplusCount"];
            this.batchNo = _data["batchNo"];
            this.productionDate = _data["productionDate"] ? dayjs(_data["productionDate"].toString()) : <any>undefined;
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
            this.purchasePrice = _data["purchasePrice"];
        }
    }

    static fromJS(data: any): RoomRecordInViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordInOrderId"] = this.roomRecordInOrderId;
        data["roomItemListId"] = this.roomItemListId;
        data["inTime"] = this.inTime ? this.inTime.toISOString() : <any>undefined;
        data["count"] = this.count;
        data["surplusCount"] = this.surplusCount;
        data["batchNo"] = this.batchNo;
        data["productionDate"] = this.productionDate ? this.productionDate.toISOString() : <any>undefined;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        data["purchasePrice"] = this.purchasePrice;
        return data;
    }
}

/** 入库记录 (ViewModel) */
export interface IRoomRecordInViewModel {
    /** [入库单标识](入库单Id) */
    roomRecordInOrderId: string;
    /** [项目标识](项目清单Id) */
    roomItemListId: string;
    /** 入库时间 */
    inTime?: dayjs.Dayjs | undefined;
    /** 入库数量 */
    count: number;
    /** 剩余数量 */
    surplusCount: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 生产日期 */
    productionDate?: dayjs.Dayjs | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
    /** 进价 */
    purchasePrice: number;
}

/** Reponse */
export class RoomRecordInViewResult implements IRoomRecordInViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordInView[] | undefined;

    constructor(data?: IRoomRecordInViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordInView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordInViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordInViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordInView[] | undefined;
}

/** Reponse */
export class RoomRecordInViewResultEntry implements IRoomRecordInViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordInView;

    constructor(data?: IRoomRecordInViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomRecordInView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordInViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomRecordInViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordInView;
}

export class RoomRecordInventoryEditModel implements IRoomRecordInventoryEditModel {
    /** 备注 */
    remark?: string | undefined;
    /** 子项 */
    items?: RoomRecordInventoryItemEditModel[] | undefined;

    constructor(data?: IRoomRecordInventoryEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.remark = _data["remark"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoomRecordInventoryItemEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordInventoryEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInventoryEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["remark"] = this.remark;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRoomRecordInventoryEditModel {
    /** 备注 */
    remark?: string | undefined;
    /** 子项 */
    items?: RoomRecordInventoryItemEditModel[] | undefined;
}

export class RoomRecordInventoryItemEditModel implements IRoomRecordInventoryItemEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 账面数量 */
    bookCount?: number | undefined;
    /** 实际数量 */
    actualCount?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRoomRecordInventoryItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.bookCount = _data["bookCount"];
            this.actualCount = _data["actualCount"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RoomRecordInventoryItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInventoryItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["bookCount"] = this.bookCount;
        data["actualCount"] = this.actualCount;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IRoomRecordInventoryItemEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 账面数量 */
    bookCount?: number | undefined;
    /** 实际数量 */
    actualCount?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 盘库记录明细 */
export class RoomRecordInventoryItemView implements IRoomRecordInventoryItemView {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 账面数量 */
    bookCount?: number | undefined;
    /** 实际数量 */
    actualCount?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 盘库日期 */
    inventoryDate?: dayjs.Dayjs;
    /** 单据编号 */
    billNo?: string | undefined;
    /** 项目种类 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 项目简称 */
    shortName?: string | undefined;
    /** 项目商品名 */
    nameGoods?: string | undefined;
    /** 项目规格 */
    spec?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [盘库记录标识](盘库记录Id) */
    roomRecordInventoryId?: string | undefined;
    /** 盈亏状态 *0-无盈亏,1-有盈亏* */
    state?: number;
    /** 盘亏数量 */
    lossCount?: number | undefined;
    /** 盘亏金额 */
    lossAmount?: number | undefined;
    /** 盘赢数量 */
    overCount?: number | undefined;
    /** 盘赢金额 */
    overAmount?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomRecordInventoryItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.bookCount = _data["bookCount"];
            this.actualCount = _data["actualCount"];
            this.remark = _data["remark"];
            this.inventoryDate = _data["inventoryDate"] ? dayjs(_data["inventoryDate"].toString()) : <any>undefined;
            this.billNo = _data["billNo"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.nameGoods = _data["nameGoods"];
            this.spec = _data["spec"];
            this.id = _data["id"];
            this.roomRecordInventoryId = _data["roomRecordInventoryId"];
            this.state = _data["state"];
            this.lossCount = _data["lossCount"];
            this.lossAmount = _data["lossAmount"];
            this.overCount = _data["overCount"];
            this.overAmount = _data["overAmount"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordInventoryItemView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInventoryItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["bookCount"] = this.bookCount;
        data["actualCount"] = this.actualCount;
        data["remark"] = this.remark;
        data["inventoryDate"] = this.inventoryDate ? this.inventoryDate.toISOString() : <any>undefined;
        data["billNo"] = this.billNo;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["nameGoods"] = this.nameGoods;
        data["spec"] = this.spec;
        data["id"] = this.id;
        data["roomRecordInventoryId"] = this.roomRecordInventoryId;
        data["state"] = this.state;
        data["lossCount"] = this.lossCount;
        data["lossAmount"] = this.lossAmount;
        data["overCount"] = this.overCount;
        data["overAmount"] = this.overAmount;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 盘库记录明细 */
export interface IRoomRecordInventoryItemView {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 账面数量 */
    bookCount?: number | undefined;
    /** 实际数量 */
    actualCount?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 盘库日期 */
    inventoryDate?: dayjs.Dayjs;
    /** 单据编号 */
    billNo?: string | undefined;
    /** 项目种类 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 项目简称 */
    shortName?: string | undefined;
    /** 项目商品名 */
    nameGoods?: string | undefined;
    /** 项目规格 */
    spec?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [盘库记录标识](盘库记录Id) */
    roomRecordInventoryId?: string | undefined;
    /** 盈亏状态 *0-无盈亏,1-有盈亏* */
    state?: number;
    /** 盘亏数量 */
    lossCount?: number | undefined;
    /** 盘亏金额 */
    lossAmount?: number | undefined;
    /** 盘赢数量 */
    overCount?: number | undefined;
    /** 盘赢金额 */
    overAmount?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomRecordInventoryItemViewResult implements IRoomRecordInventoryItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordInventoryItemView[] | undefined;

    constructor(data?: IRoomRecordInventoryItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordInventoryItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordInventoryItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInventoryItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordInventoryItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordInventoryItemView[] | undefined;
}

/** Reponse */
export class RoomRecordInventoryItemViewResultEntry implements IRoomRecordInventoryItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordInventoryItemView;

    constructor(data?: IRoomRecordInventoryItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomRecordInventoryItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordInventoryItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInventoryItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomRecordInventoryItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordInventoryItemView;
}

/** 盘库记录 */
export class RoomRecordInventoryView implements IRoomRecordInventoryView {
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 盘库日期 */
    inventoryDate?: dayjs.Dayjs;
    /** 单据编号 */
    billNo?: string | undefined;
    /** 是否已完成 *0-否,1-是* */
    completed?: number;
    /** 盈亏状态 *0-无盈亏,1-有盈亏* */
    state?: number;
    /** 盘亏金额 */
    lossAmount?: number | undefined;
    /** 盘赢金额 */
    overAmount?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 子项 */
    items?: RoomRecordInventoryItemView[] | undefined;

    constructor(data?: IRoomRecordInventoryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.inventoryDate = _data["inventoryDate"] ? dayjs(_data["inventoryDate"].toString()) : <any>undefined;
            this.billNo = _data["billNo"];
            this.completed = _data["completed"];
            this.state = _data["state"];
            this.lossAmount = _data["lossAmount"];
            this.overAmount = _data["overAmount"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoomRecordInventoryItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordInventoryView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInventoryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["inventoryDate"] = this.inventoryDate ? this.inventoryDate.toISOString() : <any>undefined;
        data["billNo"] = this.billNo;
        data["completed"] = this.completed;
        data["state"] = this.state;
        data["lossAmount"] = this.lossAmount;
        data["overAmount"] = this.overAmount;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 盘库记录 */
export interface IRoomRecordInventoryView {
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 盘库日期 */
    inventoryDate?: dayjs.Dayjs;
    /** 单据编号 */
    billNo?: string | undefined;
    /** 是否已完成 *0-否,1-是* */
    completed?: number;
    /** 盈亏状态 *0-无盈亏,1-有盈亏* */
    state?: number;
    /** 盘亏金额 */
    lossAmount?: number | undefined;
    /** 盘赢金额 */
    overAmount?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 子项 */
    items?: RoomRecordInventoryItemView[] | undefined;
}

/** Reponse */
export class RoomRecordInventoryViewResult implements IRoomRecordInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordInventoryView[] | undefined;

    constructor(data?: IRoomRecordInventoryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordInventoryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordInventoryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInventoryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordInventoryView[] | undefined;
}

/** Reponse */
export class RoomRecordInventoryViewResultEntry implements IRoomRecordInventoryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordInventoryView;

    constructor(data?: IRoomRecordInventoryViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomRecordInventoryView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordInventoryViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInventoryViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomRecordInventoryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordInventoryView;
}

/** 费用项目 */
export class RoomRecordItem implements IRoomRecordItem {
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 批号管理 */
    batchManage!: number;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 患者编号 */
    patientId?: string | undefined;
    /** 批次明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: IRoomRecordItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.batchManage = _data["batchManage"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.devBarCode = _data["devBarCode"];
            this.patientId = _data["patientId"];
            if (Array.isArray(_data["batchItems"])) {
                this.batchItems = [] as any;
                for (let item of _data["batchItems"])
                    this.batchItems!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["batchManage"] = this.batchManage;
        data["code"] = this.code;
        data["name"] = this.name;
        data["devBarCode"] = this.devBarCode;
        data["patientId"] = this.patientId;
        if (Array.isArray(this.batchItems)) {
            data["batchItems"] = [];
            for (let item of this.batchItems)
                data["batchItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 费用项目 */
export interface IRoomRecordItem {
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 批号管理 */
    batchManage: number;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 患者编号 */
    patientId?: string | undefined;
    /** 批次明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;
}

export class RoomRecordOperateView implements IRoomRecordOperateView {
    /** 出库明细标识 */
    roomRecordOutItemId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 数量 */
    count?: number;
    /** 实际数量 */
    factCount?: number;
    /** 原因 */
    cause?: string | undefined;
    /** 类型(退库、报损) */
    type?: string | undefined;
    /** 操作人 */
    operator?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomRecordOperateView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordOutItemId = _data["roomRecordOutItemId"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.count = _data["count"];
            this.factCount = _data["factCount"];
            this.cause = _data["cause"];
            this.type = _data["type"];
            this.operator = _data["operator"];
            this.operateTime = _data["operateTime"] ? dayjs(_data["operateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordOperateView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordOperateView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordOutItemId"] = this.roomRecordOutItemId;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["count"] = this.count;
        data["factCount"] = this.factCount;
        data["cause"] = this.cause;
        data["type"] = this.type;
        data["operator"] = this.operator;
        data["operateTime"] = this.operateTime ? this.operateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRoomRecordOperateView {
    /** 出库明细标识 */
    roomRecordOutItemId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 数量 */
    count?: number;
    /** 实际数量 */
    factCount?: number;
    /** 原因 */
    cause?: string | undefined;
    /** 类型(退库、报损) */
    type?: string | undefined;
    /** 操作人 */
    operator?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomRecordOperateViewResult implements IRoomRecordOperateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordOperateView[] | undefined;

    constructor(data?: IRoomRecordOperateViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordOperateView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordOperateViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordOperateViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordOperateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordOperateView[] | undefined;
}

/** 出库记录明细 */
export class RoomRecordOutItemView implements IRoomRecordOutItemView {
    /** [出库单标识](#出库单) */
    roomRecordOutOrderId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 出库时间 */
    outTime?: dayjs.Dayjs | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 出库数量 */
    count!: number;
    /** 实际出库数量 */
    factCount!: number;
    /** 医嘱标识 */
    cureDaId?: string | undefined;
    /** 透析记录单项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品规格 */
    spec?: string | undefined;
    /** 商品规格全称 */
    specLabel?: string | undefined;
    /** 出库单位 */
    unit?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 出库对象 */
    outTo?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 供应商 */
    suppler?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 出库单号 */
    billNo?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 报损原因 - 报损明细使用 */
    faultyCause?: string | undefined;
    /** 报损原因 - 报损明细备注 */
    faultyRemark?: string | undefined;
    /** 退库原因 - 退库明细使用 */
    restoreCause?: string | undefined;
    /** 报损原因 - 退库明细备注 */
    restoreRemark?: string | undefined;
    /** 最新扫码的结果 */
    change?: number;
    /** 生产日期 */
    productionDate?: dayjs.Dayjs | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomRecordOutItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordOutOrderId = _data["roomRecordOutOrderId"];
            this.roomItemListId = _data["roomItemListId"];
            this.cureRecordId = _data["cureRecordId"];
            this.patientId = _data["patientId"];
            this.roomRecordInId = _data["roomRecordInId"];
            this.outTime = _data["outTime"] ? dayjs(_data["outTime"].toString()) : <any>undefined;
            this.groupId = _data["groupId"];
            this.count = _data["count"];
            this.factCount = _data["factCount"];
            this.cureDaId = _data["cureDaId"];
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.batchNo = _data["batchNo"];
            this.remark = _data["remark"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.unit = _data["unit"];
            this.unitLevel1 = _data["unitLevel1"];
            this.conversionRate = _data["conversionRate"];
            this.outTo = _data["outTo"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.patientName = _data["patientName"];
            this.billNo = _data["billNo"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.faultyCause = _data["faultyCause"];
            this.faultyRemark = _data["faultyRemark"];
            this.restoreCause = _data["restoreCause"];
            this.restoreRemark = _data["restoreRemark"];
            this.change = _data["change"];
            this.productionDate = _data["productionDate"] ? dayjs(_data["productionDate"].toString()) : <any>undefined;
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordOutItemView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordOutItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordOutOrderId"] = this.roomRecordOutOrderId;
        data["roomItemListId"] = this.roomItemListId;
        data["cureRecordId"] = this.cureRecordId;
        data["patientId"] = this.patientId;
        data["roomRecordInId"] = this.roomRecordInId;
        data["outTime"] = this.outTime ? this.outTime.toISOString() : <any>undefined;
        data["groupId"] = this.groupId;
        data["count"] = this.count;
        data["factCount"] = this.factCount;
        data["cureDaId"] = this.cureDaId;
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["batchNo"] = this.batchNo;
        data["remark"] = this.remark;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["unit"] = this.unit;
        data["unitLevel1"] = this.unitLevel1;
        data["conversionRate"] = this.conversionRate;
        data["outTo"] = this.outTo;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["patientName"] = this.patientName;
        data["billNo"] = this.billNo;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["faultyCause"] = this.faultyCause;
        data["faultyRemark"] = this.faultyRemark;
        data["restoreCause"] = this.restoreCause;
        data["restoreRemark"] = this.restoreRemark;
        data["change"] = this.change;
        data["productionDate"] = this.productionDate ? this.productionDate.toISOString() : <any>undefined;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 出库记录明细 */
export interface IRoomRecordOutItemView {
    /** [出库单标识](#出库单) */
    roomRecordOutOrderId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 出库时间 */
    outTime?: dayjs.Dayjs | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 出库数量 */
    count: number;
    /** 实际出库数量 */
    factCount: number;
    /** 医嘱标识 */
    cureDaId?: string | undefined;
    /** 透析记录单项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品规格 */
    spec?: string | undefined;
    /** 商品规格全称 */
    specLabel?: string | undefined;
    /** 出库单位 */
    unit?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 出库对象 */
    outTo?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 供应商 */
    suppler?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 出库单号 */
    billNo?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 报损原因 - 报损明细使用 */
    faultyCause?: string | undefined;
    /** 报损原因 - 报损明细备注 */
    faultyRemark?: string | undefined;
    /** 退库原因 - 退库明细使用 */
    restoreCause?: string | undefined;
    /** 报损原因 - 退库明细备注 */
    restoreRemark?: string | undefined;
    /** 最新扫码的结果 */
    change?: number;
    /** 生产日期 */
    productionDate?: dayjs.Dayjs | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomRecordOutItemViewResult implements IRoomRecordOutItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordOutItemView[] | undefined;

    constructor(data?: IRoomRecordOutItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordOutItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordOutItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordOutItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordOutItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordOutItemView[] | undefined;
}

/** Reponse */
export class RoomRecordOutItemViewResultEntry implements IRoomRecordOutItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordOutItemView;

    constructor(data?: IRoomRecordOutItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomRecordOutItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordOutItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordOutItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomRecordOutItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordOutItemView;
}

/** 出库单 */
export class RoomRecordOutOrderEditModel implements IRoomRecordOutOrderEditModel {
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** 出库时间 */
    outTime!: dayjs.Dayjs;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRoomRecordOutOrderEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.billNo = _data["billNo"];
            this.outTime = _data["outTime"] ? dayjs(_data["outTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RoomRecordOutOrderEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordOutOrderEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["billNo"] = this.billNo;
        data["outTime"] = this.outTime ? this.outTime.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 出库单 */
export interface IRoomRecordOutOrderEditModel {
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** 出库时间 */
    outTime: dayjs.Dayjs;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 出库单 */
export class RoomRecordOutOrderView implements IRoomRecordOutOrderView {
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** 出库时间 */
    outTime!: dayjs.Dayjs;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 出库记录 */
    items?: RoomRecordOutView[] | undefined;
    /** 退库单是否存在 为空则显示生成退库单；不为空则显示查看退库单 */
    restore?: number;
    /** 报损单是否存在 为空则显示生成报损单；不为空则显示查看报损单 */
    faulty?: number;

    constructor(data?: IRoomRecordOutOrderView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.billNo = _data["billNo"];
            this.outTime = _data["outTime"] ? dayjs(_data["outTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.id = _data["id"];
            this.remark = _data["remark"];
            this.shiftName = _data["shiftName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoomRecordOutView.fromJS(item));
            }
            this.restore = _data["restore"];
            this.faulty = _data["faulty"];
        }
    }

    static fromJS(data: any): RoomRecordOutOrderView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordOutOrderView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["billNo"] = this.billNo;
        data["outTime"] = this.outTime ? this.outTime.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["id"] = this.id;
        data["remark"] = this.remark;
        data["shiftName"] = this.shiftName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["restore"] = this.restore;
        data["faulty"] = this.faulty;
        return data;
    }
}

/** 出库单 */
export interface IRoomRecordOutOrderView {
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** 出库时间 */
    outTime: dayjs.Dayjs;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 出库记录 */
    items?: RoomRecordOutView[] | undefined;
    /** 退库单是否存在 为空则显示生成退库单；不为空则显示查看退库单 */
    restore?: number;
    /** 报损单是否存在 为空则显示生成报损单；不为空则显示查看报损单 */
    faulty?: number;
}

/** Reponse */
export class RoomRecordOutOrderViewResult implements IRoomRecordOutOrderViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordOutOrderView[] | undefined;

    constructor(data?: IRoomRecordOutOrderViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordOutOrderView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordOutOrderViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordOutOrderViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordOutOrderViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordOutOrderView[] | undefined;
}

/** Reponse */
export class RoomRecordOutOrderViewResultEntry implements IRoomRecordOutOrderViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordOutOrderView;

    constructor(data?: IRoomRecordOutOrderViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomRecordOutOrderView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordOutOrderViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordOutOrderViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomRecordOutOrderViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordOutOrderView;
}

/** 出库记录 */
export class RoomRecordOutView implements IRoomRecordOutView {
    /** [出库单标识](#出库单) */
    roomRecordOutOrderId?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 出库数量 */
    count?: number;
    /** 售价 *出库时从项目价格表中获取* */
    sellingPrice?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品规格 */
    spec?: string | undefined;
    /** 商品规格全称 */
    specLabel?: string | undefined;
    /** 入库单位 */
    unit?: string | undefined;
    /** 入库单位显示值 */
    unitLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 供应商 */
    suppler?: string | undefined;
    /** 标识 */
    id!: string;
    /** 出库数量 */
    outCount?: number;
    /** 出库记录详细记录子项 */
    items?: RoomRecordOutItemView[] | undefined;

    constructor(data?: IRoomRecordOutView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordOutOrderId = _data["roomRecordOutOrderId"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.sellingPrice = _data["sellingPrice"];
            this.remark = _data["remark"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.unit = _data["unit"];
            this.unitLabel = _data["unitLabel"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.id = _data["id"];
            this.outCount = _data["outCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoomRecordOutItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordOutView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordOutView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordOutOrderId"] = this.roomRecordOutOrderId;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["sellingPrice"] = this.sellingPrice;
        data["remark"] = this.remark;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["unit"] = this.unit;
        data["unitLabel"] = this.unitLabel;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["id"] = this.id;
        data["outCount"] = this.outCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 出库记录 */
export interface IRoomRecordOutView {
    /** [出库单标识](#出库单) */
    roomRecordOutOrderId?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 出库数量 */
    count?: number;
    /** 售价 *出库时从项目价格表中获取* */
    sellingPrice?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品规格 */
    spec?: string | undefined;
    /** 商品规格全称 */
    specLabel?: string | undefined;
    /** 入库单位 */
    unit?: string | undefined;
    /** 入库单位显示值 */
    unitLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 供应商 */
    suppler?: string | undefined;
    /** 标识 */
    id: string;
    /** 出库数量 */
    outCount?: number;
    /** 出库记录详细记录子项 */
    items?: RoomRecordOutItemView[] | undefined;
}

/** 退库记录明细 */
export class RoomRecordRestoreItemEditModel implements IRoomRecordRestoreItemEditModel {
    /** [退库单标识](#退库单) */
    roomRecordRestoreOrderId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [出库记录明细标识](#出库记录明细) */
    roomRecordOutItemId!: string;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 退库数量 */
    count!: number;
    /** 退库原因,不填写默认为[退库单]的退库原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 退库时间 */
    restoreTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomRecordRestoreItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordRestoreOrderId = _data["roomRecordRestoreOrderId"];
            this.roomItemListId = _data["roomItemListId"];
            this.roomRecordOutItemId = _data["roomRecordOutItemId"];
            this.groupId = _data["groupId"];
            this.batchNo = _data["batchNo"];
            this.count = _data["count"];
            this.cause = _data["cause"];
            this.remark = _data["remark"];
            this.restoreTime = _data["restoreTime"] ? dayjs(_data["restoreTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordRestoreItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordRestoreItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordRestoreOrderId"] = this.roomRecordRestoreOrderId;
        data["roomItemListId"] = this.roomItemListId;
        data["roomRecordOutItemId"] = this.roomRecordOutItemId;
        data["groupId"] = this.groupId;
        data["batchNo"] = this.batchNo;
        data["count"] = this.count;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        data["restoreTime"] = this.restoreTime ? this.restoreTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 退库记录明细 */
export interface IRoomRecordRestoreItemEditModel {
    /** [退库单标识](#退库单) */
    roomRecordRestoreOrderId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [出库记录明细标识](#出库记录明细) */
    roomRecordOutItemId: string;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 退库数量 */
    count: number;
    /** 退库原因,不填写默认为[退库单]的退库原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 退库时间 */
    restoreTime?: dayjs.Dayjs | undefined;
}

/** 退库记录明细 */
export class RoomRecordRestoreItemView implements IRoomRecordRestoreItemView {
    /** [退库单标识](#退库单) */
    roomRecordRestoreOrderId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [出库记录明细标识](#出库记录明细) */
    roomRecordOutItemId!: string;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 退库数量 */
    count!: number;
    /** 退库原因,不填写默认为[退库单]的退库原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 退库时间 */
    restoreTime?: dayjs.Dayjs | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品规格 */
    spec?: string | undefined;
    /** 商品规格全称 */
    specLabel?: string | undefined;
    /** 出库单位 */
    unit?: string | undefined;
    /** 出库单位显示值 */
    unitLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 供应商 */
    suppler?: string | undefined;
    /** 退库单号 */
    billNo?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomRecordRestoreItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordRestoreOrderId = _data["roomRecordRestoreOrderId"];
            this.roomItemListId = _data["roomItemListId"];
            this.roomRecordOutItemId = _data["roomRecordOutItemId"];
            this.groupId = _data["groupId"];
            this.batchNo = _data["batchNo"];
            this.count = _data["count"];
            this.cause = _data["cause"];
            this.remark = _data["remark"];
            this.restoreTime = _data["restoreTime"] ? dayjs(_data["restoreTime"].toString()) : <any>undefined;
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.unit = _data["unit"];
            this.unitLabel = _data["unitLabel"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.billNo = _data["billNo"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordRestoreItemView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordRestoreItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordRestoreOrderId"] = this.roomRecordRestoreOrderId;
        data["roomItemListId"] = this.roomItemListId;
        data["roomRecordOutItemId"] = this.roomRecordOutItemId;
        data["groupId"] = this.groupId;
        data["batchNo"] = this.batchNo;
        data["count"] = this.count;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        data["restoreTime"] = this.restoreTime ? this.restoreTime.toISOString() : <any>undefined;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["unit"] = this.unit;
        data["unitLabel"] = this.unitLabel;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["billNo"] = this.billNo;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 退库记录明细 */
export interface IRoomRecordRestoreItemView {
    /** [退库单标识](#退库单) */
    roomRecordRestoreOrderId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [出库记录明细标识](#出库记录明细) */
    roomRecordOutItemId: string;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 退库数量 */
    count: number;
    /** 退库原因,不填写默认为[退库单]的退库原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 退库时间 */
    restoreTime?: dayjs.Dayjs | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品规格 */
    spec?: string | undefined;
    /** 商品规格全称 */
    specLabel?: string | undefined;
    /** 出库单位 */
    unit?: string | undefined;
    /** 出库单位显示值 */
    unitLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 供应商 */
    suppler?: string | undefined;
    /** 退库单号 */
    billNo?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomRecordRestoreItemViewResult implements IRoomRecordRestoreItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordRestoreItemView[] | undefined;

    constructor(data?: IRoomRecordRestoreItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordRestoreItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordRestoreItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordRestoreItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordRestoreItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordRestoreItemView[] | undefined;
}

/** Reponse */
export class RoomRecordRestoreItemViewResultEntry implements IRoomRecordRestoreItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordRestoreItemView;

    constructor(data?: IRoomRecordRestoreItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomRecordRestoreItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordRestoreItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordRestoreItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomRecordRestoreItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordRestoreItemView;
}

/** 退库单 */
export class RoomRecordRestoreOrderEditModel implements IRoomRecordRestoreOrderEditModel {
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** 退库时间 */
    restoreTime!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 退库详细子项 */
    items?: RoomRecordRestoreItemEditModel[] | undefined;

    constructor(data?: IRoomRecordRestoreOrderEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.billNo = _data["billNo"];
            this.restoreTime = _data["restoreTime"] ? dayjs(_data["restoreTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoomRecordRestoreItemEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordRestoreOrderEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordRestoreOrderEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["billNo"] = this.billNo;
        data["restoreTime"] = this.restoreTime ? this.restoreTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 退库单 */
export interface IRoomRecordRestoreOrderEditModel {
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** 退库时间 */
    restoreTime: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 退库详细子项 */
    items?: RoomRecordRestoreItemEditModel[] | undefined;
}

/** 退库单 */
export class RoomRecordRestoreOrderView implements IRoomRecordRestoreOrderView {
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** 退库时间 */
    restoreTime!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 退库单子项 */
    items?: RoomRecordRestoreItemView[] | undefined;

    constructor(data?: IRoomRecordRestoreOrderView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.billNo = _data["billNo"];
            this.restoreTime = _data["restoreTime"] ? dayjs(_data["restoreTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoomRecordRestoreItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordRestoreOrderView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordRestoreOrderView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["billNo"] = this.billNo;
        data["restoreTime"] = this.restoreTime ? this.restoreTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 退库单 */
export interface IRoomRecordRestoreOrderView {
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 单据编号（系统自动生成） */
    billNo?: string | undefined;
    /** 退库时间 */
    restoreTime: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 退库单子项 */
    items?: RoomRecordRestoreItemView[] | undefined;
}

/** Reponse */
export class RoomRecordRestoreOrderViewResult implements IRoomRecordRestoreOrderViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordRestoreOrderView[] | undefined;

    constructor(data?: IRoomRecordRestoreOrderViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordRestoreOrderView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordRestoreOrderViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordRestoreOrderViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordRestoreOrderViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordRestoreOrderView[] | undefined;
}

/** Reponse */
export class RoomRecordRestoreOrderViewResultEntry implements IRoomRecordRestoreOrderViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordRestoreOrderView;

    constructor(data?: IRoomRecordRestoreOrderViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomRecordRestoreOrderView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordRestoreOrderViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordRestoreOrderViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomRecordRestoreOrderViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordRestoreOrderView;
}

/** 使用记录操作明细 */
export class RoomRecordUsageOperateEditModel implements IRoomRecordUsageOperateEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [使用记录标识](#使用记录) */
    roomRecordUsageId?: string | undefined;
    /** 操作类型 */
    type!: string;
    /** 数量 */
    count!: number;
    /** 原因 */
    cause?: string | undefined;

    constructor(data?: IRoomRecordUsageOperateEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.roomRecordUsageId = _data["roomRecordUsageId"];
            this.type = _data["type"];
            this.count = _data["count"];
            this.cause = _data["cause"];
        }
    }

    static fromJS(data: any): RoomRecordUsageOperateEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordUsageOperateEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["roomRecordUsageId"] = this.roomRecordUsageId;
        data["type"] = this.type;
        data["count"] = this.count;
        data["cause"] = this.cause;
        return data;
    }
}

/** 使用记录操作明细 */
export interface IRoomRecordUsageOperateEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [使用记录标识](#使用记录) */
    roomRecordUsageId?: string | undefined;
    /** 操作类型 */
    type: string;
    /** 数量 */
    count: number;
    /** 原因 */
    cause?: string | undefined;
}

/** 使用记录操作明细 */
export class RoomRecordUsageOperateView implements IRoomRecordUsageOperateView {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [使用记录标识](#使用记录) */
    roomRecordUsageId?: string | undefined;
    /** 操作类型 */
    type!: string;
    /** 数量 */
    count!: number;
    /** 原因 */
    cause?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;

    constructor(data?: IRoomRecordUsageOperateView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.roomRecordUsageId = _data["roomRecordUsageId"];
            this.type = _data["type"];
            this.count = _data["count"];
            this.cause = _data["cause"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
        }
    }

    static fromJS(data: any): RoomRecordUsageOperateView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordUsageOperateView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["roomRecordUsageId"] = this.roomRecordUsageId;
        data["type"] = this.type;
        data["count"] = this.count;
        data["cause"] = this.cause;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        return data;
    }
}

/** 使用记录操作明细 */
export interface IRoomRecordUsageOperateView {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [使用记录标识](#使用记录) */
    roomRecordUsageId?: string | undefined;
    /** 操作类型 */
    type: string;
    /** 数量 */
    count: number;
    /** 原因 */
    cause?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
}

/** Reponse */
export class RoomRecordUsageOperateViewResult implements IRoomRecordUsageOperateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordUsageOperateView[] | undefined;

    constructor(data?: IRoomRecordUsageOperateViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordUsageOperateView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordUsageOperateViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordUsageOperateViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordUsageOperateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordUsageOperateView[] | undefined;
}

/** Reponse */
export class RoomRecordUsageOperateViewResultEntry implements IRoomRecordUsageOperateViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordUsageOperateView;

    constructor(data?: IRoomRecordUsageOperateViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomRecordUsageOperateView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordUsageOperateViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordUsageOperateViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomRecordUsageOperateViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordUsageOperateView;
}

export class RoomRecordUsageView implements IRoomRecordUsageView {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 医嘱标识 */
    cureDaId?: string | undefined;
    /** 透析记录单项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** [出库记录明细标识](#出库记录明细) */
    roomRecordOutItemId?: string | undefined;
    /** 数量 */
    count!: number;
    /** 实际使用数量 */
    factCount!: number;
    /** 分组标识 */
    groupId!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者性别显示值 */
    patientGenderLabel?: string | undefined;
    /** 患者来源显示值 */
    patientSourceLabel?: string | undefined;
    /** 患者Id */
    patientId?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件类型显示值 */
    idTypeLabel?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 医院名称 */
    hospitalName?: string | undefined;
    /** 医院编码 */
    hospitalCode?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 商品规格 */
    spec?: string | undefined;
    /** 出库日期 */
    outTime?: dayjs.Dayjs | undefined;
    /** 数量 */
    countUnit?: string | undefined;
    /** 出库数量 */
    outCount?: number | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 生产日期 */
    productionDate?: dayjs.Dayjs | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomRecordUsageView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.cureRecordId = _data["cureRecordId"];
            this.cureDaId = _data["cureDaId"];
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.roomRecordOutItemId = _data["roomRecordOutItemId"];
            this.count = _data["count"];
            this.factCount = _data["factCount"];
            this.groupId = _data["groupId"];
            this.remark = _data["remark"];
            this.unit = _data["unit"];
            this.unitLabel = _data["unitLabel"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sn = _data["sn"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.patientName = _data["patientName"];
            this.patientGenderLabel = _data["patientGenderLabel"];
            this.patientSourceLabel = _data["patientSourceLabel"];
            this.patientId = _data["patientId"];
            this.idType = _data["idType"];
            this.idTypeLabel = _data["idTypeLabel"];
            this.idNumber = _data["idNumber"];
            this.telephone = _data["telephone"];
            this.hospitalName = _data["hospitalName"];
            this.hospitalCode = _data["hospitalCode"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.unitLevel1 = _data["unitLevel1"];
            this.conversionRate = _data["conversionRate"];
            this.spec = _data["spec"];
            this.outTime = _data["outTime"] ? dayjs(_data["outTime"].toString()) : <any>undefined;
            this.countUnit = _data["countUnit"];
            this.outCount = _data["outCount"];
            this.model = _data["model"];
            this.sellingPrice = _data["sellingPrice"];
            this.batchNo = _data["batchNo"];
            this.productionDate = _data["productionDate"] ? dayjs(_data["productionDate"].toString()) : <any>undefined;
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordUsageView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordUsageView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["cureRecordId"] = this.cureRecordId;
        data["cureDaId"] = this.cureDaId;
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["roomRecordOutItemId"] = this.roomRecordOutItemId;
        data["count"] = this.count;
        data["factCount"] = this.factCount;
        data["groupId"] = this.groupId;
        data["remark"] = this.remark;
        data["unit"] = this.unit;
        data["unitLabel"] = this.unitLabel;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["sn"] = this.sn;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["patientName"] = this.patientName;
        data["patientGenderLabel"] = this.patientGenderLabel;
        data["patientSourceLabel"] = this.patientSourceLabel;
        data["patientId"] = this.patientId;
        data["idType"] = this.idType;
        data["idTypeLabel"] = this.idTypeLabel;
        data["idNumber"] = this.idNumber;
        data["telephone"] = this.telephone;
        data["hospitalName"] = this.hospitalName;
        data["hospitalCode"] = this.hospitalCode;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["unitLevel1"] = this.unitLevel1;
        data["conversionRate"] = this.conversionRate;
        data["spec"] = this.spec;
        data["outTime"] = this.outTime ? this.outTime.toISOString() : <any>undefined;
        data["countUnit"] = this.countUnit;
        data["outCount"] = this.outCount;
        data["model"] = this.model;
        data["sellingPrice"] = this.sellingPrice;
        data["batchNo"] = this.batchNo;
        data["productionDate"] = this.productionDate ? this.productionDate.toISOString() : <any>undefined;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRoomRecordUsageView {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 医嘱标识 */
    cureDaId?: string | undefined;
    /** 透析记录单项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** [出库记录明细标识](#出库记录明细) */
    roomRecordOutItemId?: string | undefined;
    /** 数量 */
    count: number;
    /** 实际使用数量 */
    factCount: number;
    /** 分组标识 */
    groupId: string;
    /** 备注 */
    remark?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者性别显示值 */
    patientGenderLabel?: string | undefined;
    /** 患者来源显示值 */
    patientSourceLabel?: string | undefined;
    /** 患者Id */
    patientId?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件类型显示值 */
    idTypeLabel?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 医院名称 */
    hospitalName?: string | undefined;
    /** 医院编码 */
    hospitalCode?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 商品规格 */
    spec?: string | undefined;
    /** 出库日期 */
    outTime?: dayjs.Dayjs | undefined;
    /** 数量 */
    countUnit?: string | undefined;
    /** 出库数量 */
    outCount?: number | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 生产日期 */
    productionDate?: dayjs.Dayjs | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomRecordUsageViewResult implements IRoomRecordUsageViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordUsageView[] | undefined;

    constructor(data?: IRoomRecordUsageViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordUsageView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordUsageViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordUsageViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordUsageViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordUsageView[] | undefined;
}

/** Reponse */
export class RoomRecordUsageViewResultEntry implements IRoomRecordUsageViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordUsageView;

    constructor(data?: IRoomRecordUsageViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomRecordUsageView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordUsageViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordUsageViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomRecordUsageViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordUsageView;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}