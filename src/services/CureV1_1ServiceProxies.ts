/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class CureCourseServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透后病程记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureCourseGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureCourseViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureCourse/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureCourseGET(_response));
        });
    }

    protected processCureCourseGET(response: AxiosResponse): Promise<CureCourseViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCourseViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureCourseViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCourseViewResultEntry>(null as any);
    }

    /**
     * 透后病程记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureCoursePOST(id: string, body: CureCourseEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureCourse/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureCoursePOST(_response));
        });
    }

    protected processCureCoursePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后病程记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureCourseViewResult> {
        let url_ = this.baseUrl + "/api/CureCourse/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter(_response));
        });
    }

    protected processFilter(response: AxiosResponse): Promise<CureCourseViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCourseViewResult.fromJS(resultData200);
            return Promise.resolve<CureCourseViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCourseViewResult>(null as any);
    }

    /**
     * 透后病程历次记录
     * @param filter (optional)
     * @param patientid (optional)
     * @return Success
     */
    getAllCureCourse(filter: string | undefined, patientid: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureCourseViewResult> {
        let url_ = this.baseUrl + "/api/CureCourse/GetAllCureCourse?";
        if (patientid === null)
            throw new Error("The parameter 'patientid' cannot be null.");
        else if (patientid !== undefined)
            url_ += "patientid=" + encodeURIComponent("" + patientid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAllCureCourse(_response));
        });
    }

    protected processGetAllCureCourse(response: AxiosResponse): Promise<CureCourseViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCourseViewResult.fromJS(resultData200);
            return Promise.resolve<CureCourseViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCourseViewResult>(null as any);
    }

    /**
     * 透后病程记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureCoursePOST2(body: CureCourseEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureCourse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureCoursePOST2(_response));
        });
    }

    protected processCureCoursePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后病程记录 -- 根据Id删除数据
     * @return Success
     */
    delete(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureCourse/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureDaServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析医嘱 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureDa(id: string , cancelToken?: CancelToken | undefined): Promise<CureDaResultEntry> {
        let url_ = this.baseUrl + "/api/CureDa/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDa(_response));
        });
    }

    protected processCureDa(response: AxiosResponse): Promise<CureDaResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaResultEntry.fromJS(resultData200);
            return Promise.resolve<CureDaResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaResultEntry>(null as any);
    }
}

export class CureDaLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析医嘱修改记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter2(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaLogResult> {
        let url_ = this.baseUrl + "/api/CureDaLog/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter2(_response));
        });
    }

    protected processFilter2(response: AxiosResponse): Promise<CureDaLogResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaLogResult.fromJS(resultData200);
            return Promise.resolve<CureDaLogResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaLogResult>(null as any);
    }

    /**
     * 透析医嘱修改记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureDaLog(body: CureDaLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaLog(_response));
        });
    }

    protected processCureDaLog(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析医嘱修改记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureDaLog2(id: string, body: CureDaLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaLog2(_response));
        });
    }

    protected processCureDaLog2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析医嘱修改记录 -- 根据Id删除数据
     * @return Success
     */
    delete2(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete2(_response));
        });
    }

    protected processDelete2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureDaTempServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 临时透析医嘱 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureDaTempGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureDaTempResultEntry> {
        let url_ = this.baseUrl + "/api/CureDaTemp/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaTempGET(_response));
        });
    }

    protected processCureDaTempGET(response: AxiosResponse): Promise<CureDaTempResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaTempResultEntry.fromJS(resultData200);
            return Promise.resolve<CureDaTempResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaTempResultEntry>(null as any);
    }

    /**
     * 临时透析医嘱 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureDaTempPOST(id: string, body: CureDaTempViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaTemp/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaTempPOST(_response));
        });
    }

    protected processCureDaTempPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 临时透析医嘱 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter3(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaTempResult> {
        let url_ = this.baseUrl + "/api/CureDaTemp/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter3(_response));
        });
    }

    protected processFilter3(response: AxiosResponse): Promise<CureDaTempResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaTempResult.fromJS(resultData200);
            return Promise.resolve<CureDaTempResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaTempResult>(null as any);
    }

    /**
     * 临时透析医嘱 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureDaTempPOST2(body: CureDaTempViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaTemp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaTempPOST2(_response));
        });
    }

    protected processCureDaTempPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 临时透析医嘱 -- 根据Id删除数据
     * @return Success
     */
    delete3(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaTemp/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete3(_response));
        });
    }

    protected processDelete3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureDaVoidedServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 作废医嘱 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureDaVoidedGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureDaVoidedResultEntry> {
        let url_ = this.baseUrl + "/api/CureDaVoided/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaVoidedGET(_response));
        });
    }

    protected processCureDaVoidedGET(response: AxiosResponse): Promise<CureDaVoidedResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaVoidedResultEntry.fromJS(resultData200);
            return Promise.resolve<CureDaVoidedResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaVoidedResultEntry>(null as any);
    }

    /**
     * 作废医嘱 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureDaVoidedPOST(id: string, body: CureDaVoidedEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaVoided/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaVoidedPOST(_response));
        });
    }

    protected processCureDaVoidedPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 作废医嘱 -- 根据条件查询数据
     * @param filter (optional)
     * @param patientName (optional)
     * @return Success
     */
    filter4(filter: string | undefined, patientName: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaVoidedCustomViewResult> {
        let url_ = this.baseUrl + "/api/CureDaVoided/Filter?";
        if (patientName === null)
            throw new Error("The parameter 'patientName' cannot be null.");
        else if (patientName !== undefined)
            url_ += "patientName=" + encodeURIComponent("" + patientName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter4(_response));
        });
    }

    protected processFilter4(response: AxiosResponse): Promise<CureDaVoidedCustomViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaVoidedCustomViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaVoidedCustomViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaVoidedCustomViewResult>(null as any);
    }

    /**
     * 作废医嘱 -- 根据条件查询数据
     * @param filter (optional)
     * @param recordId (optional)
     * @return Success
     */
    getByRecordId(filter: string | undefined, recordId: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaVoidedCustomViewResult> {
        let url_ = this.baseUrl + "/api/CureDaVoided/GetByRecordId?";
        if (recordId === null)
            throw new Error("The parameter 'recordId' cannot be null.");
        else if (recordId !== undefined)
            url_ += "recordId=" + encodeURIComponent("" + recordId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByRecordId(_response));
        });
    }

    protected processGetByRecordId(response: AxiosResponse): Promise<CureDaVoidedCustomViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaVoidedCustomViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaVoidedCustomViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaVoidedCustomViewResult>(null as any);
    }

    /**
     * 作废医嘱 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureDaVoidedPOST2(body: CureDaVoidedEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaVoided";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaVoidedPOST2(_response));
        });
    }

    protected processCureDaVoidedPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 作废医嘱 -- 根据Id删除数据
     * @return Success
     */
    delete4(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaVoided/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete4(_response));
        });
    }

    protected processDelete4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureInformationAntihypertensiveAgentsServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 抗高血压药治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureInformationAntihypertensiveAgentsGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureInformationAntihypertensiveAgentsViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureInformationAntihypertensiveAgents/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationAntihypertensiveAgentsGET(_response));
        });
    }

    protected processCureInformationAntihypertensiveAgentsGET(response: AxiosResponse): Promise<CureInformationAntihypertensiveAgentsViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationAntihypertensiveAgentsViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureInformationAntihypertensiveAgentsViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationAntihypertensiveAgentsViewResultEntry>(null as any);
    }

    /**
     * 抗高血压药治疗信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureInformationAntihypertensiveAgentsPOST(id: string, body: CureInformationAntihypertensiveAgentsEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationAntihypertensiveAgents/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationAntihypertensiveAgentsPOST(_response));
        });
    }

    protected processCureInformationAntihypertensiveAgentsPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 抗高血压药治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @param filter (optional)
     * @return Success
     */
    getByParentId(pareintId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationAntihypertensiveAgentsViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationAntihypertensiveAgents/GetByParentId/{pareintId}";
        if (pareintId === undefined || pareintId === null)
            throw new Error("The parameter 'pareintId' must be defined.");
        url_ = url_.replace("{pareintId}", encodeURIComponent("" + pareintId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByParentId(_response));
        });
    }

    protected processGetByParentId(response: AxiosResponse): Promise<CureInformationAntihypertensiveAgentsViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationAntihypertensiveAgentsViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationAntihypertensiveAgentsViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationAntihypertensiveAgentsViewResult>(null as any);
    }

    /**
     * 抗高血压药治疗信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter5(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationAntihypertensiveAgentsViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationAntihypertensiveAgents/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter5(_response));
        });
    }

    protected processFilter5(response: AxiosResponse): Promise<CureInformationAntihypertensiveAgentsViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationAntihypertensiveAgentsViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationAntihypertensiveAgentsViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationAntihypertensiveAgentsViewResult>(null as any);
    }

    /**
     * 抗高血压药治疗信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureInformationAntihypertensiveAgentsPOST2(body: CureInformationAntihypertensiveAgentsEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationAntihypertensiveAgents";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationAntihypertensiveAgentsPOST2(_response));
        });
    }

    protected processCureInformationAntihypertensiveAgentsPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 抗高血压药治疗信息 -- 根据Id删除数据
     * @return Success
     */
    delete5(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationAntihypertensiveAgents/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete5(_response));
        });
    }

    protected processDelete5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureInformationChalybeateServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 铁剂治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureInformationChalybeateGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureInformationChalybeateViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureInformationChalybeate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationChalybeateGET(_response));
        });
    }

    protected processCureInformationChalybeateGET(response: AxiosResponse): Promise<CureInformationChalybeateViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationChalybeateViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureInformationChalybeateViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationChalybeateViewResultEntry>(null as any);
    }

    /**
     * 铁剂治疗信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureInformationChalybeatePOST(id: string, body: CureInformationChalybeateEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationChalybeate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationChalybeatePOST(_response));
        });
    }

    protected processCureInformationChalybeatePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 铁剂治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @param filter (optional)
     * @return Success
     */
    getByParentId2(pareintId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationChalybeateViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationChalybeate/GetByParentId/{pareintId}";
        if (pareintId === undefined || pareintId === null)
            throw new Error("The parameter 'pareintId' must be defined.");
        url_ = url_.replace("{pareintId}", encodeURIComponent("" + pareintId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByParentId2(_response));
        });
    }

    protected processGetByParentId2(response: AxiosResponse): Promise<CureInformationChalybeateViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationChalybeateViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationChalybeateViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationChalybeateViewResult>(null as any);
    }

    /**
     * 铁剂治疗信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter6(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationChalybeateViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationChalybeate/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter6(_response));
        });
    }

    protected processFilter6(response: AxiosResponse): Promise<CureInformationChalybeateViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationChalybeateViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationChalybeateViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationChalybeateViewResult>(null as any);
    }

    /**
     * 铁剂治疗信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureInformationChalybeatePOST2(body: CureInformationChalybeateEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationChalybeate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationChalybeatePOST2(_response));
        });
    }

    protected processCureInformationChalybeatePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 铁剂治疗信息 -- 根据Id删除数据
     * @return Success
     */
    delete6(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationChalybeate/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete6(_response));
        });
    }

    protected processDelete6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureInformationEsaServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * esa治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureInformationEsaGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureInformationEsaViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureInformationEsa/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationEsaGET(_response));
        });
    }

    protected processCureInformationEsaGET(response: AxiosResponse): Promise<CureInformationEsaViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationEsaViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureInformationEsaViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationEsaViewResultEntry>(null as any);
    }

    /**
     * esa治疗信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureInformationEsaPOST(id: string, body: CureInformationEsaEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationEsa/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationEsaPOST(_response));
        });
    }

    protected processCureInformationEsaPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * esa治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @param filter (optional)
     * @return Success
     */
    getByParentId3(pareintId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationEsaViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationEsa/GetByParentId/{pareintId}";
        if (pareintId === undefined || pareintId === null)
            throw new Error("The parameter 'pareintId' must be defined.");
        url_ = url_.replace("{pareintId}", encodeURIComponent("" + pareintId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByParentId3(_response));
        });
    }

    protected processGetByParentId3(response: AxiosResponse): Promise<CureInformationEsaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationEsaViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationEsaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationEsaViewResult>(null as any);
    }

    /**
     * esa治疗信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter7(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationEsaViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationEsa/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter7(_response));
        });
    }

    protected processFilter7(response: AxiosResponse): Promise<CureInformationEsaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationEsaViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationEsaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationEsaViewResult>(null as any);
    }

    /**
     * esa治疗信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureInformationEsaPOST2(body: CureInformationEsaEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationEsa";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationEsaPOST2(_response));
        });
    }

    protected processCureInformationEsaPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * esa治疗信息 -- 根据Id删除数据
     * @return Success
     */
    delete7(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationEsa/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete7(_response));
        });
    }

    protected processDelete7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureInformationMbdServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * MBD干预药治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureInformationMbdGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureInformationMbdViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureInformationMbd/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationMbdGET(_response));
        });
    }

    protected processCureInformationMbdGET(response: AxiosResponse): Promise<CureInformationMbdViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationMbdViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureInformationMbdViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationMbdViewResultEntry>(null as any);
    }

    /**
     * MBD干预药治疗信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureInformationMbdPOST(id: string, body: CureInformationMbdEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationMbd/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationMbdPOST(_response));
        });
    }

    protected processCureInformationMbdPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * MBD干预药治疗信息 -- 根据条件查询数据
     * @param filter (optional)
     * @return Success
     */
    getByParentId4(pareintId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationMbdViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationMbd/GetByParentId/{pareintId}";
        if (pareintId === undefined || pareintId === null)
            throw new Error("The parameter 'pareintId' must be defined.");
        url_ = url_.replace("{pareintId}", encodeURIComponent("" + pareintId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByParentId4(_response));
        });
    }

    protected processGetByParentId4(response: AxiosResponse): Promise<CureInformationMbdViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationMbdViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationMbdViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationMbdViewResult>(null as any);
    }

    /**
     * MBD干预药治疗信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter8(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationMbdViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationMbd/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter8(_response));
        });
    }

    protected processFilter8(response: AxiosResponse): Promise<CureInformationMbdViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationMbdViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationMbdViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationMbdViewResult>(null as any);
    }

    /**
     * MBD干预药治疗信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureInformationMbdPOST2(body: CureInformationMbdEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationMbd";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationMbdPOST2(_response));
        });
    }

    protected processCureInformationMbdPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * MBD干预药治疗信息 -- 根据Id删除数据
     * @return Success
     */
    delete8(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationMbd/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete8(_response));
        });
    }

    protected processDelete8(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureInformationOtherServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 其他药物治疗信息治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureInformationOtherGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureInformationOtherViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureInformationOther/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationOtherGET(_response));
        });
    }

    protected processCureInformationOtherGET(response: AxiosResponse): Promise<CureInformationOtherViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationOtherViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureInformationOtherViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationOtherViewResultEntry>(null as any);
    }

    /**
     * 其他药物治疗信息治疗信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureInformationOtherPOST(id: string, body: CureInformationOtherEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationOther/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationOtherPOST(_response));
        });
    }

    protected processCureInformationOtherPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他药物治疗信息治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @param filter (optional)
     * @return Success
     */
    getByParentId5(pareintId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationOtherViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationOther/GetByParentId/{pareintId}";
        if (pareintId === undefined || pareintId === null)
            throw new Error("The parameter 'pareintId' must be defined.");
        url_ = url_.replace("{pareintId}", encodeURIComponent("" + pareintId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByParentId5(_response));
        });
    }

    protected processGetByParentId5(response: AxiosResponse): Promise<CureInformationOtherViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationOtherViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationOtherViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationOtherViewResult>(null as any);
    }

    /**
     * 其他药物治疗信息治疗信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter9(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationOtherViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationOther/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter9(_response));
        });
    }

    protected processFilter9(response: AxiosResponse): Promise<CureInformationOtherViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationOtherViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationOtherViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationOtherViewResult>(null as any);
    }

    /**
     * 其他药物治疗信息治疗信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureInformationOtherPOST2(body: CureInformationOtherEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationOther";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationOtherPOST2(_response));
        });
    }

    protected processCureInformationOtherPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他药物治疗信息治疗信息 -- 根据Id删除数据
     * @return Success
     */
    delete9(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationOther/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete9(_response));
        });
    }

    protected processDelete9(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureInformationOtherDataServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 其他药物治疗信息资料 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureInformationOtherDataGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureInformationOtherDataViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureInformationOtherData/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationOtherDataGET(_response));
        });
    }

    protected processCureInformationOtherDataGET(response: AxiosResponse): Promise<CureInformationOtherDataViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationOtherDataViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureInformationOtherDataViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationOtherDataViewResultEntry>(null as any);
    }

    /**
     * 其他药物治疗信息资料 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureInformationOtherDataPOST(id: string, body: CureInformationOtherDataEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationOtherData/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationOtherDataPOST(_response));
        });
    }

    protected processCureInformationOtherDataPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他药物治疗信息资料 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter10(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationOtherDataViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationOtherData/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter10(_response));
        });
    }

    protected processFilter10(response: AxiosResponse): Promise<CureInformationOtherDataViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationOtherDataViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationOtherDataViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationOtherDataViewResult>(null as any);
    }

    /**
     * 其他药物治疗信息资料 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureInformationOtherDataPOST2(body: CureInformationOtherDataEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationOtherData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationOtherDataPOST2(_response));
        });
    }

    protected processCureInformationOtherDataPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他药物治疗信息资料 -- 根据Id删除数据
     * @return Success
     */
    delete10(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationOtherData/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete10(_response));
        });
    }

    protected processDelete10(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析过程记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureLogResultEntry> {
        let url_ = this.baseUrl + "/api/CureLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureLogGET(_response));
        });
    }

    protected processCureLogGET(response: AxiosResponse): Promise<CureLogResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureLogResultEntry.fromJS(resultData200);
            return Promise.resolve<CureLogResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureLogResultEntry>(null as any);
    }

    /**
     * 透析过程记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureLogPOST(id: string, body: CureLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureLogPOST(_response));
        });
    }

    protected processCureLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析过程记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter11(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureLogResult> {
        let url_ = this.baseUrl + "/api/CureLog/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter11(_response));
        });
    }

    protected processFilter11(response: AxiosResponse): Promise<CureLogResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureLogResult.fromJS(resultData200);
            return Promise.resolve<CureLogResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureLogResult>(null as any);
    }

    /**
     * 透析过程记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureLogPOST2(body: CureLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureLogPOST2(_response));
        });
    }

    protected processCureLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析过程记录 -- 根据Id删除数据
     * @return Success
     */
    delete11(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete11(_response));
        });
    }

    protected processDelete11(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureLogFileServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析过程记录照片 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureLogFileGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureLogFileResultEntry> {
        let url_ = this.baseUrl + "/api/CureLogFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureLogFileGET(_response));
        });
    }

    protected processCureLogFileGET(response: AxiosResponse): Promise<CureLogFileResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureLogFileResultEntry.fromJS(resultData200);
            return Promise.resolve<CureLogFileResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureLogFileResultEntry>(null as any);
    }

    /**
     * 透析过程记录照片 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureLogFilePOST(id: string, body: CureLogFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureLogFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureLogFilePOST(_response));
        });
    }

    protected processCureLogFilePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析过程记录照片 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter12(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureLogFileResult> {
        let url_ = this.baseUrl + "/api/CureLogFile/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter12(_response));
        });
    }

    protected processFilter12(response: AxiosResponse): Promise<CureLogFileResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureLogFileResult.fromJS(resultData200);
            return Promise.resolve<CureLogFileResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureLogFileResult>(null as any);
    }

    /**
     * 透析过程记录照片 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureLogFilePOST2(body: CureLogFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureLogFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureLogFilePOST2(_response));
        });
    }

    protected processCureLogFilePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析过程记录照片 -- 根据Id删除数据
     * @return Success
     */
    delete12(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureLogFile/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete12(_response));
        });
    }

    protected processDelete12(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureOrderShiftServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析排班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureOrderShiftGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureBedPatientDetailResultEntry> {
        let url_ = this.baseUrl + "/api/CureOrderShift/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureOrderShiftGET(_response));
        });
    }

    protected processCureOrderShiftGET(response: AxiosResponse): Promise<CureBedPatientDetailResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureBedPatientDetailResultEntry.fromJS(resultData200);
            return Promise.resolve<CureBedPatientDetailResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureBedPatientDetailResultEntry>(null as any);
    }

    /**
     * 透析排班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureOrderShiftPOST(id: string, body: CureOrderShiftEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShift/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureOrderShiftPOST(_response));
        });
    }

    protected processCureOrderShiftPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter13(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureOrderShiftViewResult> {
        let url_ = this.baseUrl + "/api/CureOrderShift/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter13(_response));
        });
    }

    protected processFilter13(response: AxiosResponse): Promise<CureOrderShiftViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureOrderShiftViewResult.fromJS(resultData200);
            return Promise.resolve<CureOrderShiftViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureOrderShiftViewResult>(null as any);
    }

    /**
     * 透析排床 -- 根据日期、班次、透析区间查询数据
     * @param areaId (optional)
     * @param date (optional)
     * @param key (optional)
     * @param filter (optional)
     * @return Success
     */
    queryPatient(areaId: string | undefined, date: string | undefined, key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShift/QueryPatient?";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryPatient(_response));
        });
    }

    protected processQueryPatient(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureOrderShiftPOST2(body: CureOrderShiftEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShift";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureOrderShiftPOST2(_response));
        });
    }

    protected processCureOrderShiftPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班另存为模板
     * @param body (optional)
     * @return Success
     */
    save(body: CureScheduleSaveEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShift/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSave(_response));
        });
    }

    protected processSave(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班 -- 根据Id删除数据
     * @return Success
     */
    delete13(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShift/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete13(_response));
        });
    }

    protected processDelete13(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureOrderShiftConsumableServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析排班耗材 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureOrderShiftConsumableGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureOrderShiftConsumableViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureOrderShiftConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureOrderShiftConsumableGET(_response));
        });
    }

    protected processCureOrderShiftConsumableGET(response: AxiosResponse): Promise<CureOrderShiftConsumableViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureOrderShiftConsumableViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureOrderShiftConsumableViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureOrderShiftConsumableViewResultEntry>(null as any);
    }

    /**
     * 透析排班耗材 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureOrderShiftConsumablePOST(id: string, body: CureOrderShiftConsumableEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShiftConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureOrderShiftConsumablePOST(_response));
        });
    }

    protected processCureOrderShiftConsumablePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班耗材 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter14(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureOrderShiftConsumableViewResult> {
        let url_ = this.baseUrl + "/api/CureOrderShiftConsumable/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter14(_response));
        });
    }

    protected processFilter14(response: AxiosResponse): Promise<CureOrderShiftConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureOrderShiftConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<CureOrderShiftConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureOrderShiftConsumableViewResult>(null as any);
    }

    /**
     * 透析排班耗材 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureOrderShiftConsumablePOST2(body: CureOrderShiftConsumableEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShiftConsumable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureOrderShiftConsumablePOST2(_response));
        });
    }

    protected processCureOrderShiftConsumablePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班耗材 -- 根据Id删除数据
     * @return Success
     */
    delete14(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShiftConsumable/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete14(_response));
        });
    }

    protected processDelete14(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CurePrescriptionServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者处方 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    curePrescriptionGET(id: string , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionViewResultEntry> {
        let url_ = this.baseUrl + "/api/CurePrescription/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionGET(_response));
        });
    }

    protected processCurePrescriptionGET(response: AxiosResponse): Promise<CurePrescriptionViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionViewResultEntry>(null as any);
    }

    /**
     * 患者处方 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    curePrescriptionPOST(id: string, body: CurePrescriptionEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescription/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionPOST(_response));
        });
    }

    protected processCurePrescriptionPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者处方 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter15(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionViewResult> {
        let url_ = this.baseUrl + "/api/CurePrescription/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter15(_response));
        });
    }

    protected processFilter15(response: AxiosResponse): Promise<CurePrescriptionViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionViewResult.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionViewResult>(null as any);
    }

    /**
     * 患者处方 -- 查询患者首选处方耗材
     * @param patientId (optional) 患者标识
     * @param dialysisMode (optional) 透析方式
     * @param dialysisData (optional) 透析日期（yyyy-MM-dd）
     * @return Success
     */
    defaultConsumable(patientId: string | undefined, dialysisMode: string | undefined, dialysisData: string | undefined , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionConsumableViewResultEntry> {
        let url_ = this.baseUrl + "/api/CurePrescription/DefaultConsumable?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (dialysisMode === null)
            throw new Error("The parameter 'dialysisMode' cannot be null.");
        else if (dialysisMode !== undefined)
            url_ += "dialysisMode=" + encodeURIComponent("" + dialysisMode) + "&";
        if (dialysisData === null)
            throw new Error("The parameter 'dialysisData' cannot be null.");
        else if (dialysisData !== undefined)
            url_ += "dialysisData=" + encodeURIComponent("" + dialysisData) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDefaultConsumable(_response));
        });
    }

    protected processDefaultConsumable(response: AxiosResponse): Promise<CurePrescriptionConsumableViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionConsumableViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionConsumableViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionConsumableViewResultEntry>(null as any);
    }

    /**
     * 患者处方 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    curePrescriptionPOST2(body: CurePrescriptionEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescription";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionPOST2(_response));
        });
    }

    protected processCurePrescriptionPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者处方 -- 根据Id删除数据
     * @return Success
     */
    delete15(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescription/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete15(_response));
        });
    }

    protected processDelete15(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CurePrescriptionConsumableServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者处方耗材 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    curePrescriptionConsumableGET(id: string , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionConsumableResultEntry> {
        let url_ = this.baseUrl + "/api/CurePrescriptionConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionConsumableGET(_response));
        });
    }

    protected processCurePrescriptionConsumableGET(response: AxiosResponse): Promise<CurePrescriptionConsumableResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionConsumableResultEntry.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionConsumableResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionConsumableResultEntry>(null as any);
    }

    /**
     * 患者处方耗材 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    curePrescriptionConsumablePOST(id: string, body: CurePrescriptionConsumableViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescriptionConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionConsumablePOST(_response));
        });
    }

    protected processCurePrescriptionConsumablePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者处方耗材 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter16(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionConsumableResult> {
        let url_ = this.baseUrl + "/api/CurePrescriptionConsumable/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter16(_response));
        });
    }

    protected processFilter16(response: AxiosResponse): Promise<CurePrescriptionConsumableResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionConsumableResult.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionConsumableResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionConsumableResult>(null as any);
    }

    /**
     * 患者处方耗材 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    curePrescriptionConsumablePOST2(body: CurePrescriptionConsumableViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescriptionConsumable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionConsumablePOST2(_response));
        });
    }

    protected processCurePrescriptionConsumablePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者处方耗材 -- 根据Id删除数据
     * @return Success
     */
    delete16(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescriptionConsumable/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete16(_response));
        });
    }

    protected processDelete16(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CurePrescriptionDrugServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者处方药品 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    curePrescriptionDrugGET(id: string , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionDrugViewResultEntry> {
        let url_ = this.baseUrl + "/api/CurePrescriptionDrug/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionDrugGET(_response));
        });
    }

    protected processCurePrescriptionDrugGET(response: AxiosResponse): Promise<CurePrescriptionDrugViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionDrugViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionDrugViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionDrugViewResultEntry>(null as any);
    }

    /**
     * 患者处方药品 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    curePrescriptionDrugPOST(id: string, body: CurePrescriptionDrugEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescriptionDrug/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionDrugPOST(_response));
        });
    }

    protected processCurePrescriptionDrugPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者处方药品 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter17(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionDrugViewResult> {
        let url_ = this.baseUrl + "/api/CurePrescriptionDrug/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter17(_response));
        });
    }

    protected processFilter17(response: AxiosResponse): Promise<CurePrescriptionDrugViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionDrugViewResult.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionDrugViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionDrugViewResult>(null as any);
    }

    /**
     * 患者处方药品 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    curePrescriptionDrugPOST2(body: CurePrescriptionDrugEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescriptionDrug";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionDrugPOST2(_response));
        });
    }

    protected processCurePrescriptionDrugPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者处方药品 -- 根据Id删除数据
     * @return Success
     */
    delete17(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescriptionDrug/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete17(_response));
        });
    }

    protected processDelete17(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureProgressNoteServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析病程记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureProgressNoteGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureProgressNoteViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureProgressNote/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureProgressNoteGET(_response));
        });
    }

    protected processCureProgressNoteGET(response: AxiosResponse): Promise<CureProgressNoteViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureProgressNoteViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureProgressNoteViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureProgressNoteViewResultEntry>(null as any);
    }

    /**
     * 透析病程记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureProgressNotePOST(id: string, body: CureProgressNoteEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureProgressNote/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureProgressNotePOST(_response));
        });
    }

    protected processCureProgressNotePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析病程记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter18(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureProgressNoteViewResult> {
        let url_ = this.baseUrl + "/api/CureProgressNote/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter18(_response));
        });
    }

    protected processFilter18(response: AxiosResponse): Promise<CureProgressNoteViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureProgressNoteViewResult.fromJS(resultData200);
            return Promise.resolve<CureProgressNoteViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureProgressNoteViewResult>(null as any);
    }

    /**
     * 透析病程记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureProgressNotePOST2(body: CureProgressNoteEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureProgressNote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureProgressNotePOST2(_response));
        });
    }

    protected processCureProgressNotePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析病程记录 -- 根据Id删除数据
     * @return Success
     */
    delete18(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureProgressNote/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete18(_response));
        });
    }

    protected processDelete18(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    cureRecordGET(id: string, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecord/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordGET(_response));
        });
    }

    protected processCureRecordGET(response: AxiosResponse): Promise<CureRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordViewResultEntry>(null as any);
    }

    /**
     * 透析记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordPOST(id: string, body: CureRecordViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordPOST(_response));
        });
    }

    protected processCureRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码 *选填
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    filter19(filter: string | undefined, key: string | undefined, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordViewResult> {
        let url_ = this.baseUrl + "/api/CureRecord/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter19(_response));
        });
    }

    protected processFilter19(response: AxiosResponse): Promise<CureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordViewResult>(null as any);
    }

    /**
     * 电子病历透析记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码 *选填
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    patientCureFilter(filter: string | undefined, key: string | undefined, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordViewResult> {
        let url_ = this.baseUrl + "/api/CureRecord/PatientCureFilter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientCureFilter(_response));
        });
    }

    protected processPatientCureFilter(response: AxiosResponse): Promise<CureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordViewResult>(null as any);
    }

    /**
     * 透析记录 -- 透析日志导出
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码 *选填
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    export(filter: string | undefined, key: string | undefined, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecord/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport(_response));
        });
    }

    protected processExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录 -- 获取可以作为标签的字段名
     * @return Success
     */
    tag(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecord/Tag";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTag(_response));
        });
    }

    protected processTag(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录 -- 根据条件查询数据
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    file(id: string, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordFileViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecord/File/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFile(_response));
        });
    }

    protected processFile(response: AxiosResponse): Promise<CureRecordFileViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordFileViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordFileViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordFileViewResultEntry>(null as any);
    }

    /**
     * 透析记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码 *选填
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    filesGET(filter: string | undefined, key: string | undefined, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordFileViewResult> {
        let url_ = this.baseUrl + "/api/CureRecord/Files?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilesGET(_response));
        });
    }

    protected processFilesGET(response: AxiosResponse): Promise<CureRecordFileViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordFileViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordFileViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordFileViewResult>(null as any);
    }

    /**
     * 透析记录 -- 预览
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码 *选填
     * @param print (optional) 为1时，签名显示生效
     * @param body (optional) 透析记录单模板(预览时使用)
     * @return Success
     */
    filesPOST(filter: string | undefined, key: string | undefined, print: number | undefined, body: TmplCureRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordFileViewResult> {
        let url_ = this.baseUrl + "/api/CureRecord/Files?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilesPOST(_response));
        });
    }

    protected processFilesPOST(response: AxiosResponse): Promise<CureRecordFileViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordFileViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordFileViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordFileViewResult>(null as any);
    }

    /**
     * 透析记录 -- 操作归档
     * @param archived 0：解除归档 1：手动归档
     * @param body (optional)
     * @return Success
     */
    archived(archived: number, body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecord/Archived/{archived}";
        if (archived === undefined || archived === null)
            throw new Error("The parameter 'archived' must be defined.");
        url_ = url_.replace("{archived}", encodeURIComponent("" + archived));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processArchived(_response));
        });
    }

    protected processArchived(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordAnticoagulantServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者透析抗凝剂 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordAnticoagulantGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordAnticoagulantViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulant/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordAnticoagulantGET(_response));
        });
    }

    protected processCureRecordAnticoagulantGET(response: AxiosResponse): Promise<CureRecordAnticoagulantViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordAnticoagulantViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordAnticoagulantViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordAnticoagulantViewResultEntry>(null as any);
    }

    /**
     * 患者透析抗凝剂 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordAnticoagulantPOST(id: string, body: CureRecordAnticoagulantViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulant/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordAnticoagulantPOST(_response));
        });
    }

    protected processCureRecordAnticoagulantPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析抗凝剂 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter20(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordAnticoagulantViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulant/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter20(_response));
        });
    }

    protected processFilter20(response: AxiosResponse): Promise<CureRecordAnticoagulantViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordAnticoagulantViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordAnticoagulantViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordAnticoagulantViewResult>(null as any);
    }

    /**
     * 患者透析抗凝剂 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordAnticoagulantPOST2(body: CureRecordAnticoagulantViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordAnticoagulantPOST2(_response));
        });
    }

    protected processCureRecordAnticoagulantPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析抗凝剂 -- 根据Id删除数据
     * @return Success
     */
    delete19(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulant/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete19(_response));
        });
    }

    protected processDelete19(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordAnticoagulantDrugServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者透析抗凝剂药品 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordAnticoagulantDrugGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordAnticoagulantDrugViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulantDrug/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordAnticoagulantDrugGET(_response));
        });
    }

    protected processCureRecordAnticoagulantDrugGET(response: AxiosResponse): Promise<CureRecordAnticoagulantDrugViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordAnticoagulantDrugViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordAnticoagulantDrugViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordAnticoagulantDrugViewResultEntry>(null as any);
    }

    /**
     * 患者透析抗凝剂药品 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordAnticoagulantDrugPOST(id: string, body: CureRecordAnticoagulantDrugEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulantDrug/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordAnticoagulantDrugPOST(_response));
        });
    }

    protected processCureRecordAnticoagulantDrugPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析抗凝剂药品 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter21(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordAnticoagulantDrugViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulantDrug/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter21(_response));
        });
    }

    protected processFilter21(response: AxiosResponse): Promise<CureRecordAnticoagulantDrugViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordAnticoagulantDrugViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordAnticoagulantDrugViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordAnticoagulantDrugViewResult>(null as any);
    }

    /**
     * 患者透析抗凝剂药品 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordAnticoagulantDrugPOST2(body: CureRecordAnticoagulantDrugEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulantDrug";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordAnticoagulantDrugPOST2(_response));
        });
    }

    protected processCureRecordAnticoagulantDrugPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析抗凝剂药品 -- 根据Id删除数据
     * @return Success
     */
    delete20(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulantDrug/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete20(_response));
        });
    }

    protected processDelete20(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordChangeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析记录修改记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordChangeGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordChangeViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordChange/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordChangeGET(_response));
        });
    }

    protected processCureRecordChangeGET(response: AxiosResponse): Promise<CureRecordChangeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordChangeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordChangeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordChangeViewResultEntry>(null as any);
    }

    /**
     * 透析记录修改记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordChangePOST(id: string, body: CureRecordChangeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordChange/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordChangePOST(_response));
        });
    }

    protected processCureRecordChangePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录修改记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter22(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordChangeViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordChange/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter22(_response));
        });
    }

    protected processFilter22(response: AxiosResponse): Promise<CureRecordChangeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordChangeViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordChangeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordChangeViewResult>(null as any);
    }

    /**
     * 透析记录修改记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordChangePOST2(body: CureRecordChangeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordChange";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordChangePOST2(_response));
        });
    }

    protected processCureRecordChangePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录修改记录 -- 根据Id删除数据
     * @return Success
     */
    delete21(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordChange/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete21(_response));
        });
    }

    protected processDelete21(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordConsumableServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析耗材 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordConsumableGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordConsumableResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordConsumableGET(_response));
        });
    }

    protected processCureRecordConsumableGET(response: AxiosResponse): Promise<CureRecordConsumableResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordConsumableResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordConsumableResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordConsumableResultEntry>(null as any);
    }

    /**
     * 透析耗材 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordConsumablePOST(id: string, body: CureRecordConsumableViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordConsumablePOST(_response));
        });
    }

    protected processCureRecordConsumablePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析耗材 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter23(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordConsumableResult> {
        let url_ = this.baseUrl + "/api/CureRecordConsumable/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter23(_response));
        });
    }

    protected processFilter23(response: AxiosResponse): Promise<CureRecordConsumableResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordConsumableResult.fromJS(resultData200);
            return Promise.resolve<CureRecordConsumableResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordConsumableResult>(null as any);
    }

    /**
     * 透析耗材 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordConsumablePOST2(body: CureRecordConsumableViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordConsumable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordConsumablePOST2(_response));
        });
    }

    protected processCureRecordConsumablePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析耗材 -- 根据Id删除数据
     * @return Success
     */
    delete22(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordConsumable/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete22(_response));
        });
    }

    protected processDelete22(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordConsumableItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析耗材 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordConsumableItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordConsumableItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordConsumableItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordConsumableItemGET(_response));
        });
    }

    protected processCureRecordConsumableItemGET(response: AxiosResponse): Promise<CureRecordConsumableItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordConsumableItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordConsumableItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordConsumableItemViewResultEntry>(null as any);
    }

    /**
     * 透析耗材 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordConsumableItemPOST(id: string, body: CureRecordConsumableItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordConsumableItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordConsumableItemPOST(_response));
        });
    }

    protected processCureRecordConsumableItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析耗材 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter24(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordConsumableItemViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordConsumableItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter24(_response));
        });
    }

    protected processFilter24(response: AxiosResponse): Promise<CureRecordConsumableItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordConsumableItemViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordConsumableItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordConsumableItemViewResult>(null as any);
    }

    /**
     * 透析耗材 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordConsumableItemPOST2(body: CureRecordConsumableItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordConsumableItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordConsumableItemPOST2(_response));
        });
    }

    protected processCureRecordConsumableItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析耗材 -- 根据Id删除数据
     * @return Success
     */
    delete23(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordConsumableItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete23(_response));
        });
    }

    protected processDelete23(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordDialysateServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者透析透析液 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordDialysateGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordDialysateViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordDialysate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordDialysateGET(_response));
        });
    }

    protected processCureRecordDialysateGET(response: AxiosResponse): Promise<CureRecordDialysateViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordDialysateViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordDialysateViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordDialysateViewResultEntry>(null as any);
    }

    /**
     * 患者透析透析液 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordDialysatePOST(id: string, body: CureRecordDialysateViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordDialysate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordDialysatePOST(_response));
        });
    }

    protected processCureRecordDialysatePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析透析液 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter25(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordDialysateViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordDialysate/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter25(_response));
        });
    }

    protected processFilter25(response: AxiosResponse): Promise<CureRecordDialysateViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordDialysateViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordDialysateViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordDialysateViewResult>(null as any);
    }

    /**
     * 患者透析透析液 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordDialysatePOST2(body: CureRecordDialysateViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordDialysate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordDialysatePOST2(_response));
        });
    }

    protected processCureRecordDialysatePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析透析液 -- 根据Id删除数据
     * @return Success
     */
    delete24(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordDialysate/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete24(_response));
        });
    }

    protected processDelete24(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordFieldItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析记录自定义字段 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordFieldItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordFieldItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordFieldItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordFieldItemGET(_response));
        });
    }

    protected processCureRecordFieldItemGET(response: AxiosResponse): Promise<CureRecordFieldItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordFieldItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordFieldItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordFieldItemViewResultEntry>(null as any);
    }

    /**
     * 透析记录自定义字段 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordFieldItemPOST(id: string, body: CureRecordFieldItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordFieldItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordFieldItemPOST(_response));
        });
    }

    protected processCureRecordFieldItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录自定义字段 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter26(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordFieldItemViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordFieldItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter26(_response));
        });
    }

    protected processFilter26(response: AxiosResponse): Promise<CureRecordFieldItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordFieldItemViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordFieldItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordFieldItemViewResult>(null as any);
    }

    /**
     * 透析记录自定义字段 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordFieldItemPOST2(body: CureRecordFieldItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordFieldItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordFieldItemPOST2(_response));
        });
    }

    protected processCureRecordFieldItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录自定义字段 -- 根据Id删除数据
     * @return Success
     */
    delete25(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordFieldItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete25(_response));
        });
    }

    protected processDelete25(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析记录修改记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordLogGET(_response));
        });
    }

    protected processCureRecordLogGET(response: AxiosResponse): Promise<CureRecordLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordLogViewResultEntry>(null as any);
    }

    /**
     * 透析记录修改记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordLogPOST(id: string, body: CureRecordLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordLogPOST(_response));
        });
    }

    protected processCureRecordLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录修改记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter27(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordLogViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordLog/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter27(_response));
        });
    }

    protected processFilter27(response: AxiosResponse): Promise<CureRecordLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordLogViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordLogViewResult>(null as any);
    }

    /**
     * 透析记录修改记录 -- 根据透析记录单标识查询拒绝处方数据
     * @param cureRecordId 透析记录单标识
     * @return Success
     */
    prescription(cureRecordId: string , cancelToken?: CancelToken | undefined): Promise<CureRecordLogViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordLog/Prescription/{cureRecordId}";
        if (cureRecordId === undefined || cureRecordId === null)
            throw new Error("The parameter 'cureRecordId' must be defined.");
        url_ = url_.replace("{cureRecordId}", encodeURIComponent("" + cureRecordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrescription(_response));
        });
    }

    protected processPrescription(response: AxiosResponse): Promise<CureRecordLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordLogViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordLogViewResult>(null as any);
    }

    /**
     * 透析记录修改记录 -- 根据透析记录单标识查询异常交叉核对数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    verify(cureRecordId: string , cancelToken?: CancelToken | undefined): Promise<CureRecordLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordLog/Verify/{cureRecordId}";
        if (cureRecordId === undefined || cureRecordId === null)
            throw new Error("The parameter 'cureRecordId' must be defined.");
        url_ = url_.replace("{cureRecordId}", encodeURIComponent("" + cureRecordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processVerify(_response));
        });
    }

    protected processVerify(response: AxiosResponse): Promise<CureRecordLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordLogViewResultEntry>(null as any);
    }

    /**
     * 透析记录修改记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordLogPOST2(body: CureRecordLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordLogPOST2(_response));
        });
    }

    protected processCureRecordLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录修改记录 -- 根据Id删除数据
     * @return Success
     */
    delete26(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete26(_response));
        });
    }

    protected processDelete26(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordSignatureServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者透析签名 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordSignatureGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordSignatureViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordSignatureGET(_response));
        });
    }

    protected processCureRecordSignatureGET(response: AxiosResponse): Promise<CureRecordSignatureViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordSignatureViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordSignatureViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordSignatureViewResultEntry>(null as any);
    }

    /**
     * 患者透析签名 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordSignaturePOST(id: string, body: CureRecordSignatureEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordSignaturePOST(_response));
        });
    }

    protected processCureRecordSignaturePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析签名 -- 根据透析记录单Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordGET2(cureRecordId: string , cancelToken?: CancelToken | undefined): Promise<CureRecordSignatureViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/CureRecord/{cureRecordId}";
        if (cureRecordId === undefined || cureRecordId === null)
            throw new Error("The parameter 'cureRecordId' must be defined.");
        url_ = url_.replace("{cureRecordId}", encodeURIComponent("" + cureRecordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordGET2(_response));
        });
    }

    protected processCureRecordGET2(response: AxiosResponse): Promise<CureRecordSignatureViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordSignatureViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordSignatureViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordSignatureViewResultEntry>(null as any);
    }

    /**
     * 患者透析签名 -- 根据患者Id查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    patient(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordSignatureViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient(_response));
        });
    }

    protected processPatient(response: AxiosResponse): Promise<CureRecordSignatureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordSignatureViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordSignatureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordSignatureViewResult>(null as any);
    }

    /**
     * 患者透析签名 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter28(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordSignatureViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter28(_response));
        });
    }

    protected processFilter28(response: AxiosResponse): Promise<CureRecordSignatureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordSignatureViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordSignatureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordSignatureViewResult>(null as any);
    }

    /**
     * 患者透析签名 -- 激活签名板并签名
     * @return Success
     */
    penSign(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/PenSign";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPenSign(_response));
        });
    }

    protected processPenSign(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析签名 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordSignaturePOST2(body: CureRecordSignatureEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordSignature";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordSignaturePOST2(_response));
        });
    }

    protected processCureRecordSignaturePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析签名 -- 根据Id删除数据
     * @return Success
     */
    delete27(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete27(_response));
        });
    }

    protected processDelete27(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

/** 床位患者明细 */
export class CureBedPatientDetail implements ICureBedPatientDetail {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 区间标识 */
    dialysisAreaId?: string | undefined;
    /** 床位 */
    dialysisAreaName?: string | undefined;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    dossierNum?: string | undefined;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者是否阳性0,1 */
    patientPositive?: number;
    /** 透析方式 `DIC.DIALYSIS.MODE`  *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义颜色 */
    fontColor?: string | undefined;
    /** 字体颜色名称 */
    fontColorName?: string | undefined;
    /** 透析器标识 */
    dialyzerId?: string | undefined;
    /** 透析器名称 */
    dialyzerName?: string | undefined;
    /** 透析器数量 */
    dialyzerCount?: string | undefined;
    /** 血滤器标识 */
    filterId?: string | undefined;
    /** 血滤器名称 */
    filterName?: string | undefined;
    /** 血滤器数量 */
    filterCount?: string | undefined;
    /** 灌流器标识 */
    perfusionId?: string | undefined;
    /** 灌流器名称 */
    perfusionName?: string | undefined;
    /** 灌流器数量 */
    perfusionCount?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 抗凝剂类型 */
    anticoagulantName?: string | undefined;
    /** 剂量 */
    anticoagulantTotal?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;

    constructor(data?: ICureBedPatientDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.weekdayName = _data["weekdayName"];
            this.dossierNum = _data["dossierNum"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientPositive = _data["patientPositive"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeName = _data["dialysisModeName"];
            this.color = _data["color"];
            this.colorName = _data["colorName"];
            this.fontColor = _data["fontColor"];
            this.fontColorName = _data["fontColorName"];
            this.dialyzerId = _data["dialyzerId"];
            this.dialyzerName = _data["dialyzerName"];
            this.dialyzerCount = _data["dialyzerCount"];
            this.filterId = _data["filterId"];
            this.filterName = _data["filterName"];
            this.filterCount = _data["filterCount"];
            this.perfusionId = _data["perfusionId"];
            this.perfusionName = _data["perfusionName"];
            this.perfusionCount = _data["perfusionCount"];
            this.icon = _data["icon"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.remark = _data["remark"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.anticoagulantTotal = _data["anticoagulantTotal"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(CureCostGroupView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBedPatientDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureBedPatientDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["weekday"] = this.weekday;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["weekdayName"] = this.weekdayName;
        data["dossierNum"] = this.dossierNum;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientPositive"] = this.patientPositive;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeName"] = this.dialysisModeName;
        data["color"] = this.color;
        data["colorName"] = this.colorName;
        data["fontColor"] = this.fontColor;
        data["fontColorName"] = this.fontColorName;
        data["dialyzerId"] = this.dialyzerId;
        data["dialyzerName"] = this.dialyzerName;
        data["dialyzerCount"] = this.dialyzerCount;
        data["filterId"] = this.filterId;
        data["filterName"] = this.filterName;
        data["filterCount"] = this.filterCount;
        data["perfusionId"] = this.perfusionId;
        data["perfusionName"] = this.perfusionName;
        data["perfusionCount"] = this.perfusionCount;
        data["icon"] = this.icon;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["remark"] = this.remark;
        data["anticoagulantName"] = this.anticoagulantName;
        data["anticoagulantTotal"] = this.anticoagulantTotal;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        return data;
    }
}

/** 床位患者明细 */
export interface ICureBedPatientDetail {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 区间标识 */
    dialysisAreaId?: string | undefined;
    /** 床位 */
    dialysisAreaName?: string | undefined;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    dossierNum?: string | undefined;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者是否阳性0,1 */
    patientPositive?: number;
    /** 透析方式 `DIC.DIALYSIS.MODE`  *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义颜色 */
    fontColor?: string | undefined;
    /** 字体颜色名称 */
    fontColorName?: string | undefined;
    /** 透析器标识 */
    dialyzerId?: string | undefined;
    /** 透析器名称 */
    dialyzerName?: string | undefined;
    /** 透析器数量 */
    dialyzerCount?: string | undefined;
    /** 血滤器标识 */
    filterId?: string | undefined;
    /** 血滤器名称 */
    filterName?: string | undefined;
    /** 血滤器数量 */
    filterCount?: string | undefined;
    /** 灌流器标识 */
    perfusionId?: string | undefined;
    /** 灌流器名称 */
    perfusionName?: string | undefined;
    /** 灌流器数量 */
    perfusionCount?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 抗凝剂类型 */
    anticoagulantName?: string | undefined;
    /** 剂量 */
    anticoagulantTotal?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
}

/** Reponse */
export class CureBedPatientDetailResultEntry implements ICureBedPatientDetailResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureBedPatientDetail;

    constructor(data?: ICureBedPatientDetailResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureBedPatientDetail.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureBedPatientDetailResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureBedPatientDetailResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureBedPatientDetailResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureBedPatientDetail;
}

export class CureCostGroupView implements ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 批号管理 */
    batchManage!: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: ICureCostGroupView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.batchManage = _data["batchManage"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.devBarCode = _data["devBarCode"];
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.sequence = _data["sequence"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.spec = _data["spec"];
            this.sellingPrice = _data["sellingPrice"];
            this.unit = _data["unit"];
            this.unitLabel = _data["unitLabel"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Label = _data["unitLevel1Label"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.enabled = _data["enabled"];
            this.inventoryCount = _data["inventoryCount"];
            this.batchNo = _data["batchNo"];
            if (Array.isArray(_data["batchItems"])) {
                this.batchItems = [] as any;
                for (let item of _data["batchItems"])
                    this.batchItems!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCostGroupView {
        data = typeof data === 'object' ? data : {};
        let result = new CureCostGroupView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["batchManage"] = this.batchManage;
        data["code"] = this.code;
        data["name"] = this.name;
        data["devBarCode"] = this.devBarCode;
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["sequence"] = this.sequence;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["spec"] = this.spec;
        data["sellingPrice"] = this.sellingPrice;
        data["unit"] = this.unit;
        data["unitLabel"] = this.unitLabel;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Label"] = this.unitLevel1Label;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["enabled"] = this.enabled;
        data["inventoryCount"] = this.inventoryCount;
        data["batchNo"] = this.batchNo;
        if (Array.isArray(this.batchItems)) {
            data["batchItems"] = [];
            for (let item of this.batchItems)
                data["batchItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 批号管理 */
    batchManage: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;
}

/** 透后病程记录 */
export class CureCourseEditModel implements ICureCourseEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 病程记录内容 */
    content!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureCourseEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureCourseEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureCourseEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透后病程记录 */
export interface ICureCourseEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 病程记录内容 */
    content: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 透后病程记录 */
export class CureCourseView implements ICureCourseView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 病程记录内容 */
    content!: string;
    /** 备注 */
    remark?: string | undefined;
    /** id */
    id?: string | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 是否已经下机 */
    hasDown?: boolean;
    /** 是否已经透后病程记录 */
    hasCureCourse?: boolean;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 标识 */
    cureCourseId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 记录人员名称 */
    sysUserName?: string | undefined;
    /** 记录人员别名 */
    sysUserName2?: string | undefined;
    /** 记录人员全名 */
    sysUserNameFull?: string | undefined;
    /** [记录人员标识](#用户信息) */
    sysUserId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureCourseView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.content = _data["content"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.hasDown = _data["hasDown"];
            this.hasCureCourse = _data["hasCureCourse"];
            this.patientId = _data["patientId"];
            this.cureCourseId = _data["cureCourseId"];
            this.sn = _data["sn"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.sysUserName = _data["sysUserName"];
            this.sysUserName2 = _data["sysUserName2"];
            this.sysUserNameFull = _data["sysUserNameFull"];
            this.sysUserId = _data["sysUserId"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureCourseView {
        data = typeof data === 'object' ? data : {};
        let result = new CureCourseView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["content"] = this.content;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["hasDown"] = this.hasDown;
        data["hasCureCourse"] = this.hasCureCourse;
        data["patientId"] = this.patientId;
        data["cureCourseId"] = this.cureCourseId;
        data["sn"] = this.sn;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["sysUserName"] = this.sysUserName;
        data["sysUserName2"] = this.sysUserName2;
        data["sysUserNameFull"] = this.sysUserNameFull;
        data["sysUserId"] = this.sysUserId;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透后病程记录 */
export interface ICureCourseView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 病程记录内容 */
    content: string;
    /** 备注 */
    remark?: string | undefined;
    /** id */
    id?: string | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 是否已经下机 */
    hasDown?: boolean;
    /** 是否已经透后病程记录 */
    hasCureCourse?: boolean;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 标识 */
    cureCourseId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 记录人员名称 */
    sysUserName?: string | undefined;
    /** 记录人员别名 */
    sysUserName2?: string | undefined;
    /** 记录人员全名 */
    sysUserNameFull?: string | undefined;
    /** [记录人员标识](#用户信息) */
    sysUserId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureCourseViewResult implements ICureCourseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCourseView[] | undefined;

    constructor(data?: ICureCourseViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureCourseView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCourseViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureCourseViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureCourseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCourseView[] | undefined;
}

/** Reponse */
export class CureCourseViewResultEntry implements ICureCourseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureCourseView;

    constructor(data?: ICureCourseViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureCourseView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureCourseViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureCourseViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureCourseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureCourseView;
}

/** 透析医嘱 */
export class CureDa implements ICureDa {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 执行日期 */
    execDate?: dayjs.Dayjs;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 自备药0,1 */
    owned?: number;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    cureRecords?: CureRecord;
    patients?: Patient;
    roomItemLists?: RoomItemList;

    constructor(data?: ICureDa) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.patientId = _data["patientId"];
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.status = _data["status"];
            this.owned = _data["owned"];
            this.orally = _data["orally"];
            this.patientDaLongtermId = _data["patientDaLongtermId"];
            this.patientDaTemporaryId = _data["patientDaTemporaryId"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.roomItemLists = _data["roomItemLists"] ? RoomItemList.fromJS(_data["roomItemLists"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDa {
        data = typeof data === 'object' ? data : {};
        let result = new CureDa();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["patientId"] = this.patientId;
        data["execDate"] = this.execDate ? this.execDate.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["status"] = this.status;
        data["owned"] = this.owned;
        data["orally"] = this.orally;
        data["patientDaLongtermId"] = this.patientDaLongtermId;
        data["patientDaTemporaryId"] = this.patientDaTemporaryId;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["roomItemLists"] = this.roomItemLists ? this.roomItemLists.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析医嘱 */
export interface ICureDa {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 执行日期 */
    execDate?: dayjs.Dayjs;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 自备药0,1 */
    owned?: number;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    cureRecords?: CureRecord;
    patients?: Patient;
    roomItemLists?: RoomItemList;
}

/** 透析医嘱修改记录 */
export class CureDaLog implements ICureDaLog {
    /** 标识 */
    id?: string | undefined;
    /** [透析医嘱标识](透析医嘱) */
    cureDaId?: string | undefined;
    /** 操作时间 */
    operatorTime?: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 修改原因 */
    cause?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureDas?: CureDa;

    constructor(data?: ICureDaLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureDaId = _data["cureDaId"];
            this.operatorTime = _data["operatorTime"] ? dayjs(_data["operatorTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.cause = _data["cause"];
            this.content = _data["content"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureDas = _data["cureDas"] ? CureDa.fromJS(_data["cureDas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDaLog {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureDaId"] = this.cureDaId;
        data["operatorTime"] = this.operatorTime ? this.operatorTime.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["cause"] = this.cause;
        data["content"] = this.content;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["cureDas"] = this.cureDas ? this.cureDas.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析医嘱修改记录 */
export interface ICureDaLog {
    /** 标识 */
    id?: string | undefined;
    /** [透析医嘱标识](透析医嘱) */
    cureDaId?: string | undefined;
    /** 操作时间 */
    operatorTime?: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 修改原因 */
    cause?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureDas?: CureDa;
}

/** Reponse */
export class CureDaLogResult implements ICureDaLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaLog[] | undefined;

    constructor(data?: ICureDaLogResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDaLog.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDaLogResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaLogResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDaLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaLog[] | undefined;
}

/** 透析医嘱修改记录 (ViewModel) */
export class CureDaLogViewModel implements ICureDaLogViewModel {
    /** [透析医嘱标识](透析医嘱Id) */
    cureDaId!: string;
    /** 操作时间 */
    operatorTime!: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId!: string;
    /** 操作者姓名 */
    operatorName!: string;
    /** 修改原因 */
    cause?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;

    constructor(data?: ICureDaLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureDaId = _data["cureDaId"];
            this.operatorTime = _data["operatorTime"] ? dayjs(_data["operatorTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.cause = _data["cause"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): CureDaLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureDaId"] = this.cureDaId;
        data["operatorTime"] = this.operatorTime ? this.operatorTime.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["cause"] = this.cause;
        data["content"] = this.content;
        return data;
    }
}

/** 透析医嘱修改记录 (ViewModel) */
export interface ICureDaLogViewModel {
    /** [透析医嘱标识](透析医嘱Id) */
    cureDaId: string;
    /** 操作时间 */
    operatorTime: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId: string;
    /** 操作者姓名 */
    operatorName: string;
    /** 修改原因 */
    cause?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
}

/** Reponse */
export class CureDaResultEntry implements ICureDaResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDa;

    constructor(data?: ICureDaResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureDa.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDaResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureDaResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDa;
}

/** 临时透析医嘱 */
export class CureDaTemp implements ICureDaTemp {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 长嘱或临嘱标识 */
    daId?: string | undefined;
    cureRecords?: CureRecord;

    constructor(data?: ICureDaTemp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.daId = _data["daId"];
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDaTemp {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaTemp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["daId"] = this.daId;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 临时透析医嘱 */
export interface ICureDaTemp {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 长嘱或临嘱标识 */
    daId?: string | undefined;
    cureRecords?: CureRecord;
}

/** Reponse */
export class CureDaTempResult implements ICureDaTempResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaTemp[] | undefined;

    constructor(data?: ICureDaTempResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDaTemp.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDaTempResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaTempResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDaTempResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaTemp[] | undefined;
}

/** Reponse */
export class CureDaTempResultEntry implements ICureDaTempResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDaTemp;

    constructor(data?: ICureDaTempResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureDaTemp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDaTempResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaTempResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureDaTempResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDaTemp;
}

/** 临时透析医嘱 (ViewModel) */
export class CureDaTempViewModel implements ICureDaTempViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 长嘱或临嘱标识 */
    daId?: string | undefined;

    constructor(data?: ICureDaTempViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.daId = _data["daId"];
        }
    }

    static fromJS(data: any): CureDaTempViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaTempViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["daId"] = this.daId;
        return data;
    }
}

/** 临时透析医嘱 (ViewModel) */
export interface ICureDaTempViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 长嘱或临嘱标识 */
    daId?: string | undefined;
}

/** 作废医嘱 */
export class CureDaVoided implements ICureDaVoided {
    /** 标识 */
    id?: string | undefined;
    /** [透析医嘱标识](透析医嘱) */
    cureDaId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [透析记录单标识](透析记录单信息) */
    cureRecordId?: string | undefined;
    /** 操作人 */
    operater?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;
    /** 作废原因 */
    reason?: string | undefined;
    cureDas?: CureDa;
    patients?: Patient;
    cureRecords?: CureRecord;

    constructor(data?: ICureDaVoided) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureDaId = _data["cureDaId"];
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.operater = _data["operater"];
            this.operateTime = _data["operateTime"] ? dayjs(_data["operateTime"].toString()) : <any>undefined;
            this.reason = _data["reason"];
            this.cureDas = _data["cureDas"] ? CureDa.fromJS(_data["cureDas"]) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDaVoided {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaVoided();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureDaId"] = this.cureDaId;
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["operater"] = this.operater;
        data["operateTime"] = this.operateTime ? this.operateTime.toISOString() : <any>undefined;
        data["reason"] = this.reason;
        data["cureDas"] = this.cureDas ? this.cureDas.toJSON() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 作废医嘱 */
export interface ICureDaVoided {
    /** 标识 */
    id?: string | undefined;
    /** [透析医嘱标识](透析医嘱) */
    cureDaId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [透析记录单标识](透析记录单信息) */
    cureRecordId?: string | undefined;
    /** 操作人 */
    operater?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;
    /** 作废原因 */
    reason?: string | undefined;
    cureDas?: CureDa;
    patients?: Patient;
    cureRecords?: CureRecord;
}

/** 作废医嘱 */
export class CureDaVoidedCustomView implements ICureDaVoidedCustomView {
    /** 标识 */
    id?: string | undefined;
    /** [透析医嘱标识](透析医嘱) */
    cureDaId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [透析记录单标识](透析记录单信息) */
    cureRecordId?: string | undefined;
    /** 操作人 */
    operater?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;
    /** 作废原因 */
    reason?: string | undefined;
    cureDas?: CureDa;
    patients?: Patient;
    cureRecords?: CureRecord;
    /** 医嘱内容 */
    content?: string | undefined;
    /** 开立医生 */
    doctorName?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    group?: string | undefined;
    groupId?: string | undefined;

    constructor(data?: ICureDaVoidedCustomView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureDaId = _data["cureDaId"];
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.operater = _data["operater"];
            this.operateTime = _data["operateTime"] ? dayjs(_data["operateTime"].toString()) : <any>undefined;
            this.reason = _data["reason"];
            this.cureDas = _data["cureDas"] ? CureDa.fromJS(_data["cureDas"]) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
            this.content = _data["content"];
            this.doctorName = _data["doctorName"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseName = _data["nurseName"];
            this.group = _data["group"];
            this.groupId = _data["groupId"];
        }
    }

    static fromJS(data: any): CureDaVoidedCustomView {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaVoidedCustomView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureDaId"] = this.cureDaId;
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["operater"] = this.operater;
        data["operateTime"] = this.operateTime ? this.operateTime.toISOString() : <any>undefined;
        data["reason"] = this.reason;
        data["cureDas"] = this.cureDas ? this.cureDas.toJSON() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        data["content"] = this.content;
        data["doctorName"] = this.doctorName;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseName"] = this.nurseName;
        data["group"] = this.group;
        data["groupId"] = this.groupId;
        return data;
    }
}

/** 作废医嘱 */
export interface ICureDaVoidedCustomView {
    /** 标识 */
    id?: string | undefined;
    /** [透析医嘱标识](透析医嘱) */
    cureDaId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [透析记录单标识](透析记录单信息) */
    cureRecordId?: string | undefined;
    /** 操作人 */
    operater?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;
    /** 作废原因 */
    reason?: string | undefined;
    cureDas?: CureDa;
    patients?: Patient;
    cureRecords?: CureRecord;
    /** 医嘱内容 */
    content?: string | undefined;
    /** 开立医生 */
    doctorName?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    group?: string | undefined;
    groupId?: string | undefined;
}

/** Reponse */
export class CureDaVoidedCustomViewResult implements ICureDaVoidedCustomViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaVoidedCustomView[] | undefined;

    constructor(data?: ICureDaVoidedCustomViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDaVoidedCustomView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDaVoidedCustomViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaVoidedCustomViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDaVoidedCustomViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaVoidedCustomView[] | undefined;
}

/** 作废医嘱 */
export class CureDaVoidedEditModel implements ICureDaVoidedEditModel {
    /** [透析医嘱标识](#透析医嘱) */
    cureDaId?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** [透析记录单标识](#透析记录单信息) */
    cureRecordId?: string | undefined;
    /** 操作人 */
    operater?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;
    /** 作废原因 */
    reason?: string | undefined;

    constructor(data?: ICureDaVoidedEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureDaId = _data["cureDaId"];
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.operater = _data["operater"];
            this.operateTime = _data["operateTime"] ? dayjs(_data["operateTime"].toString()) : <any>undefined;
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): CureDaVoidedEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaVoidedEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureDaId"] = this.cureDaId;
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["operater"] = this.operater;
        data["operateTime"] = this.operateTime ? this.operateTime.toISOString() : <any>undefined;
        data["reason"] = this.reason;
        return data;
    }
}

/** 作废医嘱 */
export interface ICureDaVoidedEditModel {
    /** [透析医嘱标识](#透析医嘱) */
    cureDaId?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** [透析记录单标识](#透析记录单信息) */
    cureRecordId?: string | undefined;
    /** 操作人 */
    operater?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;
    /** 作废原因 */
    reason?: string | undefined;
}

/** Reponse */
export class CureDaVoidedResultEntry implements ICureDaVoidedResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDaVoided;

    constructor(data?: ICureDaVoidedResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureDaVoided.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDaVoidedResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaVoidedResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureDaVoidedResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDaVoided;
}

export class CureFieldValueView implements ICureFieldValueView {
    /** 透析记录单 */
    cureRecordId?: string | undefined;
    /** 字段名 */
    fieldKey?: string | undefined;
    /** 字段值 */
    fieldValue?: string | undefined;
    /** 字段类型 */
    dataType?: string | undefined;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: ICureFieldValueView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.fieldKey = _data["fieldKey"];
            this.fieldValue = _data["fieldValue"];
            this.dataType = _data["dataType"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): CureFieldValueView {
        data = typeof data === 'object' ? data : {};
        let result = new CureFieldValueView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["fieldKey"] = this.fieldKey;
        data["fieldValue"] = this.fieldValue;
        data["dataType"] = this.dataType;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ICureFieldValueView {
    /** 透析记录单 */
    cureRecordId?: string | undefined;
    /** 字段名 */
    fieldKey?: string | undefined;
    /** 字段值 */
    fieldValue?: string | undefined;
    /** 字段类型 */
    dataType?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
}

/** 抗高血压药治疗信息 */
export class CureInformationAntihypertensiveAgentsEditModel implements ICureInformationAntihypertensiveAgentsEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 处方种类 *多选* *钙通道阻滞剂,ACEI,ARB,α阻滞剂 ,αβ阻滞剂,中枢性降压药,利尿剂,其它 */
    prescription?: string | undefined;
    /** 其它处方种类 */
    prescriptionOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureInformationAntihypertensiveAgentsEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.prescription = _data["prescription"];
            this.prescriptionOther = _data["prescriptionOther"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureInformationAntihypertensiveAgentsEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationAntihypertensiveAgentsEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["prescription"] = this.prescription;
        data["prescriptionOther"] = this.prescriptionOther;
        data["remark"] = this.remark;
        return data;
    }
}

/** 抗高血压药治疗信息 */
export interface ICureInformationAntihypertensiveAgentsEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 处方种类 *多选* *钙通道阻滞剂,ACEI,ARB,α阻滞剂 ,αβ阻滞剂,中枢性降压药,利尿剂,其它 */
    prescription?: string | undefined;
    /** 其它处方种类 */
    prescriptionOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 抗高血压药治疗信息 */
export class CureInformationAntihypertensiveAgentsView implements ICureInformationAntihypertensiveAgentsView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 处方种类 *多选* *钙通道阻滞剂,ACEI,ARB,α阻滞剂 ,αβ阻滞剂,中枢性降压药,利尿剂,其它 */
    prescription?: string | undefined;
    /** 其它处方种类 */
    prescriptionOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureInformationAntihypertensiveAgentsView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.prescription = _data["prescription"];
            this.prescriptionOther = _data["prescriptionOther"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationAntihypertensiveAgentsView {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationAntihypertensiveAgentsView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["prescription"] = this.prescription;
        data["prescriptionOther"] = this.prescriptionOther;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 抗高血压药治疗信息 */
export interface ICureInformationAntihypertensiveAgentsView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 处方种类 *多选* *钙通道阻滞剂,ACEI,ARB,α阻滞剂 ,αβ阻滞剂,中枢性降压药,利尿剂,其它 */
    prescription?: string | undefined;
    /** 其它处方种类 */
    prescriptionOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureInformationAntihypertensiveAgentsViewResult implements ICureInformationAntihypertensiveAgentsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationAntihypertensiveAgentsView[] | undefined;

    constructor(data?: ICureInformationAntihypertensiveAgentsViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInformationAntihypertensiveAgentsView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationAntihypertensiveAgentsViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationAntihypertensiveAgentsViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInformationAntihypertensiveAgentsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationAntihypertensiveAgentsView[] | undefined;
}

/** Reponse */
export class CureInformationAntihypertensiveAgentsViewResultEntry implements ICureInformationAntihypertensiveAgentsViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationAntihypertensiveAgentsView;

    constructor(data?: ICureInformationAntihypertensiveAgentsViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureInformationAntihypertensiveAgentsView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationAntihypertensiveAgentsViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationAntihypertensiveAgentsViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureInformationAntihypertensiveAgentsViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationAntihypertensiveAgentsView;
}

/** 铁剂治疗信息 */
export class CureInformationChalybeateEditModel implements ICureInformationChalybeateEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 方式 *单选* *口服,静脉* */
    style?: string | undefined;
    /** 口服种类 *单选* *多糖铁复合物,复方硫酸亚铁叶酸片,琥珀酸亚铁片,其它 */
    orallyKind?: string | undefined;
    /** 其它口服种类 */
    orallyKindOther?: string | undefined;
    /** 多糖铁复合物剂量（/日） */
    polysaccharideIronDose?: string | undefined;
    /** 多糖铁复合物单位 */
    polysaccharideIronUnit?: string | undefined;
    /** 复方硫酸亚铁叶酸片剂量（/日） */
    compoundFerrousDose?: string | undefined;
    /** 复方硫酸亚铁叶酸片单位 */
    compoundFerrousUnit?: string | undefined;
    /** 琥珀酸亚铁片剂量（/日） */
    ferrousSuccinateDose?: string | undefined;
    /** 琥珀酸亚铁片单位 */
    ferrousSuccinateUnit?: string | undefined;
    /** 静脉种类 *单选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁,其它 */
    vienKind?: string | undefined;
    /** 其它静脉种类 */
    vienKindOther?: string | undefined;
    /** 蔗糖铁剂量（/周） */
    ironSucroseDose?: string | undefined;
    /** 蔗糖铁单位 */
    ironSucroseUnit?: string | undefined;
    /** 右旋糖苷铁剂量（/周） */
    ironDextrinDose?: string | undefined;
    /** 右旋糖苷铁单位 */
    ironDextrinUnit?: string | undefined;
    /** 葡萄糖醛酸铁剂量（/周） */
    ferricGlucuronateDose?: string | undefined;
    /** 葡萄糖醛酸铁单位 */
    ferricGlucuronateUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureInformationChalybeateEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.style = _data["style"];
            this.orallyKind = _data["orallyKind"];
            this.orallyKindOther = _data["orallyKindOther"];
            this.polysaccharideIronDose = _data["polysaccharideIronDose"];
            this.polysaccharideIronUnit = _data["polysaccharideIronUnit"];
            this.compoundFerrousDose = _data["compoundFerrousDose"];
            this.compoundFerrousUnit = _data["compoundFerrousUnit"];
            this.ferrousSuccinateDose = _data["ferrousSuccinateDose"];
            this.ferrousSuccinateUnit = _data["ferrousSuccinateUnit"];
            this.vienKind = _data["vienKind"];
            this.vienKindOther = _data["vienKindOther"];
            this.ironSucroseDose = _data["ironSucroseDose"];
            this.ironSucroseUnit = _data["ironSucroseUnit"];
            this.ironDextrinDose = _data["ironDextrinDose"];
            this.ironDextrinUnit = _data["ironDextrinUnit"];
            this.ferricGlucuronateDose = _data["ferricGlucuronateDose"];
            this.ferricGlucuronateUnit = _data["ferricGlucuronateUnit"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureInformationChalybeateEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationChalybeateEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["style"] = this.style;
        data["orallyKind"] = this.orallyKind;
        data["orallyKindOther"] = this.orallyKindOther;
        data["polysaccharideIronDose"] = this.polysaccharideIronDose;
        data["polysaccharideIronUnit"] = this.polysaccharideIronUnit;
        data["compoundFerrousDose"] = this.compoundFerrousDose;
        data["compoundFerrousUnit"] = this.compoundFerrousUnit;
        data["ferrousSuccinateDose"] = this.ferrousSuccinateDose;
        data["ferrousSuccinateUnit"] = this.ferrousSuccinateUnit;
        data["vienKind"] = this.vienKind;
        data["vienKindOther"] = this.vienKindOther;
        data["ironSucroseDose"] = this.ironSucroseDose;
        data["ironSucroseUnit"] = this.ironSucroseUnit;
        data["ironDextrinDose"] = this.ironDextrinDose;
        data["ironDextrinUnit"] = this.ironDextrinUnit;
        data["ferricGlucuronateDose"] = this.ferricGlucuronateDose;
        data["ferricGlucuronateUnit"] = this.ferricGlucuronateUnit;
        data["remark"] = this.remark;
        return data;
    }
}

/** 铁剂治疗信息 */
export interface ICureInformationChalybeateEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 方式 *单选* *口服,静脉* */
    style?: string | undefined;
    /** 口服种类 *单选* *多糖铁复合物,复方硫酸亚铁叶酸片,琥珀酸亚铁片,其它 */
    orallyKind?: string | undefined;
    /** 其它口服种类 */
    orallyKindOther?: string | undefined;
    /** 多糖铁复合物剂量（/日） */
    polysaccharideIronDose?: string | undefined;
    /** 多糖铁复合物单位 */
    polysaccharideIronUnit?: string | undefined;
    /** 复方硫酸亚铁叶酸片剂量（/日） */
    compoundFerrousDose?: string | undefined;
    /** 复方硫酸亚铁叶酸片单位 */
    compoundFerrousUnit?: string | undefined;
    /** 琥珀酸亚铁片剂量（/日） */
    ferrousSuccinateDose?: string | undefined;
    /** 琥珀酸亚铁片单位 */
    ferrousSuccinateUnit?: string | undefined;
    /** 静脉种类 *单选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁,其它 */
    vienKind?: string | undefined;
    /** 其它静脉种类 */
    vienKindOther?: string | undefined;
    /** 蔗糖铁剂量（/周） */
    ironSucroseDose?: string | undefined;
    /** 蔗糖铁单位 */
    ironSucroseUnit?: string | undefined;
    /** 右旋糖苷铁剂量（/周） */
    ironDextrinDose?: string | undefined;
    /** 右旋糖苷铁单位 */
    ironDextrinUnit?: string | undefined;
    /** 葡萄糖醛酸铁剂量（/周） */
    ferricGlucuronateDose?: string | undefined;
    /** 葡萄糖醛酸铁单位 */
    ferricGlucuronateUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 铁剂治疗信息 */
export class CureInformationChalybeateView implements ICureInformationChalybeateView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 方式 *单选* *口服,静脉* */
    style?: string | undefined;
    /** 口服种类 *单选* *多糖铁复合物,复方硫酸亚铁叶酸片,琥珀酸亚铁片,其它 */
    orallyKind?: string | undefined;
    /** 其它口服种类 */
    orallyKindOther?: string | undefined;
    /** 多糖铁复合物剂量（/日） */
    polysaccharideIronDose?: string | undefined;
    /** 多糖铁复合物单位 */
    polysaccharideIronUnit?: string | undefined;
    /** 复方硫酸亚铁叶酸片剂量（/日） */
    compoundFerrousDose?: string | undefined;
    /** 复方硫酸亚铁叶酸片单位 */
    compoundFerrousUnit?: string | undefined;
    /** 琥珀酸亚铁片剂量（/日） */
    ferrousSuccinateDose?: string | undefined;
    /** 琥珀酸亚铁片单位 */
    ferrousSuccinateUnit?: string | undefined;
    /** 静脉种类 *单选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁,其它 */
    vienKind?: string | undefined;
    /** 其它静脉种类 */
    vienKindOther?: string | undefined;
    /** 蔗糖铁剂量（/周） */
    ironSucroseDose?: string | undefined;
    /** 蔗糖铁单位 */
    ironSucroseUnit?: string | undefined;
    /** 右旋糖苷铁剂量（/周） */
    ironDextrinDose?: string | undefined;
    /** 右旋糖苷铁单位 */
    ironDextrinUnit?: string | undefined;
    /** 葡萄糖醛酸铁剂量（/周） */
    ferricGlucuronateDose?: string | undefined;
    /** 葡萄糖醛酸铁单位 */
    ferricGlucuronateUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureInformationChalybeateView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.style = _data["style"];
            this.orallyKind = _data["orallyKind"];
            this.orallyKindOther = _data["orallyKindOther"];
            this.polysaccharideIronDose = _data["polysaccharideIronDose"];
            this.polysaccharideIronUnit = _data["polysaccharideIronUnit"];
            this.compoundFerrousDose = _data["compoundFerrousDose"];
            this.compoundFerrousUnit = _data["compoundFerrousUnit"];
            this.ferrousSuccinateDose = _data["ferrousSuccinateDose"];
            this.ferrousSuccinateUnit = _data["ferrousSuccinateUnit"];
            this.vienKind = _data["vienKind"];
            this.vienKindOther = _data["vienKindOther"];
            this.ironSucroseDose = _data["ironSucroseDose"];
            this.ironSucroseUnit = _data["ironSucroseUnit"];
            this.ironDextrinDose = _data["ironDextrinDose"];
            this.ironDextrinUnit = _data["ironDextrinUnit"];
            this.ferricGlucuronateDose = _data["ferricGlucuronateDose"];
            this.ferricGlucuronateUnit = _data["ferricGlucuronateUnit"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationChalybeateView {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationChalybeateView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["style"] = this.style;
        data["orallyKind"] = this.orallyKind;
        data["orallyKindOther"] = this.orallyKindOther;
        data["polysaccharideIronDose"] = this.polysaccharideIronDose;
        data["polysaccharideIronUnit"] = this.polysaccharideIronUnit;
        data["compoundFerrousDose"] = this.compoundFerrousDose;
        data["compoundFerrousUnit"] = this.compoundFerrousUnit;
        data["ferrousSuccinateDose"] = this.ferrousSuccinateDose;
        data["ferrousSuccinateUnit"] = this.ferrousSuccinateUnit;
        data["vienKind"] = this.vienKind;
        data["vienKindOther"] = this.vienKindOther;
        data["ironSucroseDose"] = this.ironSucroseDose;
        data["ironSucroseUnit"] = this.ironSucroseUnit;
        data["ironDextrinDose"] = this.ironDextrinDose;
        data["ironDextrinUnit"] = this.ironDextrinUnit;
        data["ferricGlucuronateDose"] = this.ferricGlucuronateDose;
        data["ferricGlucuronateUnit"] = this.ferricGlucuronateUnit;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 铁剂治疗信息 */
export interface ICureInformationChalybeateView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 方式 *单选* *口服,静脉* */
    style?: string | undefined;
    /** 口服种类 *单选* *多糖铁复合物,复方硫酸亚铁叶酸片,琥珀酸亚铁片,其它 */
    orallyKind?: string | undefined;
    /** 其它口服种类 */
    orallyKindOther?: string | undefined;
    /** 多糖铁复合物剂量（/日） */
    polysaccharideIronDose?: string | undefined;
    /** 多糖铁复合物单位 */
    polysaccharideIronUnit?: string | undefined;
    /** 复方硫酸亚铁叶酸片剂量（/日） */
    compoundFerrousDose?: string | undefined;
    /** 复方硫酸亚铁叶酸片单位 */
    compoundFerrousUnit?: string | undefined;
    /** 琥珀酸亚铁片剂量（/日） */
    ferrousSuccinateDose?: string | undefined;
    /** 琥珀酸亚铁片单位 */
    ferrousSuccinateUnit?: string | undefined;
    /** 静脉种类 *单选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁,其它 */
    vienKind?: string | undefined;
    /** 其它静脉种类 */
    vienKindOther?: string | undefined;
    /** 蔗糖铁剂量（/周） */
    ironSucroseDose?: string | undefined;
    /** 蔗糖铁单位 */
    ironSucroseUnit?: string | undefined;
    /** 右旋糖苷铁剂量（/周） */
    ironDextrinDose?: string | undefined;
    /** 右旋糖苷铁单位 */
    ironDextrinUnit?: string | undefined;
    /** 葡萄糖醛酸铁剂量（/周） */
    ferricGlucuronateDose?: string | undefined;
    /** 葡萄糖醛酸铁单位 */
    ferricGlucuronateUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureInformationChalybeateViewResult implements ICureInformationChalybeateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationChalybeateView[] | undefined;

    constructor(data?: ICureInformationChalybeateViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInformationChalybeateView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationChalybeateViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationChalybeateViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInformationChalybeateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationChalybeateView[] | undefined;
}

/** Reponse */
export class CureInformationChalybeateViewResultEntry implements ICureInformationChalybeateViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationChalybeateView;

    constructor(data?: ICureInformationChalybeateViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureInformationChalybeateView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationChalybeateViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationChalybeateViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureInformationChalybeateViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationChalybeateView;
}

/** esa治疗信息 */
export class CureInformationEsaEditModel implements ICureInformationEsaEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 促红素通用名称 *单选* *重组人红细胞生成素α,重组人红细胞生成素β,达依泊汀,持续性红细胞生成素受体激动剂,缺氧诱导因子稳定剂,其它* */
    commonName?: string | undefined;
    /** 其它促红素说明 */
    commonNameOther?: string | undefined;
    /** 种类 *单选* *国产,进口* */
    kind?: string | undefined;
    /** 用药方式 *多选* *皮下,静脉* */
    pharmacyStyle?: string | undefined;
    /** 皮下剂量（/周） */
    subcutaneousDose?: string | undefined;
    /** 皮下剂量单位 */
    subcutaneousUnit?: string | undefined;
    /** 静脉剂量（/周） */
    veinDose?: string | undefined;
    /** 静脉剂量单位 */
    veinUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureInformationEsaEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.commonName = _data["commonName"];
            this.commonNameOther = _data["commonNameOther"];
            this.kind = _data["kind"];
            this.pharmacyStyle = _data["pharmacyStyle"];
            this.subcutaneousDose = _data["subcutaneousDose"];
            this.subcutaneousUnit = _data["subcutaneousUnit"];
            this.veinDose = _data["veinDose"];
            this.veinUnit = _data["veinUnit"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureInformationEsaEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationEsaEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["commonName"] = this.commonName;
        data["commonNameOther"] = this.commonNameOther;
        data["kind"] = this.kind;
        data["pharmacyStyle"] = this.pharmacyStyle;
        data["subcutaneousDose"] = this.subcutaneousDose;
        data["subcutaneousUnit"] = this.subcutaneousUnit;
        data["veinDose"] = this.veinDose;
        data["veinUnit"] = this.veinUnit;
        data["remark"] = this.remark;
        return data;
    }
}

/** esa治疗信息 */
export interface ICureInformationEsaEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 促红素通用名称 *单选* *重组人红细胞生成素α,重组人红细胞生成素β,达依泊汀,持续性红细胞生成素受体激动剂,缺氧诱导因子稳定剂,其它* */
    commonName?: string | undefined;
    /** 其它促红素说明 */
    commonNameOther?: string | undefined;
    /** 种类 *单选* *国产,进口* */
    kind?: string | undefined;
    /** 用药方式 *多选* *皮下,静脉* */
    pharmacyStyle?: string | undefined;
    /** 皮下剂量（/周） */
    subcutaneousDose?: string | undefined;
    /** 皮下剂量单位 */
    subcutaneousUnit?: string | undefined;
    /** 静脉剂量（/周） */
    veinDose?: string | undefined;
    /** 静脉剂量单位 */
    veinUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** esa治疗信息 */
export class CureInformationEsaView implements ICureInformationEsaView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 促红素通用名称 *单选* *重组人红细胞生成素α,重组人红细胞生成素β,达依泊汀,持续性红细胞生成素受体激动剂,缺氧诱导因子稳定剂,其它* */
    commonName?: string | undefined;
    /** 其它促红素说明 */
    commonNameOther?: string | undefined;
    /** 种类 *单选* *国产,进口* */
    kind?: string | undefined;
    /** 用药方式 *多选* *皮下,静脉* */
    pharmacyStyle?: string | undefined;
    /** 皮下剂量（/周） */
    subcutaneousDose?: string | undefined;
    /** 皮下剂量单位 */
    subcutaneousUnit?: string | undefined;
    /** 静脉剂量（/周） */
    veinDose?: string | undefined;
    /** 静脉剂量单位 */
    veinUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureInformationEsaView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.commonName = _data["commonName"];
            this.commonNameOther = _data["commonNameOther"];
            this.kind = _data["kind"];
            this.pharmacyStyle = _data["pharmacyStyle"];
            this.subcutaneousDose = _data["subcutaneousDose"];
            this.subcutaneousUnit = _data["subcutaneousUnit"];
            this.veinDose = _data["veinDose"];
            this.veinUnit = _data["veinUnit"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationEsaView {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationEsaView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["commonName"] = this.commonName;
        data["commonNameOther"] = this.commonNameOther;
        data["kind"] = this.kind;
        data["pharmacyStyle"] = this.pharmacyStyle;
        data["subcutaneousDose"] = this.subcutaneousDose;
        data["subcutaneousUnit"] = this.subcutaneousUnit;
        data["veinDose"] = this.veinDose;
        data["veinUnit"] = this.veinUnit;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** esa治疗信息 */
export interface ICureInformationEsaView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 促红素通用名称 *单选* *重组人红细胞生成素α,重组人红细胞生成素β,达依泊汀,持续性红细胞生成素受体激动剂,缺氧诱导因子稳定剂,其它* */
    commonName?: string | undefined;
    /** 其它促红素说明 */
    commonNameOther?: string | undefined;
    /** 种类 *单选* *国产,进口* */
    kind?: string | undefined;
    /** 用药方式 *多选* *皮下,静脉* */
    pharmacyStyle?: string | undefined;
    /** 皮下剂量（/周） */
    subcutaneousDose?: string | undefined;
    /** 皮下剂量单位 */
    subcutaneousUnit?: string | undefined;
    /** 静脉剂量（/周） */
    veinDose?: string | undefined;
    /** 静脉剂量单位 */
    veinUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureInformationEsaViewResult implements ICureInformationEsaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationEsaView[] | undefined;

    constructor(data?: ICureInformationEsaViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInformationEsaView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationEsaViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationEsaViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInformationEsaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationEsaView[] | undefined;
}

/** Reponse */
export class CureInformationEsaViewResultEntry implements ICureInformationEsaViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationEsaView;

    constructor(data?: ICureInformationEsaViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureInformationEsaView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationEsaViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationEsaViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureInformationEsaViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationEsaView;
}

/** MBD干预药治疗信息 */
export class CureInformationMbdEditModel implements ICureInformationMbdEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 维生素D及衍生物 *多选* *骨化三醇,帕立骨化醇,阿法骨化醇,其它 */
    vitaminD?: string | undefined;
    /** 其它维生素D及衍生物 */
    vitaminDOther?: string | undefined;
    /** 含钙的磷结合剂 *多选* *碳酸钙,醋酸钙,葡萄糖酸钙,其它 */
    phosphorousCalcium?: string | undefined;
    /** 其他含钙的磷结合剂 */
    phosphorousCalciumOther?: string | undefined;
    /** 含铝的磷结合剂 *多选* *氢氧化铝,硫糖铝,其它 */
    phosphorousAluminum?: string | undefined;
    /** 其他含铝的磷结合剂 */
    phosphorousAluminumOther?: string | undefined;
    /** 不含钙铝的磷结合剂 *多选* *碳酸镧,司维拉姆,其它 */
    phosphorous?: string | undefined;
    /** 其他不含钙铝的磷结合剂 */
    phosphorousOther?: string | undefined;
    /** 拟钙剂 *多选* *西那卡塞,其它 */
    calcimimetics?: string | undefined;
    /** 其他拟钙剂 */
    calcimimeticsOther?: string | undefined;
    /** 其它药物 *多选* *鲑鱼降钙素,重组人生长激素,二膦酸盐,其它 */
    otherDrugs?: string | undefined;
    /** 其它药物 */
    otherDrugsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureInformationMbdEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.vitaminD = _data["vitaminD"];
            this.vitaminDOther = _data["vitaminDOther"];
            this.phosphorousCalcium = _data["phosphorousCalcium"];
            this.phosphorousCalciumOther = _data["phosphorousCalciumOther"];
            this.phosphorousAluminum = _data["phosphorousAluminum"];
            this.phosphorousAluminumOther = _data["phosphorousAluminumOther"];
            this.phosphorous = _data["phosphorous"];
            this.phosphorousOther = _data["phosphorousOther"];
            this.calcimimetics = _data["calcimimetics"];
            this.calcimimeticsOther = _data["calcimimeticsOther"];
            this.otherDrugs = _data["otherDrugs"];
            this.otherDrugsOther = _data["otherDrugsOther"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureInformationMbdEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationMbdEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["vitaminD"] = this.vitaminD;
        data["vitaminDOther"] = this.vitaminDOther;
        data["phosphorousCalcium"] = this.phosphorousCalcium;
        data["phosphorousCalciumOther"] = this.phosphorousCalciumOther;
        data["phosphorousAluminum"] = this.phosphorousAluminum;
        data["phosphorousAluminumOther"] = this.phosphorousAluminumOther;
        data["phosphorous"] = this.phosphorous;
        data["phosphorousOther"] = this.phosphorousOther;
        data["calcimimetics"] = this.calcimimetics;
        data["calcimimeticsOther"] = this.calcimimeticsOther;
        data["otherDrugs"] = this.otherDrugs;
        data["otherDrugsOther"] = this.otherDrugsOther;
        data["remark"] = this.remark;
        return data;
    }
}

/** MBD干预药治疗信息 */
export interface ICureInformationMbdEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 维生素D及衍生物 *多选* *骨化三醇,帕立骨化醇,阿法骨化醇,其它 */
    vitaminD?: string | undefined;
    /** 其它维生素D及衍生物 */
    vitaminDOther?: string | undefined;
    /** 含钙的磷结合剂 *多选* *碳酸钙,醋酸钙,葡萄糖酸钙,其它 */
    phosphorousCalcium?: string | undefined;
    /** 其他含钙的磷结合剂 */
    phosphorousCalciumOther?: string | undefined;
    /** 含铝的磷结合剂 *多选* *氢氧化铝,硫糖铝,其它 */
    phosphorousAluminum?: string | undefined;
    /** 其他含铝的磷结合剂 */
    phosphorousAluminumOther?: string | undefined;
    /** 不含钙铝的磷结合剂 *多选* *碳酸镧,司维拉姆,其它 */
    phosphorous?: string | undefined;
    /** 其他不含钙铝的磷结合剂 */
    phosphorousOther?: string | undefined;
    /** 拟钙剂 *多选* *西那卡塞,其它 */
    calcimimetics?: string | undefined;
    /** 其他拟钙剂 */
    calcimimeticsOther?: string | undefined;
    /** 其它药物 *多选* *鲑鱼降钙素,重组人生长激素,二膦酸盐,其它 */
    otherDrugs?: string | undefined;
    /** 其它药物 */
    otherDrugsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** MBD干预药治疗信息 */
export class CureInformationMbdView implements ICureInformationMbdView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 维生素D及衍生物 *多选* *骨化三醇,帕立骨化醇,阿法骨化醇,其它 */
    vitaminD?: string | undefined;
    /** 其它维生素D及衍生物 */
    vitaminDOther?: string | undefined;
    /** 含钙的磷结合剂 *多选* *碳酸钙,醋酸钙,葡萄糖酸钙,其它 */
    phosphorousCalcium?: string | undefined;
    /** 其他含钙的磷结合剂 */
    phosphorousCalciumOther?: string | undefined;
    /** 含铝的磷结合剂 *多选* *氢氧化铝,硫糖铝,其它 */
    phosphorousAluminum?: string | undefined;
    /** 其他含铝的磷结合剂 */
    phosphorousAluminumOther?: string | undefined;
    /** 不含钙铝的磷结合剂 *多选* *碳酸镧,司维拉姆,其它 */
    phosphorous?: string | undefined;
    /** 其他不含钙铝的磷结合剂 */
    phosphorousOther?: string | undefined;
    /** 拟钙剂 *多选* *西那卡塞,其它 */
    calcimimetics?: string | undefined;
    /** 其他拟钙剂 */
    calcimimeticsOther?: string | undefined;
    /** 其它药物 *多选* *鲑鱼降钙素,重组人生长激素,二膦酸盐,其它 */
    otherDrugs?: string | undefined;
    /** 其它药物 */
    otherDrugsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureInformationMbdView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.vitaminD = _data["vitaminD"];
            this.vitaminDOther = _data["vitaminDOther"];
            this.phosphorousCalcium = _data["phosphorousCalcium"];
            this.phosphorousCalciumOther = _data["phosphorousCalciumOther"];
            this.phosphorousAluminum = _data["phosphorousAluminum"];
            this.phosphorousAluminumOther = _data["phosphorousAluminumOther"];
            this.phosphorous = _data["phosphorous"];
            this.phosphorousOther = _data["phosphorousOther"];
            this.calcimimetics = _data["calcimimetics"];
            this.calcimimeticsOther = _data["calcimimeticsOther"];
            this.otherDrugs = _data["otherDrugs"];
            this.otherDrugsOther = _data["otherDrugsOther"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationMbdView {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationMbdView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["vitaminD"] = this.vitaminD;
        data["vitaminDOther"] = this.vitaminDOther;
        data["phosphorousCalcium"] = this.phosphorousCalcium;
        data["phosphorousCalciumOther"] = this.phosphorousCalciumOther;
        data["phosphorousAluminum"] = this.phosphorousAluminum;
        data["phosphorousAluminumOther"] = this.phosphorousAluminumOther;
        data["phosphorous"] = this.phosphorous;
        data["phosphorousOther"] = this.phosphorousOther;
        data["calcimimetics"] = this.calcimimetics;
        data["calcimimeticsOther"] = this.calcimimeticsOther;
        data["otherDrugs"] = this.otherDrugs;
        data["otherDrugsOther"] = this.otherDrugsOther;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** MBD干预药治疗信息 */
export interface ICureInformationMbdView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 维生素D及衍生物 *多选* *骨化三醇,帕立骨化醇,阿法骨化醇,其它 */
    vitaminD?: string | undefined;
    /** 其它维生素D及衍生物 */
    vitaminDOther?: string | undefined;
    /** 含钙的磷结合剂 *多选* *碳酸钙,醋酸钙,葡萄糖酸钙,其它 */
    phosphorousCalcium?: string | undefined;
    /** 其他含钙的磷结合剂 */
    phosphorousCalciumOther?: string | undefined;
    /** 含铝的磷结合剂 *多选* *氢氧化铝,硫糖铝,其它 */
    phosphorousAluminum?: string | undefined;
    /** 其他含铝的磷结合剂 */
    phosphorousAluminumOther?: string | undefined;
    /** 不含钙铝的磷结合剂 *多选* *碳酸镧,司维拉姆,其它 */
    phosphorous?: string | undefined;
    /** 其他不含钙铝的磷结合剂 */
    phosphorousOther?: string | undefined;
    /** 拟钙剂 *多选* *西那卡塞,其它 */
    calcimimetics?: string | undefined;
    /** 其他拟钙剂 */
    calcimimeticsOther?: string | undefined;
    /** 其它药物 *多选* *鲑鱼降钙素,重组人生长激素,二膦酸盐,其它 */
    otherDrugs?: string | undefined;
    /** 其它药物 */
    otherDrugsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureInformationMbdViewResult implements ICureInformationMbdViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationMbdView[] | undefined;

    constructor(data?: ICureInformationMbdViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInformationMbdView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationMbdViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationMbdViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInformationMbdViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationMbdView[] | undefined;
}

/** Reponse */
export class CureInformationMbdViewResultEntry implements ICureInformationMbdViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationMbdView;

    constructor(data?: ICureInformationMbdViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureInformationMbdView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationMbdViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationMbdViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureInformationMbdViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationMbdView;
}

/** 其他药物治疗信息资料 */
export class CureInformationOtherDataEditModel implements ICureInformationOtherDataEditModel {
    /** [其他药物治疗信息](#其他药物治疗信息) */
    cureInformationOtherId?: string | undefined;
    /** 路径 */
    url!: string;
    /** 拍摄日期 */
    captureDate?: dayjs.Dayjs | undefined;
    /** 标签 */
    labels?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureInformationOtherDataEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureInformationOtherId = _data["cureInformationOtherId"];
            this.url = _data["url"];
            this.captureDate = _data["captureDate"] ? dayjs(_data["captureDate"].toString()) : <any>undefined;
            this.labels = _data["labels"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureInformationOtherDataEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherDataEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureInformationOtherId"] = this.cureInformationOtherId;
        data["url"] = this.url;
        data["captureDate"] = this.captureDate ? this.captureDate.toISOString() : <any>undefined;
        data["labels"] = this.labels;
        data["remark"] = this.remark;
        return data;
    }
}

/** 其他药物治疗信息资料 */
export interface ICureInformationOtherDataEditModel {
    /** [其他药物治疗信息](#其他药物治疗信息) */
    cureInformationOtherId?: string | undefined;
    /** 路径 */
    url: string;
    /** 拍摄日期 */
    captureDate?: dayjs.Dayjs | undefined;
    /** 标签 */
    labels?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 其他药物治疗信息资料 */
export class CureInformationOtherDataView implements ICureInformationOtherDataView {
    /** [其他药物治疗信息](#其他药物治疗信息) */
    cureInformationOtherId?: string | undefined;
    /** 路径 */
    url!: string;
    /** 拍摄日期 */
    captureDate?: dayjs.Dayjs | undefined;
    /** 标签 */
    labels?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureInformationOtherDataView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureInformationOtherId = _data["cureInformationOtherId"];
            this.url = _data["url"];
            this.captureDate = _data["captureDate"] ? dayjs(_data["captureDate"].toString()) : <any>undefined;
            this.labels = _data["labels"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationOtherDataView {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherDataView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureInformationOtherId"] = this.cureInformationOtherId;
        data["url"] = this.url;
        data["captureDate"] = this.captureDate ? this.captureDate.toISOString() : <any>undefined;
        data["labels"] = this.labels;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 其他药物治疗信息资料 */
export interface ICureInformationOtherDataView {
    /** [其他药物治疗信息](#其他药物治疗信息) */
    cureInformationOtherId?: string | undefined;
    /** 路径 */
    url: string;
    /** 拍摄日期 */
    captureDate?: dayjs.Dayjs | undefined;
    /** 标签 */
    labels?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureInformationOtherDataViewResult implements ICureInformationOtherDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationOtherDataView[] | undefined;

    constructor(data?: ICureInformationOtherDataViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInformationOtherDataView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationOtherDataViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherDataViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInformationOtherDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationOtherDataView[] | undefined;
}

/** Reponse */
export class CureInformationOtherDataViewResultEntry implements ICureInformationOtherDataViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationOtherDataView;

    constructor(data?: ICureInformationOtherDataViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureInformationOtherDataView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationOtherDataViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherDataViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureInformationOtherDataViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationOtherDataView;
}

/** 其他药物治疗信息治疗信息 */
export class CureInformationOtherEditModel implements ICureInformationOtherEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 营养支持药物分类 *多选* *左旋肉碱,叶酸,α酮酸,高能营养补充液,其它 */
    nurSupportDrugs?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式 *多选* *口服,静脉 */
    nurSupportLCarnitineStyle?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量 *（/日）* */
    nurSupportLCarnitineStyleOrallyDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量 *（/日）* */
    nurlSupportLCarnitineStyleVeinDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleVeinUnit?: string | undefined;
    /** 叶酸用药方式 *多选* *口服,静脉 */
    nurSupportFolicCidStyle?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量 *（/日）* */
    nurSupportFolicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportFolicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量 *（/日）* */
    nurSupportFolicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportFolicCidVeinUnit?: string | undefined;
    /** α酮酸用药方式 *多选* *口服,静脉 */
    nurSupportKetonicCidStyle?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量 *（/日）* */
    nurSupportKetonicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportKetonicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量 *（/日）* */
    nurSupportKetonicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportKetonicCidVeinUnit?: string | undefined;
    /** 高能营养补充液用药方式 *多选* *口服,静脉 */
    nurSupportHighEnergyStyle?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量 *（/日）* */
    nurSupportHighEnergyStyleOrallyDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量单位 *剂量单位* */
    nurSupportHighEnergyStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量 *（/日）* */
    nurSupportHighEnergyStyleVeinDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportHighEnergyVeinUnit?: string | undefined;
    /** 其它营养支持药物用药方式 *多选* *口服,静脉 */
    nurSupportOtherStyle?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量 *（/日）* */
    nurSupportOtherStyleOrallyDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量单位 *剂量单位* */
    nurSupportOtherStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量 *（/日）* */
    nurSupportOtherStyleVeinDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportOtherVeinUnit?: string | undefined;
    /** 降脂药物分类 *多选* *他汀类,贝特类,烟酸类,胆酸螯合剂,胆固醇吸收抑制剂,其它 */
    lipidLoweringDrugs?: string | undefined;
    /** 降脂药物分类其他 */
    lipidLoweringDrugsOther?: string | undefined;
    /** 抗血小板药物分类 *多选* *阿司匹林,双嘧达莫（潘生丁）,噻氯匹定,氯吡格雷,其它 */
    antiplateletDrugs?: string | undefined;
    /** 抗血小板药物分类其他 */
    antiplateletDrugsOther?: string | undefined;
    /** 其它药物分类 */
    otherDrugs?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 其他药物资料属性 */
    items?: CureInformationOtherDataEditModel[] | undefined;

    constructor(data?: ICureInformationOtherEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.nurSupportDrugs = _data["nurSupportDrugs"];
            this.nurSupportLCarnitineStyle = _data["nurSupportLCarnitineStyle"];
            this.nurSupportLCarnitineStyleOrallyDose = _data["nurSupportLCarnitineStyleOrallyDose"];
            this.nurSupportLCarnitineStyleOrallyUnit = _data["nurSupportLCarnitineStyleOrallyUnit"];
            this.nurlSupportLCarnitineStyleVeinDose = _data["nurlSupportLCarnitineStyleVeinDose"];
            this.nurSupportLCarnitineStyleVeinUnit = _data["nurSupportLCarnitineStyleVeinUnit"];
            this.nurSupportFolicCidStyle = _data["nurSupportFolicCidStyle"];
            this.nurSupportFolicCidStyleOrallyDose = _data["nurSupportFolicCidStyleOrallyDose"];
            this.nurSupportFolicCidStyleOrallyUnit = _data["nurSupportFolicCidStyleOrallyUnit"];
            this.nurSupportFolicCidStyleVeinDose = _data["nurSupportFolicCidStyleVeinDose"];
            this.nurSupportFolicCidVeinUnit = _data["nurSupportFolicCidVeinUnit"];
            this.nurSupportKetonicCidStyle = _data["nurSupportKetonicCidStyle"];
            this.nurSupportKetonicCidStyleOrallyDose = _data["nurSupportKetonicCidStyleOrallyDose"];
            this.nurSupportKetonicCidStyleOrallyUnit = _data["nurSupportKetonicCidStyleOrallyUnit"];
            this.nurSupportKetonicCidStyleVeinDose = _data["nurSupportKetonicCidStyleVeinDose"];
            this.nurSupportKetonicCidVeinUnit = _data["nurSupportKetonicCidVeinUnit"];
            this.nurSupportHighEnergyStyle = _data["nurSupportHighEnergyStyle"];
            this.nurSupportHighEnergyStyleOrallyDose = _data["nurSupportHighEnergyStyleOrallyDose"];
            this.nurSupportHighEnergyStyleOrallyUnit = _data["nurSupportHighEnergyStyleOrallyUnit"];
            this.nurSupportHighEnergyStyleVeinDose = _data["nurSupportHighEnergyStyleVeinDose"];
            this.nurSupportHighEnergyVeinUnit = _data["nurSupportHighEnergyVeinUnit"];
            this.nurSupportOtherStyle = _data["nurSupportOtherStyle"];
            this.nurSupportOtherStyleOrallyDose = _data["nurSupportOtherStyleOrallyDose"];
            this.nurSupportOtherStyleOrallyUnit = _data["nurSupportOtherStyleOrallyUnit"];
            this.nurSupportOtherStyleVeinDose = _data["nurSupportOtherStyleVeinDose"];
            this.nurSupportOtherVeinUnit = _data["nurSupportOtherVeinUnit"];
            this.lipidLoweringDrugs = _data["lipidLoweringDrugs"];
            this.lipidLoweringDrugsOther = _data["lipidLoweringDrugsOther"];
            this.antiplateletDrugs = _data["antiplateletDrugs"];
            this.antiplateletDrugsOther = _data["antiplateletDrugsOther"];
            this.otherDrugs = _data["otherDrugs"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureInformationOtherDataEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationOtherEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["nurSupportDrugs"] = this.nurSupportDrugs;
        data["nurSupportLCarnitineStyle"] = this.nurSupportLCarnitineStyle;
        data["nurSupportLCarnitineStyleOrallyDose"] = this.nurSupportLCarnitineStyleOrallyDose;
        data["nurSupportLCarnitineStyleOrallyUnit"] = this.nurSupportLCarnitineStyleOrallyUnit;
        data["nurlSupportLCarnitineStyleVeinDose"] = this.nurlSupportLCarnitineStyleVeinDose;
        data["nurSupportLCarnitineStyleVeinUnit"] = this.nurSupportLCarnitineStyleVeinUnit;
        data["nurSupportFolicCidStyle"] = this.nurSupportFolicCidStyle;
        data["nurSupportFolicCidStyleOrallyDose"] = this.nurSupportFolicCidStyleOrallyDose;
        data["nurSupportFolicCidStyleOrallyUnit"] = this.nurSupportFolicCidStyleOrallyUnit;
        data["nurSupportFolicCidStyleVeinDose"] = this.nurSupportFolicCidStyleVeinDose;
        data["nurSupportFolicCidVeinUnit"] = this.nurSupportFolicCidVeinUnit;
        data["nurSupportKetonicCidStyle"] = this.nurSupportKetonicCidStyle;
        data["nurSupportKetonicCidStyleOrallyDose"] = this.nurSupportKetonicCidStyleOrallyDose;
        data["nurSupportKetonicCidStyleOrallyUnit"] = this.nurSupportKetonicCidStyleOrallyUnit;
        data["nurSupportKetonicCidStyleVeinDose"] = this.nurSupportKetonicCidStyleVeinDose;
        data["nurSupportKetonicCidVeinUnit"] = this.nurSupportKetonicCidVeinUnit;
        data["nurSupportHighEnergyStyle"] = this.nurSupportHighEnergyStyle;
        data["nurSupportHighEnergyStyleOrallyDose"] = this.nurSupportHighEnergyStyleOrallyDose;
        data["nurSupportHighEnergyStyleOrallyUnit"] = this.nurSupportHighEnergyStyleOrallyUnit;
        data["nurSupportHighEnergyStyleVeinDose"] = this.nurSupportHighEnergyStyleVeinDose;
        data["nurSupportHighEnergyVeinUnit"] = this.nurSupportHighEnergyVeinUnit;
        data["nurSupportOtherStyle"] = this.nurSupportOtherStyle;
        data["nurSupportOtherStyleOrallyDose"] = this.nurSupportOtherStyleOrallyDose;
        data["nurSupportOtherStyleOrallyUnit"] = this.nurSupportOtherStyleOrallyUnit;
        data["nurSupportOtherStyleVeinDose"] = this.nurSupportOtherStyleVeinDose;
        data["nurSupportOtherVeinUnit"] = this.nurSupportOtherVeinUnit;
        data["lipidLoweringDrugs"] = this.lipidLoweringDrugs;
        data["lipidLoweringDrugsOther"] = this.lipidLoweringDrugsOther;
        data["antiplateletDrugs"] = this.antiplateletDrugs;
        data["antiplateletDrugsOther"] = this.antiplateletDrugsOther;
        data["otherDrugs"] = this.otherDrugs;
        data["remark"] = this.remark;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 其他药物治疗信息治疗信息 */
export interface ICureInformationOtherEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 营养支持药物分类 *多选* *左旋肉碱,叶酸,α酮酸,高能营养补充液,其它 */
    nurSupportDrugs?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式 *多选* *口服,静脉 */
    nurSupportLCarnitineStyle?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量 *（/日）* */
    nurSupportLCarnitineStyleOrallyDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量 *（/日）* */
    nurlSupportLCarnitineStyleVeinDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleVeinUnit?: string | undefined;
    /** 叶酸用药方式 *多选* *口服,静脉 */
    nurSupportFolicCidStyle?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量 *（/日）* */
    nurSupportFolicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportFolicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量 *（/日）* */
    nurSupportFolicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportFolicCidVeinUnit?: string | undefined;
    /** α酮酸用药方式 *多选* *口服,静脉 */
    nurSupportKetonicCidStyle?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量 *（/日）* */
    nurSupportKetonicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportKetonicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量 *（/日）* */
    nurSupportKetonicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportKetonicCidVeinUnit?: string | undefined;
    /** 高能营养补充液用药方式 *多选* *口服,静脉 */
    nurSupportHighEnergyStyle?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量 *（/日）* */
    nurSupportHighEnergyStyleOrallyDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量单位 *剂量单位* */
    nurSupportHighEnergyStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量 *（/日）* */
    nurSupportHighEnergyStyleVeinDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportHighEnergyVeinUnit?: string | undefined;
    /** 其它营养支持药物用药方式 *多选* *口服,静脉 */
    nurSupportOtherStyle?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量 *（/日）* */
    nurSupportOtherStyleOrallyDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量单位 *剂量单位* */
    nurSupportOtherStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量 *（/日）* */
    nurSupportOtherStyleVeinDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportOtherVeinUnit?: string | undefined;
    /** 降脂药物分类 *多选* *他汀类,贝特类,烟酸类,胆酸螯合剂,胆固醇吸收抑制剂,其它 */
    lipidLoweringDrugs?: string | undefined;
    /** 降脂药物分类其他 */
    lipidLoweringDrugsOther?: string | undefined;
    /** 抗血小板药物分类 *多选* *阿司匹林,双嘧达莫（潘生丁）,噻氯匹定,氯吡格雷,其它 */
    antiplateletDrugs?: string | undefined;
    /** 抗血小板药物分类其他 */
    antiplateletDrugsOther?: string | undefined;
    /** 其它药物分类 */
    otherDrugs?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 其他药物资料属性 */
    items?: CureInformationOtherDataEditModel[] | undefined;
}

/** 其他药物治疗信息治疗信息 */
export class CureInformationOtherView implements ICureInformationOtherView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 营养支持药物分类 *多选* *左旋肉碱,叶酸,α酮酸,高能营养补充液,其它 */
    nurSupportDrugs?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式 *多选* *口服,静脉 */
    nurSupportLCarnitineStyle?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量 *（/日）* */
    nurSupportLCarnitineStyleOrallyDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量 *（/日）* */
    nurlSupportLCarnitineStyleVeinDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleVeinUnit?: string | undefined;
    /** 叶酸用药方式 *多选* *口服,静脉 */
    nurSupportFolicCidStyle?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量 *（/日）* */
    nurSupportFolicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportFolicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量 *（/日）* */
    nurSupportFolicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportFolicCidVeinUnit?: string | undefined;
    /** α酮酸用药方式 *多选* *口服,静脉 */
    nurSupportKetonicCidStyle?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量 *（/日）* */
    nurSupportKetonicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportKetonicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量 *（/日）* */
    nurSupportKetonicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportKetonicCidVeinUnit?: string | undefined;
    /** 高能营养补充液用药方式 *多选* *口服,静脉 */
    nurSupportHighEnergyStyle?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量 *（/日）* */
    nurSupportHighEnergyStyleOrallyDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量单位 *剂量单位* */
    nurSupportHighEnergyStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量 *（/日）* */
    nurSupportHighEnergyStyleVeinDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportHighEnergyVeinUnit?: string | undefined;
    /** 其它营养支持药物用药方式 *多选* *口服,静脉 */
    nurSupportOtherStyle?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量 *（/日）* */
    nurSupportOtherStyleOrallyDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量单位 *剂量单位* */
    nurSupportOtherStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量 *（/日）* */
    nurSupportOtherStyleVeinDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportOtherVeinUnit?: string | undefined;
    /** 降脂药物分类 *多选* *他汀类,贝特类,烟酸类,胆酸螯合剂,胆固醇吸收抑制剂,其它 */
    lipidLoweringDrugs?: string | undefined;
    /** 降脂药物分类其他 */
    lipidLoweringDrugsOther?: string | undefined;
    /** 抗血小板药物分类 *多选* *阿司匹林,双嘧达莫（潘生丁）,噻氯匹定,氯吡格雷,其它 */
    antiplateletDrugs?: string | undefined;
    /** 抗血小板药物分类其他 */
    antiplateletDrugsOther?: string | undefined;
    /** 其它药物分类 */
    otherDrugs?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 其他药物资料属性 */
    items?: CureInformationOtherDataView[] | undefined;

    constructor(data?: ICureInformationOtherView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.nurSupportDrugs = _data["nurSupportDrugs"];
            this.nurSupportLCarnitineStyle = _data["nurSupportLCarnitineStyle"];
            this.nurSupportLCarnitineStyleOrallyDose = _data["nurSupportLCarnitineStyleOrallyDose"];
            this.nurSupportLCarnitineStyleOrallyUnit = _data["nurSupportLCarnitineStyleOrallyUnit"];
            this.nurlSupportLCarnitineStyleVeinDose = _data["nurlSupportLCarnitineStyleVeinDose"];
            this.nurSupportLCarnitineStyleVeinUnit = _data["nurSupportLCarnitineStyleVeinUnit"];
            this.nurSupportFolicCidStyle = _data["nurSupportFolicCidStyle"];
            this.nurSupportFolicCidStyleOrallyDose = _data["nurSupportFolicCidStyleOrallyDose"];
            this.nurSupportFolicCidStyleOrallyUnit = _data["nurSupportFolicCidStyleOrallyUnit"];
            this.nurSupportFolicCidStyleVeinDose = _data["nurSupportFolicCidStyleVeinDose"];
            this.nurSupportFolicCidVeinUnit = _data["nurSupportFolicCidVeinUnit"];
            this.nurSupportKetonicCidStyle = _data["nurSupportKetonicCidStyle"];
            this.nurSupportKetonicCidStyleOrallyDose = _data["nurSupportKetonicCidStyleOrallyDose"];
            this.nurSupportKetonicCidStyleOrallyUnit = _data["nurSupportKetonicCidStyleOrallyUnit"];
            this.nurSupportKetonicCidStyleVeinDose = _data["nurSupportKetonicCidStyleVeinDose"];
            this.nurSupportKetonicCidVeinUnit = _data["nurSupportKetonicCidVeinUnit"];
            this.nurSupportHighEnergyStyle = _data["nurSupportHighEnergyStyle"];
            this.nurSupportHighEnergyStyleOrallyDose = _data["nurSupportHighEnergyStyleOrallyDose"];
            this.nurSupportHighEnergyStyleOrallyUnit = _data["nurSupportHighEnergyStyleOrallyUnit"];
            this.nurSupportHighEnergyStyleVeinDose = _data["nurSupportHighEnergyStyleVeinDose"];
            this.nurSupportHighEnergyVeinUnit = _data["nurSupportHighEnergyVeinUnit"];
            this.nurSupportOtherStyle = _data["nurSupportOtherStyle"];
            this.nurSupportOtherStyleOrallyDose = _data["nurSupportOtherStyleOrallyDose"];
            this.nurSupportOtherStyleOrallyUnit = _data["nurSupportOtherStyleOrallyUnit"];
            this.nurSupportOtherStyleVeinDose = _data["nurSupportOtherStyleVeinDose"];
            this.nurSupportOtherVeinUnit = _data["nurSupportOtherVeinUnit"];
            this.lipidLoweringDrugs = _data["lipidLoweringDrugs"];
            this.lipidLoweringDrugsOther = _data["lipidLoweringDrugsOther"];
            this.antiplateletDrugs = _data["antiplateletDrugs"];
            this.antiplateletDrugsOther = _data["antiplateletDrugsOther"];
            this.otherDrugs = _data["otherDrugs"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureInformationOtherDataView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationOtherView {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["nurSupportDrugs"] = this.nurSupportDrugs;
        data["nurSupportLCarnitineStyle"] = this.nurSupportLCarnitineStyle;
        data["nurSupportLCarnitineStyleOrallyDose"] = this.nurSupportLCarnitineStyleOrallyDose;
        data["nurSupportLCarnitineStyleOrallyUnit"] = this.nurSupportLCarnitineStyleOrallyUnit;
        data["nurlSupportLCarnitineStyleVeinDose"] = this.nurlSupportLCarnitineStyleVeinDose;
        data["nurSupportLCarnitineStyleVeinUnit"] = this.nurSupportLCarnitineStyleVeinUnit;
        data["nurSupportFolicCidStyle"] = this.nurSupportFolicCidStyle;
        data["nurSupportFolicCidStyleOrallyDose"] = this.nurSupportFolicCidStyleOrallyDose;
        data["nurSupportFolicCidStyleOrallyUnit"] = this.nurSupportFolicCidStyleOrallyUnit;
        data["nurSupportFolicCidStyleVeinDose"] = this.nurSupportFolicCidStyleVeinDose;
        data["nurSupportFolicCidVeinUnit"] = this.nurSupportFolicCidVeinUnit;
        data["nurSupportKetonicCidStyle"] = this.nurSupportKetonicCidStyle;
        data["nurSupportKetonicCidStyleOrallyDose"] = this.nurSupportKetonicCidStyleOrallyDose;
        data["nurSupportKetonicCidStyleOrallyUnit"] = this.nurSupportKetonicCidStyleOrallyUnit;
        data["nurSupportKetonicCidStyleVeinDose"] = this.nurSupportKetonicCidStyleVeinDose;
        data["nurSupportKetonicCidVeinUnit"] = this.nurSupportKetonicCidVeinUnit;
        data["nurSupportHighEnergyStyle"] = this.nurSupportHighEnergyStyle;
        data["nurSupportHighEnergyStyleOrallyDose"] = this.nurSupportHighEnergyStyleOrallyDose;
        data["nurSupportHighEnergyStyleOrallyUnit"] = this.nurSupportHighEnergyStyleOrallyUnit;
        data["nurSupportHighEnergyStyleVeinDose"] = this.nurSupportHighEnergyStyleVeinDose;
        data["nurSupportHighEnergyVeinUnit"] = this.nurSupportHighEnergyVeinUnit;
        data["nurSupportOtherStyle"] = this.nurSupportOtherStyle;
        data["nurSupportOtherStyleOrallyDose"] = this.nurSupportOtherStyleOrallyDose;
        data["nurSupportOtherStyleOrallyUnit"] = this.nurSupportOtherStyleOrallyUnit;
        data["nurSupportOtherStyleVeinDose"] = this.nurSupportOtherStyleVeinDose;
        data["nurSupportOtherVeinUnit"] = this.nurSupportOtherVeinUnit;
        data["lipidLoweringDrugs"] = this.lipidLoweringDrugs;
        data["lipidLoweringDrugsOther"] = this.lipidLoweringDrugsOther;
        data["antiplateletDrugs"] = this.antiplateletDrugs;
        data["antiplateletDrugsOther"] = this.antiplateletDrugsOther;
        data["otherDrugs"] = this.otherDrugs;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 其他药物治疗信息治疗信息 */
export interface ICureInformationOtherView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 营养支持药物分类 *多选* *左旋肉碱,叶酸,α酮酸,高能营养补充液,其它 */
    nurSupportDrugs?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式 *多选* *口服,静脉 */
    nurSupportLCarnitineStyle?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量 *（/日）* */
    nurSupportLCarnitineStyleOrallyDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量 *（/日）* */
    nurlSupportLCarnitineStyleVeinDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleVeinUnit?: string | undefined;
    /** 叶酸用药方式 *多选* *口服,静脉 */
    nurSupportFolicCidStyle?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量 *（/日）* */
    nurSupportFolicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportFolicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量 *（/日）* */
    nurSupportFolicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportFolicCidVeinUnit?: string | undefined;
    /** α酮酸用药方式 *多选* *口服,静脉 */
    nurSupportKetonicCidStyle?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量 *（/日）* */
    nurSupportKetonicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportKetonicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量 *（/日）* */
    nurSupportKetonicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportKetonicCidVeinUnit?: string | undefined;
    /** 高能营养补充液用药方式 *多选* *口服,静脉 */
    nurSupportHighEnergyStyle?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量 *（/日）* */
    nurSupportHighEnergyStyleOrallyDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量单位 *剂量单位* */
    nurSupportHighEnergyStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量 *（/日）* */
    nurSupportHighEnergyStyleVeinDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportHighEnergyVeinUnit?: string | undefined;
    /** 其它营养支持药物用药方式 *多选* *口服,静脉 */
    nurSupportOtherStyle?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量 *（/日）* */
    nurSupportOtherStyleOrallyDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量单位 *剂量单位* */
    nurSupportOtherStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量 *（/日）* */
    nurSupportOtherStyleVeinDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportOtherVeinUnit?: string | undefined;
    /** 降脂药物分类 *多选* *他汀类,贝特类,烟酸类,胆酸螯合剂,胆固醇吸收抑制剂,其它 */
    lipidLoweringDrugs?: string | undefined;
    /** 降脂药物分类其他 */
    lipidLoweringDrugsOther?: string | undefined;
    /** 抗血小板药物分类 *多选* *阿司匹林,双嘧达莫（潘生丁）,噻氯匹定,氯吡格雷,其它 */
    antiplateletDrugs?: string | undefined;
    /** 抗血小板药物分类其他 */
    antiplateletDrugsOther?: string | undefined;
    /** 其它药物分类 */
    otherDrugs?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 其他药物资料属性 */
    items?: CureInformationOtherDataView[] | undefined;
}

/** Reponse */
export class CureInformationOtherViewResult implements ICureInformationOtherViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationOtherView[] | undefined;

    constructor(data?: ICureInformationOtherViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInformationOtherView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationOtherViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInformationOtherViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationOtherView[] | undefined;
}

/** Reponse */
export class CureInformationOtherViewResultEntry implements ICureInformationOtherViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationOtherView;

    constructor(data?: ICureInformationOtherViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureInformationOtherView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationOtherViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureInformationOtherViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationOtherView;
}

/** 透析过程记录 */
export class CureLog implements ICureLog {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 操作时间 */
    operatorTime?: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 类型 *确认方案,核对医嘱,记录并发症,透中护理等* */
    type?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;

    constructor(data?: ICureLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.operatorTime = _data["operatorTime"] ? dayjs(_data["operatorTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureLog {
        data = typeof data === 'object' ? data : {};
        let result = new CureLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["operatorTime"] = this.operatorTime ? this.operatorTime.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["type"] = this.type;
        data["content"] = this.content;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析过程记录 */
export interface ICureLog {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 操作时间 */
    operatorTime?: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 类型 *确认方案,核对医嘱,记录并发症,透中护理等* */
    type?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;
}

/** 透析过程记录照片 */
export class CureLogFile implements ICureLogFile {
    /** 标识 */
    id?: string | undefined;
    /** [透析过程记录标识](透析过程记录) */
    cureLogId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    cureLogs?: CureLog;
    hfsFiless?: HfsFiles;

    constructor(data?: ICureLogFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureLogId = _data["cureLogId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.cureLogs = _data["cureLogs"] ? CureLog.fromJS(_data["cureLogs"]) : <any>undefined;
            this.hfsFiless = _data["hfsFiless"] ? HfsFiles.fromJS(_data["hfsFiless"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureLogFile {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureLogId"] = this.cureLogId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["cureLogs"] = this.cureLogs ? this.cureLogs.toJSON() : <any>undefined;
        data["hfsFiless"] = this.hfsFiless ? this.hfsFiless.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析过程记录照片 */
export interface ICureLogFile {
    /** 标识 */
    id?: string | undefined;
    /** [透析过程记录标识](透析过程记录) */
    cureLogId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    cureLogs?: CureLog;
    hfsFiless?: HfsFiles;
}

/** Reponse */
export class CureLogFileResult implements ICureLogFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureLogFile[] | undefined;

    constructor(data?: ICureLogFileResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureLogFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureLogFileResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogFileResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureLogFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureLogFile[] | undefined;
}

/** Reponse */
export class CureLogFileResultEntry implements ICureLogFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureLogFile;

    constructor(data?: ICureLogFileResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureLogFile.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureLogFileResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogFileResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureLogFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureLogFile;
}

/** 透析过程记录照片 (ViewModel) */
export class CureLogFileViewModel implements ICureLogFileViewModel {
    /** [透析过程记录标识](透析过程记录Id) */
    cureLogId!: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureLogFileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureLogId = _data["cureLogId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureLogFileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogFileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureLogId"] = this.cureLogId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析过程记录照片 (ViewModel) */
export interface ICureLogFileViewModel {
    /** [透析过程记录标识](透析过程记录Id) */
    cureLogId: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId: string;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class CureLogResult implements ICureLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureLog[] | undefined;

    constructor(data?: ICureLogResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureLog.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureLogResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureLog[] | undefined;
}

/** Reponse */
export class CureLogResultEntry implements ICureLogResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureLog;

    constructor(data?: ICureLogResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureLog.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureLogResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureLogResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureLog;
}

/** 透析过程记录 (ViewModel) */
export class CureLogViewModel implements ICureLogViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 操作时间 */
    operatorTime!: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId!: string;
    /** 操作者姓名 */
    operatorName!: string;
    /** 类型 *确认方案,核对医嘱,记录并发症,透中护理等* */
    type?: string | undefined;
    /** 内容 */
    content?: string | undefined;

    constructor(data?: ICureLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.operatorTime = _data["operatorTime"] ? dayjs(_data["operatorTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.type = _data["type"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): CureLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["operatorTime"] = this.operatorTime ? this.operatorTime.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["type"] = this.type;
        data["content"] = this.content;
        return data;
    }
}

/** 透析过程记录 (ViewModel) */
export interface ICureLogViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 操作时间 */
    operatorTime: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId: string;
    /** 操作者姓名 */
    operatorName: string;
    /** 类型 *确认方案,核对医嘱,记录并发症,透中护理等* */
    type?: string | undefined;
    /** 内容 */
    content?: string | undefined;
}

/** 透析排班耗材 */
export class CureOrderShiftConsumableEditModel implements ICureOrderShiftConsumableEditModel {
    /** [透析排班标识](#透析排班) */
    cureOrderShiftId!: string;
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureOrderShiftConsumableEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureOrderShiftId = _data["cureOrderShiftId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureOrderShiftConsumableEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftConsumableEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureOrderShiftId"] = this.cureOrderShiftId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析排班耗材 */
export interface ICureOrderShiftConsumableEditModel {
    /** [透析排班标识](#透析排班) */
    cureOrderShiftId: string;
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析排班耗材 */
export class CureOrderShiftConsumableView implements ICureOrderShiftConsumableView {
    /** [透析排班标识](#透析排班) */
    cureOrderShiftId!: string;
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureOrderShiftConsumableView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureOrderShiftId = _data["cureOrderShiftId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureOrderShiftConsumableView {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftConsumableView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureOrderShiftId"] = this.cureOrderShiftId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析排班耗材 */
export interface ICureOrderShiftConsumableView {
    /** [透析排班标识](#透析排班) */
    cureOrderShiftId: string;
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureOrderShiftConsumableViewResult implements ICureOrderShiftConsumableViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOrderShiftConsumableView[] | undefined;

    constructor(data?: ICureOrderShiftConsumableViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureOrderShiftConsumableView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureOrderShiftConsumableViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftConsumableViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureOrderShiftConsumableViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOrderShiftConsumableView[] | undefined;
}

/** Reponse */
export class CureOrderShiftConsumableViewResultEntry implements ICureOrderShiftConsumableViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureOrderShiftConsumableView;

    constructor(data?: ICureOrderShiftConsumableViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureOrderShiftConsumableView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureOrderShiftConsumableViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftConsumableViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureOrderShiftConsumableViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureOrderShiftConsumableView;
}

/** 透析排班 */
export class CureOrderShiftEditModel implements ICureOrderShiftEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 透析日期 */
    dialysisDate!: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](#透析班次) */
    cureShiftId!: string;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 排床院区 */
    sysHospitalAreaId!: string;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;

    constructor(data?: ICureOrderShiftEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisMode = _data["dialysisMode"];
            this.cureShiftId = _data["cureShiftId"];
            this.color = _data["color"];
            this.fontColor = _data["fontColor"];
            this.icon = _data["icon"];
            this.cureRecordId = _data["cureRecordId"];
            this.remark = _data["remark"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(RoomRecordItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureOrderShiftEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["dialysisMode"] = this.dialysisMode;
        data["cureShiftId"] = this.cureShiftId;
        data["color"] = this.color;
        data["fontColor"] = this.fontColor;
        data["icon"] = this.icon;
        data["cureRecordId"] = this.cureRecordId;
        data["remark"] = this.remark;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析排班 */
export interface ICureOrderShiftEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 透析日期 */
    dialysisDate: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](#透析班次) */
    cureShiftId: string;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 排床院区 */
    sysHospitalAreaId: string;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;
}

/** 透析排班 */
export class CureOrderShiftView implements ICureOrderShiftView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 透析日期 */
    dialysisDate!: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](#透析班次) */
    cureShiftId!: string;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 排床院区 */
    sysHospitalAreaId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureOrderShiftView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisMode = _data["dialysisMode"];
            this.cureShiftId = _data["cureShiftId"];
            this.color = _data["color"];
            this.fontColor = _data["fontColor"];
            this.icon = _data["icon"];
            this.cureRecordId = _data["cureRecordId"];
            this.remark = _data["remark"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureOrderShiftView {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["dialysisMode"] = this.dialysisMode;
        data["cureShiftId"] = this.cureShiftId;
        data["color"] = this.color;
        data["fontColor"] = this.fontColor;
        data["icon"] = this.icon;
        data["cureRecordId"] = this.cureRecordId;
        data["remark"] = this.remark;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析排班 */
export interface ICureOrderShiftView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 透析日期 */
    dialysisDate: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](#透析班次) */
    cureShiftId: string;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 排床院区 */
    sysHospitalAreaId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureOrderShiftViewResult implements ICureOrderShiftViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOrderShiftView[] | undefined;

    constructor(data?: ICureOrderShiftViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureOrderShiftView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureOrderShiftViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureOrderShiftViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOrderShiftView[] | undefined;
}

/** 患者处方 */
export class CurePrescription implements ICurePrescription {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [医生标识](用户信息) */
    doctorId?: string | undefined;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type?: string | undefined;
    /** 处方日期 */
    date?: dayjs.Dayjs;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode?: string | undefined;
    /** 透析时长 *分钟* */
    dialysisDuration?: number;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    patients?: Patient;
    doctors?: SysUser;
    patientVascularAccesss?: PatientVascularAccess;

    constructor(data?: ICurePrescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.doctorId = _data["doctorId"];
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.totalCount = _data["totalCount"];
            this.usageCount = _data["usageCount"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDuration = _data["dialysisDuration"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.rfm = _data["rfm"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.dialysateName = _data["dialysateName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.nonReason = _data["nonReason"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.dialysisFrequency = _data["dialysisFrequency"];
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.doctors = _data["doctors"] ? SysUser.fromJS(_data["doctors"]) : <any>undefined;
            this.patientVascularAccesss = _data["patientVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientVascularAccesss"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePrescription {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["doctorId"] = this.doctorId;
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["totalCount"] = this.totalCount;
        data["usageCount"] = this.usageCount;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDuration"] = this.dialysisDuration;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["rfm"] = this.rfm;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["dialysateName"] = this.dialysateName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["anticoagulantName"] = this.anticoagulantName;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["nonReason"] = this.nonReason;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["dialysisFrequency"] = this.dialysisFrequency;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["doctors"] = this.doctors ? this.doctors.toJSON() : <any>undefined;
        data["patientVascularAccesss"] = this.patientVascularAccesss ? this.patientVascularAccesss.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者处方 */
export interface ICurePrescription {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [医生标识](用户信息) */
    doctorId?: string | undefined;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type?: string | undefined;
    /** 处方日期 */
    date?: dayjs.Dayjs;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode?: string | undefined;
    /** 透析时长 *分钟* */
    dialysisDuration?: number;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    patients?: Patient;
    doctors?: SysUser;
    patientVascularAccesss?: PatientVascularAccess;
}

/** 患者处方耗材 */
export class CurePrescriptionConsumable implements ICurePrescriptionConsumable {
    /** 标识 */
    id?: string | undefined;
    /** [处方标识](患者处方) */
    curePrescriptionId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 耗材数量 */
    count?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    curePrescriptions?: CurePrescription;
    roomItemLists?: RoomItemList;

    constructor(data?: ICurePrescriptionConsumable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.curePrescriptionId = _data["curePrescriptionId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.curePrescriptions = _data["curePrescriptions"] ? CurePrescription.fromJS(_data["curePrescriptions"]) : <any>undefined;
            this.roomItemLists = _data["roomItemLists"] ? RoomItemList.fromJS(_data["roomItemLists"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePrescriptionConsumable {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionConsumable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["curePrescriptionId"] = this.curePrescriptionId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["curePrescriptions"] = this.curePrescriptions ? this.curePrescriptions.toJSON() : <any>undefined;
        data["roomItemLists"] = this.roomItemLists ? this.roomItemLists.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者处方耗材 */
export interface ICurePrescriptionConsumable {
    /** 标识 */
    id?: string | undefined;
    /** [处方标识](患者处方) */
    curePrescriptionId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 耗材数量 */
    count?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    curePrescriptions?: CurePrescription;
    roomItemLists?: RoomItemList;
}

/** Reponse */
export class CurePrescriptionConsumableResult implements ICurePrescriptionConsumableResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CurePrescriptionConsumable[] | undefined;

    constructor(data?: ICurePrescriptionConsumableResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CurePrescriptionConsumable.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurePrescriptionConsumableResult {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionConsumableResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionConsumableResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CurePrescriptionConsumable[] | undefined;
}

/** Reponse */
export class CurePrescriptionConsumableResultEntry implements ICurePrescriptionConsumableResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionConsumable;

    constructor(data?: ICurePrescriptionConsumableResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CurePrescriptionConsumable.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePrescriptionConsumableResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionConsumableResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionConsumableResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionConsumable;
}

/** 处方耗材 */
export class CurePrescriptionConsumableView implements ICurePrescriptionConsumableView {
    /** 耗材标识-透析器 */
    roomItemListTXQId?: string | undefined;
    /** 耗材标识-灌流器 */
    roomItemListGLQId?: string | undefined;
    /** 耗材标识-血滤器 */
    roomItemListXLQId?: string | undefined;
    /** 耗材标识-血路管 */
    roomItemListXLGId?: string | undefined;
    /** 耗材标识-内瘘针 */
    roomItemListNLZId?: string | undefined;
    /** 耗材标识-置换液管路 */
    roomItemListZHYGLId?: string | undefined;
    /** 耗材-透析器数量 */
    roomItemListTXQCount?: number | undefined;
    /** 耗材-灌流器数量 */
    roomItemListGLQCount?: number | undefined;
    /** 耗材-血滤器数量 */
    roomItemListXLQCount?: number | undefined;
    /** 耗材-血路管数量 */
    roomItemListXLGCount?: number | undefined;
    /** 耗材-内瘘针数量 */
    roomItemListNLZCount?: number | undefined;
    /** 耗材-置换液管路数量 */
    roomItemListZHYGLCount?: number | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabel?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabel?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabel?: string | undefined;

    constructor(data?: ICurePrescriptionConsumableView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListTXQId = _data["roomItemListTXQId"];
            this.roomItemListGLQId = _data["roomItemListGLQId"];
            this.roomItemListXLQId = _data["roomItemListXLQId"];
            this.roomItemListXLGId = _data["roomItemListXLGId"];
            this.roomItemListNLZId = _data["roomItemListNLZId"];
            this.roomItemListZHYGLId = _data["roomItemListZHYGLId"];
            this.roomItemListTXQCount = _data["roomItemListTXQCount"];
            this.roomItemListGLQCount = _data["roomItemListGLQCount"];
            this.roomItemListXLQCount = _data["roomItemListXLQCount"];
            this.roomItemListXLGCount = _data["roomItemListXLGCount"];
            this.roomItemListNLZCount = _data["roomItemListNLZCount"];
            this.roomItemListZHYGLCount = _data["roomItemListZHYGLCount"];
            this.roomItemListTXQLabel = _data["roomItemListTXQLabel"];
            this.roomItemListGLQLabel = _data["roomItemListGLQLabel"];
            this.roomItemListXLQLabel = _data["roomItemListXLQLabel"];
            this.roomItemListXLGLabel = _data["roomItemListXLGLabel"];
            this.roomItemListNLZLabel = _data["roomItemListNLZLabel"];
            this.roomItemListZHYGLLabel = _data["roomItemListZHYGLLabel"];
        }
    }

    static fromJS(data: any): CurePrescriptionConsumableView {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionConsumableView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListTXQId"] = this.roomItemListTXQId;
        data["roomItemListGLQId"] = this.roomItemListGLQId;
        data["roomItemListXLQId"] = this.roomItemListXLQId;
        data["roomItemListXLGId"] = this.roomItemListXLGId;
        data["roomItemListNLZId"] = this.roomItemListNLZId;
        data["roomItemListZHYGLId"] = this.roomItemListZHYGLId;
        data["roomItemListTXQCount"] = this.roomItemListTXQCount;
        data["roomItemListGLQCount"] = this.roomItemListGLQCount;
        data["roomItemListXLQCount"] = this.roomItemListXLQCount;
        data["roomItemListXLGCount"] = this.roomItemListXLGCount;
        data["roomItemListNLZCount"] = this.roomItemListNLZCount;
        data["roomItemListZHYGLCount"] = this.roomItemListZHYGLCount;
        data["roomItemListTXQLabel"] = this.roomItemListTXQLabel;
        data["roomItemListGLQLabel"] = this.roomItemListGLQLabel;
        data["roomItemListXLQLabel"] = this.roomItemListXLQLabel;
        data["roomItemListXLGLabel"] = this.roomItemListXLGLabel;
        data["roomItemListNLZLabel"] = this.roomItemListNLZLabel;
        data["roomItemListZHYGLLabel"] = this.roomItemListZHYGLLabel;
        return data;
    }
}

/** 处方耗材 */
export interface ICurePrescriptionConsumableView {
    /** 耗材标识-透析器 */
    roomItemListTXQId?: string | undefined;
    /** 耗材标识-灌流器 */
    roomItemListGLQId?: string | undefined;
    /** 耗材标识-血滤器 */
    roomItemListXLQId?: string | undefined;
    /** 耗材标识-血路管 */
    roomItemListXLGId?: string | undefined;
    /** 耗材标识-内瘘针 */
    roomItemListNLZId?: string | undefined;
    /** 耗材标识-置换液管路 */
    roomItemListZHYGLId?: string | undefined;
    /** 耗材-透析器数量 */
    roomItemListTXQCount?: number | undefined;
    /** 耗材-灌流器数量 */
    roomItemListGLQCount?: number | undefined;
    /** 耗材-血滤器数量 */
    roomItemListXLQCount?: number | undefined;
    /** 耗材-血路管数量 */
    roomItemListXLGCount?: number | undefined;
    /** 耗材-内瘘针数量 */
    roomItemListNLZCount?: number | undefined;
    /** 耗材-置换液管路数量 */
    roomItemListZHYGLCount?: number | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabel?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabel?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabel?: string | undefined;
}

/** 患者处方耗材 (ViewModel) */
export class CurePrescriptionConsumableViewModel implements ICurePrescriptionConsumableViewModel {
    /** [处方标识](患者处方Id) */
    curePrescriptionId!: string;
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICurePrescriptionConsumableViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.curePrescriptionId = _data["curePrescriptionId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CurePrescriptionConsumableViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionConsumableViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["curePrescriptionId"] = this.curePrescriptionId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者处方耗材 (ViewModel) */
export interface ICurePrescriptionConsumableViewModel {
    /** [处方标识](患者处方Id) */
    curePrescriptionId: string;
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class CurePrescriptionConsumableViewResultEntry implements ICurePrescriptionConsumableViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionConsumableView;

    constructor(data?: ICurePrescriptionConsumableViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CurePrescriptionConsumableView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePrescriptionConsumableViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionConsumableViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionConsumableViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionConsumableView;
}

/** 患者处方药品 */
export class CurePrescriptionDrugEditModel implements ICurePrescriptionDrugEditModel {
    /** [处方标识](#患者处方) */
    curePrescriptionId!: string;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICurePrescriptionDrugEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.curePrescriptionId = _data["curePrescriptionId"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.unitUsage = _data["unitUsage"];
            this.dosage = _data["dosage"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CurePrescriptionDrugEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionDrugEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["curePrescriptionId"] = this.curePrescriptionId;
        data["anticoagulantName"] = this.anticoagulantName;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["unitUsage"] = this.unitUsage;
        data["dosage"] = this.dosage;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者处方药品 */
export interface ICurePrescriptionDrugEditModel {
    /** [处方标识](#患者处方) */
    curePrescriptionId: string;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 患者处方药品 */
export class CurePrescriptionDrugView implements ICurePrescriptionDrugView {
    /** [处方标识](#患者处方) */
    curePrescriptionId!: string;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;

    constructor(data?: ICurePrescriptionDrugView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.curePrescriptionId = _data["curePrescriptionId"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.unitUsage = _data["unitUsage"];
            this.dosage = _data["dosage"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.spec = _data["spec"];
            this.manufacturer = _data["manufacturer"];
        }
    }

    static fromJS(data: any): CurePrescriptionDrugView {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionDrugView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["curePrescriptionId"] = this.curePrescriptionId;
        data["anticoagulantName"] = this.anticoagulantName;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["unitUsage"] = this.unitUsage;
        data["dosage"] = this.dosage;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["spec"] = this.spec;
        data["manufacturer"] = this.manufacturer;
        return data;
    }
}

/** 患者处方药品 */
export interface ICurePrescriptionDrugView {
    /** [处方标识](#患者处方) */
    curePrescriptionId: string;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
}

/** Reponse */
export class CurePrescriptionDrugViewResult implements ICurePrescriptionDrugViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CurePrescriptionDrugView[] | undefined;

    constructor(data?: ICurePrescriptionDrugViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CurePrescriptionDrugView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurePrescriptionDrugViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionDrugViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionDrugViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CurePrescriptionDrugView[] | undefined;
}

/** Reponse */
export class CurePrescriptionDrugViewResultEntry implements ICurePrescriptionDrugViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionDrugView;

    constructor(data?: ICurePrescriptionDrugViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CurePrescriptionDrugView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePrescriptionDrugViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionDrugViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionDrugViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionDrugView;
}

/** 透析处方新增 */
export class CurePrescriptionEditModel implements ICurePrescriptionEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode!: string;
    /** 透析时长 *分钟* */
    dialysisDuration!: number;
    /** 干体重 *从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 血管通路 */
    patientVascularAccessName!: string;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType!: string;
    /** 抗凝剂模版类型 */
    antiTmplType!: string;
    /** [血管通路](#患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    /** 费用项目 */
    cureCostGroups?: RoomRecordItem[] | undefined;
    /** 抗凝剂药品 */
    curePrescriptionDrugs?: CurePrescriptionDrugEditModel[] | undefined;

    constructor(data?: ICurePrescriptionEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.totalCount = _data["totalCount"];
            this.usageCount = _data["usageCount"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDuration = _data["dialysisDuration"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.rfm = _data["rfm"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.dialysateName = _data["dialysateName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.nonReason = _data["nonReason"];
            this.remark = _data["remark"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.antiTmplType = _data["antiTmplType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.dialysisFrequency = _data["dialysisFrequency"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(RoomRecordItem.fromJS(item));
            }
            if (Array.isArray(_data["curePrescriptionDrugs"])) {
                this.curePrescriptionDrugs = [] as any;
                for (let item of _data["curePrescriptionDrugs"])
                    this.curePrescriptionDrugs!.push(CurePrescriptionDrugEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurePrescriptionEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["totalCount"] = this.totalCount;
        data["usageCount"] = this.usageCount;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDuration"] = this.dialysisDuration;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["rfm"] = this.rfm;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["dialysateName"] = this.dialysateName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["anticoagulantName"] = this.anticoagulantName;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["nonReason"] = this.nonReason;
        data["remark"] = this.remark;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["antiTmplType"] = this.antiTmplType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["dialysisFrequency"] = this.dialysisFrequency;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.curePrescriptionDrugs)) {
            data["curePrescriptionDrugs"] = [];
            for (let item of this.curePrescriptionDrugs)
                data["curePrescriptionDrugs"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析处方新增 */
export interface ICurePrescriptionEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode: string;
    /** 透析时长 *分钟* */
    dialysisDuration: number;
    /** 干体重 *从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](#患者血管通路) */
    patientVascularAccessId: string;
    /** 血管通路 */
    patientVascularAccessName: string;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType: string;
    /** 抗凝剂模版类型 */
    antiTmplType: string;
    /** [血管通路](#患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    /** 费用项目 */
    cureCostGroups?: RoomRecordItem[] | undefined;
    /** 抗凝剂药品 */
    curePrescriptionDrugs?: CurePrescriptionDrugEditModel[] | undefined;
}

/** 患者处方展现 */
export class CurePrescriptionView implements ICurePrescriptionView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode!: string;
    /** 透析时长 *分钟* */
    dialysisDuration!: number;
    /** 干体重 *从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 血管通路 */
    patientVascularAccessName!: string;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType!: string;
    /** 抗凝剂模版类型 */
    antiTmplType!: string;
    /** [血管通路](#患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    /** 医生名称 */
    doctorName?: string | undefined;
    /** 处方类型名称 */
    typeName?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 置换方式名称 */
    rfmName?: string | undefined;
    /** 大类名称 */
    classify1Name?: string | undefined;
    /** 小类名称 */
    classify2Name?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitName?: string | undefined;
    /** 透析器 */
    txq?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [医生标识](用户信息Id) */
    doctorId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
    /** 抗凝剂药品 */
    curePrescriptionDrugs?: CurePrescriptionDrugView[] | undefined;

    constructor(data?: ICurePrescriptionView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.totalCount = _data["totalCount"];
            this.usageCount = _data["usageCount"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDuration = _data["dialysisDuration"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.rfm = _data["rfm"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.dialysateName = _data["dialysateName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.nonReason = _data["nonReason"];
            this.remark = _data["remark"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.antiTmplType = _data["antiTmplType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.dialysisFrequency = _data["dialysisFrequency"];
            this.doctorName = _data["doctorName"];
            this.typeName = _data["typeName"];
            this.dialysisModeName = _data["dialysisModeName"];
            this.rfmName = _data["rfmName"];
            this.classify1Name = _data["classify1Name"];
            this.classify2Name = _data["classify2Name"];
            this.firstUnitName = _data["firstUnitName"];
            this.txq = _data["txq"];
            this.id = _data["id"];
            this.doctorId = _data["doctorId"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(CureCostGroupView.fromJS(item));
            }
            if (Array.isArray(_data["curePrescriptionDrugs"])) {
                this.curePrescriptionDrugs = [] as any;
                for (let item of _data["curePrescriptionDrugs"])
                    this.curePrescriptionDrugs!.push(CurePrescriptionDrugView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurePrescriptionView {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["totalCount"] = this.totalCount;
        data["usageCount"] = this.usageCount;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDuration"] = this.dialysisDuration;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["rfm"] = this.rfm;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["dialysateName"] = this.dialysateName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["anticoagulantName"] = this.anticoagulantName;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["nonReason"] = this.nonReason;
        data["remark"] = this.remark;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["antiTmplType"] = this.antiTmplType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["dialysisFrequency"] = this.dialysisFrequency;
        data["doctorName"] = this.doctorName;
        data["typeName"] = this.typeName;
        data["dialysisModeName"] = this.dialysisModeName;
        data["rfmName"] = this.rfmName;
        data["classify1Name"] = this.classify1Name;
        data["classify2Name"] = this.classify2Name;
        data["firstUnitName"] = this.firstUnitName;
        data["txq"] = this.txq;
        data["id"] = this.id;
        data["doctorId"] = this.doctorId;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.curePrescriptionDrugs)) {
            data["curePrescriptionDrugs"] = [];
            for (let item of this.curePrescriptionDrugs)
                data["curePrescriptionDrugs"].push(item.toJSON());
        }
        return data;
    }
}

/** 患者处方展现 */
export interface ICurePrescriptionView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode: string;
    /** 透析时长 *分钟* */
    dialysisDuration: number;
    /** 干体重 *从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](#患者血管通路) */
    patientVascularAccessId: string;
    /** 血管通路 */
    patientVascularAccessName: string;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType: string;
    /** 抗凝剂模版类型 */
    antiTmplType: string;
    /** [血管通路](#患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    /** 医生名称 */
    doctorName?: string | undefined;
    /** 处方类型名称 */
    typeName?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 置换方式名称 */
    rfmName?: string | undefined;
    /** 大类名称 */
    classify1Name?: string | undefined;
    /** 小类名称 */
    classify2Name?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitName?: string | undefined;
    /** 透析器 */
    txq?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [医生标识](用户信息Id) */
    doctorId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
    /** 抗凝剂药品 */
    curePrescriptionDrugs?: CurePrescriptionDrugView[] | undefined;
}

/** Reponse */
export class CurePrescriptionViewResult implements ICurePrescriptionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CurePrescriptionView[] | undefined;

    constructor(data?: ICurePrescriptionViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CurePrescriptionView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurePrescriptionViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CurePrescriptionView[] | undefined;
}

/** Reponse */
export class CurePrescriptionViewResultEntry implements ICurePrescriptionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionView;

    constructor(data?: ICurePrescriptionViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CurePrescriptionView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePrescriptionViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionView;
}

export class CureProgressNoteEditModel implements ICureProgressNoteEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 标题 */
    title!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 病程内容 */
    content!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureProgressNoteEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.title = _data["title"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureProgressNoteEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureProgressNoteEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["title"] = this.title;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

export interface ICureProgressNoteEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 标题 */
    title: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 病程内容 */
    content: string;
    /** 备注 */
    remark?: string | undefined;
}

export class CureProgressNoteView implements ICureProgressNoteView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 标题 */
    title!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 病程内容 */
    content!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [医生标识](用户信息Id) */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 医生别名 */
    doctorName2?: string | undefined;
    /** 医生全名 */
    doctorNameFull?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureProgressNoteView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.title = _data["title"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.content = _data["content"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.doctorName2 = _data["doctorName2"];
            this.doctorNameFull = _data["doctorNameFull"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureProgressNoteView {
        data = typeof data === 'object' ? data : {};
        let result = new CureProgressNoteView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["title"] = this.title;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["content"] = this.content;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["doctorName2"] = this.doctorName2;
        data["doctorNameFull"] = this.doctorNameFull;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICureProgressNoteView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 标题 */
    title: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 病程内容 */
    content: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [医生标识](用户信息Id) */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 医生别名 */
    doctorName2?: string | undefined;
    /** 医生全名 */
    doctorNameFull?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureProgressNoteViewResult implements ICureProgressNoteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureProgressNoteView[] | undefined;

    constructor(data?: ICureProgressNoteViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureProgressNoteView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureProgressNoteViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureProgressNoteViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureProgressNoteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureProgressNoteView[] | undefined;
}

/** Reponse */
export class CureProgressNoteViewResultEntry implements ICureProgressNoteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureProgressNoteView;

    constructor(data?: ICureProgressNoteViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureProgressNoteView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureProgressNoteViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureProgressNoteViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureProgressNoteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureProgressNoteView;
}

/** 透析记录 */
export class CureRecord implements ICureRecord {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish?: number;
    /** 是否归档 */
    isArchive?: number;
    patients?: Patient;
    patientVascularAccesss?: PatientVascularAccess;
    patientOtherVascularAccesss?: PatientVascularAccess;

    constructor(data?: ICureRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineId = _data["dialysisMachineId"];
            this.dialysisMachineType = _data["dialysisMachineType"];
            this.dialysisMachineTypeLabel = _data["dialysisMachineTypeLabel"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.rfm = _data["rfm"];
            this.rfmLabel = _data["rfmLabel"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.ufc = _data["ufc"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.afterBpPositionLabel = _data["afterBpPositionLabel"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeBeforeWeight = _data["timeBeforeWeight"] ? dayjs(_data["timeBeforeWeight"].toString()) : <any>undefined;
            this.timeBeforeBp = _data["timeBeforeBp"] ? dayjs(_data["timeBeforeBp"].toString()) : <any>undefined;
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeAssementBefore = _data["timeAssementBefore"] ? dayjs(_data["timeAssementBefore"].toString()) : <any>undefined;
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            this.timeFirstMonitor = _data["timeFirstMonitor"] ? dayjs(_data["timeFirstMonitor"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.timeDisinfect = _data["timeDisinfect"] ? dayjs(_data["timeDisinfect"].toString()) : <any>undefined;
            this.timeAssementAfter = _data["timeAssementAfter"] ? dayjs(_data["timeAssementAfter"].toString()) : <any>undefined;
            this.timeAfterWeight = _data["timeAfterWeight"] ? dayjs(_data["timeAfterWeight"].toString()) : <any>undefined;
            this.timeAfterBp = _data["timeAfterBp"] ? dayjs(_data["timeAfterBp"].toString()) : <any>undefined;
            this.timeAfterSummary = _data["timeAfterSummary"] ? dayjs(_data["timeAfterSummary"].toString()) : <any>undefined;
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
            this.assementUserId = _data["assementUserId"];
            this.assementUserName = _data["assementUserName"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.assementBeforeNurseId = _data["assementBeforeNurseId"];
            this.assementBeforeNurseName = _data["assementBeforeNurseName"];
            this.punctureMethod = _data["punctureMethod"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.onTemp = _data["onTemp"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.verify = _data["verify"];
            this.offNurseId = _data["offNurseId"];
            this.offNurseName = _data["offNurseName"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            this.assementAfterNurseId = _data["assementAfterNurseId"];
            this.assementAfterNurseName = _data["assementAfterNurseName"];
            this.summaryAfterNurseId = _data["summaryAfterNurseId"];
            this.summaryAfterNurseName = _data["summaryAfterNurseName"];
            this.offEarly = _data["offEarly"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.suggestionNext = _data["suggestionNext"];
            this.cancelReason = _data["cancelReason"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.iuf = _data["iuf"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.patientPrescriptionId = _data["patientPrescriptionId"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.isReplenish = _data["isReplenish"];
            this.isArchive = _data["isArchive"];
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.patientVascularAccesss = _data["patientVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientVascularAccesss"]) : <any>undefined;
            this.patientOtherVascularAccesss = _data["patientOtherVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientOtherVascularAccesss"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecord {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineId"] = this.dialysisMachineId;
        data["dialysisMachineType"] = this.dialysisMachineType;
        data["dialysisMachineTypeLabel"] = this.dialysisMachineTypeLabel;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["rfm"] = this.rfm;
        data["rfmLabel"] = this.rfmLabel;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["ufc"] = this.ufc;
        data["afterWeight"] = this.afterWeight;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterBpPosition"] = this.afterBpPosition;
        data["afterBpPositionLabel"] = this.afterBpPositionLabel;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeBeforeWeight"] = this.timeBeforeWeight ? this.timeBeforeWeight.toISOString() : <any>undefined;
        data["timeBeforeBp"] = this.timeBeforeBp ? this.timeBeforeBp.toISOString() : <any>undefined;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toISOString() : <any>undefined;
        data["enact"] = this.enact;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toISOString() : <any>undefined;
        data["check"] = this.check;
        data["timeAssementBefore"] = this.timeAssementBefore ? this.timeAssementBefore.toISOString() : <any>undefined;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toISOString() : <any>undefined;
        data["timeFirstMonitor"] = this.timeFirstMonitor ? this.timeFirstMonitor.toISOString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["timeDisinfect"] = this.timeDisinfect ? this.timeDisinfect.toISOString() : <any>undefined;
        data["timeAssementAfter"] = this.timeAssementAfter ? this.timeAssementAfter.toISOString() : <any>undefined;
        data["timeAfterWeight"] = this.timeAfterWeight ? this.timeAfterWeight.toISOString() : <any>undefined;
        data["timeAfterBp"] = this.timeAfterBp ? this.timeAfterBp.toISOString() : <any>undefined;
        data["timeAfterSummary"] = this.timeAfterSummary ? this.timeAfterSummary.toISOString() : <any>undefined;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toISOString() : <any>undefined;
        data["assementUserId"] = this.assementUserId;
        data["assementUserName"] = this.assementUserName;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["assementBeforeNurseId"] = this.assementBeforeNurseId;
        data["assementBeforeNurseName"] = this.assementBeforeNurseName;
        data["punctureMethod"] = this.punctureMethod;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["onTemp"] = this.onTemp;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["verify"] = this.verify;
        data["offNurseId"] = this.offNurseId;
        data["offNurseName"] = this.offNurseName;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        data["assementAfterNurseId"] = this.assementAfterNurseId;
        data["assementAfterNurseName"] = this.assementAfterNurseName;
        data["summaryAfterNurseId"] = this.summaryAfterNurseId;
        data["summaryAfterNurseName"] = this.summaryAfterNurseName;
        data["offEarly"] = this.offEarly;
        data["offEarlyCause"] = this.offEarlyCause;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["suggestionNext"] = this.suggestionNext;
        data["cancelReason"] = this.cancelReason;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["iuf"] = this.iuf;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toISOString() : <any>undefined;
        data["patientPrescriptionId"] = this.patientPrescriptionId;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["isReplenish"] = this.isReplenish;
        data["isArchive"] = this.isArchive;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["patientVascularAccesss"] = this.patientVascularAccesss ? this.patientVascularAccesss.toJSON() : <any>undefined;
        data["patientOtherVascularAccesss"] = this.patientOtherVascularAccesss ? this.patientOtherVascularAccesss.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析记录 */
export interface ICureRecord {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish?: number;
    /** 是否归档 */
    isArchive?: number;
    patients?: Patient;
    patientVascularAccesss?: PatientVascularAccess;
    patientOtherVascularAccesss?: PatientVascularAccess;
}

/** 患者透析抗凝剂药品 */
export class CureRecordAnticoagulantDrugEditModel implements ICureRecordAnticoagulantDrugEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;

    constructor(data?: ICureRecordAnticoagulantDrugEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.usage = _data["usage"];
            this.unitUsage = _data["unitUsage"];
            this.dosage = _data["dosage"];
            this.remark = _data["remark"];
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.sellingPrice = _data["sellingPrice"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.spec = _data["spec"];
            this.manufacturer = _data["manufacturer"];
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantDrugEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantDrugEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["usage"] = this.usage;
        data["unitUsage"] = this.unitUsage;
        data["dosage"] = this.dosage;
        data["remark"] = this.remark;
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["sellingPrice"] = this.sellingPrice;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["spec"] = this.spec;
        data["manufacturer"] = this.manufacturer;
        return data;
    }
}

/** 患者透析抗凝剂药品 */
export interface ICureRecordAnticoagulantDrugEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
}

/** 患者透析抗凝剂药品 */
export class CureRecordAnticoagulantDrugView implements ICureRecordAnticoagulantDrugView {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;

    constructor(data?: ICureRecordAnticoagulantDrugView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.usage = _data["usage"];
            this.unitUsage = _data["unitUsage"];
            this.dosage = _data["dosage"];
            this.remark = _data["remark"];
            this.roomItemListId = _data["roomItemListId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.spec = _data["spec"];
            this.manufacturer = _data["manufacturer"];
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantDrugView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantDrugView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["usage"] = this.usage;
        data["unitUsage"] = this.unitUsage;
        data["dosage"] = this.dosage;
        data["remark"] = this.remark;
        data["roomItemListId"] = this.roomItemListId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["spec"] = this.spec;
        data["manufacturer"] = this.manufacturer;
        return data;
    }
}

/** 患者透析抗凝剂药品 */
export interface ICureRecordAnticoagulantDrugView {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
}

/** Reponse */
export class CureRecordAnticoagulantDrugViewResult implements ICureRecordAnticoagulantDrugViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordAnticoagulantDrugView[] | undefined;

    constructor(data?: ICureRecordAnticoagulantDrugViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordAnticoagulantDrugView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantDrugViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantDrugViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordAnticoagulantDrugViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordAnticoagulantDrugView[] | undefined;
}

/** Reponse */
export class CureRecordAnticoagulantDrugViewResultEntry implements ICureRecordAnticoagulantDrugViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordAnticoagulantDrugView;

    constructor(data?: ICureRecordAnticoagulantDrugViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordAnticoagulantDrugView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantDrugViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantDrugViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordAnticoagulantDrugViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordAnticoagulantDrugView;
}

/** 抗凝剂 */
export class CureRecordAnticoagulantView implements ICureRecordAnticoagulantView {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 大类显示值 */
    classify1Lable?: string | undefined;
    /** 小类显示值 */
    classify2Lable?: string | undefined;
    /** 首剂-单位显示值 */
    firstUnitLable?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    other?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordAnticoagulantView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.classify1Lable = _data["classify1Lable"];
            this.classify2Lable = _data["classify2Lable"];
            this.firstUnitLable = _data["firstUnitLable"];
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.name = _data["name"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.other = _data["other"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["classify1Lable"] = this.classify1Lable;
        data["classify2Lable"] = this.classify2Lable;
        data["firstUnitLable"] = this.firstUnitLable;
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["name"] = this.name;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["other"] = this.other;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 抗凝剂 */
export interface ICureRecordAnticoagulantView {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 大类显示值 */
    classify1Lable?: string | undefined;
    /** 小类显示值 */
    classify2Lable?: string | undefined;
    /** 首剂-单位显示值 */
    firstUnitLable?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    other?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 患者透析抗凝剂 (ViewModel) */
export class CureRecordAnticoagulantViewModel implements ICureRecordAnticoagulantViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 名称 */
    name!: string;
    /** 抗凝剂模版类型 */
    antiTmplType!: string;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1!: string;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    other?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordAnticoagulantViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.name = _data["name"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.other = _data["other"];
            this.nonReason = _data["nonReason"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["name"] = this.name;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["other"] = this.other;
        data["nonReason"] = this.nonReason;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者透析抗凝剂 (ViewModel) */
export interface ICureRecordAnticoagulantViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 名称 */
    name: string;
    /** 抗凝剂模版类型 */
    antiTmplType: string;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1: string;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    other?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class CureRecordAnticoagulantViewResult implements ICureRecordAnticoagulantViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordAnticoagulantView[] | undefined;

    constructor(data?: ICureRecordAnticoagulantViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordAnticoagulantView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordAnticoagulantViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordAnticoagulantView[] | undefined;
}

/** Reponse */
export class CureRecordAnticoagulantViewResultEntry implements ICureRecordAnticoagulantViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordAnticoagulantView;

    constructor(data?: ICureRecordAnticoagulantViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordAnticoagulantView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordAnticoagulantViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordAnticoagulantView;
}

/** 透析记录修改记录 */
export class CureRecordChangeEditModel implements ICureRecordChangeEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 修改类型 *标识修改的是制定处方，透析评估，透中监测，透中事件中* */
    type!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 修改内容 */
    changeContent?: string | undefined;

    constructor(data?: ICureRecordChangeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.type = _data["type"];
            this.remark = _data["remark"];
            this.changeContent = _data["changeContent"];
        }
    }

    static fromJS(data: any): CureRecordChangeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordChangeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["type"] = this.type;
        data["remark"] = this.remark;
        data["changeContent"] = this.changeContent;
        return data;
    }
}

/** 透析记录修改记录 */
export interface ICureRecordChangeEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 修改类型 *标识修改的是制定处方，透析评估，透中监测，透中事件中* */
    type: string;
    /** 备注 */
    remark?: string | undefined;
    /** 修改内容 */
    changeContent?: string | undefined;
}

/** 透析记录修改记录 */
export class CureRecordChangeView implements ICureRecordChangeView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 修改类型 *标识修改的是制定处方，透析评估，透中监测，透中事件中* */
    type!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 修改内容 */
    changeContent?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordChangeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.type = _data["type"];
            this.remark = _data["remark"];
            this.changeContent = _data["changeContent"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordChangeView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordChangeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["type"] = this.type;
        data["remark"] = this.remark;
        data["changeContent"] = this.changeContent;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析记录修改记录 */
export interface ICureRecordChangeView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 修改类型 *标识修改的是制定处方，透析评估，透中监测，透中事件中* */
    type: string;
    /** 备注 */
    remark?: string | undefined;
    /** 修改内容 */
    changeContent?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureRecordChangeViewResult implements ICureRecordChangeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordChangeView[] | undefined;

    constructor(data?: ICureRecordChangeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordChangeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordChangeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordChangeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordChangeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordChangeView[] | undefined;
}

/** Reponse */
export class CureRecordChangeViewResultEntry implements ICureRecordChangeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordChangeView;

    constructor(data?: ICureRecordChangeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordChangeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordChangeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordChangeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordChangeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordChangeView;
}

/** 透析耗材 */
export class CureRecordConsumable implements ICureRecordConsumable {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 耗材数量 */
    count?: number;
    /** 编码 */
    code?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;
    roomItemLists?: RoomItemList;

    constructor(data?: ICureRecordConsumable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.code = _data["code"];
            this.devBarCode = _data["devBarCode"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
            this.roomItemLists = _data["roomItemLists"] ? RoomItemList.fromJS(_data["roomItemLists"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordConsumable {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["code"] = this.code;
        data["devBarCode"] = this.devBarCode;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        data["roomItemLists"] = this.roomItemLists ? this.roomItemLists.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析耗材 */
export interface ICureRecordConsumable {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 耗材数量 */
    count?: number;
    /** 编码 */
    code?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;
    roomItemLists?: RoomItemList;
}

/** 透析耗材 */
export class CureRecordConsumableItemEditModel implements ICureRecordConsumableItemEditModel {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount!: number;
    /** 批号 */
    batchNo?: string | undefined;

    constructor(data?: ICureRecordConsumableItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.roomRecordInId = _data["roomRecordInId"];
            this.batchCount = _data["batchCount"];
            this.batchNo = _data["batchNo"];
        }
    }

    static fromJS(data: any): CureRecordConsumableItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["roomRecordInId"] = this.roomRecordInId;
        data["batchCount"] = this.batchCount;
        data["batchNo"] = this.batchNo;
        return data;
    }
}

/** 透析耗材 */
export interface ICureRecordConsumableItemEditModel {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount: number;
    /** 批号 */
    batchNo?: string | undefined;
}

/** 透析耗材 */
export class CureRecordConsumableItemView implements ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount!: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordConsumableItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.roomRecordInId = _data["roomRecordInId"];
            this.batchCount = _data["batchCount"];
            this.batchNo = _data["batchNo"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.surplusCount = _data["surplusCount"];
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordConsumableItemView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["roomRecordInId"] = this.roomRecordInId;
        data["batchCount"] = this.batchCount;
        data["batchNo"] = this.batchNo;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["surplusCount"] = this.surplusCount;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析耗材 */
export interface ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureRecordConsumableItemViewResult implements ICureRecordConsumableItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: ICureRecordConsumableItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordConsumableItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordConsumableItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordConsumableItemView[] | undefined;
}

/** Reponse */
export class CureRecordConsumableItemViewResultEntry implements ICureRecordConsumableItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordConsumableItemView;

    constructor(data?: ICureRecordConsumableItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordConsumableItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordConsumableItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordConsumableItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordConsumableItemView;
}

/** Reponse */
export class CureRecordConsumableResult implements ICureRecordConsumableResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordConsumable[] | undefined;

    constructor(data?: ICureRecordConsumableResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordConsumable.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordConsumableResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordConsumableResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordConsumable[] | undefined;
}

/** Reponse */
export class CureRecordConsumableResultEntry implements ICureRecordConsumableResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordConsumable;

    constructor(data?: ICureRecordConsumableResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordConsumable.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordConsumableResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordConsumableResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordConsumable;
}

/** 透析耗材 (ViewModel) */
export class CureRecordConsumableViewModel implements ICureRecordConsumableViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 编码 */
    code?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordConsumableViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.code = _data["code"];
            this.devBarCode = _data["devBarCode"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordConsumableViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["code"] = this.code;
        data["devBarCode"] = this.devBarCode;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析耗材 (ViewModel) */
export interface ICureRecordConsumableViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 编码 */
    code?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析液 */
export class CureRecordDialysateView implements ICureRecordDialysateView {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 大类显示值 */
    classify1Lable?: string | undefined;
    /** 小类显示值 */
    classify2Lable?: string | undefined;
    /** 首剂-单位显示值 */
    firstUnitLable?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordDialysateView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.classify1Lable = _data["classify1Lable"];
            this.classify2Lable = _data["classify2Lable"];
            this.firstUnitLable = _data["firstUnitLable"];
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.name = _data["name"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordDialysateView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordDialysateView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["classify1Lable"] = this.classify1Lable;
        data["classify2Lable"] = this.classify2Lable;
        data["firstUnitLable"] = this.firstUnitLable;
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["name"] = this.name;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析液 */
export interface ICureRecordDialysateView {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 大类显示值 */
    classify1Lable?: string | undefined;
    /** 小类显示值 */
    classify2Lable?: string | undefined;
    /** 首剂-单位显示值 */
    firstUnitLable?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 患者透析透析液 (ViewModel) */
export class CureRecordDialysateViewModel implements ICureRecordDialysateViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 名称 */
    name!: string;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordDialysateViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.name = _data["name"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordDialysateViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordDialysateViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["name"] = this.name;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者透析透析液 (ViewModel) */
export interface ICureRecordDialysateViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 名称 */
    name: string;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class CureRecordDialysateViewResult implements ICureRecordDialysateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordDialysateView[] | undefined;

    constructor(data?: ICureRecordDialysateViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordDialysateView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordDialysateViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordDialysateViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordDialysateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordDialysateView[] | undefined;
}

/** Reponse */
export class CureRecordDialysateViewResultEntry implements ICureRecordDialysateViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordDialysateView;

    constructor(data?: ICureRecordDialysateViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordDialysateView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordDialysateViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordDialysateViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordDialysateViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordDialysateView;
}

/** 透析记录自定义字段 */
export class CureRecordFieldItemEditModel implements ICureRecordFieldItemEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 模块 */
    module!: string;
    /** 自定义字段名 */
    fieldKey!: string;
    /** 自定义字段值 */
    fieldValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 明细关联id */
    relevanceId?: string | undefined;

    constructor(data?: ICureRecordFieldItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.module = _data["module"];
            this.fieldKey = _data["fieldKey"];
            this.fieldValue = _data["fieldValue"];
            this.remark = _data["remark"];
            this.relevanceId = _data["relevanceId"];
        }
    }

    static fromJS(data: any): CureRecordFieldItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFieldItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["module"] = this.module;
        data["fieldKey"] = this.fieldKey;
        data["fieldValue"] = this.fieldValue;
        data["remark"] = this.remark;
        data["relevanceId"] = this.relevanceId;
        return data;
    }
}

/** 透析记录自定义字段 */
export interface ICureRecordFieldItemEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 模块 */
    module: string;
    /** 自定义字段名 */
    fieldKey: string;
    /** 自定义字段值 */
    fieldValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 明细关联id */
    relevanceId?: string | undefined;
}

/** 透析记录自定义字段 */
export class CureRecordFieldItemView implements ICureRecordFieldItemView {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 模块 */
    module!: string;
    /** 自定义字段名 */
    fieldKey!: string;
    /** 自定义字段值 */
    fieldValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 明细关联id */
    relevanceId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordFieldItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.module = _data["module"];
            this.fieldKey = _data["fieldKey"];
            this.fieldValue = _data["fieldValue"];
            this.remark = _data["remark"];
            this.relevanceId = _data["relevanceId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordFieldItemView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFieldItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["module"] = this.module;
        data["fieldKey"] = this.fieldKey;
        data["fieldValue"] = this.fieldValue;
        data["remark"] = this.remark;
        data["relevanceId"] = this.relevanceId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析记录自定义字段 */
export interface ICureRecordFieldItemView {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 模块 */
    module: string;
    /** 自定义字段名 */
    fieldKey: string;
    /** 自定义字段值 */
    fieldValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 明细关联id */
    relevanceId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureRecordFieldItemViewResult implements ICureRecordFieldItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordFieldItemView[] | undefined;

    constructor(data?: ICureRecordFieldItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordFieldItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordFieldItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFieldItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordFieldItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordFieldItemView[] | undefined;
}

/** Reponse */
export class CureRecordFieldItemViewResultEntry implements ICureRecordFieldItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordFieldItemView;

    constructor(data?: ICureRecordFieldItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordFieldItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordFieldItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFieldItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordFieldItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordFieldItemView;
}

export class CureRecordFileView implements ICureRecordFileView {
    /** 标识 */
    id?: string | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 表头行数 */
    row?: number | undefined;
    /** 透析记录单HTML文本 */
    content?: string | undefined;

    constructor(data?: ICureRecordFileView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.lastId = _data["lastId"];
            this.nextId = _data["nextId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftName = _data["shiftName"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedName = _data["bedName"];
            this.patientName = _data["patientName"];
            this.assementBefore = _data["assementBefore"] ? CureRecordItemAssement.fromJS(_data["assementBefore"]) : <any>undefined;
            this.assementAfter = _data["assementAfter"] ? CureRecordItemAssement.fromJS(_data["assementAfter"]) : <any>undefined;
            this.assementDialysis = _data["assementDialysis"] ? CureRecordItemAssement.fromJS(_data["assementDialysis"]) : <any>undefined;
            this.row = _data["row"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): CureRecordFileView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFileView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["lastId"] = this.lastId;
        data["nextId"] = this.nextId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedName"] = this.bedName;
        data["patientName"] = this.patientName;
        data["assementBefore"] = this.assementBefore ? this.assementBefore.toJSON() : <any>undefined;
        data["assementAfter"] = this.assementAfter ? this.assementAfter.toJSON() : <any>undefined;
        data["assementDialysis"] = this.assementDialysis ? this.assementDialysis.toJSON() : <any>undefined;
        data["row"] = this.row;
        data["content"] = this.content;
        return data;
    }
}

export interface ICureRecordFileView {
    /** 标识 */
    id?: string | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 表头行数 */
    row?: number | undefined;
    /** 透析记录单HTML文本 */
    content?: string | undefined;
}

/** Reponse */
export class CureRecordFileViewResult implements ICureRecordFileViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordFileView[] | undefined;

    constructor(data?: ICureRecordFileViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordFileView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordFileViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFileViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordFileViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordFileView[] | undefined;
}

/** Reponse */
export class CureRecordFileViewResultEntry implements ICureRecordFileViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordFileView;

    constructor(data?: ICureRecordFileViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordFileView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordFileViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFileViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordFileViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordFileView;
}

/** 抗凝剂 */
export class CureRecordItemAnticoagulant implements ICureRecordItemAnticoagulant {
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂简称 */
    anticoagulantShortName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *枸橼酸钠>浓度* */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 无抗凝剂原因 */
    nonReason?: string | undefined;

    constructor(data?: ICureRecordItemAnticoagulant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.anticoagulantName = _data["anticoagulantName"];
            this.anticoagulantShortName = _data["anticoagulantShortName"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.concentration = _data["concentration"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.classify1Label = _data["classify1Label"];
            this.classify2Label = _data["classify2Label"];
            this.firstUnitLabel = _data["firstUnitLabel"];
            this.nonReason = _data["nonReason"];
        }
    }

    static fromJS(data: any): CureRecordItemAnticoagulant {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemAnticoagulant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["anticoagulantName"] = this.anticoagulantName;
        data["anticoagulantShortName"] = this.anticoagulantShortName;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["concentration"] = this.concentration;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["classify1Label"] = this.classify1Label;
        data["classify2Label"] = this.classify2Label;
        data["firstUnitLabel"] = this.firstUnitLabel;
        data["nonReason"] = this.nonReason;
        return data;
    }
}

/** 抗凝剂 */
export interface ICureRecordItemAnticoagulant {
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂简称 */
    anticoagulantShortName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *枸橼酸钠>浓度* */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 无抗凝剂原因 */
    nonReason?: string | undefined;
}

/** 透前评估 */
export class CureRecordItemAssement implements ICureRecordItemAssement {
    /** 表单结构 */
    data?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 受支持的表单自定义数据 */
    values?: SysFormValueView[] | undefined;

    constructor(data?: ICureRecordItemAssement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.dataValue = _data["dataValue"];
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(SysFormValueView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordItemAssement {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemAssement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["dataValue"] = this.dataValue;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data;
    }
}

/** 透前评估 */
export interface ICureRecordItemAssement {
    /** 表单结构 */
    data?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 受支持的表单自定义数据 */
    values?: SysFormValueView[] | undefined;
}

/** 透中事件 */
export class CureRecordItemComplication implements ICureRecordItemComplication {
    /** 标识 */
    id?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 发生时间 */
    occurredTime?: dayjs.Dayjs;
    /** 并发症名称 */
    name?: string | undefined;
    /** 处理 */
    dispose?: string | undefined;
    /** 原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: CureRecordItemComplicationFile[] | undefined;

    constructor(data?: ICureRecordItemComplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.occurredTime = _data["occurredTime"] ? dayjs(_data["occurredTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.dispose = _data["dispose"];
            this.cause = _data["cause"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["complicationFiles"])) {
                this.complicationFiles = [] as any;
                for (let item of _data["complicationFiles"])
                    this.complicationFiles!.push(CureRecordItemComplicationFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordItemComplication {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemComplication();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["occurredTime"] = this.occurredTime ? this.occurredTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["dispose"] = this.dispose;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        if (Array.isArray(this.complicationFiles)) {
            data["complicationFiles"] = [];
            for (let item of this.complicationFiles)
                data["complicationFiles"].push(item.toJSON());
        }
        return data;
    }
}

/** 透中事件 */
export interface ICureRecordItemComplication {
    /** 标识 */
    id?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 发生时间 */
    occurredTime?: dayjs.Dayjs;
    /** 并发症名称 */
    name?: string | undefined;
    /** 处理 */
    dispose?: string | undefined;
    /** 原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: CureRecordItemComplicationFile[] | undefined;
}

export class CureRecordItemComplicationFile implements ICureRecordItemComplicationFile {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;

    constructor(data?: ICureRecordItemComplicationFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.extension = _data["extension"];
            this.length = _data["length"];
        }
    }

    static fromJS(data: any): CureRecordItemComplicationFile {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemComplicationFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["url"] = this.url;
        data["extension"] = this.extension;
        data["length"] = this.length;
        return data;
    }
}

export interface ICureRecordItemComplicationFile {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
}

/** 耗材 */
export class CureRecordItemConsumable implements ICureRecordItemConsumable {
    /** 耗材标识-透析器 */
    roomItemListTXQId?: string | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-所有透析器名称 */
    roomItemListTXQLabels?: string | undefined;
    /** 耗材-透析器数量 */
    roomItemListTXQCount?: number | undefined;
    /** 透析器耗材条码 */
    roomItemListTXQDevBarCode?: string | undefined;
    /** 透析器耗材批号 */
    roomItemListTXQBatchNo?: string | undefined;
    /** 耗材标识-灌流器 */
    roomItemListGLQId?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabels?: string | undefined;
    /** 灌流器耗材条码 */
    roomItemListGLQDevBarCode?: string | undefined;
    /** 灌流器耗材批号 */
    roomItemListGLQBatchNo?: string | undefined;
    /** 耗材-灌流器数量 */
    roomItemListGLQCount?: number | undefined;
    /** 耗材标识-血滤器 */
    roomItemListXLQId?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabels?: string | undefined;
    /** 耗材-血滤器数量 */
    roomItemListXLQCount?: number | undefined;
    /** 血滤器耗材条码 */
    roomItemListXLQDevBarCode?: string | undefined;
    /** 血滤器耗材批号 */
    roomItemListXLQBatchNo?: string | undefined;
    /** 耗材标识-血路管 */
    roomItemListXLGId?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabel?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabels?: string | undefined;
    /** 耗材-血路管数量 */
    roomItemListXLGCount?: number | undefined;
    /** 血路管耗材条码 */
    roomItemListXLGDevBarCode?: string | undefined;
    /** 血路管耗材批号 */
    roomItemListXLGBatchNo?: string | undefined;
    /** 耗材标识-内瘘针 */
    roomItemListNLZId?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabel?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabels?: string | undefined;
    /** 耗材-内瘘针数量 */
    roomItemListNLZCount?: number | undefined;
    /** 内瘘针耗材条码 */
    roomItemListNLZDevBarCode?: string | undefined;
    /** 耗材标识-置换液管路 */
    roomItemListZHYGLId?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabel?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabels?: string | undefined;
    /** 耗材-置换液管路数量 */
    roomItemListZHYGLCount?: number | undefined;
    /** 置换液管路耗材条码 */
    roomItemListZHYGLDevBarCode?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheter?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheters?: string | undefined;
    /** 灌流连接管条码 */
    perfusionCatheterDevBarCode?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparator?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparators?: string | undefined;
    /** 血浆分离器条码 */
    plasmaSeparatorDevBarCode?: string | undefined;

    constructor(data?: ICureRecordItemConsumable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListTXQId = _data["roomItemListTXQId"];
            this.roomItemListTXQLabel = _data["roomItemListTXQLabel"];
            this.roomItemListTXQLabels = _data["roomItemListTXQLabels"];
            this.roomItemListTXQCount = _data["roomItemListTXQCount"];
            this.roomItemListTXQDevBarCode = _data["roomItemListTXQDevBarCode"];
            this.roomItemListTXQBatchNo = _data["roomItemListTXQBatchNo"];
            this.roomItemListGLQId = _data["roomItemListGLQId"];
            this.roomItemListGLQLabel = _data["roomItemListGLQLabel"];
            this.roomItemListGLQLabels = _data["roomItemListGLQLabels"];
            this.roomItemListGLQDevBarCode = _data["roomItemListGLQDevBarCode"];
            this.roomItemListGLQBatchNo = _data["roomItemListGLQBatchNo"];
            this.roomItemListGLQCount = _data["roomItemListGLQCount"];
            this.roomItemListXLQId = _data["roomItemListXLQId"];
            this.roomItemListXLQLabel = _data["roomItemListXLQLabel"];
            this.roomItemListXLQLabels = _data["roomItemListXLQLabels"];
            this.roomItemListXLQCount = _data["roomItemListXLQCount"];
            this.roomItemListXLQDevBarCode = _data["roomItemListXLQDevBarCode"];
            this.roomItemListXLQBatchNo = _data["roomItemListXLQBatchNo"];
            this.roomItemListXLGId = _data["roomItemListXLGId"];
            this.roomItemListXLGLabel = _data["roomItemListXLGLabel"];
            this.roomItemListXLGLabels = _data["roomItemListXLGLabels"];
            this.roomItemListXLGCount = _data["roomItemListXLGCount"];
            this.roomItemListXLGDevBarCode = _data["roomItemListXLGDevBarCode"];
            this.roomItemListXLGBatchNo = _data["roomItemListXLGBatchNo"];
            this.roomItemListNLZId = _data["roomItemListNLZId"];
            this.roomItemListNLZLabel = _data["roomItemListNLZLabel"];
            this.roomItemListNLZLabels = _data["roomItemListNLZLabels"];
            this.roomItemListNLZCount = _data["roomItemListNLZCount"];
            this.roomItemListNLZDevBarCode = _data["roomItemListNLZDevBarCode"];
            this.roomItemListZHYGLId = _data["roomItemListZHYGLId"];
            this.roomItemListZHYGLLabel = _data["roomItemListZHYGLLabel"];
            this.roomItemListZHYGLLabels = _data["roomItemListZHYGLLabels"];
            this.roomItemListZHYGLCount = _data["roomItemListZHYGLCount"];
            this.roomItemListZHYGLDevBarCode = _data["roomItemListZHYGLDevBarCode"];
            this.perfusionCatheter = _data["perfusionCatheter"];
            this.perfusionCatheters = _data["perfusionCatheters"];
            this.perfusionCatheterDevBarCode = _data["perfusionCatheterDevBarCode"];
            this.plasmaSeparator = _data["plasmaSeparator"];
            this.plasmaSeparators = _data["plasmaSeparators"];
            this.plasmaSeparatorDevBarCode = _data["plasmaSeparatorDevBarCode"];
        }
    }

    static fromJS(data: any): CureRecordItemConsumable {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemConsumable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListTXQId"] = this.roomItemListTXQId;
        data["roomItemListTXQLabel"] = this.roomItemListTXQLabel;
        data["roomItemListTXQLabels"] = this.roomItemListTXQLabels;
        data["roomItemListTXQCount"] = this.roomItemListTXQCount;
        data["roomItemListTXQDevBarCode"] = this.roomItemListTXQDevBarCode;
        data["roomItemListTXQBatchNo"] = this.roomItemListTXQBatchNo;
        data["roomItemListGLQId"] = this.roomItemListGLQId;
        data["roomItemListGLQLabel"] = this.roomItemListGLQLabel;
        data["roomItemListGLQLabels"] = this.roomItemListGLQLabels;
        data["roomItemListGLQDevBarCode"] = this.roomItemListGLQDevBarCode;
        data["roomItemListGLQBatchNo"] = this.roomItemListGLQBatchNo;
        data["roomItemListGLQCount"] = this.roomItemListGLQCount;
        data["roomItemListXLQId"] = this.roomItemListXLQId;
        data["roomItemListXLQLabel"] = this.roomItemListXLQLabel;
        data["roomItemListXLQLabels"] = this.roomItemListXLQLabels;
        data["roomItemListXLQCount"] = this.roomItemListXLQCount;
        data["roomItemListXLQDevBarCode"] = this.roomItemListXLQDevBarCode;
        data["roomItemListXLQBatchNo"] = this.roomItemListXLQBatchNo;
        data["roomItemListXLGId"] = this.roomItemListXLGId;
        data["roomItemListXLGLabel"] = this.roomItemListXLGLabel;
        data["roomItemListXLGLabels"] = this.roomItemListXLGLabels;
        data["roomItemListXLGCount"] = this.roomItemListXLGCount;
        data["roomItemListXLGDevBarCode"] = this.roomItemListXLGDevBarCode;
        data["roomItemListXLGBatchNo"] = this.roomItemListXLGBatchNo;
        data["roomItemListNLZId"] = this.roomItemListNLZId;
        data["roomItemListNLZLabel"] = this.roomItemListNLZLabel;
        data["roomItemListNLZLabels"] = this.roomItemListNLZLabels;
        data["roomItemListNLZCount"] = this.roomItemListNLZCount;
        data["roomItemListNLZDevBarCode"] = this.roomItemListNLZDevBarCode;
        data["roomItemListZHYGLId"] = this.roomItemListZHYGLId;
        data["roomItemListZHYGLLabel"] = this.roomItemListZHYGLLabel;
        data["roomItemListZHYGLLabels"] = this.roomItemListZHYGLLabels;
        data["roomItemListZHYGLCount"] = this.roomItemListZHYGLCount;
        data["roomItemListZHYGLDevBarCode"] = this.roomItemListZHYGLDevBarCode;
        data["perfusionCatheter"] = this.perfusionCatheter;
        data["perfusionCatheters"] = this.perfusionCatheters;
        data["perfusionCatheterDevBarCode"] = this.perfusionCatheterDevBarCode;
        data["plasmaSeparator"] = this.plasmaSeparator;
        data["plasmaSeparators"] = this.plasmaSeparators;
        data["plasmaSeparatorDevBarCode"] = this.plasmaSeparatorDevBarCode;
        return data;
    }
}

/** 耗材 */
export interface ICureRecordItemConsumable {
    /** 耗材标识-透析器 */
    roomItemListTXQId?: string | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-所有透析器名称 */
    roomItemListTXQLabels?: string | undefined;
    /** 耗材-透析器数量 */
    roomItemListTXQCount?: number | undefined;
    /** 透析器耗材条码 */
    roomItemListTXQDevBarCode?: string | undefined;
    /** 透析器耗材批号 */
    roomItemListTXQBatchNo?: string | undefined;
    /** 耗材标识-灌流器 */
    roomItemListGLQId?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabels?: string | undefined;
    /** 灌流器耗材条码 */
    roomItemListGLQDevBarCode?: string | undefined;
    /** 灌流器耗材批号 */
    roomItemListGLQBatchNo?: string | undefined;
    /** 耗材-灌流器数量 */
    roomItemListGLQCount?: number | undefined;
    /** 耗材标识-血滤器 */
    roomItemListXLQId?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabels?: string | undefined;
    /** 耗材-血滤器数量 */
    roomItemListXLQCount?: number | undefined;
    /** 血滤器耗材条码 */
    roomItemListXLQDevBarCode?: string | undefined;
    /** 血滤器耗材批号 */
    roomItemListXLQBatchNo?: string | undefined;
    /** 耗材标识-血路管 */
    roomItemListXLGId?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabel?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabels?: string | undefined;
    /** 耗材-血路管数量 */
    roomItemListXLGCount?: number | undefined;
    /** 血路管耗材条码 */
    roomItemListXLGDevBarCode?: string | undefined;
    /** 血路管耗材批号 */
    roomItemListXLGBatchNo?: string | undefined;
    /** 耗材标识-内瘘针 */
    roomItemListNLZId?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabel?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabels?: string | undefined;
    /** 耗材-内瘘针数量 */
    roomItemListNLZCount?: number | undefined;
    /** 内瘘针耗材条码 */
    roomItemListNLZDevBarCode?: string | undefined;
    /** 耗材标识-置换液管路 */
    roomItemListZHYGLId?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabel?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabels?: string | undefined;
    /** 耗材-置换液管路数量 */
    roomItemListZHYGLCount?: number | undefined;
    /** 置换液管路耗材条码 */
    roomItemListZHYGLDevBarCode?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheter?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheters?: string | undefined;
    /** 灌流连接管条码 */
    perfusionCatheterDevBarCode?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparator?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparators?: string | undefined;
    /** 血浆分离器条码 */
    plasmaSeparatorDevBarCode?: string | undefined;
}

/** 透析医嘱 */
export class CureRecordItemDa implements ICureRecordItemDa {
    /** 标识 */
    id?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 用量 */
    dosage?: number;
    /** 单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次数量 */
    singleDosage?: number | undefined;
    /** 单次数量单位 */
    singleUnit?: string | undefined;
    /** 单次数量单位显示值 */
    singleUnitLabel?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 用法显示值 */
    usageLabel?: string | undefined;
    /** 执行状态显示值 */
    statusLabel?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordItemDa) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.groupId = _data["groupId"];
            this.group = _data["group"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.nameGoods = _data["nameGoods"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.singleUnitLabel = _data["singleUnitLabel"];
            this.orally = _data["orally"];
            this.status = _data["status"];
            this.cureDaContent = _data["cureDaContent"];
            this.unitLabel = _data["unitLabel"];
            this.usageLabel = _data["usageLabel"];
            this.statusLabel = _data["statusLabel"];
            this.type = _data["type"];
            this.typeName = _data["typeName"];
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordItemDa {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemDa();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["groupId"] = this.groupId;
        data["group"] = this.group;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toISOString() : <any>undefined;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["nameGoods"] = this.nameGoods;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["singleUnitLabel"] = this.singleUnitLabel;
        data["orally"] = this.orally;
        data["status"] = this.status;
        data["cureDaContent"] = this.cureDaContent;
        data["unitLabel"] = this.unitLabel;
        data["usageLabel"] = this.usageLabel;
        data["statusLabel"] = this.statusLabel;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析医嘱 */
export interface ICureRecordItemDa {
    /** 标识 */
    id?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 用量 */
    dosage?: number;
    /** 单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次数量 */
    singleDosage?: number | undefined;
    /** 单次数量单位 */
    singleUnit?: string | undefined;
    /** 单次数量单位显示值 */
    singleUnitLabel?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 用法显示值 */
    usageLabel?: string | undefined;
    /** 执行状态显示值 */
    statusLabel?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析液 */
export class CureRecordItemDialysate implements ICureRecordItemDialysate {
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 透析液简称 */
    dialysateShortName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;

    constructor(data?: ICureRecordItemDialysate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysateName = _data["dialysateName"];
            this.dialysateShortName = _data["dialysateShortName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
        }
    }

    static fromJS(data: any): CureRecordItemDialysate {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemDialysate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysateName"] = this.dialysateName;
        data["dialysateShortName"] = this.dialysateShortName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        return data;
    }
}

/** 透析液 */
export interface ICureRecordItemDialysate {
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 透析液简称 */
    dialysateShortName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
}

/** 消毒信息 */
export class CureRecordItemDisinfect implements ICureRecordItemDisinfect {
    /** 开始时间 */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 */
    endDate?: dayjs.Dayjs;
    /** 消毒时长(分钟) */
    disinfectTime?: number;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 */
    disinfectTemp?: string | undefined;

    constructor(data?: ICureRecordItemDisinfect) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.disinfectTime = _data["disinfectTime"];
            this.programInternal = _data["programInternal"];
            this.programInternalLabel = _data["programInternalLabel"];
            this.internalOperatorId = _data["internalOperatorId"];
            this.internalOperatorName = _data["internalOperatorName"];
            this.programExterior = _data["programExterior"];
            this.programExteriorLabel = _data["programExteriorLabel"];
            this.externalOperatorId = _data["externalOperatorId"];
            this.externalOperatorName = _data["externalOperatorName"];
            this.bedUnitCleaning = _data["bedUnitCleaning"];
            this.filterScreenChanging = _data["filterScreenChanging"];
            this.disinfectTemp = _data["disinfectTemp"];
        }
    }

    static fromJS(data: any): CureRecordItemDisinfect {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemDisinfect();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["disinfectTime"] = this.disinfectTime;
        data["programInternal"] = this.programInternal;
        data["programInternalLabel"] = this.programInternalLabel;
        data["internalOperatorId"] = this.internalOperatorId;
        data["internalOperatorName"] = this.internalOperatorName;
        data["programExterior"] = this.programExterior;
        data["programExteriorLabel"] = this.programExteriorLabel;
        data["externalOperatorId"] = this.externalOperatorId;
        data["externalOperatorName"] = this.externalOperatorName;
        data["bedUnitCleaning"] = this.bedUnitCleaning;
        data["filterScreenChanging"] = this.filterScreenChanging;
        data["disinfectTemp"] = this.disinfectTemp;
        return data;
    }
}

/** 消毒信息 */
export interface ICureRecordItemDisinfect {
    /** 开始时间 */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 */
    endDate?: dayjs.Dayjs;
    /** 消毒时长(分钟) */
    disinfectTime?: number;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 */
    disinfectTemp?: string | undefined;
}

/** 透中监测 */
export class CureRecordItemMonitor implements ICureRecordItemMonitor {
    /** 标识 */
    id?: string | undefined;
    /** 监测时间 */
    monitorTime?: dayjs.Dayjs | undefined;
    /** 记录护士标识 */
    nurseId?: string | undefined;
    /** 记录护士姓名 */
    nurseName?: string | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 血流量单位 */
    bloodFlowRateUnit?: string | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 静脉压单位 */
    venousPressureUnit?: string | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 动脉压单位 */
    arterialPressureUnit?: string | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* */
    tmp?: number | undefined;
    /** 跨膜压单位 */
    tmpUnit?: string | undefined;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    position?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 收缩压单位 */
    sbpUnit?: string | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 舒张压单位 */
    dbpUnit?: string | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 脉搏单位 */
    pulseUnit?: string | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 呼吸单位 */
    breatheUnit?: string | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 体温单位 */
    tempUnit?: string | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤率单位 */
    ufrUnit?: string | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 超滤量单位 */
    ufvUnit?: string | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液流量单位 */
    dialysateFlowRateUnit?: string | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液温度单位 */
    dialysateTempUnit?: string | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 透析液电导度单位 */
    dialysateCondUnit?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液流量单位 */
    rfrUnit?: string | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    /** 置换液量单位 */
    rfvUnit?: string | undefined;
    /** 肝素量 *mg* */
    heparin?: number | undefined;
    /** 肝素量单位 */
    heparinUnit?: string | undefined;
    /** 管路情况 `DIC.DIALYSIS.MONITOR.TUBE` *多选* */
    remarkTube?: string | undefined;
    /** 渗血情况 `DIC.DIALYSIS.MONITOR.ERRHYSIS` *多选* */
    remarkErrhysis?: string | undefined;
    /** 抗凝情况 `DIC.DIALYSIS.MONITOR.ANT` *多选* */
    remarkAnticoagulation?: string | undefined;
    /** 管路情况显示值 */
    remarkTubeLabel?: string | undefined;
    /** 渗血情况显示值 */
    remarkErrhysisLabel?: string | undefined;
    /** 抗凝情况显示值 */
    remarkAnticoagulationLabel?: string | undefined;
    /** 病情与处理 *病情与处理模板* `DIC.DIALYSIS.MONITOR.REMARK` *选择后往编辑域中追加* */
    remark?: string | undefined;
    /** 血压 */
    bp?: string | undefined;
    /** 血压单位 */
    bpUnit?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;

    constructor(data?: ICureRecordItemMonitor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.monitorTime = _data["monitorTime"] ? dayjs(_data["monitorTime"].toString()) : <any>undefined;
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.bloodFlowRateUnit = _data["bloodFlowRateUnit"];
            this.venousPressure = _data["venousPressure"];
            this.venousPressureUnit = _data["venousPressureUnit"];
            this.arterialPressure = _data["arterialPressure"];
            this.arterialPressureUnit = _data["arterialPressureUnit"];
            this.tmp = _data["tmp"];
            this.tmpUnit = _data["tmpUnit"];
            this.position = _data["position"];
            this.positionLabel = _data["positionLabel"];
            this.sbp = _data["sbp"];
            this.sbpUnit = _data["sbpUnit"];
            this.dbp = _data["dbp"];
            this.dbpUnit = _data["dbpUnit"];
            this.pulse = _data["pulse"];
            this.pulseUnit = _data["pulseUnit"];
            this.breathe = _data["breathe"];
            this.breatheUnit = _data["breatheUnit"];
            this.temp = _data["temp"];
            this.tempUnit = _data["tempUnit"];
            this.ufr = _data["ufr"];
            this.ufrUnit = _data["ufrUnit"];
            this.ufv = _data["ufv"];
            this.ufvUnit = _data["ufvUnit"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.dialysateFlowRateUnit = _data["dialysateFlowRateUnit"];
            this.dialysateTemp = _data["dialysateTemp"];
            this.dialysateTempUnit = _data["dialysateTempUnit"];
            this.dialysateCond = _data["dialysateCond"];
            this.dialysateCondUnit = _data["dialysateCondUnit"];
            this.rfr = _data["rfr"];
            this.rfrUnit = _data["rfrUnit"];
            this.rfv = _data["rfv"];
            this.cumulativeHeparinVolume = _data["cumulativeHeparinVolume"];
            this.rfvUnit = _data["rfvUnit"];
            this.heparin = _data["heparin"];
            this.heparinUnit = _data["heparinUnit"];
            this.remarkTube = _data["remarkTube"];
            this.remarkErrhysis = _data["remarkErrhysis"];
            this.remarkAnticoagulation = _data["remarkAnticoagulation"];
            this.remarkTubeLabel = _data["remarkTubeLabel"];
            this.remarkErrhysisLabel = _data["remarkErrhysisLabel"];
            this.remarkAnticoagulationLabel = _data["remarkAnticoagulationLabel"];
            this.remark = _data["remark"];
            this.bp = _data["bp"];
            this.bpUnit = _data["bpUnit"];
            this.ext1 = _data["ext1"];
            this.ext2 = _data["ext2"];
            this.ext3 = _data["ext3"];
            this.ext4 = _data["ext4"];
            this.ext5 = _data["ext5"];
            this.ext6 = _data["ext6"];
            this.ext7 = _data["ext7"];
            this.ext8 = _data["ext8"];
            this.ext9 = _data["ext9"];
            this.ext10 = _data["ext10"];
        }
    }

    static fromJS(data: any): CureRecordItemMonitor {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemMonitor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["monitorTime"] = this.monitorTime ? this.monitorTime.toISOString() : <any>undefined;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["bloodFlowRateUnit"] = this.bloodFlowRateUnit;
        data["venousPressure"] = this.venousPressure;
        data["venousPressureUnit"] = this.venousPressureUnit;
        data["arterialPressure"] = this.arterialPressure;
        data["arterialPressureUnit"] = this.arterialPressureUnit;
        data["tmp"] = this.tmp;
        data["tmpUnit"] = this.tmpUnit;
        data["position"] = this.position;
        data["positionLabel"] = this.positionLabel;
        data["sbp"] = this.sbp;
        data["sbpUnit"] = this.sbpUnit;
        data["dbp"] = this.dbp;
        data["dbpUnit"] = this.dbpUnit;
        data["pulse"] = this.pulse;
        data["pulseUnit"] = this.pulseUnit;
        data["breathe"] = this.breathe;
        data["breatheUnit"] = this.breatheUnit;
        data["temp"] = this.temp;
        data["tempUnit"] = this.tempUnit;
        data["ufr"] = this.ufr;
        data["ufrUnit"] = this.ufrUnit;
        data["ufv"] = this.ufv;
        data["ufvUnit"] = this.ufvUnit;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["dialysateFlowRateUnit"] = this.dialysateFlowRateUnit;
        data["dialysateTemp"] = this.dialysateTemp;
        data["dialysateTempUnit"] = this.dialysateTempUnit;
        data["dialysateCond"] = this.dialysateCond;
        data["dialysateCondUnit"] = this.dialysateCondUnit;
        data["rfr"] = this.rfr;
        data["rfrUnit"] = this.rfrUnit;
        data["rfv"] = this.rfv;
        data["cumulativeHeparinVolume"] = this.cumulativeHeparinVolume;
        data["rfvUnit"] = this.rfvUnit;
        data["heparin"] = this.heparin;
        data["heparinUnit"] = this.heparinUnit;
        data["remarkTube"] = this.remarkTube;
        data["remarkErrhysis"] = this.remarkErrhysis;
        data["remarkAnticoagulation"] = this.remarkAnticoagulation;
        data["remarkTubeLabel"] = this.remarkTubeLabel;
        data["remarkErrhysisLabel"] = this.remarkErrhysisLabel;
        data["remarkAnticoagulationLabel"] = this.remarkAnticoagulationLabel;
        data["remark"] = this.remark;
        data["bp"] = this.bp;
        data["bpUnit"] = this.bpUnit;
        data["ext1"] = this.ext1;
        data["ext2"] = this.ext2;
        data["ext3"] = this.ext3;
        data["ext4"] = this.ext4;
        data["ext5"] = this.ext5;
        data["ext6"] = this.ext6;
        data["ext7"] = this.ext7;
        data["ext8"] = this.ext8;
        data["ext9"] = this.ext9;
        data["ext10"] = this.ext10;
        return data;
    }
}

/** 透中监测 */
export interface ICureRecordItemMonitor {
    /** 标识 */
    id?: string | undefined;
    /** 监测时间 */
    monitorTime?: dayjs.Dayjs | undefined;
    /** 记录护士标识 */
    nurseId?: string | undefined;
    /** 记录护士姓名 */
    nurseName?: string | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 血流量单位 */
    bloodFlowRateUnit?: string | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 静脉压单位 */
    venousPressureUnit?: string | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 动脉压单位 */
    arterialPressureUnit?: string | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* */
    tmp?: number | undefined;
    /** 跨膜压单位 */
    tmpUnit?: string | undefined;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    position?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 收缩压单位 */
    sbpUnit?: string | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 舒张压单位 */
    dbpUnit?: string | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 脉搏单位 */
    pulseUnit?: string | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 呼吸单位 */
    breatheUnit?: string | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 体温单位 */
    tempUnit?: string | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤率单位 */
    ufrUnit?: string | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 超滤量单位 */
    ufvUnit?: string | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液流量单位 */
    dialysateFlowRateUnit?: string | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液温度单位 */
    dialysateTempUnit?: string | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 透析液电导度单位 */
    dialysateCondUnit?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液流量单位 */
    rfrUnit?: string | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    /** 置换液量单位 */
    rfvUnit?: string | undefined;
    /** 肝素量 *mg* */
    heparin?: number | undefined;
    /** 肝素量单位 */
    heparinUnit?: string | undefined;
    /** 管路情况 `DIC.DIALYSIS.MONITOR.TUBE` *多选* */
    remarkTube?: string | undefined;
    /** 渗血情况 `DIC.DIALYSIS.MONITOR.ERRHYSIS` *多选* */
    remarkErrhysis?: string | undefined;
    /** 抗凝情况 `DIC.DIALYSIS.MONITOR.ANT` *多选* */
    remarkAnticoagulation?: string | undefined;
    /** 管路情况显示值 */
    remarkTubeLabel?: string | undefined;
    /** 渗血情况显示值 */
    remarkErrhysisLabel?: string | undefined;
    /** 抗凝情况显示值 */
    remarkAnticoagulationLabel?: string | undefined;
    /** 病情与处理 *病情与处理模板* `DIC.DIALYSIS.MONITOR.REMARK` *选择后往编辑域中追加* */
    remark?: string | undefined;
    /** 血压 */
    bp?: string | undefined;
    /** 血压单位 */
    bpUnit?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;
}

/** 透后小结 */
export class CureRecordItemSummary implements ICureRecordItemSummary {
    /** 小结内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordItemSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordItemSummary {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透后小结 */
export interface ICureRecordItemSummary {
    /** 小结内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析use修改记录 */
export class CureRecordLogView implements ICureRecordLogView {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 拒绝原因 *多个以;分隔* */
    cause?: string | undefined;
    /** 透析方式 */
    causeMode?: string | undefined;
    /** 生命体征 */
    causeVitlsigns?: string | undefined;
    /** 抗凝剂 */
    causeAnticoagulant?: string | undefined;
    /** 透析液 */
    causeDialysate?: string | undefined;
    /** 耗材 */
    causeConsumable?: string | undefined;
    /** 医嘱 */
    causeDa?: string | undefined;
    /** 其它 */
    causeOther?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 处理状态0,1 */
    status!: number;
    /** 来源 *方案确认,交叉核对* */
    source!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.cause = _data["cause"];
            this.causeMode = _data["causeMode"];
            this.causeVitlsigns = _data["causeVitlsigns"];
            this.causeAnticoagulant = _data["causeAnticoagulant"];
            this.causeDialysate = _data["causeDialysate"];
            this.causeConsumable = _data["causeConsumable"];
            this.causeDa = _data["causeDa"];
            this.causeOther = _data["causeOther"];
            this.content = _data["content"];
            this.status = _data["status"];
            this.source = _data["source"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordLogView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["cause"] = this.cause;
        data["causeMode"] = this.causeMode;
        data["causeVitlsigns"] = this.causeVitlsigns;
        data["causeAnticoagulant"] = this.causeAnticoagulant;
        data["causeDialysate"] = this.causeDialysate;
        data["causeConsumable"] = this.causeConsumable;
        data["causeDa"] = this.causeDa;
        data["causeOther"] = this.causeOther;
        data["content"] = this.content;
        data["status"] = this.status;
        data["source"] = this.source;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 透析use修改记录 */
export interface ICureRecordLogView {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 拒绝原因 *多个以;分隔* */
    cause?: string | undefined;
    /** 透析方式 */
    causeMode?: string | undefined;
    /** 生命体征 */
    causeVitlsigns?: string | undefined;
    /** 抗凝剂 */
    causeAnticoagulant?: string | undefined;
    /** 透析液 */
    causeDialysate?: string | undefined;
    /** 耗材 */
    causeConsumable?: string | undefined;
    /** 医嘱 */
    causeDa?: string | undefined;
    /** 其它 */
    causeOther?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 处理状态0,1 */
    status: number;
    /** 来源 *方案确认,交叉核对* */
    source: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 透析记录修改记录 (ViewModel) */
export class CureRecordLogViewModel implements ICureRecordLogViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 拒绝原因 *多个以;分隔* */
    cause?: string | undefined;
    /** 透析方式 */
    causeMode?: string | undefined;
    /** 生命体征 */
    causeVitlsigns?: string | undefined;
    /** 抗凝剂 */
    causeAnticoagulant?: string | undefined;
    /** 透析液 */
    causeDialysate?: string | undefined;
    /** 耗材 */
    causeConsumable?: string | undefined;
    /** 医嘱 */
    causeDa?: string | undefined;
    /** 其它 */
    causeOther?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 处理状态0,1 */
    status!: number;
    /** 来源 *方案确认,交叉核对* */
    source!: string;

    constructor(data?: ICureRecordLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.cause = _data["cause"];
            this.causeMode = _data["causeMode"];
            this.causeVitlsigns = _data["causeVitlsigns"];
            this.causeAnticoagulant = _data["causeAnticoagulant"];
            this.causeDialysate = _data["causeDialysate"];
            this.causeConsumable = _data["causeConsumable"];
            this.causeDa = _data["causeDa"];
            this.causeOther = _data["causeOther"];
            this.content = _data["content"];
            this.status = _data["status"];
            this.source = _data["source"];
        }
    }

    static fromJS(data: any): CureRecordLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["cause"] = this.cause;
        data["causeMode"] = this.causeMode;
        data["causeVitlsigns"] = this.causeVitlsigns;
        data["causeAnticoagulant"] = this.causeAnticoagulant;
        data["causeDialysate"] = this.causeDialysate;
        data["causeConsumable"] = this.causeConsumable;
        data["causeDa"] = this.causeDa;
        data["causeOther"] = this.causeOther;
        data["content"] = this.content;
        data["status"] = this.status;
        data["source"] = this.source;
        return data;
    }
}

/** 透析记录修改记录 (ViewModel) */
export interface ICureRecordLogViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 拒绝原因 *多个以;分隔* */
    cause?: string | undefined;
    /** 透析方式 */
    causeMode?: string | undefined;
    /** 生命体征 */
    causeVitlsigns?: string | undefined;
    /** 抗凝剂 */
    causeAnticoagulant?: string | undefined;
    /** 透析液 */
    causeDialysate?: string | undefined;
    /** 耗材 */
    causeConsumable?: string | undefined;
    /** 医嘱 */
    causeDa?: string | undefined;
    /** 其它 */
    causeOther?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 处理状态0,1 */
    status: number;
    /** 来源 *方案确认,交叉核对* */
    source: string;
}

/** Reponse */
export class CureRecordLogViewResult implements ICureRecordLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordLogView[] | undefined;

    constructor(data?: ICureRecordLogViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordLogViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordLogViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordLogView[] | undefined;
}

/** Reponse */
export class CureRecordLogViewResultEntry implements ICureRecordLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordLogView;

    constructor(data?: ICureRecordLogViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordLogView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordLogViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordLogViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordLogView;
}

/** 患者透析签名 */
export class CureRecordSignatureEditModel implements ICureRecordSignatureEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordSignatureEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.signature = _data["signature"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordSignatureEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordSignatureEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["signature"] = this.signature;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者透析签名 */
export interface ICureRecordSignatureEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 患者透析签名 */
export class CureRecordSignatureView implements ICureRecordSignatureView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordSignatureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.signature = _data["signature"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordSignatureView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordSignatureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["signature"] = this.signature;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 患者透析签名 */
export interface ICureRecordSignatureView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureRecordSignatureViewResult implements ICureRecordSignatureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordSignatureView[] | undefined;

    constructor(data?: ICureRecordSignatureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordSignatureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordSignatureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordSignatureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordSignatureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordSignatureView[] | undefined;
}

/** Reponse */
export class CureRecordSignatureViewResultEntry implements ICureRecordSignatureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordSignatureView;

    constructor(data?: ICureRecordSignatureViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordSignatureView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordSignatureViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordSignatureViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordSignatureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordSignatureView;
}

/** 透析记录单 */
export class CureRecordView implements ICureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型显示值 */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 设备号 */
    dialysisMachineSn?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight1?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientOtherVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight1?: number | undefined;
    /** 透前净体重 */
    readonly beforeNetWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    readonly ufg1?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 偏移后透前体重 */
    deductionBeforeWeight?: number | undefined;
    /** 偏移后透后体重 */
    deductionAfterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight1?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前血压 *mmHg* */
    beforeBp?: string | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置显示值 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后血压 *mmHg* */
    afterBp?: string | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 上次透后体重 */
    preAfterWeight?: number | undefined;
    /** 上次透后体重 */
    preAfterWeight1?: number | undefined;
    /** 较干体重增加量 */
    addBestWeight?: number | undefined;
    /** 本次透析体重下降量 */
    reduceWeight?: number | undefined;
    appendWeight?: number | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 穿刺方法 */
    punctureMethod?: string | undefined;
    /** 穿刺方法显示值 */
    punctureMethodLabel?: string | undefined;
    /** 穿刺护士 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士 */
    punctureNurseName?: string | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 透前体温 */
    onTemp?: number | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    vascularLocation?: string | undefined;
    /** 血管通路部位 */
    vascularPosition?: string | undefined;
    monitorBP?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 病历夹号 *病历夹号* */
    dossierNumber?: string | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析次数 */
    dialysisCount?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 点位穿刺节点 */
    punctureNodes?: string | undefined;
    /** 点位穿刺节点备注 */
    punctureNodesRemark?: string | undefined;
    /** 穿刺记录备注 */
    punctureRemark?: string | undefined;
    /** 是否单超0,1 */
    iufLabel?: string | undefined;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 是否归档 */
    isArchive?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 指纹图片 */
    finger?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 病情 `DIC.PEOPLE.CONDITION` */
    medicareCondition?: string | undefined;
    /** 病情显示值 */
    medicareConditionName?: string | undefined;
    /** 治疗状态名称 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析龄 */
    dialysisAgeMonth?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    cureDialysate?: CureRecordItemDialysate;
    cureAnticoagulant?: CureRecordItemAnticoagulant;
    cureConsumable?: CureRecordItemConsumable;
    cureMonitorFirst?: CureRecordItemMonitor;
    cureMonitorLast?: CureRecordItemMonitor;
    /** 透中监测 */
    cureMonitor?: CureRecordItemMonitor[] | undefined;
    cureComplicationFirst?: CureRecordItemComplication;
    /** 透中事件 */
    cureComplication?: CureRecordItemComplication[] | undefined;
    /** 透析医嘱 */
    cureDa?: CureRecordItemDa[] | undefined;
    cureSummary?: CureRecordItemSummary;
    disinfect?: CureRecordItemDisinfect;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 受支持的表单自定义数据 */
    assementValues?: SysFormValueView[] | undefined;
    /** 透前评估用 */
    assementValuesBefore?: SysFormValueView[] | undefined;
    /** 透后评估用 */
    assementValuesAfter?: SysFormValueView[] | undefined;
    /** 透析评估用 */
    assementValuesDialysis?: SysFormValueView[] | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature?: string | undefined;
    /** 自定义字段 */
    cureFieldValues?: CureFieldValueView[] | undefined;

    constructor(data?: ICureRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineId = _data["dialysisMachineId"];
            this.dialysisMachineType = _data["dialysisMachineType"];
            this.dialysisMachineTypeLabel = _data["dialysisMachineTypeLabel"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMachineSn = _data["dialysisMachineSn"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bestWeight1 = _data["bestWeight1"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.rfm = _data["rfm"];
            this.rfmLabel = _data["rfmLabel"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeight1 = _data["beforeWeight1"];
            (<any>this).beforeNetWeight = _data["beforeNetWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            (<any>this).ufg1 = _data["ufg1"];
            this.ufc = _data["ufc"];
            this.deductionBeforeWeight = _data["deductionBeforeWeight"];
            this.deductionAfterWeight = _data["deductionAfterWeight"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeight1 = _data["afterWeight1"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforeBp = _data["beforeBp"];
            this.beforePulse = _data["beforePulse"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.afterBpPositionLabel = _data["afterBpPositionLabel"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterBp = _data["afterBp"];
            this.afterPulse = _data["afterPulse"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeBeforeWeight = _data["timeBeforeWeight"] ? dayjs(_data["timeBeforeWeight"].toString()) : <any>undefined;
            this.preAfterWeight = _data["preAfterWeight"];
            this.preAfterWeight1 = _data["preAfterWeight1"];
            this.addBestWeight = _data["addBestWeight"];
            this.reduceWeight = _data["reduceWeight"];
            this.appendWeight = _data["appendWeight"];
            this.timeBeforeBp = _data["timeBeforeBp"] ? dayjs(_data["timeBeforeBp"].toString()) : <any>undefined;
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeAssementBefore = _data["timeAssementBefore"] ? dayjs(_data["timeAssementBefore"].toString()) : <any>undefined;
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.punctureMethod = _data["punctureMethod"];
            this.punctureMethodLabel = _data["punctureMethodLabel"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            this.timeFirstMonitor = _data["timeFirstMonitor"] ? dayjs(_data["timeFirstMonitor"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.timeDisinfect = _data["timeDisinfect"] ? dayjs(_data["timeDisinfect"].toString()) : <any>undefined;
            this.timeAssementAfter = _data["timeAssementAfter"] ? dayjs(_data["timeAssementAfter"].toString()) : <any>undefined;
            this.timeAfterWeight = _data["timeAfterWeight"] ? dayjs(_data["timeAfterWeight"].toString()) : <any>undefined;
            this.timeAfterBp = _data["timeAfterBp"] ? dayjs(_data["timeAfterBp"].toString()) : <any>undefined;
            this.timeAfterSummary = _data["timeAfterSummary"] ? dayjs(_data["timeAfterSummary"].toString()) : <any>undefined;
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.assementBeforeNurseId = _data["assementBeforeNurseId"];
            this.assementBeforeNurseName = _data["assementBeforeNurseName"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.onTemp = _data["onTemp"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.verify = _data["verify"];
            this.offNurseId = _data["offNurseId"];
            this.offNurseName = _data["offNurseName"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            this.assementAfterNurseId = _data["assementAfterNurseId"];
            this.vascularLocation = _data["vascularLocation"];
            this.vascularPosition = _data["vascularPosition"];
            this.monitorBP = _data["monitorBP"];
            this.assementAfterNurseName = _data["assementAfterNurseName"];
            this.summaryAfterNurseId = _data["summaryAfterNurseId"];
            this.summaryAfterNurseName = _data["summaryAfterNurseName"];
            this.offEarly = _data["offEarly"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.cancelReason = _data["cancelReason"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisLabel = _data["diagnosisLabel"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dossierNumber = _data["dossierNumber"];
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCount = _data["dialysisCount"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.iuf = _data["iuf"];
            this.punctureNodes = _data["punctureNodes"];
            this.punctureNodesRemark = _data["punctureNodesRemark"];
            this.punctureRemark = _data["punctureRemark"];
            this.iufLabel = _data["iufLabel"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.isArchive = _data["isArchive"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.lastId = _data["lastId"];
            this.nextId = _data["nextId"];
            this.patientName = _data["patientName"];
            this.finger = _data["finger"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.medicareCondition = _data["medicareCondition"];
            this.medicareConditionName = _data["medicareConditionName"];
            this.statusLabel = _data["statusLabel"];
            this.dialysisAge = _data["dialysisAge"];
            this.dialysisAgeMonth = _data["dialysisAgeMonth"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.cureDialysate = _data["cureDialysate"] ? CureRecordItemDialysate.fromJS(_data["cureDialysate"]) : <any>undefined;
            this.cureAnticoagulant = _data["cureAnticoagulant"] ? CureRecordItemAnticoagulant.fromJS(_data["cureAnticoagulant"]) : <any>undefined;
            this.cureConsumable = _data["cureConsumable"] ? CureRecordItemConsumable.fromJS(_data["cureConsumable"]) : <any>undefined;
            this.cureMonitorFirst = _data["cureMonitorFirst"] ? CureRecordItemMonitor.fromJS(_data["cureMonitorFirst"]) : <any>undefined;
            this.cureMonitorLast = _data["cureMonitorLast"] ? CureRecordItemMonitor.fromJS(_data["cureMonitorLast"]) : <any>undefined;
            if (Array.isArray(_data["cureMonitor"])) {
                this.cureMonitor = [] as any;
                for (let item of _data["cureMonitor"])
                    this.cureMonitor!.push(CureRecordItemMonitor.fromJS(item));
            }
            this.cureComplicationFirst = _data["cureComplicationFirst"] ? CureRecordItemComplication.fromJS(_data["cureComplicationFirst"]) : <any>undefined;
            if (Array.isArray(_data["cureComplication"])) {
                this.cureComplication = [] as any;
                for (let item of _data["cureComplication"])
                    this.cureComplication!.push(CureRecordItemComplication.fromJS(item));
            }
            if (Array.isArray(_data["cureDa"])) {
                this.cureDa = [] as any;
                for (let item of _data["cureDa"])
                    this.cureDa!.push(CureRecordItemDa.fromJS(item));
            }
            this.cureSummary = _data["cureSummary"] ? CureRecordItemSummary.fromJS(_data["cureSummary"]) : <any>undefined;
            this.disinfect = _data["disinfect"] ? CureRecordItemDisinfect.fromJS(_data["disinfect"]) : <any>undefined;
            this.assementBefore = _data["assementBefore"] ? CureRecordItemAssement.fromJS(_data["assementBefore"]) : <any>undefined;
            this.assementAfter = _data["assementAfter"] ? CureRecordItemAssement.fromJS(_data["assementAfter"]) : <any>undefined;
            this.assementDialysis = _data["assementDialysis"] ? CureRecordItemAssement.fromJS(_data["assementDialysis"]) : <any>undefined;
            if (Array.isArray(_data["assementValues"])) {
                this.assementValues = [] as any;
                for (let item of _data["assementValues"])
                    this.assementValues!.push(SysFormValueView.fromJS(item));
            }
            if (Array.isArray(_data["assementValuesBefore"])) {
                this.assementValuesBefore = [] as any;
                for (let item of _data["assementValuesBefore"])
                    this.assementValuesBefore!.push(SysFormValueView.fromJS(item));
            }
            if (Array.isArray(_data["assementValuesAfter"])) {
                this.assementValuesAfter = [] as any;
                for (let item of _data["assementValuesAfter"])
                    this.assementValuesAfter!.push(SysFormValueView.fromJS(item));
            }
            if (Array.isArray(_data["assementValuesDialysis"])) {
                this.assementValuesDialysis = [] as any;
                for (let item of _data["assementValuesDialysis"])
                    this.assementValuesDialysis!.push(SysFormValueView.fromJS(item));
            }
            this.signature = _data["signature"];
            if (Array.isArray(_data["cureFieldValues"])) {
                this.cureFieldValues = [] as any;
                for (let item of _data["cureFieldValues"])
                    this.cureFieldValues!.push(CureFieldValueView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineId"] = this.dialysisMachineId;
        data["dialysisMachineType"] = this.dialysisMachineType;
        data["dialysisMachineTypeLabel"] = this.dialysisMachineTypeLabel;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMachineSn"] = this.dialysisMachineSn;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bestWeight1"] = this.bestWeight1;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["rfm"] = this.rfm;
        data["rfmLabel"] = this.rfmLabel;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeight1"] = this.beforeWeight1;
        data["beforeNetWeight"] = this.beforeNetWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["ufg1"] = this.ufg1;
        data["ufc"] = this.ufc;
        data["deductionBeforeWeight"] = this.deductionBeforeWeight;
        data["deductionAfterWeight"] = this.deductionAfterWeight;
        data["afterWeight"] = this.afterWeight;
        data["afterWeight1"] = this.afterWeight1;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforeBp"] = this.beforeBp;
        data["beforePulse"] = this.beforePulse;
        data["afterBpPosition"] = this.afterBpPosition;
        data["afterBpPositionLabel"] = this.afterBpPositionLabel;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterBp"] = this.afterBp;
        data["afterPulse"] = this.afterPulse;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeBeforeWeight"] = this.timeBeforeWeight ? this.timeBeforeWeight.toISOString() : <any>undefined;
        data["preAfterWeight"] = this.preAfterWeight;
        data["preAfterWeight1"] = this.preAfterWeight1;
        data["addBestWeight"] = this.addBestWeight;
        data["reduceWeight"] = this.reduceWeight;
        data["appendWeight"] = this.appendWeight;
        data["timeBeforeBp"] = this.timeBeforeBp ? this.timeBeforeBp.toISOString() : <any>undefined;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toISOString() : <any>undefined;
        data["enact"] = this.enact;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toISOString() : <any>undefined;
        data["check"] = this.check;
        data["timeAssementBefore"] = this.timeAssementBefore ? this.timeAssementBefore.toISOString() : <any>undefined;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["punctureMethod"] = this.punctureMethod;
        data["punctureMethodLabel"] = this.punctureMethodLabel;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toISOString() : <any>undefined;
        data["timeFirstMonitor"] = this.timeFirstMonitor ? this.timeFirstMonitor.toISOString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["timeDisinfect"] = this.timeDisinfect ? this.timeDisinfect.toISOString() : <any>undefined;
        data["timeAssementAfter"] = this.timeAssementAfter ? this.timeAssementAfter.toISOString() : <any>undefined;
        data["timeAfterWeight"] = this.timeAfterWeight ? this.timeAfterWeight.toISOString() : <any>undefined;
        data["timeAfterBp"] = this.timeAfterBp ? this.timeAfterBp.toISOString() : <any>undefined;
        data["timeAfterSummary"] = this.timeAfterSummary ? this.timeAfterSummary.toISOString() : <any>undefined;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["assementBeforeNurseId"] = this.assementBeforeNurseId;
        data["assementBeforeNurseName"] = this.assementBeforeNurseName;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["onTemp"] = this.onTemp;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["verify"] = this.verify;
        data["offNurseId"] = this.offNurseId;
        data["offNurseName"] = this.offNurseName;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        data["assementAfterNurseId"] = this.assementAfterNurseId;
        data["vascularLocation"] = this.vascularLocation;
        data["vascularPosition"] = this.vascularPosition;
        data["monitorBP"] = this.monitorBP;
        data["assementAfterNurseName"] = this.assementAfterNurseName;
        data["summaryAfterNurseId"] = this.summaryAfterNurseId;
        data["summaryAfterNurseName"] = this.summaryAfterNurseName;
        data["offEarly"] = this.offEarly;
        data["offEarlyCause"] = this.offEarlyCause;
        data["cancelReason"] = this.cancelReason;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisLabel"] = this.diagnosisLabel;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dossierNumber"] = this.dossierNumber;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCount"] = this.dialysisCount;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["iuf"] = this.iuf;
        data["punctureNodes"] = this.punctureNodes;
        data["punctureNodesRemark"] = this.punctureNodesRemark;
        data["punctureRemark"] = this.punctureRemark;
        data["iufLabel"] = this.iufLabel;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toISOString() : <any>undefined;
        data["isArchive"] = this.isArchive;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["lastId"] = this.lastId;
        data["nextId"] = this.nextId;
        data["patientName"] = this.patientName;
        data["finger"] = this.finger;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["medicareCondition"] = this.medicareCondition;
        data["medicareConditionName"] = this.medicareConditionName;
        data["statusLabel"] = this.statusLabel;
        data["dialysisAge"] = this.dialysisAge;
        data["dialysisAgeMonth"] = this.dialysisAgeMonth;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["cureDialysate"] = this.cureDialysate ? this.cureDialysate.toJSON() : <any>undefined;
        data["cureAnticoagulant"] = this.cureAnticoagulant ? this.cureAnticoagulant.toJSON() : <any>undefined;
        data["cureConsumable"] = this.cureConsumable ? this.cureConsumable.toJSON() : <any>undefined;
        data["cureMonitorFirst"] = this.cureMonitorFirst ? this.cureMonitorFirst.toJSON() : <any>undefined;
        data["cureMonitorLast"] = this.cureMonitorLast ? this.cureMonitorLast.toJSON() : <any>undefined;
        if (Array.isArray(this.cureMonitor)) {
            data["cureMonitor"] = [];
            for (let item of this.cureMonitor)
                data["cureMonitor"].push(item.toJSON());
        }
        data["cureComplicationFirst"] = this.cureComplicationFirst ? this.cureComplicationFirst.toJSON() : <any>undefined;
        if (Array.isArray(this.cureComplication)) {
            data["cureComplication"] = [];
            for (let item of this.cureComplication)
                data["cureComplication"].push(item.toJSON());
        }
        if (Array.isArray(this.cureDa)) {
            data["cureDa"] = [];
            for (let item of this.cureDa)
                data["cureDa"].push(item.toJSON());
        }
        data["cureSummary"] = this.cureSummary ? this.cureSummary.toJSON() : <any>undefined;
        data["disinfect"] = this.disinfect ? this.disinfect.toJSON() : <any>undefined;
        data["assementBefore"] = this.assementBefore ? this.assementBefore.toJSON() : <any>undefined;
        data["assementAfter"] = this.assementAfter ? this.assementAfter.toJSON() : <any>undefined;
        data["assementDialysis"] = this.assementDialysis ? this.assementDialysis.toJSON() : <any>undefined;
        if (Array.isArray(this.assementValues)) {
            data["assementValues"] = [];
            for (let item of this.assementValues)
                data["assementValues"].push(item.toJSON());
        }
        if (Array.isArray(this.assementValuesBefore)) {
            data["assementValuesBefore"] = [];
            for (let item of this.assementValuesBefore)
                data["assementValuesBefore"].push(item.toJSON());
        }
        if (Array.isArray(this.assementValuesAfter)) {
            data["assementValuesAfter"] = [];
            for (let item of this.assementValuesAfter)
                data["assementValuesAfter"].push(item.toJSON());
        }
        if (Array.isArray(this.assementValuesDialysis)) {
            data["assementValuesDialysis"] = [];
            for (let item of this.assementValuesDialysis)
                data["assementValuesDialysis"].push(item.toJSON());
        }
        data["signature"] = this.signature;
        if (Array.isArray(this.cureFieldValues)) {
            data["cureFieldValues"] = [];
            for (let item of this.cureFieldValues)
                data["cureFieldValues"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析记录单 */
export interface ICureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型显示值 */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 设备号 */
    dialysisMachineSn?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight1?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientOtherVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight1?: number | undefined;
    /** 透前净体重 */
    beforeNetWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg1?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 偏移后透前体重 */
    deductionBeforeWeight?: number | undefined;
    /** 偏移后透后体重 */
    deductionAfterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight1?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前血压 *mmHg* */
    beforeBp?: string | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置显示值 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后血压 *mmHg* */
    afterBp?: string | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 上次透后体重 */
    preAfterWeight?: number | undefined;
    /** 上次透后体重 */
    preAfterWeight1?: number | undefined;
    /** 较干体重增加量 */
    addBestWeight?: number | undefined;
    /** 本次透析体重下降量 */
    reduceWeight?: number | undefined;
    appendWeight?: number | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 穿刺方法 */
    punctureMethod?: string | undefined;
    /** 穿刺方法显示值 */
    punctureMethodLabel?: string | undefined;
    /** 穿刺护士 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士 */
    punctureNurseName?: string | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 透前体温 */
    onTemp?: number | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    vascularLocation?: string | undefined;
    /** 血管通路部位 */
    vascularPosition?: string | undefined;
    monitorBP?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 病历夹号 *病历夹号* */
    dossierNumber?: string | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析次数 */
    dialysisCount?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 点位穿刺节点 */
    punctureNodes?: string | undefined;
    /** 点位穿刺节点备注 */
    punctureNodesRemark?: string | undefined;
    /** 穿刺记录备注 */
    punctureRemark?: string | undefined;
    /** 是否单超0,1 */
    iufLabel?: string | undefined;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 是否归档 */
    isArchive?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 指纹图片 */
    finger?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 病情 `DIC.PEOPLE.CONDITION` */
    medicareCondition?: string | undefined;
    /** 病情显示值 */
    medicareConditionName?: string | undefined;
    /** 治疗状态名称 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析龄 */
    dialysisAgeMonth?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    cureDialysate?: CureRecordItemDialysate;
    cureAnticoagulant?: CureRecordItemAnticoagulant;
    cureConsumable?: CureRecordItemConsumable;
    cureMonitorFirst?: CureRecordItemMonitor;
    cureMonitorLast?: CureRecordItemMonitor;
    /** 透中监测 */
    cureMonitor?: CureRecordItemMonitor[] | undefined;
    cureComplicationFirst?: CureRecordItemComplication;
    /** 透中事件 */
    cureComplication?: CureRecordItemComplication[] | undefined;
    /** 透析医嘱 */
    cureDa?: CureRecordItemDa[] | undefined;
    cureSummary?: CureRecordItemSummary;
    disinfect?: CureRecordItemDisinfect;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 受支持的表单自定义数据 */
    assementValues?: SysFormValueView[] | undefined;
    /** 透前评估用 */
    assementValuesBefore?: SysFormValueView[] | undefined;
    /** 透后评估用 */
    assementValuesAfter?: SysFormValueView[] | undefined;
    /** 透析评估用 */
    assementValuesDialysis?: SysFormValueView[] | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature?: string | undefined;
    /** 自定义字段 */
    cureFieldValues?: CureFieldValueView[] | undefined;
}

/** 透析记录 (ViewModel) */
export class CureRecordViewModel implements ICureRecordViewModel {
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn!: string;
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 透析日期 */
    dialysisDate!: dayjs.Dayjs;
    /** 班次 */
    shiftId!: string;
    /** 班次 */
    shiftName!: string;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode!: string;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel!: string;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet!: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路Id) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status!: string;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否单超0,1 */
    iuf!: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish!: number;
    /** 是否归档 */
    isArchive!: number;

    constructor(data?: ICureRecordViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineId = _data["dialysisMachineId"];
            this.dialysisMachineType = _data["dialysisMachineType"];
            this.dialysisMachineTypeLabel = _data["dialysisMachineTypeLabel"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.rfm = _data["rfm"];
            this.rfmLabel = _data["rfmLabel"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.ufc = _data["ufc"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.afterBpPositionLabel = _data["afterBpPositionLabel"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeBeforeWeight = _data["timeBeforeWeight"] ? dayjs(_data["timeBeforeWeight"].toString()) : <any>undefined;
            this.timeBeforeBp = _data["timeBeforeBp"] ? dayjs(_data["timeBeforeBp"].toString()) : <any>undefined;
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeAssementBefore = _data["timeAssementBefore"] ? dayjs(_data["timeAssementBefore"].toString()) : <any>undefined;
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            this.timeFirstMonitor = _data["timeFirstMonitor"] ? dayjs(_data["timeFirstMonitor"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.timeDisinfect = _data["timeDisinfect"] ? dayjs(_data["timeDisinfect"].toString()) : <any>undefined;
            this.timeAssementAfter = _data["timeAssementAfter"] ? dayjs(_data["timeAssementAfter"].toString()) : <any>undefined;
            this.timeAfterWeight = _data["timeAfterWeight"] ? dayjs(_data["timeAfterWeight"].toString()) : <any>undefined;
            this.timeAfterBp = _data["timeAfterBp"] ? dayjs(_data["timeAfterBp"].toString()) : <any>undefined;
            this.timeAfterSummary = _data["timeAfterSummary"] ? dayjs(_data["timeAfterSummary"].toString()) : <any>undefined;
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
            this.assementUserId = _data["assementUserId"];
            this.assementUserName = _data["assementUserName"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.assementBeforeNurseId = _data["assementBeforeNurseId"];
            this.assementBeforeNurseName = _data["assementBeforeNurseName"];
            this.punctureMethod = _data["punctureMethod"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.onTemp = _data["onTemp"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.verify = _data["verify"];
            this.offNurseId = _data["offNurseId"];
            this.offNurseName = _data["offNurseName"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            this.assementAfterNurseId = _data["assementAfterNurseId"];
            this.assementAfterNurseName = _data["assementAfterNurseName"];
            this.summaryAfterNurseId = _data["summaryAfterNurseId"];
            this.summaryAfterNurseName = _data["summaryAfterNurseName"];
            this.offEarly = _data["offEarly"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.suggestionNext = _data["suggestionNext"];
            this.cancelReason = _data["cancelReason"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.remark = _data["remark"];
            this.iuf = _data["iuf"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.patientPrescriptionId = _data["patientPrescriptionId"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.isReplenish = _data["isReplenish"];
            this.isArchive = _data["isArchive"];
        }
    }

    static fromJS(data: any): CureRecordViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toISOString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineId"] = this.dialysisMachineId;
        data["dialysisMachineType"] = this.dialysisMachineType;
        data["dialysisMachineTypeLabel"] = this.dialysisMachineTypeLabel;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["rfm"] = this.rfm;
        data["rfmLabel"] = this.rfmLabel;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["ufc"] = this.ufc;
        data["afterWeight"] = this.afterWeight;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterBpPosition"] = this.afterBpPosition;
        data["afterBpPositionLabel"] = this.afterBpPositionLabel;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toISOString() : <any>undefined;
        data["timeBeforeWeight"] = this.timeBeforeWeight ? this.timeBeforeWeight.toISOString() : <any>undefined;
        data["timeBeforeBp"] = this.timeBeforeBp ? this.timeBeforeBp.toISOString() : <any>undefined;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toISOString() : <any>undefined;
        data["enact"] = this.enact;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toISOString() : <any>undefined;
        data["check"] = this.check;
        data["timeAssementBefore"] = this.timeAssementBefore ? this.timeAssementBefore.toISOString() : <any>undefined;
        data["timeOn"] = this.timeOn ? this.timeOn.toISOString() : <any>undefined;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toISOString() : <any>undefined;
        data["timeFirstMonitor"] = this.timeFirstMonitor ? this.timeFirstMonitor.toISOString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toISOString() : <any>undefined;
        data["timeDisinfect"] = this.timeDisinfect ? this.timeDisinfect.toISOString() : <any>undefined;
        data["timeAssementAfter"] = this.timeAssementAfter ? this.timeAssementAfter.toISOString() : <any>undefined;
        data["timeAfterWeight"] = this.timeAfterWeight ? this.timeAfterWeight.toISOString() : <any>undefined;
        data["timeAfterBp"] = this.timeAfterBp ? this.timeAfterBp.toISOString() : <any>undefined;
        data["timeAfterSummary"] = this.timeAfterSummary ? this.timeAfterSummary.toISOString() : <any>undefined;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toISOString() : <any>undefined;
        data["assementUserId"] = this.assementUserId;
        data["assementUserName"] = this.assementUserName;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["assementBeforeNurseId"] = this.assementBeforeNurseId;
        data["assementBeforeNurseName"] = this.assementBeforeNurseName;
        data["punctureMethod"] = this.punctureMethod;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["onTemp"] = this.onTemp;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["verify"] = this.verify;
        data["offNurseId"] = this.offNurseId;
        data["offNurseName"] = this.offNurseName;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        data["assementAfterNurseId"] = this.assementAfterNurseId;
        data["assementAfterNurseName"] = this.assementAfterNurseName;
        data["summaryAfterNurseId"] = this.summaryAfterNurseId;
        data["summaryAfterNurseName"] = this.summaryAfterNurseName;
        data["offEarly"] = this.offEarly;
        data["offEarlyCause"] = this.offEarlyCause;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["suggestionNext"] = this.suggestionNext;
        data["cancelReason"] = this.cancelReason;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["remark"] = this.remark;
        data["iuf"] = this.iuf;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toISOString() : <any>undefined;
        data["patientPrescriptionId"] = this.patientPrescriptionId;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["isReplenish"] = this.isReplenish;
        data["isArchive"] = this.isArchive;
        return data;
    }
}

/** 透析记录 (ViewModel) */
export interface ICureRecordViewModel {
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn: string;
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 透析日期 */
    dialysisDate: dayjs.Dayjs;
    /** 班次 */
    shiftId: string;
    /** 班次 */
    shiftName: string;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode: string;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel: string;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路Id) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status: string;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否单超0,1 */
    iuf: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish: number;
    /** 是否归档 */
    isArchive: number;
}

/** Reponse */
export class CureRecordViewResult implements ICureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordView[] | undefined;

    constructor(data?: ICureRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordView[] | undefined;
}

/** Reponse */
export class CureRecordViewResultEntry implements ICureRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordView;

    constructor(data?: ICureRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordView;
}

export class CureScheduleSaveEditModel implements ICureScheduleSaveEditModel {
    /** 模板标识 */
    tmplId!: string;
    /** 科室标识 */
    arearId!: string;
    /** 日期(eg. 2018/11/26 ~ 2018/12/02) */
    date!: string;

    constructor(data?: ICureScheduleSaveEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tmplId = _data["tmplId"];
            this.arearId = _data["arearId"];
            this.date = _data["date"];
        }
    }

    static fromJS(data: any): CureScheduleSaveEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleSaveEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tmplId"] = this.tmplId;
        data["arearId"] = this.arearId;
        data["date"] = this.date;
        return data;
    }
}

export interface ICureScheduleSaveEditModel {
    /** 模板标识 */
    tmplId: string;
    /** 科室标识 */
    arearId: string;
    /** 日期(eg. 2018/11/26 ~ 2018/12/02) */
    date: string;
}

/** 文件列表 */
export class HfsFiles implements IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHfsFiles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.status = _data["status"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HfsFiles {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["status"] = this.status;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 文件列表 */
export interface IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class LabelModel implements ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;

    constructor(data?: ILabelModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LabelModel {
        data = typeof data === 'object' ? data : {};
        let result = new LabelModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data;
    }
}

export interface ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;
}

/** 患者信息 */
export class Patient implements IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;

    constructor(data?: IPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.surnameCode = _data["surnameCode"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.photo = _data["photo"];
            this.face = _data["face"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.department = _data["department"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.archiveNumber = _data["archiveNumber"];
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.rh = _data["rh"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.educationalLevel = _data["educationalLevel"];
            this.profession = _data["profession"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisStateTransition = _data["dialysisStateTransition"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.prognosisState = _data["prognosisState"];
            this.positive = _data["positive"];
            this.complication = _data["complication"];
            this.doctor = _data["doctor"];
            this.nurse = _data["nurse"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisPathological = _data["diagnosisPathological"];
            this.diagnosisComplication = _data["diagnosisComplication"];
            this.diagnosisInfectiousDiseases = _data["diagnosisInfectiousDiseases"];
            this.diagnosisTumor = _data["diagnosisTumor"];
            this.diagnosisAllergy = _data["diagnosisAllergy"];
            this.remark = _data["remark"];
            this.initialSource = _data["initialSource"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.finger = _data["finger"];
            this.dossierNumber = _data["dossierNumber"];
            this.medicareCondition = _data["medicareCondition"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
        }
    }

    static fromJS(data: any): Patient {
        data = typeof data === 'object' ? data : {};
        let result = new Patient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["surnameCode"] = this.surnameCode;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["photo"] = this.photo;
        data["face"] = this.face;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["department"] = this.department;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["archiveNumber"] = this.archiveNumber;
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["rh"] = this.rh;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["educationalLevel"] = this.educationalLevel;
        data["profession"] = this.profession;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toISOString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisStateTransition"] = this.dialysisStateTransition;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toISOString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["prognosisState"] = this.prognosisState;
        data["positive"] = this.positive;
        data["complication"] = this.complication;
        data["doctor"] = this.doctor;
        data["nurse"] = this.nurse;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisPathological"] = this.diagnosisPathological;
        data["diagnosisComplication"] = this.diagnosisComplication;
        data["diagnosisInfectiousDiseases"] = this.diagnosisInfectiousDiseases;
        data["diagnosisTumor"] = this.diagnosisTumor;
        data["diagnosisAllergy"] = this.diagnosisAllergy;
        data["remark"] = this.remark;
        data["initialSource"] = this.initialSource;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["finger"] = this.finger;
        data["dossierNumber"] = this.dossierNumber;
        data["medicareCondition"] = this.medicareCondition;
        data["nextDate"] = this.nextDate ? this.nextDate.toISOString() : <any>undefined;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        return data;
    }
}

/** 患者信息 */
export interface IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
}

/** 患者血管通路 */
export class PatientVascularAccess implements IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientVascularAccess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
            this.changeCauseOther = _data["changeCauseOther"];
            this.location = _data["location"];
            this.type = _data["type"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.remarkOther = _data["remarkOther"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.default = _data["default"];
            this.disableDate = _data["disableDate"] ? dayjs(_data["disableDate"].toString()) : <any>undefined;
            this.disableReason = _data["disableReason"];
            this.lifetime = _data["lifetime"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccess {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>undefined;
        data["change"] = this.change;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        data["changeCauseOther"] = this.changeCauseOther;
        data["location"] = this.location;
        data["type"] = this.type;
        data["position"] = this.position;
        data["way"] = this.way;
        data["remarkOther"] = this.remarkOther;
        data["firstDate"] = this.firstDate ? this.firstDate.toISOString() : <any>undefined;
        data["default"] = this.default;
        data["disableDate"] = this.disableDate ? this.disableDate.toISOString() : <any>undefined;
        data["disableReason"] = this.disableReason;
        data["lifetime"] = this.lifetime;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者血管通路 */
export interface IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

/** 项目清单 */
export class RoomItemList implements IRoomItemList {
    /** 标识 */
    id?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomItemTypes?: RoomItemType;

    constructor(data?: IRoomItemList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.name = _data["name"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.shortName = _data["shortName"];
            this.nameGoods = _data["nameGoods"];
            this.model = _data["model"];
            this.spec = _data["spec"];
            this.origin = _data["origin"];
            this.dealer = _data["dealer"];
            this.warningDay = _data["warningDay"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.conversionRate = _data["conversionRate"];
            this.sellingPrice = _data["sellingPrice"];
            this.batchManage = _data["batchManage"];
            this.afterCharge = _data["afterCharge"];
            this.inCharge = _data["inCharge"];
            this.costType = _data["costType"];
            this.deductionSource = _data["deductionSource"];
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
            this.usageMode = _data["usageMode"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.inventory = _data["inventory"];
            this.enabled = _data["enabled"];
            this.commonTerms = _data["commonTerms"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemTypes = _data["roomItemTypes"] ? RoomItemType.fromJS(_data["roomItemTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemList {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["name"] = this.name;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["shortName"] = this.shortName;
        data["nameGoods"] = this.nameGoods;
        data["model"] = this.model;
        data["spec"] = this.spec;
        data["origin"] = this.origin;
        data["dealer"] = this.dealer;
        data["warningDay"] = this.warningDay;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["conversionRate"] = this.conversionRate;
        data["sellingPrice"] = this.sellingPrice;
        data["batchManage"] = this.batchManage;
        data["afterCharge"] = this.afterCharge;
        data["inCharge"] = this.inCharge;
        data["costType"] = this.costType;
        data["deductionSource"] = this.deductionSource;
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        data["usageMode"] = this.usageMode;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["inventory"] = this.inventory;
        data["enabled"] = this.enabled;
        data["commonTerms"] = this.commonTerms;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        data["roomItemTypes"] = this.roomItemTypes ? this.roomItemTypes.toJSON() : <any>undefined;
        return data;
    }
}

/** 项目清单 */
export interface IRoomItemList {
    /** 标识 */
    id?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomItemTypes?: RoomItemType;
}

/** 项目分类 */
export class RoomItemType implements IRoomItemType {
    /** 标识 */
    id?: string | undefined;
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomItemType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.system = _data["system"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemType {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["system"] = this.system;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 项目分类 */
export interface IRoomItemType {
    /** 标识 */
    id?: string | undefined;
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 费用项目 */
export class RoomRecordItem implements IRoomRecordItem {
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 批号管理 */
    batchManage!: number;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 患者编号 */
    patientId?: string | undefined;
    /** 批次明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: IRoomRecordItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.batchManage = _data["batchManage"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.devBarCode = _data["devBarCode"];
            this.patientId = _data["patientId"];
            if (Array.isArray(_data["batchItems"])) {
                this.batchItems = [] as any;
                for (let item of _data["batchItems"])
                    this.batchItems!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["batchManage"] = this.batchManage;
        data["code"] = this.code;
        data["name"] = this.name;
        data["devBarCode"] = this.devBarCode;
        data["patientId"] = this.patientId;
        if (Array.isArray(this.batchItems)) {
            data["batchItems"] = [];
            for (let item of this.batchItems)
                data["batchItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 费用项目 */
export interface IRoomRecordItem {
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 批号管理 */
    batchManage: number;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 患者编号 */
    patientId?: string | undefined;
    /** 批次明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;
}

/** 自定义表单数据 */
export class SysFormValueView implements ISysFormValueView {
    /** 名称 */
    name?: string | undefined;
    /** 键 */
    key?: string | undefined;
    /** 值 */
    value?: any | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 是否在透析记录单显示0,1 *只在透析记录单中评估内容自动生成场景下生效* */
    cureRecordShow?: number;

    constructor(data?: ISysFormValueView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.key = _data["key"];
            this.value = _data["value"];
            this.unit = _data["unit"];
            this.cureRecordShow = _data["cureRecordShow"];
        }
    }

    static fromJS(data: any): SysFormValueView {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormValueView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["key"] = this.key;
        data["value"] = this.value;
        data["unit"] = this.unit;
        data["cureRecordShow"] = this.cureRecordShow;
        return data;
    }
}

/** 自定义表单数据 */
export interface ISysFormValueView {
    /** 名称 */
    name?: string | undefined;
    /** 键 */
    key?: string | undefined;
    /** 值 */
    value?: any | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 是否在透析记录单显示0,1 *只在透析记录单中评估内容自动生成场景下生效* */
    cureRecordShow?: number;
}

/** 用户信息 */
export class SysUser implements ISysUser {
    /** 标识 */
    id?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 密码 */
    pwd?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobNumber = _data["jobNumber"];
            this.loginName = _data["loginName"];
            this.pwd = _data["pwd"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.tel = _data["tel"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUser {
        data = typeof data === 'object' ? data : {};
        let result = new SysUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobNumber"] = this.jobNumber;
        data["loginName"] = this.loginName;
        data["pwd"] = this.pwd;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["tel"] = this.tel;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** 用户信息 */
export interface ISysUser {
    /** 标识 */
    id?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 密码 */
    pwd?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 透析记录单模板 */
export class TmplCureRecordEditModel implements ITmplCureRecordEditModel {
    /** 表头行数 */
    row?: number | undefined;
    /** 模板内容 */
    content!: string;

    constructor(data?: ITmplCureRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.row = _data["row"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): TmplCureRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new TmplCureRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["row"] = this.row;
        data["content"] = this.content;
        return data;
    }
}

/** 透析记录单模板 */
export interface ITmplCureRecordEditModel {
    /** 表头行数 */
    row?: number | undefined;
    /** 模板内容 */
    content: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}