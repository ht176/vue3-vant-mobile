/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ServiceProxyBase} from './ServiceProxyBase'
import axios, { AxiosError, type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type CancelToken } from 'axios';

import dayjs from 'dayjs';

export class AntiTmplTypeDrugServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 抗凝剂类型药品 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    antiTmplTypeDrugGET(id: string , cancelToken?: CancelToken | undefined): Promise<AntiTmplTypeDrugViewResultEntry> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAntiTmplTypeDrugGET(_response));
        });
    }

    protected processAntiTmplTypeDrugGET(response: AxiosResponse): Promise<AntiTmplTypeDrugViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AntiTmplTypeDrugViewResultEntry.fromJS(resultData200);
            return Promise.resolve<AntiTmplTypeDrugViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AntiTmplTypeDrugViewResultEntry>(null as any);
    }

    /**
     * 抗凝剂类型药品 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    antiTmplTypeDrugPOST(id: string, body: AntiTmplTypeDrugEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAntiTmplTypeDrugPOST(_response));
        });
    }

    protected processAntiTmplTypeDrugPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 抗凝剂类型药品 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<AntiTmplTypeDrugViewResult> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter(_response));
        });
    }

    protected processFilter(response: AxiosResponse): Promise<AntiTmplTypeDrugViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AntiTmplTypeDrugViewResult.fromJS(resultData200);
            return Promise.resolve<AntiTmplTypeDrugViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AntiTmplTypeDrugViewResult>(null as any);
    }

    /**
     * 抗凝剂类型药品 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    antiTmplTypeDrugPOST2(body: AntiTmplTypeDrugEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAntiTmplTypeDrugPOST2(_response));
        });
    }

    protected processAntiTmplTypeDrugPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 抗凝剂类型药品 -- 批量新增数据
     * @param body (optional)
     * @return Success
     */
    bulk(body: AntiTmplTypeDrugEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug/Bulk";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBulk(_response));
        });
    }

    protected processBulk(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 抗凝剂类型药品 -- 设置常用项
     * @param id 项目标识
     * @return Success
     */
    frequently(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug/Frequently/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFrequently(_response));
        });
    }

    protected processFrequently(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 抗凝剂类型药品 -- 根据Id删除数据
     * @return Success
     */
    delete(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/AntiTmplTypeDrug/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CentralInformationServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 中心信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    centralInformationGET(id: string , cancelToken?: CancelToken | undefined): Promise<CentralInformationViewResultEntry> {
        let url_ = this.baseUrl + "/api/CentralInformation/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCentralInformationGET(_response));
        });
    }

    protected processCentralInformationGET(response: AxiosResponse): Promise<CentralInformationViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CentralInformationViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CentralInformationViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CentralInformationViewResultEntry>(null as any);
    }

    /**
     * 中心信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    centralInformationPOST(id: string, body: CentralInformationEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CentralInformation/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCentralInformationPOST(_response));
        });
    }

    protected processCentralInformationPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 中心信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter2(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CentralInformationViewResult> {
        let url_ = this.baseUrl + "/api/CentralInformation/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter2(_response));
        });
    }

    protected processFilter2(response: AxiosResponse): Promise<CentralInformationViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CentralInformationViewResult.fromJS(resultData200);
            return Promise.resolve<CentralInformationViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CentralInformationViewResult>(null as any);
    }

    /**
     * 中心信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    centralInformationPOST2(body: CentralInformationEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CentralInformation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCentralInformationPOST2(_response));
        });
    }

    protected processCentralInformationPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 中心信息 -- 根据Id删除数据
     * @return Success
     */
    delete2(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CentralInformation/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete2(_response));
        });
    }

    protected processDelete2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureAssementServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析评估记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureAssement(id: string , cancelToken?: CancelToken | undefined): Promise<CureAssementViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureAssement/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureAssement(_response));
        });
    }

    protected processCureAssement(response: AxiosResponse): Promise<CureAssementViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureAssementViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureAssementViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureAssementViewResultEntry>(null as any);
    }

    /**
     * 透析评估记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter3(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureAssementViewResult> {
        let url_ = this.baseUrl + "/api/CureAssement/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter3(_response));
        });
    }

    protected processFilter3(response: AxiosResponse): Promise<CureAssementViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureAssementViewResult.fromJS(resultData200);
            return Promise.resolve<CureAssementViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureAssementViewResult>(null as any);
    }
}

export class CureChangeBedServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 换床记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter4(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureChangeBedResult> {
        let url_ = this.baseUrl + "/api/CureChangeBed/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter4(_response));
        });
    }

    protected processFilter4(response: AxiosResponse): Promise<CureChangeBedResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureChangeBedResult.fromJS(resultData200);
            return Promise.resolve<CureChangeBedResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureChangeBedResult>(null as any);
    }

    /**
     * 换床记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureChangeBed(body: CureChangeBedViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureChangeBed";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureChangeBed(_response));
        });
    }

    protected processCureChangeBed(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 换床记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureChangeBed2(id: string, body: CureChangeBedViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureChangeBed/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureChangeBed2(_response));
        });
    }

    protected processCureChangeBed2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 换床记录 -- 根据Id删除数据
     * @return Success
     */
    delete3(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureChangeBed/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete3(_response));
        });
    }

    protected processDelete3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureComplicationServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析并发症 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureComplicationGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureComplicationResultEntry> {
        let url_ = this.baseUrl + "/api/CureComplication/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationGET(_response));
        });
    }

    protected processCureComplicationGET(response: AxiosResponse): Promise<CureComplicationResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationResultEntry.fromJS(resultData200);
            return Promise.resolve<CureComplicationResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationResultEntry>(null as any);
    }

    /**
     * 透析并发症 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationPOST(id: string, body: CureComplicationViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplication/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationPOST(_response));
        });
    }

    protected processCureComplicationPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症 -- 根据患者Id查询数据
     * @param patientId 患者Id
     * @return Success
     */
    byPatientId(patientId: string , cancelToken?: CancelToken | undefined): Promise<ComplicationCureMiddleViewResult> {
        let url_ = this.baseUrl + "/api/CureComplication/ByPatientId/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByPatientId(_response));
        });
    }

    protected processByPatientId(response: AxiosResponse): Promise<ComplicationCureMiddleViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ComplicationCureMiddleViewResult.fromJS(resultData200);
            return Promise.resolve<ComplicationCureMiddleViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ComplicationCureMiddleViewResult>(null as any);
    }

    /**
     * 透析并发症 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationPOST2(body: CureComplicationViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplication";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationPOST2(_response));
        });
    }

    protected processCureComplicationPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症 -- 根据Id删除数据
     * @return Success
     */
    delete4(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplication/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete4(_response));
        });
    }

    protected processDelete4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureComplicationCauseServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析并发症原因 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureComplicationCauseGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureComplicationCauseResultEntry> {
        let url_ = this.baseUrl + "/api/CureComplicationCause/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationCauseGET(_response));
        });
    }

    protected processCureComplicationCauseGET(response: AxiosResponse): Promise<CureComplicationCauseResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationCauseResultEntry.fromJS(resultData200);
            return Promise.resolve<CureComplicationCauseResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationCauseResultEntry>(null as any);
    }

    /**
     * 透析并发症原因 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationCausePOST(id: string, body: CureComplicationCauseViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationCause/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationCausePOST(_response));
        });
    }

    protected processCureComplicationCausePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症原因 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter5(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureComplicationCauseResult> {
        let url_ = this.baseUrl + "/api/CureComplicationCause/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter5(_response));
        });
    }

    protected processFilter5(response: AxiosResponse): Promise<CureComplicationCauseResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationCauseResult.fromJS(resultData200);
            return Promise.resolve<CureComplicationCauseResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationCauseResult>(null as any);
    }

    /**
     * 透析并发症原因 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationCausePOST2(body: CureComplicationCauseViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationCause";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationCausePOST2(_response));
        });
    }

    protected processCureComplicationCausePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症原因 -- 根据Id删除数据
     * @return Success
     */
    delete5(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationCause/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete5(_response));
        });
    }

    protected processDelete5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureComplicationDisposeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析并发症处理 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureComplicationDisposeGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureComplicationDisposeResultEntry> {
        let url_ = this.baseUrl + "/api/CureComplicationDispose/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationDisposeGET(_response));
        });
    }

    protected processCureComplicationDisposeGET(response: AxiosResponse): Promise<CureComplicationDisposeResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationDisposeResultEntry.fromJS(resultData200);
            return Promise.resolve<CureComplicationDisposeResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationDisposeResultEntry>(null as any);
    }

    /**
     * 透析并发症处理 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationDisposePOST(id: string, body: CureComplicationDisposeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationDispose/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationDisposePOST(_response));
        });
    }

    protected processCureComplicationDisposePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症处理 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter6(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureComplicationDisposeResult> {
        let url_ = this.baseUrl + "/api/CureComplicationDispose/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter6(_response));
        });
    }

    protected processFilter6(response: AxiosResponse): Promise<CureComplicationDisposeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationDisposeResult.fromJS(resultData200);
            return Promise.resolve<CureComplicationDisposeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationDisposeResult>(null as any);
    }

    /**
     * 透析并发症处理 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationDisposePOST2(body: CureComplicationDisposeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationDispose";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationDisposePOST2(_response));
        });
    }

    protected processCureComplicationDisposePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症处理 -- 根据Id删除数据
     * @return Success
     */
    delete6(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationDispose/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete6(_response));
        });
    }

    protected processDelete6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureComplicationFileServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析并发症照片 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter7(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureComplicationFileResult> {
        let url_ = this.baseUrl + "/api/CureComplicationFile/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter7(_response));
        });
    }

    protected processFilter7(response: AxiosResponse): Promise<CureComplicationFileResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureComplicationFileResult.fromJS(resultData200);
            return Promise.resolve<CureComplicationFileResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureComplicationFileResult>(null as any);
    }

    /**
     * 透析并发症照片 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationFile(body: CureComplicationFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationFile(_response));
        });
    }

    protected processCureComplicationFile(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症照片 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureComplicationFile2(id: string, body: CureComplicationFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureComplicationFile2(_response));
        });
    }

    protected processCureComplicationFile2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析并发症照片 -- 根据Id删除数据
     * @return Success
     */
    delete7(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureComplicationFile/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete7(_response));
        });
    }

    protected processDelete7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureCourseServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透后病程记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureCourseGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureCourseViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureCourse/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureCourseGET(_response));
        });
    }

    protected processCureCourseGET(response: AxiosResponse): Promise<CureCourseViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCourseViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureCourseViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCourseViewResultEntry>(null as any);
    }

    /**
     * 透后病程记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureCoursePOST(id: string, body: CureCourseEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureCourse/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureCoursePOST(_response));
        });
    }

    protected processCureCoursePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后病程记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter8(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureCourseViewResult> {
        let url_ = this.baseUrl + "/api/CureCourse/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter8(_response));
        });
    }

    protected processFilter8(response: AxiosResponse): Promise<CureCourseViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCourseViewResult.fromJS(resultData200);
            return Promise.resolve<CureCourseViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCourseViewResult>(null as any);
    }

    /**
     * 透后病程历次记录
     * @param filter (optional)
     * @param patientid (optional)
     * @return Success
     */
    getAllCureCourse(filter: string | undefined, patientid: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureCourseViewResult> {
        let url_ = this.baseUrl + "/api/CureCourse/GetAllCureCourse?";
        if (patientid === null)
            throw new Error("The parameter 'patientid' cannot be null.");
        else if (patientid !== undefined)
            url_ += "patientid=" + encodeURIComponent("" + patientid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAllCureCourse(_response));
        });
    }

    protected processGetAllCureCourse(response: AxiosResponse): Promise<CureCourseViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureCourseViewResult.fromJS(resultData200);
            return Promise.resolve<CureCourseViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureCourseViewResult>(null as any);
    }

    /**
     * 透后病程记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureCoursePOST2(body: CureCourseEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureCourse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureCoursePOST2(_response));
        });
    }

    protected processCureCoursePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透后病程记录 -- 根据Id删除数据
     * @return Success
     */
    delete8(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureCourse/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete8(_response));
        });
    }

    protected processDelete8(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureDaServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析医嘱 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureDa(id: string , cancelToken?: CancelToken | undefined): Promise<CureDaResultEntry> {
        let url_ = this.baseUrl + "/api/CureDa/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDa(_response));
        });
    }

    protected processCureDa(response: AxiosResponse): Promise<CureDaResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaResultEntry.fromJS(resultData200);
            return Promise.resolve<CureDaResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaResultEntry>(null as any);
    }
}

export class CureDaLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析医嘱修改记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter9(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaLogResult> {
        let url_ = this.baseUrl + "/api/CureDaLog/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter9(_response));
        });
    }

    protected processFilter9(response: AxiosResponse): Promise<CureDaLogResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaLogResult.fromJS(resultData200);
            return Promise.resolve<CureDaLogResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaLogResult>(null as any);
    }

    /**
     * 透析医嘱修改记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureDaLog(body: CureDaLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaLog(_response));
        });
    }

    protected processCureDaLog(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析医嘱修改记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureDaLog2(id: string, body: CureDaLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaLog2(_response));
        });
    }

    protected processCureDaLog2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析医嘱修改记录 -- 根据Id删除数据
     * @return Success
     */
    delete9(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete9(_response));
        });
    }

    protected processDelete9(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureDaTempServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 临时透析医嘱 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureDaTempGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureDaTempResultEntry> {
        let url_ = this.baseUrl + "/api/CureDaTemp/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaTempGET(_response));
        });
    }

    protected processCureDaTempGET(response: AxiosResponse): Promise<CureDaTempResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaTempResultEntry.fromJS(resultData200);
            return Promise.resolve<CureDaTempResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaTempResultEntry>(null as any);
    }

    /**
     * 临时透析医嘱 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureDaTempPOST(id: string, body: CureDaTempViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaTemp/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaTempPOST(_response));
        });
    }

    protected processCureDaTempPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 临时透析医嘱 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter10(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaTempResult> {
        let url_ = this.baseUrl + "/api/CureDaTemp/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter10(_response));
        });
    }

    protected processFilter10(response: AxiosResponse): Promise<CureDaTempResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaTempResult.fromJS(resultData200);
            return Promise.resolve<CureDaTempResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaTempResult>(null as any);
    }

    /**
     * 临时透析医嘱 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureDaTempPOST2(body: CureDaTempViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaTemp";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaTempPOST2(_response));
        });
    }

    protected processCureDaTempPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 临时透析医嘱 -- 根据Id删除数据
     * @return Success
     */
    delete10(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaTemp/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete10(_response));
        });
    }

    protected processDelete10(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureDaVoidedServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 作废医嘱 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureDaVoidedGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureDaVoidedResultEntry> {
        let url_ = this.baseUrl + "/api/CureDaVoided/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaVoidedGET(_response));
        });
    }

    protected processCureDaVoidedGET(response: AxiosResponse): Promise<CureDaVoidedResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaVoidedResultEntry.fromJS(resultData200);
            return Promise.resolve<CureDaVoidedResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaVoidedResultEntry>(null as any);
    }

    /**
     * 作废医嘱 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureDaVoidedPOST(id: string, body: CureDaVoidedEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaVoided/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaVoidedPOST(_response));
        });
    }

    protected processCureDaVoidedPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 作废医嘱 -- 根据条件查询数据
     * @param filter (optional)
     * @param patientName (optional)
     * @return Success
     */
    filter11(filter: string | undefined, patientName: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaVoidedCustomViewResult> {
        let url_ = this.baseUrl + "/api/CureDaVoided/Filter?";
        if (patientName === null)
            throw new Error("The parameter 'patientName' cannot be null.");
        else if (patientName !== undefined)
            url_ += "patientName=" + encodeURIComponent("" + patientName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter11(_response));
        });
    }

    protected processFilter11(response: AxiosResponse): Promise<CureDaVoidedCustomViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaVoidedCustomViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaVoidedCustomViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaVoidedCustomViewResult>(null as any);
    }

    /**
     * 作废医嘱 -- 根据条件查询数据
     * @param filter (optional)
     * @param recordId (optional)
     * @return Success
     */
    getByRecordId(filter: string | undefined, recordId: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaVoidedCustomViewResult> {
        let url_ = this.baseUrl + "/api/CureDaVoided/GetByRecordId?";
        if (recordId === null)
            throw new Error("The parameter 'recordId' cannot be null.");
        else if (recordId !== undefined)
            url_ += "recordId=" + encodeURIComponent("" + recordId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByRecordId(_response));
        });
    }

    protected processGetByRecordId(response: AxiosResponse): Promise<CureDaVoidedCustomViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaVoidedCustomViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaVoidedCustomViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaVoidedCustomViewResult>(null as any);
    }

    /**
     * 作废医嘱 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureDaVoidedPOST2(body: CureDaVoidedEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaVoided";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDaVoidedPOST2(_response));
        });
    }

    protected processCureDaVoidedPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 作废医嘱 -- 根据Id删除数据
     * @return Success
     */
    delete11(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureDaVoided/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete11(_response));
        });
    }

    protected processDelete11(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureInformationAntihypertensiveAgentsServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 抗高血压药治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureInformationAntihypertensiveAgentsGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureInformationAntihypertensiveAgentsViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureInformationAntihypertensiveAgents/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationAntihypertensiveAgentsGET(_response));
        });
    }

    protected processCureInformationAntihypertensiveAgentsGET(response: AxiosResponse): Promise<CureInformationAntihypertensiveAgentsViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationAntihypertensiveAgentsViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureInformationAntihypertensiveAgentsViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationAntihypertensiveAgentsViewResultEntry>(null as any);
    }

    /**
     * 抗高血压药治疗信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureInformationAntihypertensiveAgentsPOST(id: string, body: CureInformationAntihypertensiveAgentsEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationAntihypertensiveAgents/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationAntihypertensiveAgentsPOST(_response));
        });
    }

    protected processCureInformationAntihypertensiveAgentsPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 抗高血压药治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @param filter (optional)
     * @return Success
     */
    getByParentId(pareintId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationAntihypertensiveAgentsViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationAntihypertensiveAgents/GetByParentId/{pareintId}";
        if (pareintId === undefined || pareintId === null)
            throw new Error("The parameter 'pareintId' must be defined.");
        url_ = url_.replace("{pareintId}", encodeURIComponent("" + pareintId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByParentId(_response));
        });
    }

    protected processGetByParentId(response: AxiosResponse): Promise<CureInformationAntihypertensiveAgentsViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationAntihypertensiveAgentsViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationAntihypertensiveAgentsViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationAntihypertensiveAgentsViewResult>(null as any);
    }

    /**
     * 抗高血压药治疗信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter12(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationAntihypertensiveAgentsViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationAntihypertensiveAgents/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter12(_response));
        });
    }

    protected processFilter12(response: AxiosResponse): Promise<CureInformationAntihypertensiveAgentsViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationAntihypertensiveAgentsViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationAntihypertensiveAgentsViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationAntihypertensiveAgentsViewResult>(null as any);
    }

    /**
     * 抗高血压药治疗信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureInformationAntihypertensiveAgentsPOST2(body: CureInformationAntihypertensiveAgentsEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationAntihypertensiveAgents";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationAntihypertensiveAgentsPOST2(_response));
        });
    }

    protected processCureInformationAntihypertensiveAgentsPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 抗高血压药治疗信息 -- 根据Id删除数据
     * @return Success
     */
    delete12(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationAntihypertensiveAgents/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete12(_response));
        });
    }

    protected processDelete12(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureInformationChalybeateServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 铁剂治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureInformationChalybeateGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureInformationChalybeateViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureInformationChalybeate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationChalybeateGET(_response));
        });
    }

    protected processCureInformationChalybeateGET(response: AxiosResponse): Promise<CureInformationChalybeateViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationChalybeateViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureInformationChalybeateViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationChalybeateViewResultEntry>(null as any);
    }

    /**
     * 铁剂治疗信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureInformationChalybeatePOST(id: string, body: CureInformationChalybeateEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationChalybeate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationChalybeatePOST(_response));
        });
    }

    protected processCureInformationChalybeatePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 铁剂治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @param filter (optional)
     * @return Success
     */
    getByParentId2(pareintId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationChalybeateViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationChalybeate/GetByParentId/{pareintId}";
        if (pareintId === undefined || pareintId === null)
            throw new Error("The parameter 'pareintId' must be defined.");
        url_ = url_.replace("{pareintId}", encodeURIComponent("" + pareintId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByParentId2(_response));
        });
    }

    protected processGetByParentId2(response: AxiosResponse): Promise<CureInformationChalybeateViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationChalybeateViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationChalybeateViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationChalybeateViewResult>(null as any);
    }

    /**
     * 铁剂治疗信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter13(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationChalybeateViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationChalybeate/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter13(_response));
        });
    }

    protected processFilter13(response: AxiosResponse): Promise<CureInformationChalybeateViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationChalybeateViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationChalybeateViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationChalybeateViewResult>(null as any);
    }

    /**
     * 铁剂治疗信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureInformationChalybeatePOST2(body: CureInformationChalybeateEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationChalybeate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationChalybeatePOST2(_response));
        });
    }

    protected processCureInformationChalybeatePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 铁剂治疗信息 -- 根据Id删除数据
     * @return Success
     */
    delete13(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationChalybeate/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete13(_response));
        });
    }

    protected processDelete13(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureInformationEsaServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * esa治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureInformationEsaGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureInformationEsaViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureInformationEsa/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationEsaGET(_response));
        });
    }

    protected processCureInformationEsaGET(response: AxiosResponse): Promise<CureInformationEsaViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationEsaViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureInformationEsaViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationEsaViewResultEntry>(null as any);
    }

    /**
     * esa治疗信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureInformationEsaPOST(id: string, body: CureInformationEsaEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationEsa/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationEsaPOST(_response));
        });
    }

    protected processCureInformationEsaPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * esa治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @param filter (optional)
     * @return Success
     */
    getByParentId3(pareintId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationEsaViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationEsa/GetByParentId/{pareintId}";
        if (pareintId === undefined || pareintId === null)
            throw new Error("The parameter 'pareintId' must be defined.");
        url_ = url_.replace("{pareintId}", encodeURIComponent("" + pareintId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByParentId3(_response));
        });
    }

    protected processGetByParentId3(response: AxiosResponse): Promise<CureInformationEsaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationEsaViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationEsaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationEsaViewResult>(null as any);
    }

    /**
     * esa治疗信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter14(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationEsaViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationEsa/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter14(_response));
        });
    }

    protected processFilter14(response: AxiosResponse): Promise<CureInformationEsaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationEsaViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationEsaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationEsaViewResult>(null as any);
    }

    /**
     * esa治疗信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureInformationEsaPOST2(body: CureInformationEsaEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationEsa";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationEsaPOST2(_response));
        });
    }

    protected processCureInformationEsaPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * esa治疗信息 -- 根据Id删除数据
     * @return Success
     */
    delete14(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationEsa/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete14(_response));
        });
    }

    protected processDelete14(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureInformationHIFPHIServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * HIF-PHI治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureInformationHIFPHIGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureInformationHIFPHIViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureInformationHIFPHI/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationHIFPHIGET(_response));
        });
    }

    protected processCureInformationHIFPHIGET(response: AxiosResponse): Promise<CureInformationHIFPHIViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationHIFPHIViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureInformationHIFPHIViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationHIFPHIViewResultEntry>(null as any);
    }

    /**
     * HIF-PHI治疗信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureInformationHIFPHIPOST(id: string, body: CureInformationHIFPHIEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationHIFPHI/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationHIFPHIPOST(_response));
        });
    }

    protected processCureInformationHIFPHIPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * HIF-PHI治疗信息 -- 根据条件查询数据
     * @param filter (optional)
     * @return Success
     */
    getByParentId4(pareintId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationHIFPHIViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationHIFPHI/GetByParentId/{pareintId}";
        if (pareintId === undefined || pareintId === null)
            throw new Error("The parameter 'pareintId' must be defined.");
        url_ = url_.replace("{pareintId}", encodeURIComponent("" + pareintId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByParentId4(_response));
        });
    }

    protected processGetByParentId4(response: AxiosResponse): Promise<CureInformationHIFPHIViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationHIFPHIViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationHIFPHIViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationHIFPHIViewResult>(null as any);
    }

    /**
     * HIF-PHI治疗信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter15(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationHIFPHIViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationHIFPHI/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter15(_response));
        });
    }

    protected processFilter15(response: AxiosResponse): Promise<CureInformationHIFPHIViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationHIFPHIViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationHIFPHIViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationHIFPHIViewResult>(null as any);
    }

    /**
     * HIF-PHI治疗信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureInformationHIFPHIPOST2(body: CureInformationHIFPHIEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationHIFPHI";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationHIFPHIPOST2(_response));
        });
    }

    protected processCureInformationHIFPHIPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * HIF-PHI治疗信息 -- 根据Id删除数据
     * @return Success
     */
    delete15(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationHIFPHI/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete15(_response));
        });
    }

    protected processDelete15(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureInformationMbdServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * MBD干预药治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureInformationMbdGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureInformationMbdViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureInformationMbd/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationMbdGET(_response));
        });
    }

    protected processCureInformationMbdGET(response: AxiosResponse): Promise<CureInformationMbdViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationMbdViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureInformationMbdViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationMbdViewResultEntry>(null as any);
    }

    /**
     * MBD干预药治疗信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureInformationMbdPOST(id: string, body: CureInformationMbdEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationMbd/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationMbdPOST(_response));
        });
    }

    protected processCureInformationMbdPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * MBD干预药治疗信息 -- 根据条件查询数据
     * @param filter (optional)
     * @return Success
     */
    getByParentId5(pareintId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationMbdViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationMbd/GetByParentId/{pareintId}";
        if (pareintId === undefined || pareintId === null)
            throw new Error("The parameter 'pareintId' must be defined.");
        url_ = url_.replace("{pareintId}", encodeURIComponent("" + pareintId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByParentId5(_response));
        });
    }

    protected processGetByParentId5(response: AxiosResponse): Promise<CureInformationMbdViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationMbdViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationMbdViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationMbdViewResult>(null as any);
    }

    /**
     * MBD干预药治疗信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter16(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationMbdViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationMbd/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter16(_response));
        });
    }

    protected processFilter16(response: AxiosResponse): Promise<CureInformationMbdViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationMbdViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationMbdViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationMbdViewResult>(null as any);
    }

    /**
     * MBD干预药治疗信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureInformationMbdPOST2(body: CureInformationMbdEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationMbd";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationMbdPOST2(_response));
        });
    }

    protected processCureInformationMbdPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * MBD干预药治疗信息 -- 根据Id删除数据
     * @return Success
     */
    delete16(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationMbd/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete16(_response));
        });
    }

    protected processDelete16(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureInformationOtherServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 其他药物治疗信息治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureInformationOtherGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureInformationOtherViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureInformationOther/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationOtherGET(_response));
        });
    }

    protected processCureInformationOtherGET(response: AxiosResponse): Promise<CureInformationOtherViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationOtherViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureInformationOtherViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationOtherViewResultEntry>(null as any);
    }

    /**
     * 其他药物治疗信息治疗信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureInformationOtherPOST(id: string, body: CureInformationOtherEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationOther/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationOtherPOST(_response));
        });
    }

    protected processCureInformationOtherPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他药物治疗信息治疗信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @param filter (optional)
     * @return Success
     */
    getByParentId6(pareintId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationOtherViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationOther/GetByParentId/{pareintId}";
        if (pareintId === undefined || pareintId === null)
            throw new Error("The parameter 'pareintId' must be defined.");
        url_ = url_.replace("{pareintId}", encodeURIComponent("" + pareintId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByParentId6(_response));
        });
    }

    protected processGetByParentId6(response: AxiosResponse): Promise<CureInformationOtherViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationOtherViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationOtherViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationOtherViewResult>(null as any);
    }

    /**
     * 其他药物治疗信息治疗信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter17(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationOtherViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationOther/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter17(_response));
        });
    }

    protected processFilter17(response: AxiosResponse): Promise<CureInformationOtherViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationOtherViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationOtherViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationOtherViewResult>(null as any);
    }

    /**
     * 其他药物治疗信息治疗信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureInformationOtherPOST2(body: CureInformationOtherEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationOther";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationOtherPOST2(_response));
        });
    }

    protected processCureInformationOtherPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他药物治疗信息治疗信息 -- 根据Id删除数据
     * @return Success
     */
    delete17(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationOther/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete17(_response));
        });
    }

    protected processDelete17(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureInformationOtherDataServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 其他药物治疗信息资料 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureInformationOtherDataGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureInformationOtherDataViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureInformationOtherData/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationOtherDataGET(_response));
        });
    }

    protected processCureInformationOtherDataGET(response: AxiosResponse): Promise<CureInformationOtherDataViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationOtherDataViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureInformationOtherDataViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationOtherDataViewResultEntry>(null as any);
    }

    /**
     * 其他药物治疗信息资料 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureInformationOtherDataPOST(id: string, body: CureInformationOtherDataEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationOtherData/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationOtherDataPOST(_response));
        });
    }

    protected processCureInformationOtherDataPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他药物治疗信息资料 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter18(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureInformationOtherDataViewResult> {
        let url_ = this.baseUrl + "/api/CureInformationOtherData/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter18(_response));
        });
    }

    protected processFilter18(response: AxiosResponse): Promise<CureInformationOtherDataViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureInformationOtherDataViewResult.fromJS(resultData200);
            return Promise.resolve<CureInformationOtherDataViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureInformationOtherDataViewResult>(null as any);
    }

    /**
     * 其他药物治疗信息资料 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureInformationOtherDataPOST2(body: CureInformationOtherDataEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationOtherData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureInformationOtherDataPOST2(_response));
        });
    }

    protected processCureInformationOtherDataPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他药物治疗信息资料 -- 根据Id删除数据
     * @return Success
     */
    delete18(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureInformationOtherData/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete18(_response));
        });
    }

    protected processDelete18(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析过程记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureLogResultEntry> {
        let url_ = this.baseUrl + "/api/CureLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureLogGET(_response));
        });
    }

    protected processCureLogGET(response: AxiosResponse): Promise<CureLogResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureLogResultEntry.fromJS(resultData200);
            return Promise.resolve<CureLogResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureLogResultEntry>(null as any);
    }

    /**
     * 透析过程记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureLogPOST(id: string, body: CureLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureLogPOST(_response));
        });
    }

    protected processCureLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析过程记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter19(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureLogResult> {
        let url_ = this.baseUrl + "/api/CureLog/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter19(_response));
        });
    }

    protected processFilter19(response: AxiosResponse): Promise<CureLogResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureLogResult.fromJS(resultData200);
            return Promise.resolve<CureLogResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureLogResult>(null as any);
    }

    /**
     * 透析过程记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureLogPOST2(body: CureLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureLogPOST2(_response));
        });
    }

    protected processCureLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析过程记录 -- 根据Id删除数据
     * @return Success
     */
    delete19(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete19(_response));
        });
    }

    protected processDelete19(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureLogFileServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析过程记录照片 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureLogFileGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureLogFileResultEntry> {
        let url_ = this.baseUrl + "/api/CureLogFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureLogFileGET(_response));
        });
    }

    protected processCureLogFileGET(response: AxiosResponse): Promise<CureLogFileResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureLogFileResultEntry.fromJS(resultData200);
            return Promise.resolve<CureLogFileResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureLogFileResultEntry>(null as any);
    }

    /**
     * 透析过程记录照片 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureLogFilePOST(id: string, body: CureLogFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureLogFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureLogFilePOST(_response));
        });
    }

    protected processCureLogFilePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析过程记录照片 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter20(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureLogFileResult> {
        let url_ = this.baseUrl + "/api/CureLogFile/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter20(_response));
        });
    }

    protected processFilter20(response: AxiosResponse): Promise<CureLogFileResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureLogFileResult.fromJS(resultData200);
            return Promise.resolve<CureLogFileResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureLogFileResult>(null as any);
    }

    /**
     * 透析过程记录照片 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureLogFilePOST2(body: CureLogFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureLogFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureLogFilePOST2(_response));
        });
    }

    protected processCureLogFilePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析过程记录照片 -- 根据Id删除数据
     * @return Success
     */
    delete20(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureLogFile/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete20(_response));
        });
    }

    protected processDelete20(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureOrderShiftServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析排班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureOrderShiftGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureBedPatientDetailResultEntry> {
        let url_ = this.baseUrl + "/api/CureOrderShift/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureOrderShiftGET(_response));
        });
    }

    protected processCureOrderShiftGET(response: AxiosResponse): Promise<CureBedPatientDetailResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureBedPatientDetailResultEntry.fromJS(resultData200);
            return Promise.resolve<CureBedPatientDetailResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureBedPatientDetailResultEntry>(null as any);
    }

    /**
     * 透析排班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureOrderShiftPOST(id: string, body: CureOrderShiftEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShift/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureOrderShiftPOST(_response));
        });
    }

    protected processCureOrderShiftPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter21(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureOrderShiftViewResult> {
        let url_ = this.baseUrl + "/api/CureOrderShift/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter21(_response));
        });
    }

    protected processFilter21(response: AxiosResponse): Promise<CureOrderShiftViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureOrderShiftViewResult.fromJS(resultData200);
            return Promise.resolve<CureOrderShiftViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureOrderShiftViewResult>(null as any);
    }

    /**
     * 透析排床 -- 根据日期、班次、透析区间查询数据
     * @param areaId (optional)
     * @param date (optional)
     * @param key (optional)
     * @param filter (optional)
     * @return Success
     */
    queryPatient(areaId: string | undefined, date: string | undefined, key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShift/QueryPatient?";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryPatient(_response));
        });
    }

    protected processQueryPatient(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureOrderShiftPOST2(body: CureOrderShiftEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShift";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureOrderShiftPOST2(_response));
        });
    }

    protected processCureOrderShiftPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班另存为模板
     * @param body (optional)
     * @return Success
     */
    save(body: CureScheduleSaveEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShift/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSave(_response));
        });
    }

    protected processSave(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班 -- 根据Id删除数据
     * @return Success
     */
    delete21(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShift/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete21(_response));
        });
    }

    protected processDelete21(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureOrderShiftConsumableServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析排班耗材 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureOrderShiftConsumableGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureOrderShiftConsumableViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureOrderShiftConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureOrderShiftConsumableGET(_response));
        });
    }

    protected processCureOrderShiftConsumableGET(response: AxiosResponse): Promise<CureOrderShiftConsumableViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureOrderShiftConsumableViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureOrderShiftConsumableViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureOrderShiftConsumableViewResultEntry>(null as any);
    }

    /**
     * 透析排班耗材 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureOrderShiftConsumablePOST(id: string, body: CureOrderShiftConsumableEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShiftConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureOrderShiftConsumablePOST(_response));
        });
    }

    protected processCureOrderShiftConsumablePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班耗材 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter22(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureOrderShiftConsumableViewResult> {
        let url_ = this.baseUrl + "/api/CureOrderShiftConsumable/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter22(_response));
        });
    }

    protected processFilter22(response: AxiosResponse): Promise<CureOrderShiftConsumableViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureOrderShiftConsumableViewResult.fromJS(resultData200);
            return Promise.resolve<CureOrderShiftConsumableViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureOrderShiftConsumableViewResult>(null as any);
    }

    /**
     * 透析排班耗材 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureOrderShiftConsumablePOST2(body: CureOrderShiftConsumableEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShiftConsumable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureOrderShiftConsumablePOST2(_response));
        });
    }

    protected processCureOrderShiftConsumablePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班耗材 -- 根据Id删除数据
     * @return Success
     */
    delete22(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureOrderShiftConsumable/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete22(_response));
        });
    }

    protected processDelete22(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CurePrescriptionServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者处方 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    curePrescriptionGET(id: string , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionViewResultEntry> {
        let url_ = this.baseUrl + "/api/CurePrescription/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionGET(_response));
        });
    }

    protected processCurePrescriptionGET(response: AxiosResponse): Promise<CurePrescriptionViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionViewResultEntry>(null as any);
    }

    /**
     * 患者处方 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    curePrescriptionPOST(id: string, body: CurePrescriptionEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescription/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionPOST(_response));
        });
    }

    protected processCurePrescriptionPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者处方 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter23(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionViewResult> {
        let url_ = this.baseUrl + "/api/CurePrescription/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter23(_response));
        });
    }

    protected processFilter23(response: AxiosResponse): Promise<CurePrescriptionViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionViewResult.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionViewResult>(null as any);
    }

    /**
     * 患者处方 -- 查询患者首选处方耗材
     * @param patientId (optional) 患者标识
     * @param dialysisMode (optional) 透析方式
     * @param dialysisData (optional) 透析日期（yyyy-MM-dd）
     * @return Success
     */
    defaultConsumable(patientId: string | undefined, dialysisMode: string | undefined, dialysisData: string | undefined , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionConsumableViewResultEntry> {
        let url_ = this.baseUrl + "/api/CurePrescription/DefaultConsumable?";
        if (patientId === null)
            throw new Error("The parameter 'patientId' cannot be null.");
        else if (patientId !== undefined)
            url_ += "patientId=" + encodeURIComponent("" + patientId) + "&";
        if (dialysisMode === null)
            throw new Error("The parameter 'dialysisMode' cannot be null.");
        else if (dialysisMode !== undefined)
            url_ += "dialysisMode=" + encodeURIComponent("" + dialysisMode) + "&";
        if (dialysisData === null)
            throw new Error("The parameter 'dialysisData' cannot be null.");
        else if (dialysisData !== undefined)
            url_ += "dialysisData=" + encodeURIComponent("" + dialysisData) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDefaultConsumable(_response));
        });
    }

    protected processDefaultConsumable(response: AxiosResponse): Promise<CurePrescriptionConsumableViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionConsumableViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionConsumableViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionConsumableViewResultEntry>(null as any);
    }

    /**
     * 患者处方 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    curePrescriptionPOST2(body: CurePrescriptionEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescription";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionPOST2(_response));
        });
    }

    protected processCurePrescriptionPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者处方 -- 根据Id删除数据
     * @return Success
     */
    delete23(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescription/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete23(_response));
        });
    }

    protected processDelete23(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CurePrescriptionConsumableServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者处方耗材 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    curePrescriptionConsumableGET(id: string , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionConsumableResultEntry> {
        let url_ = this.baseUrl + "/api/CurePrescriptionConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionConsumableGET(_response));
        });
    }

    protected processCurePrescriptionConsumableGET(response: AxiosResponse): Promise<CurePrescriptionConsumableResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionConsumableResultEntry.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionConsumableResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionConsumableResultEntry>(null as any);
    }

    /**
     * 患者处方耗材 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    curePrescriptionConsumablePOST(id: string, body: CurePrescriptionConsumableViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescriptionConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionConsumablePOST(_response));
        });
    }

    protected processCurePrescriptionConsumablePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者处方耗材 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter24(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionConsumableResult> {
        let url_ = this.baseUrl + "/api/CurePrescriptionConsumable/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter24(_response));
        });
    }

    protected processFilter24(response: AxiosResponse): Promise<CurePrescriptionConsumableResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionConsumableResult.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionConsumableResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionConsumableResult>(null as any);
    }

    /**
     * 患者处方耗材 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    curePrescriptionConsumablePOST2(body: CurePrescriptionConsumableViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescriptionConsumable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionConsumablePOST2(_response));
        });
    }

    protected processCurePrescriptionConsumablePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者处方耗材 -- 根据Id删除数据
     * @return Success
     */
    delete24(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescriptionConsumable/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete24(_response));
        });
    }

    protected processDelete24(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CurePrescriptionDrugServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者处方药品 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    curePrescriptionDrugGET(id: string , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionDrugViewResultEntry> {
        let url_ = this.baseUrl + "/api/CurePrescriptionDrug/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionDrugGET(_response));
        });
    }

    protected processCurePrescriptionDrugGET(response: AxiosResponse): Promise<CurePrescriptionDrugViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionDrugViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionDrugViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionDrugViewResultEntry>(null as any);
    }

    /**
     * 患者处方药品 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    curePrescriptionDrugPOST(id: string, body: CurePrescriptionDrugEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescriptionDrug/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionDrugPOST(_response));
        });
    }

    protected processCurePrescriptionDrugPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者处方药品 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter25(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CurePrescriptionDrugViewResult> {
        let url_ = this.baseUrl + "/api/CurePrescriptionDrug/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter25(_response));
        });
    }

    protected processFilter25(response: AxiosResponse): Promise<CurePrescriptionDrugViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CurePrescriptionDrugViewResult.fromJS(resultData200);
            return Promise.resolve<CurePrescriptionDrugViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CurePrescriptionDrugViewResult>(null as any);
    }

    /**
     * 患者处方药品 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    curePrescriptionDrugPOST2(body: CurePrescriptionDrugEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescriptionDrug";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurePrescriptionDrugPOST2(_response));
        });
    }

    protected processCurePrescriptionDrugPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者处方药品 -- 根据Id删除数据
     * @return Success
     */
    delete25(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CurePrescriptionDrug/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete25(_response));
        });
    }

    protected processDelete25(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureProgressNoteServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析病程记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureProgressNoteGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureProgressNoteViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureProgressNote/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureProgressNoteGET(_response));
        });
    }

    protected processCureProgressNoteGET(response: AxiosResponse): Promise<CureProgressNoteViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureProgressNoteViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureProgressNoteViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureProgressNoteViewResultEntry>(null as any);
    }

    /**
     * 透析病程记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureProgressNotePOST(id: string, body: CureProgressNoteEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureProgressNote/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureProgressNotePOST(_response));
        });
    }

    protected processCureProgressNotePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析病程记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter26(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureProgressNoteViewResult> {
        let url_ = this.baseUrl + "/api/CureProgressNote/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter26(_response));
        });
    }

    protected processFilter26(response: AxiosResponse): Promise<CureProgressNoteViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureProgressNoteViewResult.fromJS(resultData200);
            return Promise.resolve<CureProgressNoteViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureProgressNoteViewResult>(null as any);
    }

    /**
     * 透析病程记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureProgressNotePOST2(body: CureProgressNoteEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureProgressNote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureProgressNotePOST2(_response));
        });
    }

    protected processCureProgressNotePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析病程记录 -- 根据Id删除数据
     * @return Success
     */
    delete26(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureProgressNote/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete26(_response));
        });
    }

    protected processDelete26(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    cureRecordGET(id: string, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecord/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordGET(_response));
        });
    }

    protected processCureRecordGET(response: AxiosResponse): Promise<CureRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordViewResultEntry>(null as any);
    }

    /**
     * 透析记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordPOST(id: string, body: CureRecordViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordPOST(_response));
        });
    }

    protected processCureRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码 *选填
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    filter27(filter: string | undefined, key: string | undefined, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordViewResult> {
        let url_ = this.baseUrl + "/api/CureRecord/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter27(_response));
        });
    }

    protected processFilter27(response: AxiosResponse): Promise<CureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordViewResult>(null as any);
    }

    /**
     * 电子病历透析记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码 *选填
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    patientCureFilter(filter: string | undefined, key: string | undefined, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordViewResult> {
        let url_ = this.baseUrl + "/api/CureRecord/PatientCureFilter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientCureFilter(_response));
        });
    }

    protected processPatientCureFilter(response: AxiosResponse): Promise<CureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordViewResult>(null as any);
    }

    /**
     * 透析记录 -- 透析日志导出
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码 *选填
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    export(filter: string | undefined, key: string | undefined, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecord/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport(_response));
        });
    }

    protected processExport(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录 -- 获取可以作为标签的字段名
     * @return Success
     */
    tag(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecord/Tag";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTag(_response));
        });
    }

    protected processTag(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录 -- 根据条件查询数据
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    file(id: string, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordFileViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecord/File/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFile(_response));
        });
    }

    protected processFile(response: AxiosResponse): Promise<CureRecordFileViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordFileViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordFileViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordFileViewResultEntry>(null as any);
    }

    /**
     * 透析记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码 *选填
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    filesGET(filter: string | undefined, key: string | undefined, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordFileViewResult> {
        let url_ = this.baseUrl + "/api/CureRecord/Files?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilesGET(_response));
        });
    }

    protected processFilesGET(response: AxiosResponse): Promise<CureRecordFileViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordFileViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordFileViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordFileViewResult>(null as any);
    }

    /**
     * 透析记录 -- 预览
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/五笔码/拼音码 *选填
     * @param print (optional) 为1时，签名显示生效
     * @param body (optional) 透析记录单模板(预览时使用)
     * @return Success
     */
    filesPOST(filter: string | undefined, key: string | undefined, print: number | undefined, body: TmplCureRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordFileViewResult> {
        let url_ = this.baseUrl + "/api/CureRecord/Files?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilesPOST(_response));
        });
    }

    protected processFilesPOST(response: AxiosResponse): Promise<CureRecordFileViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordFileViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordFileViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordFileViewResult>(null as any);
    }

    /**
     * 透析记录 -- 操作归档
     * @param archived 0：解除归档 1：手动归档
     * @param qualityNurseId (optional)
     * @param body (optional)
     * @return Success
     */
    archived(archived: number, qualityNurseId: string | undefined, body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecord/Archived/{archived}?";
        if (archived === undefined || archived === null)
            throw new Error("The parameter 'archived' must be defined.");
        url_ = url_.replace("{archived}", encodeURIComponent("" + archived));
        if (qualityNurseId === null)
            throw new Error("The parameter 'qualityNurseId' cannot be null.");
        else if (qualityNurseId !== undefined)
            url_ += "qualityNurseId=" + encodeURIComponent("" + qualityNurseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processArchived(_response));
        });
    }

    protected processArchived(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordAnticoagulantServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者透析抗凝剂 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordAnticoagulantGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordAnticoagulantViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulant/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordAnticoagulantGET(_response));
        });
    }

    protected processCureRecordAnticoagulantGET(response: AxiosResponse): Promise<CureRecordAnticoagulantViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordAnticoagulantViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordAnticoagulantViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordAnticoagulantViewResultEntry>(null as any);
    }

    /**
     * 患者透析抗凝剂 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordAnticoagulantPOST(id: string, body: CureRecordAnticoagulantViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulant/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordAnticoagulantPOST(_response));
        });
    }

    protected processCureRecordAnticoagulantPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析抗凝剂 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter28(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordAnticoagulantViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulant/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter28(_response));
        });
    }

    protected processFilter28(response: AxiosResponse): Promise<CureRecordAnticoagulantViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordAnticoagulantViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordAnticoagulantViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordAnticoagulantViewResult>(null as any);
    }

    /**
     * 患者透析抗凝剂 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordAnticoagulantPOST2(body: CureRecordAnticoagulantViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordAnticoagulantPOST2(_response));
        });
    }

    protected processCureRecordAnticoagulantPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析抗凝剂 -- 根据Id删除数据
     * @return Success
     */
    delete27(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulant/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete27(_response));
        });
    }

    protected processDelete27(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordAnticoagulantDrugServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者透析抗凝剂药品 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordAnticoagulantDrugGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordAnticoagulantDrugViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulantDrug/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordAnticoagulantDrugGET(_response));
        });
    }

    protected processCureRecordAnticoagulantDrugGET(response: AxiosResponse): Promise<CureRecordAnticoagulantDrugViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordAnticoagulantDrugViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordAnticoagulantDrugViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordAnticoagulantDrugViewResultEntry>(null as any);
    }

    /**
     * 患者透析抗凝剂药品 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordAnticoagulantDrugPOST(id: string, body: CureRecordAnticoagulantDrugEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulantDrug/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordAnticoagulantDrugPOST(_response));
        });
    }

    protected processCureRecordAnticoagulantDrugPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析抗凝剂药品 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter29(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordAnticoagulantDrugViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulantDrug/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter29(_response));
        });
    }

    protected processFilter29(response: AxiosResponse): Promise<CureRecordAnticoagulantDrugViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordAnticoagulantDrugViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordAnticoagulantDrugViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordAnticoagulantDrugViewResult>(null as any);
    }

    /**
     * 患者透析抗凝剂药品 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordAnticoagulantDrugPOST2(body: CureRecordAnticoagulantDrugEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulantDrug";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordAnticoagulantDrugPOST2(_response));
        });
    }

    protected processCureRecordAnticoagulantDrugPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析抗凝剂药品 -- 根据Id删除数据
     * @return Success
     */
    delete28(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordAnticoagulantDrug/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete28(_response));
        });
    }

    protected processDelete28(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordChangeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析记录修改记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordChangeGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordChangeViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordChange/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordChangeGET(_response));
        });
    }

    protected processCureRecordChangeGET(response: AxiosResponse): Promise<CureRecordChangeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordChangeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordChangeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordChangeViewResultEntry>(null as any);
    }

    /**
     * 透析记录修改记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordChangePOST(id: string, body: CureRecordChangeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordChange/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordChangePOST(_response));
        });
    }

    protected processCureRecordChangePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录修改记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter30(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordChangeViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordChange/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter30(_response));
        });
    }

    protected processFilter30(response: AxiosResponse): Promise<CureRecordChangeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordChangeViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordChangeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordChangeViewResult>(null as any);
    }

    /**
     * 透析记录修改记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordChangePOST2(body: CureRecordChangeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordChange";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordChangePOST2(_response));
        });
    }

    protected processCureRecordChangePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录修改记录 -- 根据Id删除数据
     * @return Success
     */
    delete29(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordChange/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete29(_response));
        });
    }

    protected processDelete29(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordConsumableServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析耗材 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordConsumableGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordConsumableResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordConsumableGET(_response));
        });
    }

    protected processCureRecordConsumableGET(response: AxiosResponse): Promise<CureRecordConsumableResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordConsumableResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordConsumableResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordConsumableResultEntry>(null as any);
    }

    /**
     * 透析耗材 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordConsumablePOST(id: string, body: CureRecordConsumableViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordConsumablePOST(_response));
        });
    }

    protected processCureRecordConsumablePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析耗材 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter31(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordConsumableResult> {
        let url_ = this.baseUrl + "/api/CureRecordConsumable/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter31(_response));
        });
    }

    protected processFilter31(response: AxiosResponse): Promise<CureRecordConsumableResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordConsumableResult.fromJS(resultData200);
            return Promise.resolve<CureRecordConsumableResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordConsumableResult>(null as any);
    }

    /**
     * 透析耗材 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordConsumablePOST2(body: CureRecordConsumableViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordConsumable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordConsumablePOST2(_response));
        });
    }

    protected processCureRecordConsumablePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析耗材 -- 根据Id删除数据
     * @return Success
     */
    delete30(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordConsumable/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete30(_response));
        });
    }

    protected processDelete30(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordConsumableItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析耗材 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordConsumableItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordConsumableItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordConsumableItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordConsumableItemGET(_response));
        });
    }

    protected processCureRecordConsumableItemGET(response: AxiosResponse): Promise<CureRecordConsumableItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordConsumableItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordConsumableItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordConsumableItemViewResultEntry>(null as any);
    }

    /**
     * 透析耗材 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordConsumableItemPOST(id: string, body: CureRecordConsumableItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordConsumableItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordConsumableItemPOST(_response));
        });
    }

    protected processCureRecordConsumableItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析耗材 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter32(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordConsumableItemViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordConsumableItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter32(_response));
        });
    }

    protected processFilter32(response: AxiosResponse): Promise<CureRecordConsumableItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordConsumableItemViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordConsumableItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordConsumableItemViewResult>(null as any);
    }

    /**
     * 透析耗材 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordConsumableItemPOST2(body: CureRecordConsumableItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordConsumableItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordConsumableItemPOST2(_response));
        });
    }

    protected processCureRecordConsumableItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析耗材 -- 根据Id删除数据
     * @return Success
     */
    delete31(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordConsumableItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete31(_response));
        });
    }

    protected processDelete31(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordDialysateServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者透析透析液 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordDialysateGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordDialysateViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordDialysate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordDialysateGET(_response));
        });
    }

    protected processCureRecordDialysateGET(response: AxiosResponse): Promise<CureRecordDialysateViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordDialysateViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordDialysateViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordDialysateViewResultEntry>(null as any);
    }

    /**
     * 患者透析透析液 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordDialysatePOST(id: string, body: CureRecordDialysateViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordDialysate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordDialysatePOST(_response));
        });
    }

    protected processCureRecordDialysatePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析透析液 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter33(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordDialysateViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordDialysate/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter33(_response));
        });
    }

    protected processFilter33(response: AxiosResponse): Promise<CureRecordDialysateViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordDialysateViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordDialysateViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordDialysateViewResult>(null as any);
    }

    /**
     * 患者透析透析液 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordDialysatePOST2(body: CureRecordDialysateViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordDialysate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordDialysatePOST2(_response));
        });
    }

    protected processCureRecordDialysatePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析透析液 -- 根据Id删除数据
     * @return Success
     */
    delete32(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordDialysate/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete32(_response));
        });
    }

    protected processDelete32(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordFieldItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析记录自定义字段 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordFieldItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordFieldItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordFieldItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordFieldItemGET(_response));
        });
    }

    protected processCureRecordFieldItemGET(response: AxiosResponse): Promise<CureRecordFieldItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordFieldItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordFieldItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordFieldItemViewResultEntry>(null as any);
    }

    /**
     * 透析记录自定义字段 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordFieldItemPOST(id: string, body: CureRecordFieldItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordFieldItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordFieldItemPOST(_response));
        });
    }

    protected processCureRecordFieldItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录自定义字段 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter34(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordFieldItemViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordFieldItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter34(_response));
        });
    }

    protected processFilter34(response: AxiosResponse): Promise<CureRecordFieldItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordFieldItemViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordFieldItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordFieldItemViewResult>(null as any);
    }

    /**
     * 透析记录自定义字段 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordFieldItemPOST2(body: CureRecordFieldItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordFieldItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordFieldItemPOST2(_response));
        });
    }

    protected processCureRecordFieldItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录自定义字段 -- 根据Id删除数据
     * @return Success
     */
    delete33(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordFieldItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete33(_response));
        });
    }

    protected processDelete33(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析记录修改记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordLogGET(_response));
        });
    }

    protected processCureRecordLogGET(response: AxiosResponse): Promise<CureRecordLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordLogViewResultEntry>(null as any);
    }

    /**
     * 透析记录修改记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordLogPOST(id: string, body: CureRecordLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordLogPOST(_response));
        });
    }

    protected processCureRecordLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录修改记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter35(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordLogViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordLog/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter35(_response));
        });
    }

    protected processFilter35(response: AxiosResponse): Promise<CureRecordLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordLogViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordLogViewResult>(null as any);
    }

    /**
     * 透析记录修改记录 -- 根据透析记录单标识查询拒绝处方数据
     * @param cureRecordId 透析记录单标识
     * @return Success
     */
    prescription(cureRecordId: string , cancelToken?: CancelToken | undefined): Promise<CureRecordLogViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordLog/Prescription/{cureRecordId}";
        if (cureRecordId === undefined || cureRecordId === null)
            throw new Error("The parameter 'cureRecordId' must be defined.");
        url_ = url_.replace("{cureRecordId}", encodeURIComponent("" + cureRecordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrescription(_response));
        });
    }

    protected processPrescription(response: AxiosResponse): Promise<CureRecordLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordLogViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordLogViewResult>(null as any);
    }

    /**
     * 透析记录修改记录 -- 根据透析记录单标识查询异常交叉核对数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    verify(cureRecordId: string , cancelToken?: CancelToken | undefined): Promise<CureRecordLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordLog/Verify/{cureRecordId}";
        if (cureRecordId === undefined || cureRecordId === null)
            throw new Error("The parameter 'cureRecordId' must be defined.");
        url_ = url_.replace("{cureRecordId}", encodeURIComponent("" + cureRecordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processVerify(_response));
        });
    }

    protected processVerify(response: AxiosResponse): Promise<CureRecordLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordLogViewResultEntry>(null as any);
    }

    /**
     * 透析记录修改记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordLogPOST2(body: CureRecordLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordLogPOST2(_response));
        });
    }

    protected processCureRecordLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析记录修改记录 -- 根据Id删除数据
     * @return Success
     */
    delete34(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete34(_response));
        });
    }

    protected processDelete34(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureRecordSignatureServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 患者透析签名 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordSignatureGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureRecordSignatureViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordSignatureGET(_response));
        });
    }

    protected processCureRecordSignatureGET(response: AxiosResponse): Promise<CureRecordSignatureViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordSignatureViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordSignatureViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordSignatureViewResultEntry>(null as any);
    }

    /**
     * 患者透析签名 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureRecordSignaturePOST(id: string, body: CureRecordSignatureEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordSignaturePOST(_response));
        });
    }

    protected processCureRecordSignaturePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析签名 -- 根据透析记录单Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureRecordGET2(cureRecordId: string , cancelToken?: CancelToken | undefined): Promise<CureRecordSignatureViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/CureRecord/{cureRecordId}";
        if (cureRecordId === undefined || cureRecordId === null)
            throw new Error("The parameter 'cureRecordId' must be defined.");
        url_ = url_.replace("{cureRecordId}", encodeURIComponent("" + cureRecordId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordGET2(_response));
        });
    }

    protected processCureRecordGET2(response: AxiosResponse): Promise<CureRecordSignatureViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordSignatureViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordSignatureViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordSignatureViewResultEntry>(null as any);
    }

    /**
     * 患者透析签名 -- 根据患者Id查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    patient(patientId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordSignatureViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/Patient/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient(_response));
        });
    }

    protected processPatient(response: AxiosResponse): Promise<CureRecordSignatureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordSignatureViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordSignatureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordSignatureViewResult>(null as any);
    }

    /**
     * 患者透析签名 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter36(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordSignatureViewResult> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter36(_response));
        });
    }

    protected processFilter36(response: AxiosResponse): Promise<CureRecordSignatureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordSignatureViewResult.fromJS(resultData200);
            return Promise.resolve<CureRecordSignatureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordSignatureViewResult>(null as any);
    }

    /**
     * 患者透析签名 -- 激活签名板并签名
     * @return Success
     */
    penSign(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/PenSign";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPenSign(_response));
        });
    }

    protected processPenSign(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析签名 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureRecordSignaturePOST2(body: CureRecordSignatureEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordSignature";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureRecordSignaturePOST2(_response));
        });
    }

    protected processCureRecordSignaturePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 患者透析签名 -- 根据Id删除数据
     * @return Success
     */
    delete35(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureRecordSignature/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete35(_response));
        });
    }

    protected processDelete35(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureScheduleServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析排床 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureScheduleGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureBedPatientDetailResultEntry> {
        let url_ = this.baseUrl + "/api/CureSchedule/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureScheduleGET(_response));
        });
    }

    protected processCureScheduleGET(response: AxiosResponse): Promise<CureBedPatientDetailResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureBedPatientDetailResultEntry.fromJS(resultData200);
            return Promise.resolve<CureBedPatientDetailResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureBedPatientDetailResultEntry>(null as any);
    }

    /**
     * 透析排床 -- 更新数据
     * @param type (optional)
     * @param body (optional)
     * @return Success
     */
    cureSchedulePOST(id: string, type: number | undefined, body: CureScheduleEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchedulePOST(_response));
        });
    }

    protected processCureSchedulePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 根据患者id查询上一次排床图标和颜色
     * @param patientId 患者编号
     * @param dialysisMode (optional) 透析方式
     * @return Success
     */
    lost(patientId: string, dialysisMode: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureBedPatientDetailResultEntry> {
        let url_ = this.baseUrl + "/api/CureSchedule/Lost/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (dialysisMode === null)
            throw new Error("The parameter 'dialysisMode' cannot be null.");
        else if (dialysisMode !== undefined)
            url_ += "dialysisMode=" + encodeURIComponent("" + dialysisMode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLost(_response));
        });
    }

    protected processLost(response: AxiosResponse): Promise<CureBedPatientDetailResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureBedPatientDetailResultEntry.fromJS(resultData200);
            return Promise.resolve<CureBedPatientDetailResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureBedPatientDetailResultEntry>(null as any);
    }

    /**
     * 透析排床 -- 根据日期查询数据
     * @param areaId 透析室标识
     * @param date (optional) 起始日期
     * @return Success
     */
    byAreaId(areaId: string, date: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureSchedule/ByAreaId/{areaId}?";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByAreaId(_response));
        });
    }

    protected processByAreaId(response: AxiosResponse): Promise<CureScheduleDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureScheduleDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleDetailViewResultEntry>(null as any);
    }

    /**
     * 透析排床 -- 根据日期、班次、透析区间查询数据
     * @param areaId (optional)
     * @param date (optional)
     * @param cureShifts (optional)
     * @param areas (optional) 透析区间，逗号分隔
     * @param key (optional)
     * @param filter (optional)
     * @return Success
     */
    queryPatient2(areaId: string | undefined, date: string | undefined, cureShifts: string | undefined, areas: string | undefined, key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/QueryPatient?";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (cureShifts === null)
            throw new Error("The parameter 'cureShifts' cannot be null.");
        else if (cureShifts !== undefined)
            url_ += "cureShifts=" + encodeURIComponent("" + cureShifts) + "&";
        if (areas === null)
            throw new Error("The parameter 'areas' cannot be null.");
        else if (areas !== undefined)
            url_ += "areas=" + encodeURIComponent("" + areas) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryPatient2(_response));
        });
    }

    protected processQueryPatient2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 详情
     * @param date (optional)
     * @return Success
     */
    queryPatientScheduleDetails(patientId: string, date: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/QueryPatientScheduleDetails/{patientId}?";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryPatientScheduleDetails(_response));
        });
    }

    protected processQueryPatientScheduleDetails(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排班 -- 根据日期查询数据
     * @param areaId 透析室标识
     * @param date (optional) 起始日期
     * @param key (optional)
     * @param filter (optional)
     * @return Success
     */
    queryShift(areaId: string, date: string | undefined, key: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleShiftViewResult> {
        let url_ = this.baseUrl + "/api/CureSchedule/QueryShift/{areaId}?";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryShift(_response));
        });
    }

    protected processQueryShift(response: AxiosResponse): Promise<CureScheduleShiftViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleShiftViewResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleShiftViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleShiftViewResult>(null as any);
    }

    /**
     * 透析排床 -- 根据日期、班次、透析区间查询数据
     * @param areaId (optional)
     * @param date (optional)
     * @param shifts (optional) 班次，逗号分隔
     * @param areas (optional) 透析区间，逗号分隔
     * @return Success
     */
    byAreas(areaId: string | undefined, date: string | undefined, shifts: string | undefined, areas: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureSchedule/ByAreas?";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (shifts === null)
            throw new Error("The parameter 'shifts' cannot be null.");
        else if (shifts !== undefined)
            url_ += "shifts=" + encodeURIComponent("" + shifts) + "&";
        if (areas === null)
            throw new Error("The parameter 'areas' cannot be null.");
        else if (areas !== undefined)
            url_ += "areas=" + encodeURIComponent("" + areas) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByAreas(_response));
        });
    }

    protected processByAreas(response: AxiosResponse): Promise<CureScheduleDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureScheduleDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleDetailViewResultEntry>(null as any);
    }

    /**
     * 透析排床 -- 根据日期、班次、透析区间查询数据 - 导出数据
     * @param areaId (optional)
     * @param date (optional)
     * @param shifts (optional) 班次，逗号分隔
     * @param areas (optional) 透析区间，逗号分隔
     * @param choice (optional)
     * @param today (optional)
     * @return Success
     */
    toExcel(areaId: string | undefined, date: string | undefined, shifts: string | undefined, areas: string | undefined, choice: number[] | undefined, today: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/ToExcel?";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (shifts === null)
            throw new Error("The parameter 'shifts' cannot be null.");
        else if (shifts !== undefined)
            url_ += "shifts=" + encodeURIComponent("" + shifts) + "&";
        if (areas === null)
            throw new Error("The parameter 'areas' cannot be null.");
        else if (areas !== undefined)
            url_ += "areas=" + encodeURIComponent("" + areas) + "&";
        if (choice === null)
            throw new Error("The parameter 'choice' cannot be null.");
        else if (choice !== undefined)
            choice && choice.forEach(item => { url_ += "choice=" + encodeURIComponent("" + item) + "&"; });
        if (today === null)
            throw new Error("The parameter 'today' cannot be null.");
        else if (today !== undefined)
            url_ += "today=" + encodeURIComponent("" + today) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processToExcel(_response));
        });
    }

    protected processToExcel(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 根据日期、班次、透析区间查询数据 - 导入数据 - 提交Excel文件 - 返回校验结果
     * @param fileId (optional)
     * @return Success
     */
    validateSchedule(fileId: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/ValidateSchedule?";
        if (fileId === null)
            throw new Error("The parameter 'fileId' cannot be null.");
        else if (fileId !== undefined)
            url_ += "fileId=" + encodeURIComponent("" + fileId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processValidateSchedule(_response));
        });
    }

    protected processValidateSchedule(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 排床统计 -- 根据日期查询当天排床数量
     * @param date (optional) 日期
     * @param deptDialysisAreaId (optional) 透析区间
     * @param shiftId (optional) 透析班次
     * @return Success
     */
    bedScheduleCount(date: string | undefined, deptDialysisAreaId: string | undefined, shiftId: string | undefined , cancelToken?: CancelToken | undefined): Promise<BedScheduleCountViewResult> {
        let url_ = this.baseUrl + "/api/CureSchedule/BedScheduleCount?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (deptDialysisAreaId === null)
            throw new Error("The parameter 'deptDialysisAreaId' cannot be null.");
        else if (deptDialysisAreaId !== undefined)
            url_ += "deptDialysisAreaId=" + encodeURIComponent("" + deptDialysisAreaId) + "&";
        if (shiftId === null)
            throw new Error("The parameter 'shiftId' cannot be null.");
        else if (shiftId !== undefined)
            url_ += "shiftId=" + encodeURIComponent("" + shiftId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBedScheduleCount(_response));
        });
    }

    protected processBedScheduleCount(response: AxiosResponse): Promise<BedScheduleCountViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = BedScheduleCountViewResult.fromJS(resultData200);
            return Promise.resolve<BedScheduleCountViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BedScheduleCountViewResult>(null as any);
    }

    /**
     * 透析排床 -- 根据日期查询数据
     * @param areaId 透析室标识
     * @param date (optional) 起始日期
     * @return Success
     */
    supper(areaId: string, date: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleDetailViewSupperResult> {
        let url_ = this.baseUrl + "/api/CureSchedule/Supper/{areaId}?";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSupper(_response));
        });
    }

    protected processSupper(response: AxiosResponse): Promise<CureScheduleDetailViewSupperResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleDetailViewSupperResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleDetailViewSupperResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleDetailViewSupperResult>(null as any);
    }

    /**
     * 透析排床 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureSchedulePOST2(body: CureScheduleEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchedulePOST2(_response));
        });
    }

    protected processCureSchedulePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 根据排班生成排床数据
     * @param date (optional)
     * @return Success
     */
    postByShift(date: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/PostByShift?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPostByShift(_response));
        });
    }

    protected processPostByShift(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床另存为模板
     * @param body (optional)
     * @return Success
     */
    save2(body: CureScheduleSaveEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSave2(_response));
        });
    }

    protected processSave2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    isValidateDataIntoStroge(body: TempDisplayCureScheduleValidate[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/IsValidateDataIntoStroge";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIsValidateDataIntoStroge(_response));
        });
    }

    protected processIsValidateDataIntoStroge(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 自动排床
     * @param date (optional)
     * @param areaId (optional)
     * @return Success
     */
    autoSchedule(date: string | undefined, areaId: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/AutoSchedule?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAutoSchedule(_response));
        });
    }

    protected processAutoSchedule(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 换床
     * @param body (optional) 拖动的源信息和目的信息
     * @return Success
     */
    drag(body: CureScheduleDragEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/Drag";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrag(_response));
        });
    }

    protected processDrag(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 批量换床
     * @param body (optional) 拖动的源信息和目的信息
     * @return Success
     */
    batch(body: CureScheduleDragEditModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/Drag/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch(_response));
        });
    }

    protected processBatch(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 取消排班
     * @return Success
     */
    delete36(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete36(_response));
        });
    }

    protected processDelete36(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床 -- 取消排床
     * @param id (optional)
     * @return Success
     */
    cancelShift(id: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/CancelShift?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCancelShift(_response));
        });
    }

    protected processCancelShift(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 判断是做新增还是换床
     * @param id (optional)
     * @param body (optional)
     * @return Success
     */
    getOption(id: string | undefined, body: CureScheduleEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureSchedule/GetOption?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetOption(_response));
        });
    }

    protected processGetOption(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureScheduleConsumableServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析排床耗材 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureScheduleConsumableGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureScheduleConsumableResultEntry> {
        let url_ = this.baseUrl + "/api/CureScheduleConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureScheduleConsumableGET(_response));
        });
    }

    protected processCureScheduleConsumableGET(response: AxiosResponse): Promise<CureScheduleConsumableResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleConsumableResultEntry.fromJS(resultData200);
            return Promise.resolve<CureScheduleConsumableResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleConsumableResultEntry>(null as any);
    }

    /**
     * 透析排床耗材 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureScheduleConsumablePOST(id: string, body: CureScheduleConsumableViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheduleConsumable/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureScheduleConsumablePOST(_response));
        });
    }

    protected processCureScheduleConsumablePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床耗材 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter37(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleConsumableResult> {
        let url_ = this.baseUrl + "/api/CureScheduleConsumable/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter37(_response));
        });
    }

    protected processFilter37(response: AxiosResponse): Promise<CureScheduleConsumableResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleConsumableResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleConsumableResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleConsumableResult>(null as any);
    }

    /**
     * 透析排床耗材 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureScheduleConsumablePOST2(body: CureScheduleConsumableViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheduleConsumable";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureScheduleConsumablePOST2(_response));
        });
    }

    protected processCureScheduleConsumablePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析排床耗材 -- 根据Id删除数据
     * @return Success
     */
    delete37(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheduleConsumable/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete37(_response));
        });
    }

    protected processDelete37(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureSchemeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 治疗方案 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureSchemeGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureSchemeResultEntry> {
        let url_ = this.baseUrl + "/api/CureScheme/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchemeGET(_response));
        });
    }

    protected processCureSchemeGET(response: AxiosResponse): Promise<CureSchemeResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureSchemeResultEntry.fromJS(resultData200);
            return Promise.resolve<CureSchemeResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureSchemeResultEntry>(null as any);
    }

    /**
     * 治疗方案 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureSchemePOST(id: string, body: CureSchemeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheme/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchemePOST(_response));
        });
    }

    protected processCureSchemePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗方案 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter38(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureSchemeResult> {
        let url_ = this.baseUrl + "/api/CureScheme/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter38(_response));
        });
    }

    protected processFilter38(response: AxiosResponse): Promise<CureSchemeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureSchemeResult.fromJS(resultData200);
            return Promise.resolve<CureSchemeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureSchemeResult>(null as any);
    }

    /**
     * 治疗方案 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureSchemePOST2(body: CureSchemeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheme";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureSchemePOST2(_response));
        });
    }

    protected processCureSchemePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗方案 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForCureScheme(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheme/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForCureScheme(_response));
        });
    }

    protected processMoveNodeForCureScheme(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗方案 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForCureScheme(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheme/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForCureScheme(_response));
        });
    }

    protected processUpNodeForCureScheme(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗方案 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForCureScheme(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheme/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForCureScheme(_response));
        });
    }

    protected processDownNodeForCureScheme(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗方案 -- 根据Id删除数据
     * @return Success
     */
    delete38(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureScheme/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete38(_response));
        });
    }

    protected processDelete38(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureShiftServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析班次 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureShiftGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureShiftResultEntry> {
        let url_ = this.baseUrl + "/api/CureShift/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureShiftGET(_response));
        });
    }

    protected processCureShiftGET(response: AxiosResponse): Promise<CureShiftResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureShiftResultEntry.fromJS(resultData200);
            return Promise.resolve<CureShiftResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureShiftResultEntry>(null as any);
    }

    /**
     * 透析班次 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureShiftPOST(id: string, body: CureShiftViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureShift/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureShiftPOST(_response));
        });
    }

    protected processCureShiftPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析班次 -- 查询当前时间所在的透析班次
     * @return Success
     */
    current(  cancelToken?: CancelToken | undefined): Promise<CureShiftResultEntry> {
        let url_ = this.baseUrl + "/api/CureShift/Current";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCurrent(_response));
        });
    }

    protected processCurrent(response: AxiosResponse): Promise<CureShiftResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureShiftResultEntry.fromJS(resultData200);
            return Promise.resolve<CureShiftResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureShiftResultEntry>(null as any);
    }

    /**
     * 透析班次 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter39(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureShiftResult> {
        let url_ = this.baseUrl + "/api/CureShift/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter39(_response));
        });
    }

    protected processFilter39(response: AxiosResponse): Promise<CureShiftResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureShiftResult.fromJS(resultData200);
            return Promise.resolve<CureShiftResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureShiftResult>(null as any);
    }

    /**
     * 透析班次 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureShiftPOST2(body: CureShiftViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureShift";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureShiftPOST2(_response));
        });
    }

    protected processCureShiftPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析班次 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForCureShift(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureShift/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForCureShift(_response));
        });
    }

    protected processMoveNodeForCureShift(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析班次 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForCureShift(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureShift/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForCureShift(_response));
        });
    }

    protected processUpNodeForCureShift(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析班次 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForCureShift(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureShift/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForCureShift(_response));
        });
    }

    protected processDownNodeForCureShift(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析班次 -- 根据Id删除数据
     * @return Success
     */
    delete39(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureShift/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete39(_response));
        });
    }

    protected processDelete39(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureTemperatureRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 体温记录单 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureTemperatureRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordGET(_response));
        });
    }

    protected processCureTemperatureRecordGET(response: AxiosResponse): Promise<CureTemperatureRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordViewResultEntry>(null as any);
    }

    /**
     * 体温记录单 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureTemperatureRecordPOST(id: string, body: CureTemperatureRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordPOST(_response));
        });
    }

    protected processCureTemperatureRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 体温记录单 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter40(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordViewResult> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter40(_response));
        });
    }

    protected processFilter40(response: AxiosResponse): Promise<CureTemperatureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordViewResult>(null as any);
    }

    /**
     * 体温记录单 -- 打印
     * @param id (optional)
     * @param beginDate (optional)
     * @param endDate (optional)
     * @return Success
     */
    print(id: string | undefined, beginDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecord/Print?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (beginDate === null)
            throw new Error("The parameter 'beginDate' cannot be null.");
        else if (beginDate !== undefined)
            url_ += "beginDate=" + encodeURIComponent(beginDate ? "" + beginDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrint(_response));
        });
    }

    protected processPrint(response: AxiosResponse): Promise<CureTemperatureRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordViewResultEntry>(null as any);
    }

    /**
     * 体温记录单 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureTemperatureRecordPOST2(body: CureTemperatureRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordPOST2(_response));
        });
    }

    protected processCureTemperatureRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 体温记录单 -- 根据Id删除数据
     * @return Success
     */
    delete40(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete40(_response));
        });
    }

    protected processDelete40(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureTemperatureRecordDetailServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 体温记录单明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureTemperatureRecordDetailGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordDetailGET(_response));
        });
    }

    protected processCureTemperatureRecordDetailGET(response: AxiosResponse): Promise<CureTemperatureRecordDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordDetailViewResultEntry>(null as any);
    }

    /**
     * 体温记录单明细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureTemperatureRecordDetailPOST(id: string, body: CureTemperatureRecordDetailEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordDetailPOST(_response));
        });
    }

    protected processCureTemperatureRecordDetailPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 新增体温记录单明细——默认数据
     * @param temperatureRecordId (optional)
     * @return Success
     */
    getNew(temperatureRecordId: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail/GetNew?";
        if (temperatureRecordId === null)
            throw new Error("The parameter 'temperatureRecordId' cannot be null.");
        else if (temperatureRecordId !== undefined)
            url_ += "temperatureRecordId=" + encodeURIComponent("" + temperatureRecordId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetNew(_response));
        });
    }

    protected processGetNew(response: AxiosResponse): Promise<CureTemperatureRecordDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordDetailViewResultEntry>(null as any);
    }

    /**
     * 自动计算住院、手术、分娩天数
     * @param tempRecordId (optional)
     * @param targetDate (optional)
     * @return Success
     */
    getDays(tempRecordId: string | undefined, targetDate: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail/GetDays?";
        if (tempRecordId === null)
            throw new Error("The parameter 'tempRecordId' cannot be null.");
        else if (tempRecordId !== undefined)
            url_ += "tempRecordId=" + encodeURIComponent("" + tempRecordId) + "&";
        if (targetDate === null)
            throw new Error("The parameter 'targetDate' cannot be null.");
        else if (targetDate !== undefined)
            url_ += "targetDate=" + encodeURIComponent(targetDate ? "" + targetDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDays(_response));
        });
    }

    protected processGetDays(response: AxiosResponse): Promise<CureTemperatureRecordDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordDetailViewResultEntry>(null as any);
    }

    /**
     * 体温记录单明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter41(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordDetailViewResult> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter41(_response));
        });
    }

    protected processFilter41(response: AxiosResponse): Promise<CureTemperatureRecordDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordDetailViewResult.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordDetailViewResult>(null as any);
    }

    /**
     * 体温记录单明细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureTemperatureRecordDetailPOST2(body: CureTemperatureRecordDetailEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordDetailPOST2(_response));
        });
    }

    protected processCureTemperatureRecordDetailPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 体温记录单明细 -- 根据Id删除数据
     * @return Success
     */
    delete41(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetail/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete41(_response));
        });
    }

    protected processDelete41(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class CureTemperatureRecordDetailStatusServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 体温记录单明细患者状态 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    cureTemperatureRecordDetailStatusGET(id: string , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordDetailStatusViewResultEntry> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetailStatus/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordDetailStatusGET(_response));
        });
    }

    protected processCureTemperatureRecordDetailStatusGET(response: AxiosResponse): Promise<CureTemperatureRecordDetailStatusViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordDetailStatusViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordDetailStatusViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordDetailStatusViewResultEntry>(null as any);
    }

    /**
     * 体温记录单明细患者状态 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    cureTemperatureRecordDetailStatusPOST(id: string, body: CureTemperatureRecordDetailStatusEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetailStatus/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordDetailStatusPOST(_response));
        });
    }

    protected processCureTemperatureRecordDetailStatusPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 体温记录单明细患者状态 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter42(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureTemperatureRecordDetailStatusViewResult> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetailStatus/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter42(_response));
        });
    }

    protected processFilter42(response: AxiosResponse): Promise<CureTemperatureRecordDetailStatusViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureTemperatureRecordDetailStatusViewResult.fromJS(resultData200);
            return Promise.resolve<CureTemperatureRecordDetailStatusViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureTemperatureRecordDetailStatusViewResult>(null as any);
    }

    /**
     * 体温记录单明细患者状态 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    cureTemperatureRecordDetailStatusPOST2(body: CureTemperatureRecordDetailStatusEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetailStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureTemperatureRecordDetailStatusPOST2(_response));
        });
    }

    protected processCureTemperatureRecordDetailStatusPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 体温记录单明细患者状态 -- 根据Id删除数据
     * @return Success
     */
    delete42(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/CureTemperatureRecordDetailStatus/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete42(_response));
        });
    }

    protected processDelete42(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptDialysisAreaServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析区间 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptDialysisAreaGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptDialysisAreaViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisAreaGET(_response));
        });
    }

    protected processDeptDialysisAreaGET(response: AxiosResponse): Promise<DeptDialysisAreaViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisAreaViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptDialysisAreaViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisAreaViewResultEntry>(null as any);
    }

    /**
     * 透析区间 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptDialysisAreaPOST(id: string, body: DeptDialysisAreaViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisAreaPOST(_response));
        });
    }

    protected processDeptDialysisAreaPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析区间 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter43(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisAreaViewResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter43(_response));
        });
    }

    protected processFilter43(response: AxiosResponse): Promise<DeptDialysisAreaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisAreaViewResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisAreaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisAreaViewResult>(null as any);
    }

    /**
     * 透析区间(向下递归查询所有子项) -- 根据条件查询数据
     * @param sysHospitalAreaId [院区标识](院区Id)
     * @param filter (optional) 查询条件
     * @param isCurrent (optional) 是否当前院区Id
     * @return Success
     */
    getDeptDialysisAreaBySysHospitalAreaId(sysHospitalAreaId: string, filter: string | undefined, isCurrent: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisAreaViewResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/BySysHospitalAreaId/{sysHospitalAreaId}?";
        if (sysHospitalAreaId === undefined || sysHospitalAreaId === null)
            throw new Error("The parameter 'sysHospitalAreaId' must be defined.");
        url_ = url_.replace("{sysHospitalAreaId}", encodeURIComponent("" + sysHospitalAreaId));
        if (isCurrent === null)
            throw new Error("The parameter 'isCurrent' cannot be null.");
        else if (isCurrent !== undefined)
            url_ += "IsCurrent=" + encodeURIComponent("" + isCurrent) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDeptDialysisAreaBySysHospitalAreaId(_response));
        });
    }

    protected processGetDeptDialysisAreaBySysHospitalAreaId(response: AxiosResponse): Promise<DeptDialysisAreaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisAreaViewResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisAreaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisAreaViewResult>(null as any);
    }

    /**
     * 透析区间  -- 根据科室查询透析分区，是否显示没有床位的透析分区
     * @param sysHospitalAreaId 透析室标识
     * @param show (optional) 是否显示没有床位的透析分区(0 不显示;1 显示)
     * @return Success
     */
    tree(sysHospitalAreaId: string, show: number | undefined , cancelToken?: CancelToken | undefined): Promise<DialysisTreeViewResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/Tree/{sysHospitalAreaId}?";
        if (sysHospitalAreaId === undefined || sysHospitalAreaId === null)
            throw new Error("The parameter 'sysHospitalAreaId' must be defined.");
        url_ = url_.replace("{sysHospitalAreaId}", encodeURIComponent("" + sysHospitalAreaId));
        if (show === null)
            throw new Error("The parameter 'show' cannot be null.");
        else if (show !== undefined)
            url_ += "show=" + encodeURIComponent("" + show) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTree(_response));
        });
    }

    protected processTree(response: AxiosResponse): Promise<DialysisTreeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DialysisTreeViewResult.fromJS(resultData200);
            return Promise.resolve<DialysisTreeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DialysisTreeViewResult>(null as any);
    }

    /**
     * 透析区间 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptDialysisAreaPOST2(body: DeptDialysisAreaViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisAreaPOST2(_response));
        });
    }

    protected processDeptDialysisAreaPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析区间 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForDeptDialysisArea(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForDeptDialysisArea(_response));
        });
    }

    protected processMoveNodeForDeptDialysisArea(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析区间 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForDeptDialysisArea(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForDeptDialysisArea(_response));
        });
    }

    protected processUpNodeForDeptDialysisArea(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析区间 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForDeptDialysisArea(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForDeptDialysisArea(_response));
        });
    }

    protected processDownNodeForDeptDialysisArea(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析区间 -- 根据Id删除数据
     * @return Success
     */
    delete43(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisArea/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete43(_response));
        });
    }

    protected processDelete43(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptDialysisBedServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析床位 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptDialysisBedGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptDialysisBedResultEntry> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisBedGET(_response));
        });
    }

    protected processDeptDialysisBedGET(response: AxiosResponse): Promise<DeptDialysisBedResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisBedResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptDialysisBedResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisBedResultEntry>(null as any);
    }

    /**
     * 透析床位 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptDialysisBedPOST(id: string, body: DeptDialysisBedEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisBedPOST(_response));
        });
    }

    protected processDeptDialysisBedPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter44(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisBedResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter44(_response));
        });
    }

    protected processFilter44(response: AxiosResponse): Promise<DeptDialysisBedResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisBedResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisBedResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisBedResult>(null as any);
    }

    /**
     * 透析床位(向下递归查询所有子项) -- 根据院区Id查询床位信息
     * @param sysHospitalAreaId [院区标识](院区Id)
     * @param filter (optional) 查询条件
     * @param isCurrent (optional) 是否启用当前用户
     * @return Success
     */
    getDeptDialysisBedBySysHospitalAreaId(sysHospitalAreaId: string, filter: string | undefined, isCurrent: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisBedInfoDataViewResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/BySysHospitalAreaId/{sysHospitalAreaId}?";
        if (sysHospitalAreaId === undefined || sysHospitalAreaId === null)
            throw new Error("The parameter 'sysHospitalAreaId' must be defined.");
        url_ = url_.replace("{sysHospitalAreaId}", encodeURIComponent("" + sysHospitalAreaId));
        if (isCurrent === null)
            throw new Error("The parameter 'isCurrent' cannot be null.");
        else if (isCurrent !== undefined)
            url_ += "isCurrent=" + encodeURIComponent("" + isCurrent) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDeptDialysisBedBySysHospitalAreaId(_response));
        });
    }

    protected processGetDeptDialysisBedBySysHospitalAreaId(response: AxiosResponse): Promise<DeptDialysisBedInfoDataViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisBedInfoDataViewResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisBedInfoDataViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisBedInfoDataViewResult>(null as any);
    }

    /**
     * 透析床位 -- 根据透析区间ID查询床位信息
     * @param deptDialysisAreaId [透析区间](透析区间Id)
     * @param filter (optional) 查询条件
     * @return Success
     */
    getDeptDialysisBedByDeptDialysisAreaId(deptDialysisAreaId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisBedInfoDataViewResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/ByDeptDialysisAreaId/{deptDialysisAreaId}";
        if (deptDialysisAreaId === undefined || deptDialysisAreaId === null)
            throw new Error("The parameter 'deptDialysisAreaId' must be defined.");
        url_ = url_.replace("{deptDialysisAreaId}", encodeURIComponent("" + deptDialysisAreaId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDeptDialysisBedByDeptDialysisAreaId(_response));
        });
    }

    protected processGetDeptDialysisBedByDeptDialysisAreaId(response: AxiosResponse): Promise<DeptDialysisBedInfoDataViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisBedInfoDataViewResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisBedInfoDataViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisBedInfoDataViewResult>(null as any);
    }

    /**
     * 透析床位 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptDialysisBedPOST2(body: DeptDialysisBedEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisBedPOST2(_response));
        });
    }

    protected processDeptDialysisBedPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForDeptDialysisBed(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForDeptDialysisBed(_response));
        });
    }

    protected processMoveNodeForDeptDialysisBed(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForDeptDialysisBed(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForDeptDialysisBed(_response));
        });
    }

    protected processUpNodeForDeptDialysisBed(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForDeptDialysisBed(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForDeptDialysisBed(_response));
        });
    }

    protected processDownNodeForDeptDialysisBed(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位 -- 根据Id删除数据
     * @return Success
     */
    delete44(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBed/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete44(_response));
        });
    }

    protected processDelete44(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptDialysisBedDevServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析床位绑定设备记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptDialysisBedDevGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptDialysisBedDevResultEntry> {
        let url_ = this.baseUrl + "/api/DeptDialysisBedDev/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisBedDevGET(_response));
        });
    }

    protected processDeptDialysisBedDevGET(response: AxiosResponse): Promise<DeptDialysisBedDevResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisBedDevResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptDialysisBedDevResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisBedDevResultEntry>(null as any);
    }

    /**
     * 透析床位绑定设备记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptDialysisBedDevPOST(id: string, body: DeptDialysisBedDevViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBedDev/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisBedDevPOST(_response));
        });
    }

    protected processDeptDialysisBedDevPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位绑定设备记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter45(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptDialysisBedDevResult> {
        let url_ = this.baseUrl + "/api/DeptDialysisBedDev/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter45(_response));
        });
    }

    protected processFilter45(response: AxiosResponse): Promise<DeptDialysisBedDevResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptDialysisBedDevResult.fromJS(resultData200);
            return Promise.resolve<DeptDialysisBedDevResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptDialysisBedDevResult>(null as any);
    }

    /**
     * 透析床位绑定设备记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptDialysisBedDevPOST2(body: DeptDialysisBedDevViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBedDev";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptDialysisBedDevPOST2(_response));
        });
    }

    protected processDeptDialysisBedDevPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析床位绑定设备记录 -- 根据Id删除数据
     * @return Success
     */
    delete45(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptDialysisBedDev/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete45(_response));
        });
    }

    protected processDelete45(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptMedicalPersonnelServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医护人员信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter46(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelViewResult> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter46(_response));
        });
    }

    protected processFilter46(response: AxiosResponse): Promise<DeptMedicalPersonnelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelViewResult.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelViewResult>(null as any);
    }

    /**
     * 医生信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/拼音码/五笔码/id *选填
     * @return Success
     */
    filter47(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelViewResult> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Doctor/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter47(_response));
        });
    }

    protected processFilter47(response: AxiosResponse): Promise<DeptMedicalPersonnelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelViewResult.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelViewResult>(null as any);
    }

    /**
     * 医生信息 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/拼音码/五笔码/id *选填
     * @return Success
     */
    export2(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Doctor/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport2(_response));
        });
    }

    protected processExport2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/拼音码/五笔码/id *选填
     * @return Success
     */
    filter48(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelViewResult> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Nurse/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter48(_response));
        });
    }

    protected processFilter48(response: AxiosResponse): Promise<DeptMedicalPersonnelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelViewResult.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelViewResult>(null as any);
    }

    /**
     * 护士信息 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/拼音码/五笔码/id *选填
     * @return Success
     */
    export3(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Nurse/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport3(_response));
        });
    }

    protected processExport3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他用户信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 姓名/别名/拼音码/五笔码/id *选填
     * @return Success
     */
    filter49(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelViewResult> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Other/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter49(_response));
        });
    }

    protected processFilter49(response: AxiosResponse): Promise<DeptMedicalPersonnelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelViewResult.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelViewResult>(null as any);
    }

    /**
     * 根据用户SysUserId查询用户签名信息
     * @return Success
     */
    getDeptMedicalPersonnelSignature(sysUserId: string , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelSignatureViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/GetDeptMedicalPersonnelSignature/{SysUserId}";
        if (sysUserId === undefined || sysUserId === null)
            throw new Error("The parameter 'sysUserId' must be defined.");
        url_ = url_.replace("{SysUserId}", encodeURIComponent("" + sysUserId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDeptMedicalPersonnelSignature(_response));
        });
    }

    protected processGetDeptMedicalPersonnelSignature(response: AxiosResponse): Promise<DeptMedicalPersonnelSignatureViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelSignatureViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelSignatureViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelSignatureViewResultEntry>(null as any);
    }

    /**
     * 医护人员信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptMedicalPersonnel(body: DeptMedicalPersonnelViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptMedicalPersonnel(_response));
        });
    }

    protected processDeptMedicalPersonnel(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护人员信息 - 更新签名信息
     * @param sysUserId 用户ID
     * @param body (optional)
     * @return Success
     */
    editDeptMedicalPersonnelSignature(sysUserId: string, body: DeptMedicalPersonnelSignatureEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/EditDeptMedicalPersonnelSignature/{SysUserId}";
        if (sysUserId === undefined || sysUserId === null)
            throw new Error("The parameter 'sysUserId' must be defined.");
        url_ = url_.replace("{SysUserId}", encodeURIComponent("" + sysUserId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processEditDeptMedicalPersonnelSignature(_response));
        });
    }

    protected processEditDeptMedicalPersonnelSignature(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护人员信息 -- 根据Id删除数据
     * @return Success
     */
    delete46(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnel/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete46(_response));
        });
    }

    protected processDelete46(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptMedicalPersonnelFileServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医护人员证书 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptMedicalPersonnelFileGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelFileResultEntry> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnelFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptMedicalPersonnelFileGET(_response));
        });
    }

    protected processDeptMedicalPersonnelFileGET(response: AxiosResponse): Promise<DeptMedicalPersonnelFileResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelFileResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelFileResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelFileResultEntry>(null as any);
    }

    /**
     * 医护人员证书 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter50(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptMedicalPersonnelFileViewResult> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnelFile/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter50(_response));
        });
    }

    protected processFilter50(response: AxiosResponse): Promise<DeptMedicalPersonnelFileViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptMedicalPersonnelFileViewResult.fromJS(resultData200);
            return Promise.resolve<DeptMedicalPersonnelFileViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptMedicalPersonnelFileViewResult>(null as any);
    }

    /**
     * 医护人员证书 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptMedicalPersonnelFilePOST(body: DeptMedicalPersonnelFileViewModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnelFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptMedicalPersonnelFilePOST(_response));
        });
    }

    protected processDeptMedicalPersonnelFilePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护人员证书 -- 根据Id删除数据
     * @return Success
     */
    delete47(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptMedicalPersonnelFile/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete47(_response));
        });
    }

    protected processDelete47(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleChangeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医护换班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleChangeGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleChangeViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleChange/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleChangeGET(_response));
        });
    }

    protected processDeptScheduleChangeGET(response: AxiosResponse): Promise<DeptScheduleChangeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleChangeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleChangeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleChangeViewResultEntry>(null as any);
    }

    /**
     * 医护换班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleChangePOST(id: string, body: DeptScheduleChangeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleChange/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleChangePOST(_response));
        });
    }

    protected processDeptScheduleChangePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护换班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional)
     * @return Success
     */
    filter51(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleChangeViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleChange/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter51(_response));
        });
    }

    protected processFilter51(response: AxiosResponse): Promise<DeptScheduleChangeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleChangeViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleChangeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleChangeViewResult>(null as any);
    }

    /**
     * 医护换班 -- 导出
     * @param filter (optional) 查询条件
     * @param key (optional)
     * @return Success
     */
    export4(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleChange/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport4(_response));
        });
    }

    protected processExport4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护换班 -- 新增数据
     * @param role (optional) doctor/nurse
     * @param body (optional)
     * @return Success
     */
    deptScheduleChangePOST2(role: string | undefined, body: DeptScheduleChangeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleChange?";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleChangePOST2(_response));
        });
    }

    protected processDeptScheduleChangePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护换班 -- 根据Id删除数据
     * @return Success
     */
    delete48(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleChange/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete48(_response));
        });
    }

    protected processDelete48(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleDoctorServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医生排班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleDoctorGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleDoctorResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleDoctorGET(_response));
        });
    }

    protected processDeptScheduleDoctorGET(response: AxiosResponse): Promise<DeptScheduleDoctorResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleDoctorResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleDoctorResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleDoctorResultEntry>(null as any);
    }

    /**
     * 医生排班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleDoctorPOST(id: string, body: DeptScheduleDoctorViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleDoctorPOST(_response));
        });
    }

    protected processDeptScheduleDoctorPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生排班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter52(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleDoctorResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter52(_response));
        });
    }

    protected processFilter52(response: AxiosResponse): Promise<DeptScheduleDoctorResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleDoctorResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleDoctorResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleDoctorResult>(null as any);
    }

    /**
     * 医生排班 -- 根据日期查询
     * @param areaId 院区ID
     * @param date (optional) 时间段(e.g. 2018-11-19 ~ 2018-11-25)
     * @param filter (optional) 查询条件
     * @return Success
     */
    bySysHospitalAreaId(areaId: string, date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleDoctorViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/BySysHospitalAreaId/{areaId}?";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBySysHospitalAreaId(_response));
        });
    }

    protected processBySysHospitalAreaId(response: AxiosResponse): Promise<DeptScheduleDoctorViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleDoctorViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleDoctorViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleDoctorViewResult>(null as any);
    }

    /**
     * 根据日期范围查询已经排班的班次
     * @param startTime (optional)
     * @param endTime (optional)
     * @param filter (optional)
     * @return Success
     */
    byTimes(doctorid: string, startTime: string | undefined, endTime: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleRecordViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/ByTimes/{doctorid}?";
        if (doctorid === undefined || doctorid === null)
            throw new Error("The parameter 'doctorid' must be defined.");
        url_ = url_.replace("{doctorid}", encodeURIComponent("" + doctorid));
        if (startTime === null)
            throw new Error("The parameter 'startTime' cannot be null.");
        else if (startTime !== undefined)
            url_ += "startTime=" + encodeURIComponent("" + startTime) + "&";
        if (endTime === null)
            throw new Error("The parameter 'endTime' cannot be null.");
        else if (endTime !== undefined)
            url_ += "endTime=" + encodeURIComponent("" + endTime) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByTimes(_response));
        });
    }

    protected processByTimes(response: AxiosResponse): Promise<CureScheduleRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleRecordViewResult>(null as any);
    }

    /**
     * 医生排班 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleDoctorPOST2(body: DeptScheduleDoctorViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleDoctorPOST2(_response));
        });
    }

    protected processDeptScheduleDoctorPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生排班 -- 复制排班
     * @param body (optional)
     * @return Success
     */
    copy(body: ScheduleCopyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/Copy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCopy(_response));
        });
    }

    protected processCopy(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生排班 -- 同步排班
     * @param body (optional)
     * @return Success
     */
    sync(body: ScheduleSyncEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/Sync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSync(_response));
        });
    }

    protected processSync(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生排班 -- 根据Id删除数据
     * @return Success
     */
    delete49(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete49(_response));
        });
    }

    protected processDelete49(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生排班 -- 根据Id删除数据(批量)
     * @param ids 英文分号分隔
     * @return Success
     */
    batch2(ids: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleDoctor/Delete/Batch/{ids}";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined.");
        url_ = url_.replace("{ids}", encodeURIComponent("" + ids));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch2(_response));
        });
    }

    protected processBatch2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleNurseServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 护士排班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleNurseGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleNurseResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleNurseGET(_response));
        });
    }

    protected processDeptScheduleNurseGET(response: AxiosResponse): Promise<DeptScheduleNurseResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleNurseResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleNurseResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleNurseResultEntry>(null as any);
    }

    /**
     * 护士排班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleNursePOST(id: string, body: DeptScheduleNurseViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleNursePOST(_response));
        });
    }

    protected processDeptScheduleNursePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士排班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter53(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleNurseResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter53(_response));
        });
    }

    protected processFilter53(response: AxiosResponse): Promise<DeptScheduleNurseResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleNurseResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleNurseResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleNurseResult>(null as any);
    }

    /**
     * 护士排班 -- 根据日期查询
     * @param areaId 院区ID
     * @param date (optional) 时间段(e.g. 2018-11-19 ~ 2018-11-25)
     * @param filter (optional) 查询条件
     * @return Success
     */
    bySysHospitalAreaId2(areaId: string, date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleNurseViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/BySysHospitalAreaId/{areaId}?";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBySysHospitalAreaId2(_response));
        });
    }

    protected processBySysHospitalAreaId2(response: AxiosResponse): Promise<DeptScheduleNurseViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleNurseViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleNurseViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleNurseViewResult>(null as any);
    }

    /**
     * 根据日期范围查询已经排班的班次
     * @param startTime (optional)
     * @param endTime (optional)
     * @param filter (optional)
     * @return Success
     */
    byTimes2(nurseId: string, startTime: string | undefined, endTime: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleRecordViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/ByTimes/{nurseId}?";
        if (nurseId === undefined || nurseId === null)
            throw new Error("The parameter 'nurseId' must be defined.");
        url_ = url_.replace("{nurseId}", encodeURIComponent("" + nurseId));
        if (startTime === null)
            throw new Error("The parameter 'startTime' cannot be null.");
        else if (startTime !== undefined)
            url_ += "startTime=" + encodeURIComponent("" + startTime) + "&";
        if (endTime === null)
            throw new Error("The parameter 'endTime' cannot be null.");
        else if (endTime !== undefined)
            url_ += "endTime=" + encodeURIComponent("" + endTime) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByTimes2(_response));
        });
    }

    protected processByTimes2(response: AxiosResponse): Promise<CureScheduleRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleRecordViewResult>(null as any);
    }

    /**
     * 护士排班 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleNursePOST2(body: DeptScheduleNurseViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleNursePOST2(_response));
        });
    }

    protected processDeptScheduleNursePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士排班 -- 复制排班
     * @param body (optional)
     * @return Success
     */
    copy2(body: ScheduleCopyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/Copy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCopy2(_response));
        });
    }

    protected processCopy2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士排班 -- 同步排班
     * @param body (optional)
     * @return Success
     */
    sync2(body: ScheduleSyncEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/Sync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSync2(_response));
        });
    }

    protected processSync2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士排班 -- 根据Id删除数据
     * @return Success
     */
    delete50(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete50(_response));
        });
    }

    protected processDelete50(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士排班 -- 根据Id删除数据(批量)
     * @param ids 英文分号分隔
     * @return Success
     */
    batch3(ids: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleNurse/Delete/Batch/{ids}";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined.");
        url_ = url_.replace("{ids}", encodeURIComponent("" + ids));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch3(_response));
        });
    }

    protected processBatch3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleOtherServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 其他排班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleOtherGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleOtherResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleOtherGET(_response));
        });
    }

    protected processDeptScheduleOtherGET(response: AxiosResponse): Promise<DeptScheduleOtherResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleOtherResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleOtherResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleOtherResultEntry>(null as any);
    }

    /**
     * 其他排班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleOtherPOST(id: string, body: DeptScheduleOtherEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleOtherPOST(_response));
        });
    }

    protected processDeptScheduleOtherPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他排班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter54(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleOtherResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter54(_response));
        });
    }

    protected processFilter54(response: AxiosResponse): Promise<DeptScheduleOtherResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleOtherResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleOtherResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleOtherResult>(null as any);
    }

    /**
     * 其他排班 -- 根据日期查询
     * @param areaId 院区ID
     * @param date (optional) 时间段(e.g. 2018-11-19 ~ 2018-11-25)
     * @param filter (optional) 查询条件
     * @return Success
     */
    bySysHospitalAreaId3(areaId: string, date: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleOtherViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/BySysHospitalAreaId/{areaId}?";
        if (areaId === undefined || areaId === null)
            throw new Error("The parameter 'areaId' must be defined.");
        url_ = url_.replace("{areaId}", encodeURIComponent("" + areaId));
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBySysHospitalAreaId3(_response));
        });
    }

    protected processBySysHospitalAreaId3(response: AxiosResponse): Promise<DeptScheduleOtherViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleOtherViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleOtherViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleOtherViewResult>(null as any);
    }

    /**
     * 根据日期范围查询已经排班的班次
     * @param startTime (optional)
     * @param endTime (optional)
     * @param filter (optional)
     * @return Success
     */
    byTimes3(userId: string, startTime: string | undefined, endTime: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleRecordViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/ByTimes/{userId}?";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (startTime === null)
            throw new Error("The parameter 'startTime' cannot be null.");
        else if (startTime !== undefined)
            url_ += "startTime=" + encodeURIComponent("" + startTime) + "&";
        if (endTime === null)
            throw new Error("The parameter 'endTime' cannot be null.");
        else if (endTime !== undefined)
            url_ += "endTime=" + encodeURIComponent("" + endTime) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByTimes3(_response));
        });
    }

    protected processByTimes3(response: AxiosResponse): Promise<CureScheduleRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleRecordViewResult.fromJS(resultData200);
            return Promise.resolve<CureScheduleRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleRecordViewResult>(null as any);
    }

    /**
     * 其他排班 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleOtherPOST2(body: DeptScheduleOtherEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleOtherPOST2(_response));
        });
    }

    protected processDeptScheduleOtherPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他排班 -- 复制排班
     * @param body (optional)
     * @return Success
     */
    copy3(body: ScheduleCopyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/Copy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCopy3(_response));
        });
    }

    protected processCopy3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他排班 -- 同步排班
     * @param body (optional)
     * @return Success
     */
    sync3(body: ScheduleSyncEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/Sync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSync3(_response));
        });
    }

    protected processSync3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他排班 -- 根据Id删除数据
     * @return Success
     */
    delete51(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete51(_response));
        });
    }

    protected processDelete51(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他排班 -- 根据Id删除数据(批量)
     * @param ids 英文分号分隔
     * @return Success
     */
    batch4(ids: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOther/Delete/Batch/{ids}";
        if (ids === undefined || ids === null)
            throw new Error("The parameter 'ids' must be defined.");
        url_ = url_.replace("{ids}", encodeURIComponent("" + ids));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch4(_response));
        });
    }

    protected processBatch4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleOvertimeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医护加班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleOvertimeGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleOvertimeViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleOvertimeGET(_response));
        });
    }

    protected processDeptScheduleOvertimeGET(response: AxiosResponse): Promise<DeptScheduleOvertimeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleOvertimeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleOvertimeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleOvertimeViewResultEntry>(null as any);
    }

    /**
     * 医护加班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleOvertimePOST(id: string, body: DeptScheduleOvertimeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleOvertimePOST(_response));
        });
    }

    protected processDeptScheduleOvertimePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护加班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter55(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleOvertimeViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter55(_response));
        });
    }

    protected processFilter55(response: AxiosResponse): Promise<DeptScheduleOvertimeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleOvertimeViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleOvertimeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleOvertimeViewResult>(null as any);
    }

    /**
     * 查询审批记录
     * @param hased (optional) 0:未审批/1:已经审批
     * @param filter (optional)
     * @return Success
     */
    approverRecord(hased: number | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<ApproverRecordViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/ApproverRecord?";
        if (hased === null)
            throw new Error("The parameter 'hased' cannot be null.");
        else if (hased !== undefined)
            url_ += "hased=" + encodeURIComponent("" + hased) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processApproverRecord(_response));
        });
    }

    protected processApproverRecord(response: AxiosResponse): Promise<ApproverRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ApproverRecordViewResult.fromJS(resultData200);
            return Promise.resolve<ApproverRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApproverRecordViewResult>(null as any);
    }

    /**
     * 申请/审批记录导出
     * @param hased (optional) 0:已经审批/1:未审批
     * @param filter (optional) 过滤条件
     * @return Success
     */
    export5(hased: number | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/Export?";
        if (hased === null)
            throw new Error("The parameter 'hased' cannot be null.");
        else if (hased !== undefined)
            url_ += "hased=" + encodeURIComponent("" + hased) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport5(_response));
        });
    }

    protected processExport5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护加班 -- 新增数据
     * @param role (optional) doctor/nurse
     * @param body (optional)
     * @return Success
     */
    deptScheduleOvertimePOST2(role: string | undefined, body: DeptScheduleOvertimeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime?";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleOvertimePOST2(_response));
        });
    }

    protected processDeptScheduleOvertimePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护加班 -- 审批结果
     * @param approvered (optional)
     * @param refuseReason (optional)
     * @return Success
     */
    overtime(id: string, approvered: number | undefined, refuseReason: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/Overtime/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (approvered === null)
            throw new Error("The parameter 'approvered' cannot be null.");
        else if (approvered !== undefined)
            url_ += "approvered=" + encodeURIComponent("" + approvered) + "&";
        if (refuseReason === null)
            throw new Error("The parameter 'refuseReason' cannot be null.");
        else if (refuseReason !== undefined)
            url_ += "refuseReason=" + encodeURIComponent("" + refuseReason) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOvertime(_response));
        });
    }

    protected processOvertime(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护加班 -- 撤销审批
     * @param id (optional)
     * @param role (optional)
     * @return Success
     */
    cancel(id: string | undefined, role: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/Cancel?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCancel(_response));
        });
    }

    protected processCancel(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护加班 -- 根据Id删除数据
     * @return Success
     */
    delete52(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleOvertime/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete52(_response));
        });
    }

    protected processDelete52(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleSubstituteServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医护顶班 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleSubstituteGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleSubstituteViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleSubstitute/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleSubstituteGET(_response));
        });
    }

    protected processDeptScheduleSubstituteGET(response: AxiosResponse): Promise<DeptScheduleSubstituteViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleSubstituteViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleSubstituteViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleSubstituteViewResultEntry>(null as any);
    }

    /**
     * 医护顶班 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleSubstitutePOST(id: string, body: DeptScheduleSubstituteEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleSubstitute/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleSubstitutePOST(_response));
        });
    }

    protected processDeptScheduleSubstitutePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护顶班 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional)
     * @return Success
     */
    filter56(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleSubstituteViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleSubstitute/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter56(_response));
        });
    }

    protected processFilter56(response: AxiosResponse): Promise<DeptScheduleSubstituteViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleSubstituteViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleSubstituteViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleSubstituteViewResult>(null as any);
    }

    /**
     * 医护顶班 - 导出
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    export6(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleSubstitute/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport6(_response));
        });
    }

    protected processExport6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护顶班 -- 新增数据
     * @param role (optional) doctor/nurse
     * @param body (optional)
     * @return Success
     */
    deptScheduleSubstitutePOST2(role: string | undefined, body: DeptScheduleSubstituteEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleSubstitute?";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleSubstitutePOST2(_response));
        });
    }

    protected processDeptScheduleSubstitutePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护顶班 -- 根据Id删除数据
     * @return Success
     */
    delete53(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleSubstitute/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete53(_response));
        });
    }

    protected processDelete53(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptScheduleTakeOffServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医护调休 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptScheduleTakeOffGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptScheduleTakeOffViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleTakeOffGET(_response));
        });
    }

    protected processDeptScheduleTakeOffGET(response: AxiosResponse): Promise<DeptScheduleTakeOffViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleTakeOffViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptScheduleTakeOffViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleTakeOffViewResultEntry>(null as any);
    }

    /**
     * 医护调休 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptScheduleTakeOffPOST(id: string, body: DeptScheduleTakeOffEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleTakeOffPOST(_response));
        });
    }

    protected processDeptScheduleTakeOffPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护调休 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter57(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptScheduleTakeOffViewResult> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter57(_response));
        });
    }

    protected processFilter57(response: AxiosResponse): Promise<DeptScheduleTakeOffViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptScheduleTakeOffViewResult.fromJS(resultData200);
            return Promise.resolve<DeptScheduleTakeOffViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptScheduleTakeOffViewResult>(null as any);
    }

    /**
     * 医护调休 -- 新增数据
     * @param role (optional)
     * @param body (optional)
     * @return Success
     */
    deptScheduleTakeOffPOST2(role: string | undefined, body: DeptScheduleTakeOffEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff?";
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptScheduleTakeOffPOST2(_response));
        });
    }

    protected processDeptScheduleTakeOffPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护调休 -- 审批结果
     * @param approvered (optional)
     * @param refuseReason (optional)
     * @return Success
     */
    takeoff(id: string, approvered: number | undefined, refuseReason: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff/Takeoff/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (approvered === null)
            throw new Error("The parameter 'approvered' cannot be null.");
        else if (approvered !== undefined)
            url_ += "approvered=" + encodeURIComponent("" + approvered) + "&";
        if (refuseReason === null)
            throw new Error("The parameter 'refuseReason' cannot be null.");
        else if (refuseReason !== undefined)
            url_ += "refuseReason=" + encodeURIComponent("" + refuseReason) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTakeoff(_response));
        });
    }

    protected processTakeoff(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护调休 -- 撤销审批
     * @param role (optional)
     * @return Success
     */
    cancel2(id: string, role: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff/Cancel/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (role === null)
            throw new Error("The parameter 'role' cannot be null.");
        else if (role !== undefined)
            url_ += "role=" + encodeURIComponent("" + role) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCancel2(_response));
        });
    }

    protected processCancel2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医护调休 -- 根据Id删除数据
     * @return Success
     */
    delete54(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptScheduleTakeOff/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete54(_response));
        });
    }

    protected processDelete54(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptShiftDoctorServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 医生班次 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptShiftDoctorGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptShiftDoctorResultEntry> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftDoctorGET(_response));
        });
    }

    protected processDeptShiftDoctorGET(response: AxiosResponse): Promise<DeptShiftDoctorResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShiftDoctorResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptShiftDoctorResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShiftDoctorResultEntry>(null as any);
    }

    /**
     * 医生班次 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptShiftDoctorPOST(id: string, body: DeptShiftDoctorViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftDoctorPOST(_response));
        });
    }

    protected processDeptShiftDoctorPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生班次 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter58(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptShiftDoctorResult> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter58(_response));
        });
    }

    protected processFilter58(response: AxiosResponse): Promise<DeptShiftDoctorResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShiftDoctorResult.fromJS(resultData200);
            return Promise.resolve<DeptShiftDoctorResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShiftDoctorResult>(null as any);
    }

    /**
     * 医生班次 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptShiftDoctorPOST2(body: DeptShiftDoctorViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftDoctorPOST2(_response));
        });
    }

    protected processDeptShiftDoctorPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生班次 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForDeptShiftDoctor(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForDeptShiftDoctor(_response));
        });
    }

    protected processMoveNodeForDeptShiftDoctor(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生班次 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForDeptShiftDoctor(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForDeptShiftDoctor(_response));
        });
    }

    protected processUpNodeForDeptShiftDoctor(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生班次 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForDeptShiftDoctor(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForDeptShiftDoctor(_response));
        });
    }

    protected processDownNodeForDeptShiftDoctor(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 医生班次 -- 根据Id删除数据
     * @return Success
     */
    delete55(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftDoctor/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete55(_response));
        });
    }

    protected processDelete55(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptShiftNurseServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 护士班次 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptShiftNurseGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptShiftNurseResultEntry> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftNurseGET(_response));
        });
    }

    protected processDeptShiftNurseGET(response: AxiosResponse): Promise<DeptShiftNurseResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShiftNurseResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptShiftNurseResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShiftNurseResultEntry>(null as any);
    }

    /**
     * 护士班次 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptShiftNursePOST(id: string, body: DeptShiftNurseViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftNursePOST(_response));
        });
    }

    protected processDeptShiftNursePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士班次 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter59(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptShiftNurseResult> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter59(_response));
        });
    }

    protected processFilter59(response: AxiosResponse): Promise<DeptShiftNurseResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShiftNurseResult.fromJS(resultData200);
            return Promise.resolve<DeptShiftNurseResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShiftNurseResult>(null as any);
    }

    /**
     * 护士班次 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptShiftNursePOST2(body: DeptShiftNurseViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftNursePOST2(_response));
        });
    }

    protected processDeptShiftNursePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士班次 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForDeptShiftNurse(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForDeptShiftNurse(_response));
        });
    }

    protected processMoveNodeForDeptShiftNurse(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士班次 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForDeptShiftNurse(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForDeptShiftNurse(_response));
        });
    }

    protected processUpNodeForDeptShiftNurse(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士班次 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForDeptShiftNurse(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForDeptShiftNurse(_response));
        });
    }

    protected processDownNodeForDeptShiftNurse(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 护士班次 -- 根据Id删除数据
     * @return Success
     */
    delete56(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftNurse/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete56(_response));
        });
    }

    protected processDelete56(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptShiftOtherServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 其他班次 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptShiftOtherGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptShiftOtherViewResultEntry> {
        let url_ = this.baseUrl + "/api/DeptShiftOther/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftOtherGET(_response));
        });
    }

    protected processDeptShiftOtherGET(response: AxiosResponse): Promise<DeptShiftOtherViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShiftOtherViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptShiftOtherViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShiftOtherViewResultEntry>(null as any);
    }

    /**
     * 其他班次 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptShiftOtherPOST(id: string, body: DeptShiftOtherEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftOther/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftOtherPOST(_response));
        });
    }

    protected processDeptShiftOtherPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他班次 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter60(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptShiftOtherViewResult> {
        let url_ = this.baseUrl + "/api/DeptShiftOther/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter60(_response));
        });
    }

    protected processFilter60(response: AxiosResponse): Promise<DeptShiftOtherViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShiftOtherViewResult.fromJS(resultData200);
            return Promise.resolve<DeptShiftOtherViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShiftOtherViewResult>(null as any);
    }

    /**
     * 其他班次 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptShiftOtherPOST2(body: DeptShiftOtherEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftOther";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShiftOtherPOST2(_response));
        });
    }

    protected processDeptShiftOtherPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 其他班次 -- 根据Id删除数据
     * @return Success
     */
    delete57(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShiftOther/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete57(_response));
        });
    }

    protected processDelete57(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DeptShrServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 交班记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    deptShrGET(id: string , cancelToken?: CancelToken | undefined): Promise<DeptShrResultEntry> {
        let url_ = this.baseUrl + "/api/DeptShr/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShrGET(_response));
        });
    }

    protected processDeptShrGET(response: AxiosResponse): Promise<DeptShrResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShrResultEntry.fromJS(resultData200);
            return Promise.resolve<DeptShrResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShrResultEntry>(null as any);
    }

    /**
     * 交班记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    deptShrPOST(id: string, body: DeptShrViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShr/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShrPOST(_response));
        });
    }

    protected processDeptShrPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 交班记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter61(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DeptShrResult> {
        let url_ = this.baseUrl + "/api/DeptShr/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter61(_response));
        });
    }

    protected processFilter61(response: AxiosResponse): Promise<DeptShrResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DeptShrResult.fromJS(resultData200);
            return Promise.resolve<DeptShrResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeptShrResult>(null as any);
    }

    /**
     * 交班记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    deptShrPOST2(body: DeptShrViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShr";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeptShrPOST2(_response));
        });
    }

    protected processDeptShrPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 交班记录 -- 根据Id删除数据
     * @return Success
     */
    delete58(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DeptShr/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete58(_response));
        });
    }

    protected processDelete58(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevBacterialfilterchangeLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 细菌过滤器更换记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devBacterialfilterchangeLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevBacterialfilterchangeLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevBacterialfilterchangeLogGET(_response));
        });
    }

    protected processDevBacterialfilterchangeLogGET(response: AxiosResponse): Promise<DevBacterialfilterchangeLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevBacterialfilterchangeLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevBacterialfilterchangeLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevBacterialfilterchangeLogViewResultEntry>(null as any);
    }

    /**
     * 细菌过滤器更换记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devBacterialfilterchangeLogPOST(id: string, body: DevBacterialfilterchangeLogEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevBacterialfilterchangeLogPOST(_response));
        });
    }

    protected processDevBacterialfilterchangeLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * @param key (optional)
     * @param accurate (optional)
     * @param filter (optional)
     * @return Success
     */
    filter62(key: string | undefined, accurate: boolean | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevBacterialfilterchangeLogViewResult> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter62(_response));
        });
    }

    protected processFilter62(response: AxiosResponse): Promise<DevBacterialfilterchangeLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevBacterialfilterchangeLogViewResult.fromJS(resultData200);
            return Promise.resolve<DevBacterialfilterchangeLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevBacterialfilterchangeLogViewResult>(null as any);
    }

    /**
     * 细菌过滤器更换记录 -- 根据条件查询数据导出
     * @param key (optional)
     * @param accurate (optional)
     * @param filter (optional) 查询条件
     * @return Success
     */
    export7(key: string | undefined, accurate: boolean | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport7(_response));
        });
    }

    protected processExport7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 细菌过滤器更换记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devBacterialfilterchangeLogPOST2(body: DevBacterialfilterchangeLogEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevBacterialfilterchangeLogPOST2(_response));
        });
    }

    protected processDevBacterialfilterchangeLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 细菌过滤器更换记录 -- 根据Id删除数据
     * @return Success
     */
    delete59(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete59(_response));
        });
    }

    protected processDelete59(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 从 Excel 读取使用记录
     * @param fileId Excel 文件 Id
     * @return Success
     */
    readFromExcel(fileId: string , cancelToken?: CancelToken | undefined): Promise<DevBacterialfilterchangeLogExcelViewResult> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/ReadFromExcel/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processReadFromExcel(_response));
        });
    }

    protected processReadFromExcel(response: AxiosResponse): Promise<DevBacterialfilterchangeLogExcelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevBacterialfilterchangeLogExcelViewResult.fromJS(resultData200);
            return Promise.resolve<DevBacterialfilterchangeLogExcelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevBacterialfilterchangeLogExcelViewResult>(null as any);
    }

    /**
     * ConvertFromExcel 从 Excel 导入/更新 设备信息
     * @param body (optional) 使用记录集合
     * @return Success
     */
    convertFromExcel(body: DevBacterialfilterchangeLogExcelView[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevBacterialfilterchangeLog/ConvertFromExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processConvertFromExcel(_response));
        });
    }

    protected processConvertFromExcel(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevDisinfectLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 消毒记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devDisinfectLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevDisinfectLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevDisinfectLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevDisinfectLogGET(_response));
        });
    }

    protected processDevDisinfectLogGET(response: AxiosResponse): Promise<DevDisinfectLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevDisinfectLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevDisinfectLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevDisinfectLogViewResultEntry>(null as any);
    }

    /**
     * 消毒记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devDisinfectLogPOST(id: string, body: DevDisinfectLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevDisinfectLogPOST(_response));
        });
    }

    protected processDevDisinfectLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消毒记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    filter63(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DevDisinfectLogViewResult> {
        let url_ = this.baseUrl + "/api/DevDisinfectLog/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter63(_response));
        });
    }

    protected processFilter63(response: AxiosResponse): Promise<DevDisinfectLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevDisinfectLogViewResult.fromJS(resultData200);
            return Promise.resolve<DevDisinfectLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevDisinfectLogViewResult>(null as any);
    }

    /**
     * 消毒记录 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    export8(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectLog/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport8(_response));
        });
    }

    protected processExport8(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消毒记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devDisinfectLogPOST2(body: DevDisinfectLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevDisinfectLogPOST2(_response));
        });
    }

    protected processDevDisinfectLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消毒记录 -- 根据Id删除数据
     * @return Success
     */
    delete60(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete60(_response));
        });
    }

    protected processDelete60(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevDisinfectSettingServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 设备消毒配置 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devDisinfectSettingGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevDisinfectSettingResultEntry> {
        let url_ = this.baseUrl + "/api/DevDisinfectSetting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevDisinfectSettingGET(_response));
        });
    }

    protected processDevDisinfectSettingGET(response: AxiosResponse): Promise<DevDisinfectSettingResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevDisinfectSettingResultEntry.fromJS(resultData200);
            return Promise.resolve<DevDisinfectSettingResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevDisinfectSettingResultEntry>(null as any);
    }

    /**
     * 设备消毒配置 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devDisinfectSettingPOST(id: string, body: DevDisinfectSettingEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectSetting/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevDisinfectSettingPOST(_response));
        });
    }

    protected processDevDisinfectSettingPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备消毒配置 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter64(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevDisinfectSettingViewResult> {
        let url_ = this.baseUrl + "/api/DevDisinfectSetting/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter64(_response));
        });
    }

    protected processFilter64(response: AxiosResponse): Promise<DevDisinfectSettingViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevDisinfectSettingViewResult.fromJS(resultData200);
            return Promise.resolve<DevDisinfectSettingViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevDisinfectSettingViewResult>(null as any);
    }

    /**
     * 设备消毒配置 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devDisinfectSettingPOST2(body: DevDisinfectSettingEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevDisinfectSettingPOST2(_response));
        });
    }

    protected processDevDisinfectSettingPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备消毒配置 -- 根据Id删除数据
     * @return Success
     */
    delete61(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevDisinfectSetting/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete61(_response));
        });
    }

    protected processDelete61(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevInfoServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 科室设备 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devInfoGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevInfoViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevInfoGET(_response));
        });
    }

    protected processDevInfoGET(response: AxiosResponse): Promise<DevInfoViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevInfoViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevInfoViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevInfoViewResultEntry>(null as any);
    }

    /**
     * 科室设备 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devInfoPOST(id: string, body: DevInfoEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevInfoPOST(_response));
        });
    }

    protected processDevInfoPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备 -- 汇总
     * @return Success
     */
    summary(  cancelToken?: CancelToken | undefined): Promise<DevInfoSummaryViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevInfo/Summary";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSummary(_response));
        });
    }

    protected processSummary(response: AxiosResponse): Promise<DevInfoSummaryViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevInfoSummaryViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevInfoSummaryViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevInfoSummaryViewResultEntry>(null as any);
    }

    /**
     * 科室设备 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    filter65(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DevInfoViewResult> {
        let url_ = this.baseUrl + "/api/DevInfo/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter65(_response));
        });
    }

    protected processFilter65(response: AxiosResponse): Promise<DevInfoViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevInfoViewResult.fromJS(resultData200);
            return Promise.resolve<DevInfoViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevInfoViewResult>(null as any);
    }

    /**
     * 科室设备 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    export9(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevInfo/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport9(_response));
        });
    }

    protected processExport9(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备 -- 根据院区Id获取未绑定的设备
     * @param sysHospitalAreaId 院区ID
     * @param filter (optional) 查询条件
     * @return Success
     */
    getDevInfoBySysHospitalAreaId(sysHospitalAreaId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevInfoViewResult> {
        let url_ = this.baseUrl + "/api/DevInfo/BySysHospitalAreaId/{sysHospitalAreaId}";
        if (sysHospitalAreaId === undefined || sysHospitalAreaId === null)
            throw new Error("The parameter 'sysHospitalAreaId' must be defined.");
        url_ = url_.replace("{sysHospitalAreaId}", encodeURIComponent("" + sysHospitalAreaId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDevInfoBySysHospitalAreaId(_response));
        });
    }

    protected processGetDevInfoBySysHospitalAreaId(response: AxiosResponse): Promise<DevInfoViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevInfoViewResult.fromJS(resultData200);
            return Promise.resolve<DevInfoViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevInfoViewResult>(null as any);
    }

    /**
     * 科室设备 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devInfoPOST2(body: DevInfoEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevInfoPOST2(_response));
        });
    }

    protected processDevInfoPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备 -- 根据Id删除数据
     * @return Success
     */
    delete62(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevInfo/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete62(_response));
        });
    }

    protected processDelete62(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 从 Excel 读取患者信息
     * @param fileId Excel 文件 Id
     * @return Success
     */
    readFromExcel2(fileId: string , cancelToken?: CancelToken | undefined): Promise<DevInfoExcelViewResult> {
        let url_ = this.baseUrl + "/api/DevInfo/ReadFromExcel/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processReadFromExcel2(_response));
        });
    }

    protected processReadFromExcel2(response: AxiosResponse): Promise<DevInfoExcelViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevInfoExcelViewResult.fromJS(resultData200);
            return Promise.resolve<DevInfoExcelViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevInfoExcelViewResult>(null as any);
    }

    /**
     * ConvertFromExcel 从 Excel 导入/更新 设备信息
     * @param body (optional) 设备集合
     * @return Success
     */
    convertFromExcel2(body: DevInfoExcelView[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevInfo/ConvertFromExcel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processConvertFromExcel2(_response));
        });
    }

    protected processConvertFromExcel2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevMaintenanceLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 维护记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devMaintenanceLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevMaintenanceLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevMaintenanceLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevMaintenanceLogGET(_response));
        });
    }

    protected processDevMaintenanceLogGET(response: AxiosResponse): Promise<DevMaintenanceLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevMaintenanceLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevMaintenanceLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevMaintenanceLogViewResultEntry>(null as any);
    }

    /**
     * 维护记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devMaintenanceLogPOST(id: string, body: DevMaintenanceLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevMaintenanceLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevMaintenanceLogPOST(_response));
        });
    }

    protected processDevMaintenanceLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维护记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    filter66(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DevMaintenanceLogViewResult> {
        let url_ = this.baseUrl + "/api/DevMaintenanceLog/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter66(_response));
        });
    }

    protected processFilter66(response: AxiosResponse): Promise<DevMaintenanceLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevMaintenanceLogViewResult.fromJS(resultData200);
            return Promise.resolve<DevMaintenanceLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevMaintenanceLogViewResult>(null as any);
    }

    /**
     * 维护记录 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    export10(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevMaintenanceLog/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport10(_response));
        });
    }

    protected processExport10(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维护记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devMaintenanceLogPOST2(body: DevMaintenanceLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevMaintenanceLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevMaintenanceLogPOST2(_response));
        });
    }

    protected processDevMaintenanceLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 维护记录 -- 根据Id删除数据
     * @return Success
     */
    delete63(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevMaintenanceLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete63(_response));
        });
    }

    protected processDelete63(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevManufacturerServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 科室设备生产厂家信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devManufacturerGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevManufacturerViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevManufacturer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevManufacturerGET(_response));
        });
    }

    protected processDevManufacturerGET(response: AxiosResponse): Promise<DevManufacturerViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevManufacturerViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevManufacturerViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevManufacturerViewResultEntry>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devManufacturerPOST(id: string, body: DevManufacturerEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevManufacturer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevManufacturerPOST(_response));
        });
    }

    protected processDevManufacturerPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter67(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevManufacturerViewResult> {
        let url_ = this.baseUrl + "/api/DevManufacturer/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter67(_response));
        });
    }

    protected processFilter67(response: AxiosResponse): Promise<DevManufacturerViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevManufacturerViewResult.fromJS(resultData200);
            return Promise.resolve<DevManufacturerViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevManufacturerViewResult>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devManufacturerPOST2(body: DevManufacturerEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevManufacturer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevManufacturerPOST2(_response));
        });
    }

    protected processDevManufacturerPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForDevManufacturer(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevManufacturer/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForDevManufacturer(_response));
        });
    }

    protected processMoveNodeForDevManufacturer(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForDevManufacturer(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevManufacturer/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForDevManufacturer(_response));
        });
    }

    protected processUpNodeForDevManufacturer(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForDevManufacturer(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevManufacturer/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForDevManufacturer(_response));
        });
    }

    protected processDownNodeForDevManufacturer(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 科室设备生产厂家信息 -- 根据Id删除数据
     * @return Success
     */
    delete64(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevManufacturer/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete64(_response));
        });
    }

    protected processDelete64(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevRepairsLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 报修记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devRepairsLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevRepairsLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevRepairsLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevRepairsLogGET(_response));
        });
    }

    protected processDevRepairsLogGET(response: AxiosResponse): Promise<DevRepairsLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevRepairsLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevRepairsLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevRepairsLogViewResultEntry>(null as any);
    }

    /**
     * 报修记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devRepairsLogPOST(id: string, body: DevRepairsLogEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevRepairsLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevRepairsLogPOST(_response));
        });
    }

    protected processDevRepairsLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 报修记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter68(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevRepairsLogViewResult> {
        let url_ = this.baseUrl + "/api/DevRepairsLog/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter68(_response));
        });
    }

    protected processFilter68(response: AxiosResponse): Promise<DevRepairsLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevRepairsLogViewResult.fromJS(resultData200);
            return Promise.resolve<DevRepairsLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevRepairsLogViewResult>(null as any);
    }

    /**
     * 报修记录 -- 根据条件查询数据
     * @param devInfoId 设备标识
     * @param filter (optional)
     * @return Success
     */
    devInfoGET2(devInfoId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevRepairsLogViewResult> {
        let url_ = this.baseUrl + "/api/DevRepairsLog/DevInfo/{devInfoId}";
        if (devInfoId === undefined || devInfoId === null)
            throw new Error("The parameter 'devInfoId' must be defined.");
        url_ = url_.replace("{devInfoId}", encodeURIComponent("" + devInfoId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevInfoGET2(_response));
        });
    }

    protected processDevInfoGET2(response: AxiosResponse): Promise<DevRepairsLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevRepairsLogViewResult.fromJS(resultData200);
            return Promise.resolve<DevRepairsLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevRepairsLogViewResult>(null as any);
    }

    /**
     * 报修记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devRepairsLogPOST2(body: DevRepairsLogEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevRepairsLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevRepairsLogPOST2(_response));
        });
    }

    protected processDevRepairsLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 报修记录 -- 根据Id删除数据
     * @return Success
     */
    delete65(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevRepairsLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete65(_response));
        });
    }

    protected processDelete65(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevScrapLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 报废记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devScrapLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevScrapLogResultEntry> {
        let url_ = this.baseUrl + "/api/DevScrapLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevScrapLogGET(_response));
        });
    }

    protected processDevScrapLogGET(response: AxiosResponse): Promise<DevScrapLogResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevScrapLogResultEntry.fromJS(resultData200);
            return Promise.resolve<DevScrapLogResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevScrapLogResultEntry>(null as any);
    }

    /**
     * 报废记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devScrapLogPOST(id: string, body: DevScrapLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevScrapLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevScrapLogPOST(_response));
        });
    }

    protected processDevScrapLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 报废记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter69(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevScrapLogResult> {
        let url_ = this.baseUrl + "/api/DevScrapLog/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter69(_response));
        });
    }

    protected processFilter69(response: AxiosResponse): Promise<DevScrapLogResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevScrapLogResult.fromJS(resultData200);
            return Promise.resolve<DevScrapLogResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevScrapLogResult>(null as any);
    }

    /**
     * 报废记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devScrapLogPOST2(body: DevScrapLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevScrapLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevScrapLogPOST2(_response));
        });
    }

    protected processDevScrapLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 报废记录 -- 根据Id删除数据
     * @return Success
     */
    delete66(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevScrapLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete66(_response));
        });
    }

    protected processDelete66(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevUsageLogServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 设备使用记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devUsageLogGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevUsageLogViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevUsageLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevUsageLogGET(_response));
        });
    }

    protected processDevUsageLogGET(response: AxiosResponse): Promise<DevUsageLogViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevUsageLogViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevUsageLogViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevUsageLogViewResultEntry>(null as any);
    }

    /**
     * 设备使用记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devUsageLogPOST(id: string, body: DevUsageLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevUsageLog/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevUsageLogPOST(_response));
        });
    }

    protected processDevUsageLogPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备使用记录 -- 根据条件查询数据(添加设备编号)
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    filter70(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<DevUsageLogViewResult> {
        let url_ = this.baseUrl + "/api/DevUsageLog/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter70(_response));
        });
    }

    protected processFilter70(response: AxiosResponse): Promise<DevUsageLogViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevUsageLogViewResult.fromJS(resultData200);
            return Promise.resolve<DevUsageLogViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevUsageLogViewResult>(null as any);
    }

    /**
     * 设备使用记录 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @param key (optional) 查询条件
     * @param accurate (optional) 是否精确
     * @return Success
     */
    export11(filter: string | undefined, key: string | undefined, accurate: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevUsageLog/Filter/Export?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (accurate === null)
            throw new Error("The parameter 'accurate' cannot be null.");
        else if (accurate !== undefined)
            url_ += "accurate=" + encodeURIComponent("" + accurate) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport11(_response));
        });
    }

    protected processExport11(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备使用记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devUsageLogPOST2(body: DevUsageLogViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevUsageLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevUsageLogPOST2(_response));
        });
    }

    protected processDevUsageLogPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 设备使用记录 -- 根据Id删除数据
     * @return Success
     */
    delete67(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevUsageLog/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete67(_response));
        });
    }

    protected processDelete67(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevWaterProcessInfoServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 水处理设备 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devWaterProcessInfoGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevWaterProcessInfoViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevWaterProcessInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevWaterProcessInfoGET(_response));
        });
    }

    protected processDevWaterProcessInfoGET(response: AxiosResponse): Promise<DevWaterProcessInfoViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevWaterProcessInfoViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevWaterProcessInfoViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevWaterProcessInfoViewResultEntry>(null as any);
    }

    /**
     * 水处理设备 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devWaterProcessInfoPOST(id: string, body: DevWaterProcessInfoEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessInfo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevWaterProcessInfoPOST(_response));
        });
    }

    protected processDevWaterProcessInfoPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理设备 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter71(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevWaterProcessInfoViewResult> {
        let url_ = this.baseUrl + "/api/DevWaterProcessInfo/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter71(_response));
        });
    }

    protected processFilter71(response: AxiosResponse): Promise<DevWaterProcessInfoViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevWaterProcessInfoViewResult.fromJS(resultData200);
            return Promise.resolve<DevWaterProcessInfoViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevWaterProcessInfoViewResult>(null as any);
    }

    /**
     * 水处理设备 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devWaterProcessInfoPOST2(body: DevWaterProcessInfoEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevWaterProcessInfoPOST2(_response));
        });
    }

    protected processDevWaterProcessInfoPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理设备 -- 根据Id删除数据
     * @return Success
     */
    delete68(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessInfo/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete68(_response));
        });
    }

    protected processDelete68(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DevWaterProcessRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 水处理记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    devWaterProcessRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<DevWaterProcessRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/DevWaterProcessRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevWaterProcessRecordGET(_response));
        });
    }

    protected processDevWaterProcessRecordGET(response: AxiosResponse): Promise<DevWaterProcessRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevWaterProcessRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<DevWaterProcessRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevWaterProcessRecordViewResultEntry>(null as any);
    }

    /**
     * 水处理记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    devWaterProcessRecordPOST(id: string, body: DevWaterProcessRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevWaterProcessRecordPOST(_response));
        });
    }

    protected processDevWaterProcessRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter72(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<DevWaterProcessRecordViewResult> {
        let url_ = this.baseUrl + "/api/DevWaterProcessRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter72(_response));
        });
    }

    protected processFilter72(response: AxiosResponse): Promise<DevWaterProcessRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DevWaterProcessRecordViewResult.fromJS(resultData200);
            return Promise.resolve<DevWaterProcessRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DevWaterProcessRecordViewResult>(null as any);
    }

    /**
     * 水处理记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    devWaterProcessRecordPOST2(body: DevWaterProcessRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDevWaterProcessRecordPOST2(_response));
        });
    }

    protected processDevWaterProcessRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理记录 -- 根据Id删除数据
     * @return Success
     */
    delete69(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete69(_response));
        });
    }

    protected processDelete69(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 导出水设备消毒记录
     * @param type (optional)
     * @param waterDeviceCode (optional)
     * @param waterDeviceModel (optional)
     * @param startDate (optional)
     * @param endDate (optional)
     * @return Success
     */
    export12(type: string | undefined, waterDeviceCode: string | undefined, waterDeviceModel: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DevWaterProcessRecord/Export?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (waterDeviceCode === null)
            throw new Error("The parameter 'waterDeviceCode' cannot be null.");
        else if (waterDeviceCode !== undefined)
            url_ += "waterDeviceCode=" + encodeURIComponent("" + waterDeviceCode) + "&";
        if (waterDeviceModel === null)
            throw new Error("The parameter 'waterDeviceModel' cannot be null.");
        else if (waterDeviceModel !== undefined)
            url_ += "waterDeviceModel=" + encodeURIComponent("" + waterDeviceModel) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport12(_response));
        });
    }

    protected processExport12(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DrugStorageArrearageServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 个人药库借药 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    unpaid(patientId: string , cancelToken?: CancelToken | undefined): Promise<DrugStorageArrearageViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageArrearage/Unpaid/{patientId}";
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUnpaid(_response));
        });
    }

    protected processUnpaid(response: AxiosResponse): Promise<DrugStorageArrearageViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageArrearageViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageArrearageViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageArrearageViewResult>(null as any);
    }

    /**
     * 个人药库借药 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientKey (optional) 患者姓名/别名/首字母/拼音码/五笔码
     * @param itemKey (optional) 项目-分类/名称/简称/商品名/用法/厂家/拼音码/五笔码
     * @return Success
     */
    filter73(filter: string | undefined, patientKey: string | undefined, itemKey: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugStorageArrearageViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageArrearage/Filter?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (itemKey === null)
            throw new Error("The parameter 'itemKey' cannot be null.");
        else if (itemKey !== undefined)
            url_ += "itemKey=" + encodeURIComponent("" + itemKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter73(_response));
        });
    }

    protected processFilter73(response: AxiosResponse): Promise<DrugStorageArrearageViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageArrearageViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageArrearageViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageArrearageViewResult>(null as any);
    }

    /**
     * 患者借药记录 -- 借药统计
     * @param filter (optional) 查询条件
     * @param patientKey (optional) 患者姓名/别名/首字母/拼音码/五笔码
     * @return Success
     */
    summary2(filter: string | undefined, patientKey: string | undefined , cancelToken?: CancelToken | undefined): Promise<ObjectResult> {
        let url_ = this.baseUrl + "/api/DrugStorageArrearage/Summary?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSummary2(_response));
        });
    }

    protected processSummary2(response: AxiosResponse): Promise<ObjectResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ObjectResult.fromJS(resultData200);
            return Promise.resolve<ObjectResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ObjectResult>(null as any);
    }

    /**
     * 个人药库借药 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    drugStorageArrearage(body: DrugStorageArrearageEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageArrearage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrugStorageArrearage(_response));
        });
    }

    protected processDrugStorageArrearage(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 个人药库借药 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    drugStorageArrearage2(id: string, body: DrugStorageArrearageEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageArrearage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrugStorageArrearage2(_response));
        });
    }

    protected processDrugStorageArrearage2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 个人药库借药 -- 根据Id删除数据
     * @return Success
     */
    delete70(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageArrearage/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete70(_response));
        });
    }

    protected processDelete70(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DrugStorageInServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 个人药库入库 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientKey (optional)
     * @param itemKey (optional)
     * @return Success
     */
    filter74(filter: string | undefined, patientKey: string | undefined, itemKey: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugStorageInViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageIn/Filter?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (itemKey === null)
            throw new Error("The parameter 'itemKey' cannot be null.");
        else if (itemKey !== undefined)
            url_ += "itemKey=" + encodeURIComponent("" + itemKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter74(_response));
        });
    }

    protected processFilter74(response: AxiosResponse): Promise<DrugStorageInViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageInViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageInViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageInViewResult>(null as any);
    }

    /**
     * 个人药库库存 - 新增数据
     * @param body (optional)
     * @return Success
     */
    drugStorageIn(body: DrugStorageInEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageIn";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrugStorageIn(_response));
        });
    }

    protected processDrugStorageIn(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class DrugStorageInventoryServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 个人药库库存 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 项目-分类/名称/简称/商品名/用法/厂家/拼音码/五笔码
     * @return Success
     */
    filter75(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugStorageInventoryViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageInventory/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter75(_response));
        });
    }

    protected processFilter75(response: AxiosResponse): Promise<DrugStorageInventoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageInventoryViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageInventoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageInventoryViewResult>(null as any);
    }

    /**
     * 个人药库库存 - 根据条件查询明细
     * @param filter (optional)
     * @param type (optional)
     * @param inventoryId (optional)
     * @return Success
     */
    detail(filter: string | undefined, type: number | undefined, inventoryId: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugStorageDetailViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageInventory/Detail?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (inventoryId === null)
            throw new Error("The parameter 'inventoryId' cannot be null.");
        else if (inventoryId !== undefined)
            url_ += "inventoryId=" + encodeURIComponent("" + inventoryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail(_response));
        });
    }

    protected processDetail(response: AxiosResponse): Promise<DrugStorageDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageDetailViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageDetailViewResult>(null as any);
    }
}

export class DrugStorageOutServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 个人药库出库 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param drugInId 缴费标识
     * @return Success
     */
    drugStorageOutGET(filter: string | undefined, drugInId: string , cancelToken?: CancelToken | undefined): Promise<DrugStorageOutViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageOut/{drugInId}";
        if (drugInId === undefined || drugInId === null)
            throw new Error("The parameter 'drugInId' must be defined.");
        url_ = url_.replace("{drugInId}", encodeURIComponent("" + drugInId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrugStorageOutGET(_response));
        });
    }

    protected processDrugStorageOutGET(response: AxiosResponse): Promise<DrugStorageOutViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageOutViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageOutViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageOutViewResult>(null as any);
    }

    /**
     * 患者扣费记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param patientKey (optional) 患者 - 姓名/别名/首字母/拼音码/五笔码
     * @param drugKey (optional) 项目 - 分类/名称/简称/商品名/用法/厂家/拼音码/五笔码
     * @return Success
     */
    filter76(filter: string | undefined, patientKey: string | undefined, drugKey: string | undefined , cancelToken?: CancelToken | undefined): Promise<DrugStorageOutViewResult> {
        let url_ = this.baseUrl + "/api/DrugStorageOut/Filter?";
        if (patientKey === null)
            throw new Error("The parameter 'patientKey' cannot be null.");
        else if (patientKey !== undefined)
            url_ += "patientKey=" + encodeURIComponent("" + patientKey) + "&";
        if (drugKey === null)
            throw new Error("The parameter 'drugKey' cannot be null.");
        else if (drugKey !== undefined)
            url_ += "drugKey=" + encodeURIComponent("" + drugKey) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter76(_response));
        });
    }

    protected processFilter76(response: AxiosResponse): Promise<DrugStorageOutViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DrugStorageOutViewResult.fromJS(resultData200);
            return Promise.resolve<DrugStorageOutViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DrugStorageOutViewResult>(null as any);
    }

    /**
     * 个人药库出库 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    drugStorageOutPOST(body: DrugStorageOutEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageOut";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrugStorageOutPOST(_response));
        });
    }

    protected processDrugStorageOutPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 个人药库出库 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    drugStorageOutPOST2(id: string, body: DrugStorageOutEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageOut/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDrugStorageOutPOST2(_response));
        });
    }

    protected processDrugStorageOutPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 个人药库出库 -- 根据Id删除数据
     * @return Success
     */
    delete71(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/DrugStorageOut/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete71(_response));
        });
    }

    protected processDelete71(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HfsFilesServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 文件列表 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hfsFilesGET(id: string , cancelToken?: CancelToken | undefined): Promise<HfsFilesResultEntry> {
        let url_ = this.baseUrl + "/api/HfsFiles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHfsFilesGET(_response));
        });
    }

    protected processHfsFilesGET(response: AxiosResponse): Promise<HfsFilesResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HfsFilesResultEntry.fromJS(resultData200);
            return Promise.resolve<HfsFilesResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HfsFilesResultEntry>(null as any);
    }

    /**
     * 文件列表 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hfsFilesPOST(id: string, body: HfsFilesViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HfsFiles/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHfsFilesPOST(_response));
        });
    }

    protected processHfsFilesPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 文件列表 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter77(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HfsFilesResult> {
        let url_ = this.baseUrl + "/api/HfsFiles/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter77(_response));
        });
    }

    protected processFilter77(response: AxiosResponse): Promise<HfsFilesResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HfsFilesResult.fromJS(resultData200);
            return Promise.resolve<HfsFilesResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HfsFilesResult>(null as any);
    }

    /**
     * 文件列表 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hfsFilesPOST2(body: HfsFilesViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HfsFiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHfsFilesPOST2(_response));
        });
    }

    protected processHfsFilesPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 文件列表 -- 根据Id删除数据
     * @return Success
     */
    delete72(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HfsFiles/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete72(_response));
        });
    }

    protected processDelete72(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalEnvMoniterRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 治疗室环境监测采样 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalEnvMoniterRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalEnvMoniterRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalEnvMoniterRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalEnvMoniterRecordGET(_response));
        });
    }

    protected processHospitalEnvMoniterRecordGET(response: AxiosResponse): Promise<HospitalEnvMoniterRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalEnvMoniterRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalEnvMoniterRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalEnvMoniterRecordViewResultEntry>(null as any);
    }

    /**
     * 治疗室环境监测采样 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalEnvMoniterRecordPOST(id: string, body: HospitalEnvMoniterRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalEnvMoniterRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalEnvMoniterRecordPOST(_response));
        });
    }

    protected processHospitalEnvMoniterRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗室环境监测采样 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter78(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalEnvMoniterRecordViewResult> {
        let url_ = this.baseUrl + "/api/HospitalEnvMoniterRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter78(_response));
        });
    }

    protected processFilter78(response: AxiosResponse): Promise<HospitalEnvMoniterRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalEnvMoniterRecordViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalEnvMoniterRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalEnvMoniterRecordViewResult>(null as any);
    }

    /**
     * 治疗室环境监测采样 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalEnvMoniterRecordPOST2(body: HospitalEnvMoniterRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalEnvMoniterRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalEnvMoniterRecordPOST2(_response));
        });
    }

    protected processHospitalEnvMoniterRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗室环境监测采样 -- 根据Id删除数据
     * @return Success
     */
    delete73(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalEnvMoniterRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete73(_response));
        });
    }

    protected processDelete73(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionCultivateFormulateServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 院感培训制定 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionCultivateFormulateGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionCultivateFormulateViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateFormulate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionCultivateFormulateGET(_response));
        });
    }

    protected processHospitalInfectionCultivateFormulateGET(response: AxiosResponse): Promise<HospitalInfectionCultivateFormulateViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionCultivateFormulateViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionCultivateFormulateViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionCultivateFormulateViewResultEntry>(null as any);
    }

    /**
     * 院感培训制定 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionCultivateFormulatePOST(id: string, body: HospitalInfectionCultivateFormulateEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateFormulate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionCultivateFormulatePOST(_response));
        });
    }

    protected processHospitalInfectionCultivateFormulatePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感培训制定 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter79(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionCultivateFormulateViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateFormulate/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter79(_response));
        });
    }

    protected processFilter79(response: AxiosResponse): Promise<HospitalInfectionCultivateFormulateViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionCultivateFormulateViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionCultivateFormulateViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionCultivateFormulateViewResult>(null as any);
    }

    /**
     * 院感培训制定 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionCultivateFormulatePOST2(body: HospitalInfectionCultivateFormulateEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateFormulate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionCultivateFormulatePOST2(_response));
        });
    }

    protected processHospitalInfectionCultivateFormulatePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感培训制定 -- 根据Id删除数据
     * @return Success
     */
    delete74(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateFormulate/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete74(_response));
        });
    }

    protected processDelete74(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 统计
     * @param isStudy (optional)
     * @return Success
     */
    statistics(year: number, isStudy: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionCultivateFormulateStatisticsResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateFormulate/Statistics/{year}?";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        if (isStudy === null)
            throw new Error("The parameter 'isStudy' cannot be null.");
        else if (isStudy !== undefined)
            url_ += "isStudy=" + encodeURIComponent("" + isStudy) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStatistics(_response));
        });
    }

    protected processStatistics(response: AxiosResponse): Promise<HospitalInfectionCultivateFormulateStatisticsResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionCultivateFormulateStatisticsResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionCultivateFormulateStatisticsResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionCultivateFormulateStatisticsResult>(null as any);
    }

    /**
     * 培训记录
     * @return Success
     */
    record(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionCultivateRecordResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateFormulate/Record/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRecord(_response));
        });
    }

    protected processRecord(response: AxiosResponse): Promise<HospitalInfectionCultivateRecordResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionCultivateRecordResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionCultivateRecordResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionCultivateRecordResultEntry>(null as any);
    }
}

export class HospitalInfectionCultivateStudyServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 院感培训学习 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionCultivateStudyGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionCultivateStudyViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateStudy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionCultivateStudyGET(_response));
        });
    }

    protected processHospitalInfectionCultivateStudyGET(response: AxiosResponse): Promise<HospitalInfectionCultivateStudyViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionCultivateStudyViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionCultivateStudyViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionCultivateStudyViewResultEntry>(null as any);
    }

    /**
     * 院感培训学习 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionCultivateStudyPOST(id: string, body: HospitalInfectionCultivateStudyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateStudy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionCultivateStudyPOST(_response));
        });
    }

    protected processHospitalInfectionCultivateStudyPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感培训学习 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter80(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionCultivateStudyViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateStudy/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter80(_response));
        });
    }

    protected processFilter80(response: AxiosResponse): Promise<HospitalInfectionCultivateStudyViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionCultivateStudyViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionCultivateStudyViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionCultivateStudyViewResult>(null as any);
    }

    /**
     * 院感培训学习 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionCultivateStudyPOST2(body: HospitalInfectionCultivateStudyEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateStudy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionCultivateStudyPOST2(_response));
        });
    }

    protected processHospitalInfectionCultivateStudyPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感培训学习 -- 根据Id删除数据
     * @return Success
     */
    delete75(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateStudy/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete75(_response));
        });
    }

    protected processDelete75(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感培训学习
     * @param filter (optional)
     * @return Success
     */
    studyView(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionCultivateFormulateStudyViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateStudy/StudyView";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStudyView(_response));
        });
    }

    protected processStudyView(response: AxiosResponse): Promise<HospitalInfectionCultivateFormulateStudyViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionCultivateFormulateStudyViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionCultivateFormulateStudyViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionCultivateFormulateStudyViewResult>(null as any);
    }

    /**
     * 学习内容
     * @return Success
     */
    studyDetail(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionCultivateFormulateStudyDetailResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateStudy/StudyDetail/{Id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStudyDetail(_response));
        });
    }

    protected processStudyDetail(response: AxiosResponse): Promise<HospitalInfectionCultivateFormulateStudyDetailResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionCultivateFormulateStudyDetailResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionCultivateFormulateStudyDetailResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionCultivateFormulateStudyDetailResultEntry>(null as any);
    }

    /**
     * 标记学习状态
     * @param duration (optional)
     * @return Success
     */
    studied(id: string, duration: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionCultivateStudy/Studied/{Id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{Id}", encodeURIComponent("" + id));
        if (duration === null)
            throw new Error("The parameter 'duration' cannot be null.");
        else if (duration !== undefined)
            url_ += "duration=" + encodeURIComponent("" + duration) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processStudied(_response));
        });
    }

    protected processStudied(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionDialysateServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 透析液检测 -- 查询数据明细
     * @param year (optional)
     * @param date (optional)
     * @return Success
     */
    getDetail(year: number | undefined, date: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionDialysateDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDialysate/GetDetail?";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent(date ? "" + date.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDetail(_response));
        });
    }

    protected processGetDetail(response: AxiosResponse): Promise<HospitalInfectionDialysateDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionDialysateDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionDialysateDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionDialysateDetailViewResultEntry>(null as any);
    }

    /**
     * 透析液检测 -- 查询数据汇总
     * @param filter (optional) 查询条件
     * @return Success
     */
    getList(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionDialysateViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDialysate/GetList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetList(_response));
        });
    }

    protected processGetList(response: AxiosResponse): Promise<HospitalInfectionDialysateViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionDialysateViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionDialysateViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionDialysateViewResult>(null as any);
    }

    /**
     * 透析液检测 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionDialysate(body: HospitalInfectionDialysateEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDialysate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionDialysate(_response));
        });
    }

    protected processHospitalInfectionDialysate(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析液检测 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionDialysate2(id: string, body: HospitalInfectionDialysateEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDialysate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionDialysate2(_response));
        });
    }

    protected processHospitalInfectionDialysate2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析液检测 -- 根据Id删除数据
     * @return Success
     */
    delete76(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDialysate/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete76(_response));
        });
    }

    protected processDelete76(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 透析液检测 -- 根据年份删除数据
     * @return Success
     */
    deleteByYear(year: number , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDialysate/Delete/DeleteByYear/{year}";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeleteByYear(_response));
        });
    }

    protected processDeleteByYear(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionDisinfectantResidueDetectionServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 消毒液残留量检测 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionDisinfectantResidueDetectionGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionDisinfectantResidueDetectionViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDisinfectantResidueDetection/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionDisinfectantResidueDetectionGET(_response));
        });
    }

    protected processHospitalInfectionDisinfectantResidueDetectionGET(response: AxiosResponse): Promise<HospitalInfectionDisinfectantResidueDetectionViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionDisinfectantResidueDetectionViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionDisinfectantResidueDetectionViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionDisinfectantResidueDetectionViewResultEntry>(null as any);
    }

    /**
     * 消毒液残留量检测 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionDisinfectantResidueDetectionPOST(id: string, body: HospitalInfectionDisinfectantResidueDetectionEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDisinfectantResidueDetection/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionDisinfectantResidueDetectionPOST(_response));
        });
    }

    protected processHospitalInfectionDisinfectantResidueDetectionPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消毒液残留量检测 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter81(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionDisinfectantResidueDetectionViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDisinfectantResidueDetection/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter81(_response));
        });
    }

    protected processFilter81(response: AxiosResponse): Promise<HospitalInfectionDisinfectantResidueDetectionViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionDisinfectantResidueDetectionViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionDisinfectantResidueDetectionViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionDisinfectantResidueDetectionViewResult>(null as any);
    }

    /**
     * 消毒液残留量检测 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export13(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDisinfectantResidueDetection/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport13(_response));
        });
    }

    protected processExport13(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消毒液残留量检测 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionDisinfectantResidueDetectionPOST2(body: HospitalInfectionDisinfectantResidueDetectionEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDisinfectantResidueDetection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionDisinfectantResidueDetectionPOST2(_response));
        });
    }

    protected processHospitalInfectionDisinfectantResidueDetectionPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消毒液残留量检测 -- 根据Id删除数据
     * @return Success
     */
    delete77(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionDisinfectantResidueDetection/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete77(_response));
        });
    }

    protected processDelete77(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionElectrolyteServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 电解质检测 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionElectrolyteGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionElectrolyteViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionElectrolyte/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionElectrolyteGET(_response));
        });
    }

    protected processHospitalInfectionElectrolyteGET(response: AxiosResponse): Promise<HospitalInfectionElectrolyteViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionElectrolyteViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionElectrolyteViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionElectrolyteViewResultEntry>(null as any);
    }

    /**
     * 电解质检测 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionElectrolytePOST(id: string, body: HospitalInfectionElectrolyteEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionElectrolyte/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionElectrolytePOST(_response));
        });
    }

    protected processHospitalInfectionElectrolytePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 电解质检测 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter82(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionElectrolyteViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionElectrolyte/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter82(_response));
        });
    }

    protected processFilter82(response: AxiosResponse): Promise<HospitalInfectionElectrolyteViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionElectrolyteViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionElectrolyteViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionElectrolyteViewResult>(null as any);
    }

    /**
     * 电解质检测 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export14(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionElectrolyte/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport14(_response));
        });
    }

    protected processExport14(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 电解质检测 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionElectrolytePOST2(body: HospitalInfectionElectrolyteEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionElectrolyte";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionElectrolytePOST2(_response));
        });
    }

    protected processHospitalInfectionElectrolytePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 电解质检测 -- 根据Id删除数据
     * @return Success
     */
    delete78(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionElectrolyte/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete78(_response));
        });
    }

    protected processDelete78(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionGermicultureServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 细菌培养 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionGermicultureGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionGermicultureViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermiculture/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionGermicultureGET(_response));
        });
    }

    protected processHospitalInfectionGermicultureGET(response: AxiosResponse): Promise<HospitalInfectionGermicultureViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionGermicultureViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionGermicultureViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionGermicultureViewResultEntry>(null as any);
    }

    /**
     * 细菌培养 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionGermiculturePOST(id: string, body: HospitalInfectionGermicultureEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermiculture/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionGermiculturePOST(_response));
        });
    }

    protected processHospitalInfectionGermiculturePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 细菌培养 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter83(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionGermicultureViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermiculture/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter83(_response));
        });
    }

    protected processFilter83(response: AxiosResponse): Promise<HospitalInfectionGermicultureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionGermicultureViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionGermicultureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionGermicultureViewResult>(null as any);
    }

    /**
     * 细菌培养 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export15(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermiculture/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport15(_response));
        });
    }

    protected processExport15(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 细菌培养 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionGermiculturePOST2(body: HospitalInfectionGermicultureEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermiculture";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionGermiculturePOST2(_response));
        });
    }

    protected processHospitalInfectionGermiculturePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 细菌培养 -- 根据Id删除数据
     * @return Success
     */
    delete79(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermiculture/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete79(_response));
        });
    }

    protected processDelete79(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionGermicultureSurfaceServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 物体表面细菌培养 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionGermicultureSurfaceGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionGermicultureSurfaceViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionGermicultureSurfaceGET(_response));
        });
    }

    protected processHospitalInfectionGermicultureSurfaceGET(response: AxiosResponse): Promise<HospitalInfectionGermicultureSurfaceViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionGermicultureSurfaceViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionGermicultureSurfaceViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionGermicultureSurfaceViewResultEntry>(null as any);
    }

    /**
     * 物体表面细菌培养 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionGermicultureSurfacePOST(id: string, body: HospitalInfectionGermicultureSurfaceEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionGermicultureSurfacePOST(_response));
        });
    }

    protected processHospitalInfectionGermicultureSurfacePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 物体表面细菌培养 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter84(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionGermicultureSurfaceViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter84(_response));
        });
    }

    protected processFilter84(response: AxiosResponse): Promise<HospitalInfectionGermicultureSurfaceViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionGermicultureSurfaceViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionGermicultureSurfaceViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionGermicultureSurfaceViewResult>(null as any);
    }

    /**
     * 物体表面细菌培养 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export16(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport16(_response));
        });
    }

    protected processExport16(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 物体表面细菌培养 -- 根据条件查询数据
     * @param year 年份(2019)
     * @return Success
     */
    summary3(year: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionGermicultureSurfaceSummaryViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface/Summary/{year}";
        if (year === undefined || year === null)
            throw new Error("The parameter 'year' must be defined.");
        url_ = url_.replace("{year}", encodeURIComponent("" + year));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSummary3(_response));
        });
    }

    protected processSummary3(response: AxiosResponse): Promise<HospitalInfectionGermicultureSurfaceSummaryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionGermicultureSurfaceSummaryViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionGermicultureSurfaceSummaryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionGermicultureSurfaceSummaryViewResult>(null as any);
    }

    /**
     * 物体表面细菌培养 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionGermicultureSurfacePOST2(body: HospitalInfectionGermicultureSurfaceEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionGermicultureSurfacePOST2(_response));
        });
    }

    protected processHospitalInfectionGermicultureSurfacePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 物体表面细菌培养 -- 根据Id删除数据
     * @return Success
     */
    delete80(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionGermicultureSurface/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete80(_response));
        });
    }

    protected processDelete80(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionKreotoxinServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 内毒素检测 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionKreotoxinGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionKreotoxinViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionKreotoxin/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionKreotoxinGET(_response));
        });
    }

    protected processHospitalInfectionKreotoxinGET(response: AxiosResponse): Promise<HospitalInfectionKreotoxinViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionKreotoxinViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionKreotoxinViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionKreotoxinViewResultEntry>(null as any);
    }

    /**
     * 内毒素检测 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionKreotoxinPOST(id: string, body: HospitalInfectionKreotoxinEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionKreotoxin/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionKreotoxinPOST(_response));
        });
    }

    protected processHospitalInfectionKreotoxinPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 内毒素检测 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter85(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionKreotoxinViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionKreotoxin/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter85(_response));
        });
    }

    protected processFilter85(response: AxiosResponse): Promise<HospitalInfectionKreotoxinViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionKreotoxinViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionKreotoxinViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionKreotoxinViewResult>(null as any);
    }

    /**
     * 内毒素检测 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export17(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionKreotoxin/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport17(_response));
        });
    }

    protected processExport17(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 内毒素检测 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionKreotoxinPOST2(body: HospitalInfectionKreotoxinEdit | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionKreotoxin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionKreotoxinPOST2(_response));
        });
    }

    protected processHospitalInfectionKreotoxinPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 内毒素检测 -- 根据Id删除数据
     * @return Success
     */
    delete81(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionKreotoxin/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete81(_response));
        });
    }

    protected processDelete81(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 院感评估记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionRecordGET(_response));
        });
    }

    protected processHospitalInfectionRecordGET(response: AxiosResponse): Promise<HospitalInfectionRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionRecordViewResultEntry>(null as any);
    }

    /**
     * 院感评估记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionRecordPOST(id: string, body: HospitalInfectionRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionRecordPOST(_response));
        });
    }

    protected processHospitalInfectionRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感评估记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter86(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionRecordViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter86(_response));
        });
    }

    protected processFilter86(response: AxiosResponse): Promise<HospitalInfectionRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionRecordViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionRecordViewResult>(null as any);
    }

    /**
     * 院感评估记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionRecordPOST2(body: HospitalInfectionRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionRecordPOST2(_response));
        });
    }

    protected processHospitalInfectionRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感评估记录 -- 根据Id删除数据
     * @return Success
     */
    delete82(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete82(_response));
        });
    }

    protected processDelete82(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionRegimeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 院感制度 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionRegimeGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionRegimeViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRegime/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionRegimeGET(_response));
        });
    }

    protected processHospitalInfectionRegimeGET(response: AxiosResponse): Promise<HospitalInfectionRegimeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionRegimeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionRegimeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionRegimeViewResultEntry>(null as any);
    }

    /**
     * 院感制度 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionRegimePOST(id: string, body: HospitalInfectionRegimeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRegime/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionRegimePOST(_response));
        });
    }

    protected processHospitalInfectionRegimePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感制度 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter87(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionRegimeViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRegime/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter87(_response));
        });
    }

    protected processFilter87(response: AxiosResponse): Promise<HospitalInfectionRegimeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionRegimeViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionRegimeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionRegimeViewResult>(null as any);
    }

    /**
     * 院感制度 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionRegimePOST2(body: HospitalInfectionRegimeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRegime";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionRegimePOST2(_response));
        });
    }

    protected processHospitalInfectionRegimePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 院感制度 -- 根据Id删除数据
     * @return Success
     */
    delete83(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionRegime/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete83(_response));
        });
    }

    protected processDelete83(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionWatertreatmentDisinfectionServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 水处理消毒 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionWatertreatmentDisinfectionGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionWatertreatmentDisinfectionViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentDisinfection/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionWatertreatmentDisinfectionGET(_response));
        });
    }

    protected processHospitalInfectionWatertreatmentDisinfectionGET(response: AxiosResponse): Promise<HospitalInfectionWatertreatmentDisinfectionViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionWatertreatmentDisinfectionViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionWatertreatmentDisinfectionViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionWatertreatmentDisinfectionViewResultEntry>(null as any);
    }

    /**
     * 水处理消毒 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionWatertreatmentDisinfectionPOST(id: string, body: HospitalInfectionWatertreatmentDisinfectionBase | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentDisinfection/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionWatertreatmentDisinfectionPOST(_response));
        });
    }

    protected processHospitalInfectionWatertreatmentDisinfectionPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理消毒 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter88(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionWatertreatmentDisinfectionViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentDisinfection/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter88(_response));
        });
    }

    protected processFilter88(response: AxiosResponse): Promise<HospitalInfectionWatertreatmentDisinfectionViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionWatertreatmentDisinfectionViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionWatertreatmentDisinfectionViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionWatertreatmentDisinfectionViewResult>(null as any);
    }

    /**
     * 水处理消毒 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export18(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentDisinfection/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport18(_response));
        });
    }

    protected processExport18(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理消毒 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionWatertreatmentDisinfectionPOST2(body: HospitalInfectionWatertreatmentDisinfectionBase | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentDisinfection";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionWatertreatmentDisinfectionPOST2(_response));
        });
    }

    protected processHospitalInfectionWatertreatmentDisinfectionPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理消毒 -- 根据Id删除数据
     * @return Success
     */
    delete84(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentDisinfection/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete84(_response));
        });
    }

    protected processDelete84(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class HospitalInfectionWatertreatmentMaintenanceServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 水处理维护 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    hospitalInfectionWatertreatmentMaintenanceGET(id: string , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionWatertreatmentMaintenanceViewResultEntry> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentMaintenance/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionWatertreatmentMaintenanceGET(_response));
        });
    }

    protected processHospitalInfectionWatertreatmentMaintenanceGET(response: AxiosResponse): Promise<HospitalInfectionWatertreatmentMaintenanceViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionWatertreatmentMaintenanceViewResultEntry.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionWatertreatmentMaintenanceViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionWatertreatmentMaintenanceViewResultEntry>(null as any);
    }

    /**
     * 水处理维护 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionWatertreatmentMaintenancePOST(id: string, body: HospitalInfectionWatertreatmentMaintenanceViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentMaintenance/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionWatertreatmentMaintenancePOST(_response));
        });
    }

    protected processHospitalInfectionWatertreatmentMaintenancePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理维护 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter89(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalInfectionWatertreatmentMaintenanceViewResult> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentMaintenance/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter89(_response));
        });
    }

    protected processFilter89(response: AxiosResponse): Promise<HospitalInfectionWatertreatmentMaintenanceViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalInfectionWatertreatmentMaintenanceViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalInfectionWatertreatmentMaintenanceViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalInfectionWatertreatmentMaintenanceViewResult>(null as any);
    }

    /**
     * 水处理维护 -- 根据条件查询数据导出
     * @param filter (optional) 查询条件
     * @return Success
     */
    export19(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentMaintenance/Filter/Export";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExport19(_response));
        });
    }

    protected processExport19(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理维护 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    hospitalInfectionWatertreatmentMaintenancePOST2(body: HospitalInfectionWatertreatmentMaintenanceViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentMaintenance";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHospitalInfectionWatertreatmentMaintenancePOST2(_response));
        });
    }

    protected processHospitalInfectionWatertreatmentMaintenancePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 水处理维护 -- 根据Id删除数据
     * @return Success
     */
    delete85(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/HospitalInfectionWatertreatmentMaintenance/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete85(_response));
        });
    }

    protected processDelete85(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class IndexServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 首页 - 医生
     * @return Success
     */
    doctor(  cancelToken?: CancelToken | undefined): Promise<IndexDoctorViewResultEntry> {
        let url_ = this.baseUrl + "/api/Index/Doctor";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDoctor(_response));
        });
    }

    protected processDoctor(response: AxiosResponse): Promise<IndexDoctorViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IndexDoctorViewResultEntry.fromJS(resultData200);
            return Promise.resolve<IndexDoctorViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IndexDoctorViewResultEntry>(null as any);
    }

    /**
     * 医嘱
     * @param filter (optional) 查询条件
     * @param key (optional) 名称/拼音码/五笔码
     * @return Success
     */
    cureDa2(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureDaViewResult> {
        let url_ = this.baseUrl + "/api/Index/CureDa?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCureDa2(_response));
        });
    }

    protected processCureDa2(response: AxiosResponse): Promise<CureDaViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureDaViewResult.fromJS(resultData200);
            return Promise.resolve<CureDaViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureDaViewResult>(null as any);
    }

    /**
     * 排班 -- 根据日期查询
     * @param date (optional) 时间段(e.g. 2018-11-19 ~ 2018-11-25)
     * @return Success
     */
    schedule(date: string | undefined , cancelToken?: CancelToken | undefined): Promise<IndexScheduleViewResultEntry> {
        let url_ = this.baseUrl + "/api/Index/Schedule?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSchedule(_response));
        });
    }

    protected processSchedule(response: AxiosResponse): Promise<IndexScheduleViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IndexScheduleViewResultEntry.fromJS(resultData200);
            return Promise.resolve<IndexScheduleViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IndexScheduleViewResultEntry>(null as any);
    }
}

export class IotTreatmentDataServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 治疗数据 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    iotTreatmentDataGET(id: string , cancelToken?: CancelToken | undefined): Promise<IotTreatmentDataResultEntry> {
        let url_ = this.baseUrl + "/api/IotTreatmentData/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIotTreatmentDataGET(_response));
        });
    }

    protected processIotTreatmentDataGET(response: AxiosResponse): Promise<IotTreatmentDataResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IotTreatmentDataResultEntry.fromJS(resultData200);
            return Promise.resolve<IotTreatmentDataResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IotTreatmentDataResultEntry>(null as any);
    }

    /**
     * 治疗数据 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    iotTreatmentDataPOST(id: string, body: IotTreatmentDataViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/IotTreatmentData/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIotTreatmentDataPOST(_response));
        });
    }

    protected processIotTreatmentDataPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗数据 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter90(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<IotTreatmentDataResult> {
        let url_ = this.baseUrl + "/api/IotTreatmentData/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter90(_response));
        });
    }

    protected processFilter90(response: AxiosResponse): Promise<IotTreatmentDataResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = IotTreatmentDataResult.fromJS(resultData200);
            return Promise.resolve<IotTreatmentDataResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IotTreatmentDataResult>(null as any);
    }

    /**
     * 治疗数据 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    iotTreatmentDataPOST2(body: IotTreatmentDataViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/IotTreatmentData";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIotTreatmentDataPOST2(_response));
        });
    }

    protected processIotTreatmentDataPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 治疗数据 -- 根据Id删除数据
     * @return Success
     */
    delete86(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/IotTreatmentData/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete86(_response));
        });
    }

    protected processDelete86(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class LisStatConfigServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 检验统计配置 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    lisStatConfigGET(id: string , cancelToken?: CancelToken | undefined): Promise<LisStatConfigViewResultEntry> {
        let url_ = this.baseUrl + "/api/LisStatConfig/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLisStatConfigGET(_response));
        });
    }

    protected processLisStatConfigGET(response: AxiosResponse): Promise<LisStatConfigViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LisStatConfigViewResultEntry.fromJS(resultData200);
            return Promise.resolve<LisStatConfigViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LisStatConfigViewResultEntry>(null as any);
    }

    /**
     * 检验统计配置 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    lisStatConfigPOST(id: string, body: LisStatConfigEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/LisStatConfig/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLisStatConfigPOST(_response));
        });
    }

    protected processLisStatConfigPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验统计配置 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter91(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<LisStatConfigViewResult> {
        let url_ = this.baseUrl + "/api/LisStatConfig/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter91(_response));
        });
    }

    protected processFilter91(response: AxiosResponse): Promise<LisStatConfigViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LisStatConfigViewResult.fromJS(resultData200);
            return Promise.resolve<LisStatConfigViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LisStatConfigViewResult>(null as any);
    }

    /**
     * 检验统计配置 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    lisStatConfigPOST2(body: LisStatConfigEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/LisStatConfig";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLisStatConfigPOST2(_response));
        });
    }

    protected processLisStatConfigPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验统计配置 -- 根据Id删除数据
     * @return Success
     */
    delete87(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/LisStatConfig/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete87(_response));
        });
    }

    protected processDelete87(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class MapFormServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 自定义表单字段映射 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    mapFormGET(id: string , cancelToken?: CancelToken | undefined): Promise<MapFormResultEntry> {
        let url_ = this.baseUrl + "/api/MapForm/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapFormGET(_response));
        });
    }

    protected processMapFormGET(response: AxiosResponse): Promise<MapFormResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapFormResultEntry.fromJS(resultData200);
            return Promise.resolve<MapFormResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapFormResultEntry>(null as any);
    }

    /**
     * 自定义表单字段映射 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    mapFormPOST(id: string, body: MapFormViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapForm/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapFormPOST(_response));
        });
    }

    protected processMapFormPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 自定义表单字段映射 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter92(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapFormResult> {
        let url_ = this.baseUrl + "/api/MapForm/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter92(_response));
        });
    }

    protected processFilter92(response: AxiosResponse): Promise<MapFormResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapFormResult.fromJS(resultData200);
            return Promise.resolve<MapFormResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapFormResult>(null as any);
    }

    /**
     * 自定义表单字段映射 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    mapFormPOST2(body: MapFormViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapForm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapFormPOST2(_response));
        });
    }

    protected processMapFormPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 自定义表单字段映射 -- 根据Id删除数据
     * @return Success
     */
    delete88(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapForm/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete88(_response));
        });
    }

    protected processDelete88(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class MapLisItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 检验报告项 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    mapLisItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<MapLisItemViewResultEntry> {
        let url_ = this.baseUrl + "/api/MapLisItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemGET(_response));
        });
    }

    protected processMapLisItemGET(response: AxiosResponse): Promise<MapLisItemViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemViewResultEntry.fromJS(resultData200);
            return Promise.resolve<MapLisItemViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemViewResultEntry>(null as any);
    }

    /**
     * 检验报告项 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    mapLisItemPOST(id: string, body: MapLisItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemPOST(_response));
        });
    }

    protected processMapLisItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告项 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 本系统编码
     * @return Success
     */
    filter93(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItem/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter93(_response));
        });
    }

    protected processFilter93(response: AxiosResponse): Promise<MapLisItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemViewResult>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 查询可以用于化验类统计的数据
     * @param mapLisTypeId (optional)
     * @return Success
     */
    forReport(mapLisTypeId: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItem/ForReport?";
        if (mapLisTypeId === null)
            throw new Error("The parameter 'mapLisTypeId' cannot be null.");
        else if (mapLisTypeId !== undefined)
            url_ += "mapLisTypeId=" + encodeURIComponent("" + mapLisTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processForReport(_response));
        });
    }

    protected processForReport(response: AxiosResponse): Promise<MapLisItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemViewResult>(null as any);
    }

    /**
     * 检验报告项 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    mapLisItemPOST2(body: MapLisItemEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemPOST2(_response));
        });
    }

    protected processMapLisItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告项 -- 新增数据
     * @param mapLisTypeId 检验分类标识
     * @param body (optional) iHDIS检验项明细标识
     * @return Success
     */
    batch5(mapLisTypeId: string, body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItem/Batch/{mapLisTypeId}";
        if (mapLisTypeId === undefined || mapLisTypeId === null)
            throw new Error("The parameter 'mapLisTypeId' must be defined.");
        url_ = url_.replace("{mapLisTypeId}", encodeURIComponent("" + mapLisTypeId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch5(_response));
        });
    }

    protected processBatch5(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告项 -- 根据Id删除数据
     * @return Success
     */
    delete89(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete89(_response));
        });
    }

    protected processDelete89(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class MapLisItemDeployServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Lis检验报告项配置  -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    mapLisItemDeployGET(id: string , cancelToken?: CancelToken | undefined): Promise<MapLisItemDeployViewResultEntry> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemDeployGET(_response));
        });
    }

    protected processMapLisItemDeployGET(response: AxiosResponse): Promise<MapLisItemDeployViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemDeployViewResultEntry.fromJS(resultData200);
            return Promise.resolve<MapLisItemDeployViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemDeployViewResultEntry>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 更新数据
     * @param body (optional)
     * @return Success
     */
    mapLisItemDeployPOST(id: string, body: MapLisItemDeployEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemDeployPOST(_response));
        });
    }

    protected processMapLisItemDeployPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter94(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemDeployViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter94(_response));
        });
    }

    protected processFilter94(response: AxiosResponse): Promise<MapLisItemDeployViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemDeployViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemDeployViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemDeployViewResult>(null as any);
    }

    /**
     * 通过关键字查询支持：Name/CodeLis
     * @param filter (optional) 查询条件
     * @param mapLisTypeId (optional)
     * @param key (optional) Name/CodeLis
     * @return Success
     */
    getByKey(filter: string | undefined, mapLisTypeId: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemDeployViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/GetByKey?";
        if (mapLisTypeId === null)
            throw new Error("The parameter 'mapLisTypeId' cannot be null.");
        else if (mapLisTypeId !== undefined)
            url_ += "mapLisTypeId=" + encodeURIComponent("" + mapLisTypeId) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByKey(_response));
        });
    }

    protected processGetByKey(response: AxiosResponse): Promise<MapLisItemDeployViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemDeployViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemDeployViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemDeployViewResult>(null as any);
    }

    /**
     * 是否匹配
     * @param isMatched (optional) 查询条件
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    isMatched(isMatched: number | undefined, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemDeployViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/IsMatched?";
        if (isMatched === null)
            throw new Error("The parameter 'isMatched' cannot be null.");
        else if (isMatched !== undefined)
            url_ += "isMatched=" + encodeURIComponent("" + isMatched) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIsMatched(_response));
        });
    }

    protected processIsMatched(response: AxiosResponse): Promise<MapLisItemDeployViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemDeployViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemDeployViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemDeployViewResult>(null as any);
    }

    /**
     * 已经匹配列表
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    hasMatchedList(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapListMatchedResult> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/HasMatchedList?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHasMatchedList(_response));
        });
    }

    protected processHasMatchedList(response: AxiosResponse): Promise<MapListMatchedResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapListMatchedResult.fromJS(resultData200);
            return Promise.resolve<MapListMatchedResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapListMatchedResult>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 新增数据
     * @param body (optional)
     * @return Success
     */
    mapLisItemDeployPOST2(body: MapLisItemDeployEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemDeployPOST2(_response));
        });
    }

    protected processMapLisItemDeployPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 匹配检验项
     * @param mapLisItemIhdisId (optional) 本地检验报告项配置标识
     * @param isProcess (optional) 支持应用到历史检验数据
     * @param body (optional) Lis检验报告项配置标识
     * @return Success
     */
    match(mapLisItemIhdisId: string | undefined, isProcess: number | undefined, body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/Match?";
        if (mapLisItemIhdisId === null)
            throw new Error("The parameter 'mapLisItemIhdisId' cannot be null.");
        else if (mapLisItemIhdisId !== undefined)
            url_ += "mapLisItemIhdisId=" + encodeURIComponent("" + mapLisItemIhdisId) + "&";
        if (isProcess === null)
            throw new Error("The parameter 'isProcess' cannot be null.");
        else if (isProcess !== undefined)
            url_ += "isProcess=" + encodeURIComponent("" + isProcess) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMatch(_response));
        });
    }

    protected processMatch(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 取消匹配检验项
     * @param mapLisItemIhdisId (optional) 本地检验报告项配置标识
     * @param mapLisItemDeployId (optional) Lis检验报告项配置标识
     * @param deleteOld (optional) 是否删除Lis检验项已经生成的检验项提醒数据（0-不删除 1-删除）
     * @return Success
     */
    cancel3(mapLisItemIhdisId: string | undefined, mapLisItemDeployId: string | undefined, deleteOld: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/Match/Cancel?";
        if (mapLisItemIhdisId === null)
            throw new Error("The parameter 'mapLisItemIhdisId' cannot be null.");
        else if (mapLisItemIhdisId !== undefined)
            url_ += "mapLisItemIhdisId=" + encodeURIComponent("" + mapLisItemIhdisId) + "&";
        if (mapLisItemDeployId === null)
            throw new Error("The parameter 'mapLisItemDeployId' cannot be null.");
        else if (mapLisItemDeployId !== undefined)
            url_ += "mapLisItemDeployId=" + encodeURIComponent("" + mapLisItemDeployId) + "&";
        if (deleteOld === null)
            throw new Error("The parameter 'deleteOld' cannot be null.");
        else if (deleteOld !== undefined)
            url_ += "deleteOld=" + encodeURIComponent("" + deleteOld) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCancel3(_response));
        });
    }

    protected processCancel3(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 自动匹配检验项
     * @return Success
     */
    auto(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/Match/Auto";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAuto(_response));
        });
    }

    protected processAuto(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * Lis检验报告项配置  -- 根据Id删除数据
     * @return Success
     */
    delete90(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemDeploy/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete90(_response));
        });
    }

    protected processDelete90(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class MapLisItemIhdisServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * iHDIS检验项明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    mapLisItemIhdisGET(id: string , cancelToken?: CancelToken | undefined): Promise<MapLisItemIhdisViewResultEntry> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemIhdisGET(_response));
        });
    }

    protected processMapLisItemIhdisGET(response: AxiosResponse): Promise<MapLisItemIhdisViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemIhdisViewResultEntry.fromJS(resultData200);
            return Promise.resolve<MapLisItemIhdisViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemIhdisViewResultEntry>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    mapLisItemIhdisPOST(id: string, body: MapLisItemIhdisEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemIhdisPOST(_response));
        });
    }

    protected processMapLisItemIhdisPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter95(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemIhdisViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter95(_response));
        });
    }

    protected processFilter95(response: AxiosResponse): Promise<MapLisItemIhdisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemIhdisViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemIhdisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemIhdisViewResult>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 通过关键字查询支持：名称:Name 编码:CodeI
     * @param filter (optional) 查询条件
     * @param mapLisTypeId (optional) 检验项分类ID，如果填写，查询的结果将过滤该分类已经存在的子项
     * @param key (optional) 名称:Name 编码:CodeI
     * @return Success
     */
    getByKey2(filter: string | undefined, mapLisTypeId: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemIhdisViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/GetByKey?";
        if (mapLisTypeId === null)
            throw new Error("The parameter 'mapLisTypeId' cannot be null.");
        else if (mapLisTypeId !== undefined)
            url_ += "mapLisTypeId=" + encodeURIComponent("" + mapLisTypeId) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByKey2(_response));
        });
    }

    protected processGetByKey2(response: AxiosResponse): Promise<MapLisItemIhdisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemIhdisViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemIhdisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemIhdisViewResult>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 获取常用检验项
     * @return Success
     */
    getCommonItems(  cancelToken?: CancelToken | undefined): Promise<MapLisItemIhdisViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/GetCommonItems";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCommonItems(_response));
        });
    }

    protected processGetCommonItems(response: AxiosResponse): Promise<MapLisItemIhdisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemIhdisViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemIhdisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemIhdisViewResult>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 是否匹配
     * @param isMatched (optional) 查询条件:已经匹配:1;未匹配:2
     * @param filter (optional)
     * @param key (optional)
     * @return Success
     */
    isMatched2(isMatched: number | undefined, filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisItemIhdisViewResult> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/IsMatched?";
        if (isMatched === null)
            throw new Error("The parameter 'isMatched' cannot be null.");
        else if (isMatched !== undefined)
            url_ += "isMatched=" + encodeURIComponent("" + isMatched) + "&";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIsMatched2(_response));
        });
    }

    protected processIsMatched2(response: AxiosResponse): Promise<MapLisItemIhdisViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisItemIhdisViewResult.fromJS(resultData200);
            return Promise.resolve<MapLisItemIhdisViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisItemIhdisViewResult>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    mapLisItemIhdisPOST2(body: MapLisItemIhdisEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisItemIhdisPOST2(_response));
        });
    }

    protected processMapLisItemIhdisPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * iHDIS检验项明细 -- 根据Id删除数据
     * @return Success
     */
    delete91(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisItemIhdis/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete91(_response));
        });
    }

    protected processDelete91(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class MapLisTypeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 检验报告分类 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    mapLisTypeGET(id: string , cancelToken?: CancelToken | undefined): Promise<MapLisTypeResultEntry> {
        let url_ = this.baseUrl + "/api/MapLisType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisTypeGET(_response));
        });
    }

    protected processMapLisTypeGET(response: AxiosResponse): Promise<MapLisTypeResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisTypeResultEntry.fromJS(resultData200);
            return Promise.resolve<MapLisTypeResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisTypeResultEntry>(null as any);
    }

    /**
     * 检验报告分类 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    mapLisTypePOST(id: string, body: MapLisTypeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisTypePOST(_response));
        });
    }

    protected processMapLisTypePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告分类 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter96(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisTypeResult> {
        let url_ = this.baseUrl + "/api/MapLisType/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter96(_response));
        });
    }

    protected processFilter96(response: AxiosResponse): Promise<MapLisTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisTypeResult.fromJS(resultData200);
            return Promise.resolve<MapLisTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisTypeResult>(null as any);
    }

    /**
     * 通过关键字查询支持：名称:Name
     * @param filter (optional) 查询条件
     * @param key (optional) 名称:Name
     * @return Success
     */
    getByKey3(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<MapLisTypeResult> {
        let url_ = this.baseUrl + "/api/MapLisType/GetByKey?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetByKey3(_response));
        });
    }

    protected processGetByKey3(response: AxiosResponse): Promise<MapLisTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisTypeResult.fromJS(resultData200);
            return Promise.resolve<MapLisTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisTypeResult>(null as any);
    }

    /**
     * 检验报告分类 -- 查询可以用于化验类统计的数据
     * @return Success
     */
    forReport2(  cancelToken?: CancelToken | undefined): Promise<MapLisTypeResult> {
        let url_ = this.baseUrl + "/api/MapLisType/ForReport";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processForReport2(_response));
        });
    }

    protected processForReport2(response: AxiosResponse): Promise<MapLisTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MapLisTypeResult.fromJS(resultData200);
            return Promise.resolve<MapLisTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MapLisTypeResult>(null as any);
    }

    /**
     * 检验报告分类 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    mapLisTypePOST2(body: MapLisTypeViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMapLisTypePOST2(_response));
        });
    }

    protected processMapLisTypePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 检验报告分类 -- 根据Id删除数据
     * @return Success
     */
    delete92(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/MapLisType/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete92(_response));
        });
    }

    protected processDelete92(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class OtherServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 对外接口 -- 院感科血透接口(血液病人透析记录)
     * @param dateStart (optional) 透析日期(起始时间)，格式：yyyy-MM-dd
     * @param dateEnd (optional) 透析日期(结束时间)，格式：yyyy-MM-dd
     * @return Success
     */
    cure(dateStart: string | undefined, dateEnd: string | undefined , cancelToken?: CancelToken | undefined): Promise<HospitalSenseCureViewResult> {
        let url_ = this.baseUrl + "/api/Other/HospitalSense/Cure?";
        if (dateStart === null)
            throw new Error("The parameter 'dateStart' cannot be null.");
        else if (dateStart !== undefined)
            url_ += "dateStart=" + encodeURIComponent("" + dateStart) + "&";
        if (dateEnd === null)
            throw new Error("The parameter 'dateEnd' cannot be null.");
        else if (dateEnd !== undefined)
            url_ += "dateEnd=" + encodeURIComponent("" + dateEnd) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCure(_response));
        });
    }

    protected processCure(response: AxiosResponse): Promise<HospitalSenseCureViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalSenseCureViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalSenseCureViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalSenseCureViewResult>(null as any);
    }

    /**
     * 对外接口 -- 院感科血透接口(血液病人登记表)
     * @return Success
     */
    patient2(  cancelToken?: CancelToken | undefined): Promise<HospitalSensePatientViewResult> {
        let url_ = this.baseUrl + "/api/Other/HospitalSense/Patient";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient2(_response));
        });
    }

    protected processPatient2(response: AxiosResponse): Promise<HospitalSensePatientViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HospitalSensePatientViewResult.fromJS(resultData200);
            return Promise.resolve<HospitalSensePatientViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalSensePatientViewResult>(null as any);
    }

    /**
     * 对外接口 -- 院感科血透接口(血液病人透析记录)
     * @param dateStart (optional) 透析日期(起始时间)，格式：yyyy-MM-dd
     * @param dateEnd (optional) 透析日期(结束时间)，格式：yyyy-MM-dd
     * @return Success
     */
    cure2(dateStart: string | undefined, dateEnd: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatBloodInforBloodViewResult> {
        let url_ = this.baseUrl + "/api/Other/HospitalSense/XingTai/Cure?";
        if (dateStart === null)
            throw new Error("The parameter 'dateStart' cannot be null.");
        else if (dateStart !== undefined)
            url_ += "dateStart=" + encodeURIComponent("" + dateStart) + "&";
        if (dateEnd === null)
            throw new Error("The parameter 'dateEnd' cannot be null.");
        else if (dateEnd !== undefined)
            url_ += "dateEnd=" + encodeURIComponent("" + dateEnd) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCure2(_response));
        });
    }

    protected processCure2(response: AxiosResponse): Promise<PatBloodInforBloodViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatBloodInforBloodViewResult.fromJS(resultData200);
            return Promise.resolve<PatBloodInforBloodViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatBloodInforBloodViewResult>(null as any);
    }

    /**
     * 对外接口 -- 院感科血透接口(血液病人登记表)
     * @return Success
     */
    patient3(  cancelToken?: CancelToken | undefined): Promise<PatInforBloodViewResult> {
        let url_ = this.baseUrl + "/api/Other/HospitalSense/XingTai/Patient";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatient3(_response));
        });
    }

    protected processPatient3(response: AxiosResponse): Promise<PatInforBloodViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatInforBloodViewResult.fromJS(resultData200);
            return Promise.resolve<PatInforBloodViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatInforBloodViewResult>(null as any);
    }

    /**
     * 对外接口 - 查询呼叫大屏类型
     * @return Success
     */
    queryScreen(  cancelToken?: CancelToken | undefined): Promise<QueryScreentInfoViewResult> {
        let url_ = this.baseUrl + "/api/Other/QueryScreen";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryScreen(_response));
        });
    }

    protected processQueryScreen(response: AxiosResponse): Promise<QueryScreentInfoViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QueryScreentInfoViewResult.fromJS(resultData200);
            return Promise.resolve<QueryScreentInfoViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QueryScreentInfoViewResult>(null as any);
    }

    /**
     * 对外接口 -- [芜湖]信息科EMR系统血透接口(血液病人透析记录)
     * @param hisno (optional) 患者住院号门诊号
     * @param start (optional) 透析日期(起始时间)，格式：yyyy-MM-dd
     * @param end (optional) 透析日期(结束时间)，格式：yyyy-MM-dd
     * @return Success
     */
    hisViewRecord(hisno: string | undefined, start: string | undefined, end: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBatchCureRecordViewResult> {
        let url_ = this.baseUrl + "/api/Other/HisViewRecord?";
        if (hisno === null)
            throw new Error("The parameter 'hisno' cannot be null.");
        else if (hisno !== undefined)
            url_ += "hisno=" + encodeURIComponent("" + hisno) + "&";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (end === null)
            throw new Error("The parameter 'end' cannot be null.");
        else if (end !== undefined)
            url_ += "end=" + encodeURIComponent("" + end) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHisViewRecord(_response));
        });
    }

    protected processHisViewRecord(response: AxiosResponse): Promise<PatientBatchCureRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBatchCureRecordViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBatchCureRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBatchCureRecordViewResult>(null as any);
    }

    /**
     * 透析记录 -- 根据条件查询数据
     * @param print (optional) 为1时，签名显示生效
     * @return Success
     */
    file2(id: string, print: number | undefined , cancelToken?: CancelToken | undefined): Promise<CureRecordFileViewResultEntry> {
        let url_ = this.baseUrl + "/api/Other/File/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (print === null)
            throw new Error("The parameter 'print' cannot be null.");
        else if (print !== undefined)
            url_ += "print=" + encodeURIComponent("" + print) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFile2(_response));
        });
    }

    protected processFile2(response: AxiosResponse): Promise<CureRecordFileViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureRecordFileViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureRecordFileViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureRecordFileViewResultEntry>(null as any);
    }

    /**
     * 评估记录 -- 根据条件查询数据
     * @param hisno (optional)
     * @param start (optional)
     * @param end (optional)
     * @return Success
     */
    hisViewAssementRecord(hisno: string | undefined, start: string | undefined, end: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientBatchAssementViewResult> {
        let url_ = this.baseUrl + "/api/Other/HisViewAssementRecord?";
        if (hisno === null)
            throw new Error("The parameter 'hisno' cannot be null.");
        else if (hisno !== undefined)
            url_ += "hisno=" + encodeURIComponent("" + hisno) + "&";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent("" + start) + "&";
        if (end === null)
            throw new Error("The parameter 'end' cannot be null.");
        else if (end !== undefined)
            url_ += "end=" + encodeURIComponent("" + end) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processHisViewAssementRecord(_response));
        });
    }

    protected processHisViewAssementRecord(response: AxiosResponse): Promise<PatientBatchAssementViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientBatchAssementViewResult.fromJS(resultData200);
            return Promise.resolve<PatientBatchAssementViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientBatchAssementViewResult>(null as any);
    }

    /**
     * 评估记录 -- 根据条件查询数据
     * @return Success
     */
    assementFile(id: string , cancelToken?: CancelToken | undefined): Promise<PatientAssementViewResultEntry> {
        let url_ = this.baseUrl + "/api/Other/AssementFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAssementFile(_response));
        });
    }

    protected processAssementFile(response: AxiosResponse): Promise<PatientAssementViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientAssementViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PatientAssementViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientAssementViewResultEntry>(null as any);
    }

    /**
     * 排床记录 -- 根据条件查询数据
     * @param date (optional)
     * @param areaId (optional)
     * @param shifts (optional)
     * @param areas (optional)
     * @return Success
     */
    outSchedule(date: string | undefined, areaId: string | undefined, shifts: string | undefined, areas: string | undefined , cancelToken?: CancelToken | undefined): Promise<CureScheduleDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/Other/OutSchedule?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (areaId === null)
            throw new Error("The parameter 'areaId' cannot be null.");
        else if (areaId !== undefined)
            url_ += "areaId=" + encodeURIComponent("" + areaId) + "&";
        if (shifts === null)
            throw new Error("The parameter 'shifts' cannot be null.");
        else if (shifts !== undefined)
            url_ += "shifts=" + encodeURIComponent("" + shifts) + "&";
        if (areas === null)
            throw new Error("The parameter 'areas' cannot be null.");
        else if (areas !== undefined)
            url_ += "areas=" + encodeURIComponent("" + areas) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processOutSchedule(_response));
        });
    }

    protected processOutSchedule(response: AxiosResponse): Promise<CureScheduleDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CureScheduleDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<CureScheduleDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CureScheduleDetailViewResultEntry>(null as any);
    }

    /**
     * 单点登录
     * @param token (optional) sessionID：token
     * @return Success
     */
    ssoLogin(token: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Other/SsoLogin?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSsoLogin(_response));
        });
    }

    protected processSsoLogin(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 单点登录
     * @param userName (optional) userName
     * @param userCode (optional) userCode
     * @return Success
     */
    cfSsoLogin(userName: string | undefined, userCode: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Other/CfSsoLogin?";
        if (userName === null)
            throw new Error("The parameter 'userName' cannot be null.");
        else if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        if (userCode === null)
            throw new Error("The parameter 'userCode' cannot be null.");
        else if (userCode !== undefined)
            url_ += "userCode=" + encodeURIComponent("" + userCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCfSsoLogin(_response));
        });
    }

    protected processCfSsoLogin(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 黄山首康单点登录接口
     * @param code (optional)
     * @param sYSID (optional)
     * @return Success
     */
    ssoLoginToHHSK(code: string | undefined, sYSID: string | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Other/SsoLoginToHHSK?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        if (sYSID === null)
            throw new Error("The parameter 'sYSID' cannot be null.");
        else if (sYSID !== undefined)
            url_ += "SYSID=" + encodeURIComponent("" + sYSID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSsoLoginToHHSK(_response));
        });
    }

    protected processSsoLoginToHHSK(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PinyinWubiCodeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 根据字符串获取拼音五笔简码
     * @return Success
     */
    pinyinWubiCode(name: string , cancelToken?: CancelToken | undefined): Promise<PinyinWubiCodeViewResultEntry> {
        let url_ = this.baseUrl + "/api/PinyinWubiCode/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPinyinWubiCode(_response));
        });
    }

    protected processPinyinWubiCode(response: AxiosResponse): Promise<PinyinWubiCodeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PinyinWubiCodeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PinyinWubiCodeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PinyinWubiCodeViewResultEntry>(null as any);
    }
}

export class PrognosisFormTypeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 转归报告分类 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    prognosisFormTypeGET(id: string , cancelToken?: CancelToken | undefined): Promise<PrognosisFormTypeResultEntry> {
        let url_ = this.baseUrl + "/api/PrognosisFormType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosisFormTypeGET(_response));
        });
    }

    protected processPrognosisFormTypeGET(response: AxiosResponse): Promise<PrognosisFormTypeResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrognosisFormTypeResultEntry.fromJS(resultData200);
            return Promise.resolve<PrognosisFormTypeResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrognosisFormTypeResultEntry>(null as any);
    }

    /**
     * 转归报告分类 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    prognosisFormTypePOST(id: string, body: PrognosisFormTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisFormType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosisFormTypePOST(_response));
        });
    }

    protected processPrognosisFormTypePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 转归报告分类 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter97(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PrognosisFormTypeResult> {
        let url_ = this.baseUrl + "/api/PrognosisFormType/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter97(_response));
        });
    }

    protected processFilter97(response: AxiosResponse): Promise<PrognosisFormTypeResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrognosisFormTypeResult.fromJS(resultData200);
            return Promise.resolve<PrognosisFormTypeResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrognosisFormTypeResult>(null as any);
    }

    /**
     * 自定义表单分类大类 -- 根据条件查询数据
     * @return Success
     */
    getCategories(  cancelToken?: CancelToken | undefined): Promise<StringResult> {
        let url_ = this.baseUrl + "/api/PrognosisFormType/GetCategories";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCategories(_response));
        });
    }

    protected processGetCategories(response: AxiosResponse): Promise<StringResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = StringResult.fromJS(resultData200);
            return Promise.resolve<StringResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<StringResult>(null as any);
    }

    /**
     * 转归报告分类 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    prognosisFormTypePOST2(body: PrognosisFormTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisFormType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosisFormTypePOST2(_response));
        });
    }

    protected processPrognosisFormTypePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 转归报告分类 -- 根据Id删除数据
     * @return Success
     */
    delete93(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisFormType/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete93(_response));
        });
    }

    protected processDelete93(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class PrognosisTmplFormServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 转归报告模板 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    prognosisTmplFormGET(id: string , cancelToken?: CancelToken | undefined): Promise<PrognosisTmplFormViewResultEntry> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosisTmplFormGET(_response));
        });
    }

    protected processPrognosisTmplFormGET(response: AxiosResponse): Promise<PrognosisTmplFormViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrognosisTmplFormViewResultEntry.fromJS(resultData200);
            return Promise.resolve<PrognosisTmplFormViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrognosisTmplFormViewResultEntry>(null as any);
    }

    /**
     * 转归报告模板 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    prognosisTmplFormPOST(id: string, body: PrognosisTmplFormEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosisTmplFormPOST(_response));
        });
    }

    protected processPrognosisTmplFormPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 转归报告模板 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter98(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PrognosisTmplFormViewResult> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter98(_response));
        });
    }

    protected processFilter98(response: AxiosResponse): Promise<PrognosisTmplFormViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrognosisTmplFormViewResult.fromJS(resultData200);
            return Promise.resolve<PrognosisTmplFormViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrognosisTmplFormViewResult>(null as any);
    }

    /**
     * 表单模板 -- 根据code查询数据
     * @param code (optional) code
     * @return Success
     */
    byCode(code: string | undefined , cancelToken?: CancelToken | undefined): Promise<PrognosisTmplFormResultEntry> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/ByCode?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByCode(_response));
        });
    }

    protected processByCode(response: AxiosResponse): Promise<PrognosisTmplFormResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PrognosisTmplFormResultEntry.fromJS(resultData200);
            return Promise.resolve<PrognosisTmplFormResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PrognosisTmplFormResultEntry>(null as any);
    }

    /**
     * 表单模板 -- 根据Id查询Data数据(有数据返回TRUE，无数据返回FALSE)
     * @param design (optional)
     * @return Success
     */
    dataGET(id: string, design: boolean | undefined , cancelToken?: CancelToken | undefined): Promise<JObjectResultEntry> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/Data/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (design === null)
            throw new Error("The parameter 'design' cannot be null.");
        else if (design !== undefined)
            url_ += "design=" + encodeURIComponent("" + design) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDataGET(_response));
        });
    }

    protected processDataGET(response: AxiosResponse): Promise<JObjectResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = JObjectResultEntry.fromJS(resultData200);
            return Promise.resolve<JObjectResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<JObjectResultEntry>(null as any);
    }

    /**
     * 表单模板 -- 更新表单内容
     * @param body (optional)
     * @return Success
     */
    dataPOST(id: string, body: PrognosisTmplFormDataEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/Data/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDataPOST(_response));
        });
    }

    protected processDataPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 自定义话术模板字段列表
     * @return Success
     */
    tags(  cancelToken?: CancelToken | undefined): Promise<ModelTagViewResult> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/Tags";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTags(_response));
        });
    }

    protected processTags(response: AxiosResponse): Promise<ModelTagViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ModelTagViewResult.fromJS(resultData200);
            return Promise.resolve<ModelTagViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ModelTagViewResult>(null as any);
    }

    /**
     * 自定义话术模板明细 -- 根据患者标识或者透析记录单标识填充数据
     * @param code 自定义话术模板code
     * @param patientId 患者标识
     * @return Success
     */
    patientTmplForm(code: string, patientId: string , cancelToken?: CancelToken | undefined): Promise<TmplFormDataViewResult> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/PatientTmplForm/{code}/{patientId}";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined.");
        url_ = url_.replace("{code}", encodeURIComponent("" + code));
        if (patientId === undefined || patientId === null)
            throw new Error("The parameter 'patientId' must be defined.");
        url_ = url_.replace("{patientId}", encodeURIComponent("" + patientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientTmplForm(_response));
        });
    }

    protected processPatientTmplForm(response: AxiosResponse): Promise<TmplFormDataViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TmplFormDataViewResult.fromJS(resultData200);
            return Promise.resolve<TmplFormDataViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TmplFormDataViewResult>(null as any);
    }

    /**
     * 转归报告模板 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    prognosisTmplFormPOST2(body: PrognosisTmplFormEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPrognosisTmplFormPOST2(_response));
        });
    }

    protected processPrognosisTmplFormPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 表单模板 -- 表单复制
     * @return Success
     */
    copy4(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/Copy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCopy4(_response));
        });
    }

    protected processCopy4(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 转归报告模板 -- 根据Id删除数据
     * @return Success
     */
    delete94(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/PrognosisTmplForm/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete94(_response));
        });
    }

    protected processDelete94(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RepositoryComplicationServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 知识库-并发症 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    repositoryComplicationGET(id: string , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationResultEntry> {
        let url_ = this.baseUrl + "/api/RepositoryComplication/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationGET(_response));
        });
    }

    protected processRepositoryComplicationGET(response: AxiosResponse): Promise<RepositoryComplicationResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationResultEntry.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationResultEntry>(null as any);
    }

    /**
     * 知识库-并发症 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    repositoryComplicationPOST(id: string, body: RepositoryComplicationViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplication/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationPOST(_response));
        });
    }

    protected processRepositoryComplicationPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter99(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationResult> {
        let url_ = this.baseUrl + "/api/RepositoryComplication/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter99(_response));
        });
    }

    protected processFilter99(response: AxiosResponse): Promise<RepositoryComplicationResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationResult.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationResult>(null as any);
    }

    /**
     * 知识库-并发症 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    repositoryComplicationPOST2(body: RepositoryComplicationViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplication";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationPOST2(_response));
        });
    }

    protected processRepositoryComplicationPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症 -- 根据Id删除数据
     * @return Success
     */
    delete95(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplication/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete95(_response));
        });
    }

    protected processDelete95(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RepositoryComplicationCauseServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 知识库-并发症原因 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    repositoryComplicationCauseGET(id: string , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationCauseViewResultEntry> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationCauseGET(_response));
        });
    }

    protected processRepositoryComplicationCauseGET(response: AxiosResponse): Promise<RepositoryComplicationCauseViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationCauseViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationCauseViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationCauseViewResultEntry>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    repositoryComplicationCausePOST(id: string, body: RepositoryComplicationCauseEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationCausePOST(_response));
        });
    }

    protected processRepositoryComplicationCausePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 根据并发症标识查询
     * @param repositoryComplicationId 并发症标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    repositoryComplicationGET2(repositoryComplicationId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationCauseViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/RepositoryComplication/{repositoryComplicationId}";
        if (repositoryComplicationId === undefined || repositoryComplicationId === null)
            throw new Error("The parameter 'repositoryComplicationId' must be defined.");
        url_ = url_.replace("{repositoryComplicationId}", encodeURIComponent("" + repositoryComplicationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationGET2(_response));
        });
    }

    protected processRepositoryComplicationGET2(response: AxiosResponse): Promise<RepositoryComplicationCauseViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationCauseViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationCauseViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationCauseViewResult>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter100(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationCauseViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter100(_response));
        });
    }

    protected processFilter100(response: AxiosResponse): Promise<RepositoryComplicationCauseViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationCauseViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationCauseViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationCauseViewResult>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    repositoryComplicationCausePOST2(body: RepositoryComplicationCauseEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationCausePOST2(_response));
        });
    }

    protected processRepositoryComplicationCausePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRepositoryComplicationCause(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRepositoryComplicationCause(_response));
        });
    }

    protected processMoveNodeForRepositoryComplicationCause(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRepositoryComplicationCause(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRepositoryComplicationCause(_response));
        });
    }

    protected processUpNodeForRepositoryComplicationCause(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRepositoryComplicationCause(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRepositoryComplicationCause(_response));
        });
    }

    protected processDownNodeForRepositoryComplicationCause(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症原因 -- 根据Id删除数据
     * @return Success
     */
    delete96(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationCause/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete96(_response));
        });
    }

    protected processDelete96(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RepositoryComplicationDisposeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 知识库-并发症处理 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    repositoryComplicationDisposeGET(id: string , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationDisposeViewResultEntry> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationDisposeGET(_response));
        });
    }

    protected processRepositoryComplicationDisposeGET(response: AxiosResponse): Promise<RepositoryComplicationDisposeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationDisposeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationDisposeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationDisposeViewResultEntry>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    repositoryComplicationDisposePOST(id: string, body: RepositoryComplicationDisposeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationDisposePOST(_response));
        });
    }

    protected processRepositoryComplicationDisposePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 根据并发症标识查询
     * @param repositoryComplicationId 并发症标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    repositoryComplicationGET3(repositoryComplicationId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationDisposeViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/RepositoryComplication/{repositoryComplicationId}";
        if (repositoryComplicationId === undefined || repositoryComplicationId === null)
            throw new Error("The parameter 'repositoryComplicationId' must be defined.");
        url_ = url_.replace("{repositoryComplicationId}", encodeURIComponent("" + repositoryComplicationId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationGET3(_response));
        });
    }

    protected processRepositoryComplicationGET3(response: AxiosResponse): Promise<RepositoryComplicationDisposeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationDisposeViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationDisposeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationDisposeViewResult>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter101(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryComplicationDisposeViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter101(_response));
        });
    }

    protected processFilter101(response: AxiosResponse): Promise<RepositoryComplicationDisposeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryComplicationDisposeViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryComplicationDisposeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryComplicationDisposeViewResult>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    repositoryComplicationDisposePOST2(body: RepositoryComplicationDisposeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryComplicationDisposePOST2(_response));
        });
    }

    protected processRepositoryComplicationDisposePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRepositoryComplicationDispose(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRepositoryComplicationDispose(_response));
        });
    }

    protected processMoveNodeForRepositoryComplicationDispose(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRepositoryComplicationDispose(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRepositoryComplicationDispose(_response));
        });
    }

    protected processUpNodeForRepositoryComplicationDispose(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRepositoryComplicationDispose(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRepositoryComplicationDispose(_response));
        });
    }

    protected processDownNodeForRepositoryComplicationDispose(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 知识库-并发症处理 -- 根据Id删除数据
     * @return Success
     */
    delete97(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryComplicationDispose/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete97(_response));
        });
    }

    protected processDelete97(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RepositoryHealtheducationDetailServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 宣教内容明细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    repositoryHealtheducationDetailGET(id: string , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationDetailViewResultEntry> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationDetailGET(_response));
        });
    }

    protected processRepositoryHealtheducationDetailGET(response: AxiosResponse): Promise<RepositoryHealtheducationDetailViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationDetailViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationDetailViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationDetailViewResultEntry>(null as any);
    }

    /**
     * 宣教内容明细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    repositoryHealtheducationDetailPOST(id: string, body: RepositoryHealtheducationDetailEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationDetailPOST(_response));
        });
    }

    protected processRepositoryHealtheducationDetailPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter102(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationDetailViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter102(_response));
        });
    }

    protected processFilter102(response: AxiosResponse): Promise<RepositoryHealtheducationDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationDetailViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationDetailViewResult>(null as any);
    }

    /**
     * 宣教内容明细 -- 根据条件查询数据
     * @param repositoryHealtheducationTypeId 宣教内容分类标识
     * @param filter (optional) 查询条件
     * @return Success
     */
    detail2(repositoryHealtheducationTypeId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationDetailViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/Detail/{repositoryHealtheducationTypeId}";
        if (repositoryHealtheducationTypeId === undefined || repositoryHealtheducationTypeId === null)
            throw new Error("The parameter 'repositoryHealtheducationTypeId' must be defined.");
        url_ = url_.replace("{repositoryHealtheducationTypeId}", encodeURIComponent("" + repositoryHealtheducationTypeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDetail2(_response));
        });
    }

    protected processDetail2(response: AxiosResponse): Promise<RepositoryHealtheducationDetailViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationDetailViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationDetailViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationDetailViewResult>(null as any);
    }

    /**
     * 宣教内容明细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    repositoryHealtheducationDetailPOST2(body: RepositoryHealtheducationDetailEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationDetailPOST2(_response));
        });
    }

    protected processRepositoryHealtheducationDetailPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRepositoryHealtheducationDetail(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRepositoryHealtheducationDetail(_response));
        });
    }

    protected processMoveNodeForRepositoryHealtheducationDetail(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRepositoryHealtheducationDetail(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRepositoryHealtheducationDetail(_response));
        });
    }

    protected processUpNodeForRepositoryHealtheducationDetail(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRepositoryHealtheducationDetail(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRepositoryHealtheducationDetail(_response));
        });
    }

    protected processDownNodeForRepositoryHealtheducationDetail(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细 -- 根据Id删除数据
     * @return Success
     */
    delete98(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetail/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete98(_response));
        });
    }

    protected processDelete98(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RepositoryHealtheducationDetailFileServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 宣教内容明细附件 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    repositoryHealtheducationDetailFileGET(id: string , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationDetailFileResultEntry> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationDetailFileGET(_response));
        });
    }

    protected processRepositoryHealtheducationDetailFileGET(response: AxiosResponse): Promise<RepositoryHealtheducationDetailFileResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationDetailFileResultEntry.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationDetailFileResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationDetailFileResultEntry>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    repositoryHealtheducationDetailFilePOST(id: string, body: RepositoryHealtheducationDetailFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationDetailFilePOST(_response));
        });
    }

    protected processRepositoryHealtheducationDetailFilePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter103(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationDetailFileResult> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter103(_response));
        });
    }

    protected processFilter103(response: AxiosResponse): Promise<RepositoryHealtheducationDetailFileResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationDetailFileResult.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationDetailFileResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationDetailFileResult>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    repositoryHealtheducationDetailFilePOST2(body: RepositoryHealtheducationDetailFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationDetailFilePOST2(_response));
        });
    }

    protected processRepositoryHealtheducationDetailFilePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRepositoryHealtheducationDetailFile(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRepositoryHealtheducationDetailFile(_response));
        });
    }

    protected processMoveNodeForRepositoryHealtheducationDetailFile(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRepositoryHealtheducationDetailFile(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRepositoryHealtheducationDetailFile(_response));
        });
    }

    protected processUpNodeForRepositoryHealtheducationDetailFile(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRepositoryHealtheducationDetailFile(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRepositoryHealtheducationDetailFile(_response));
        });
    }

    protected processDownNodeForRepositoryHealtheducationDetailFile(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容明细附件 -- 根据Id删除数据
     * @return Success
     */
    delete99(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationDetailFile/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete99(_response));
        });
    }

    protected processDelete99(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RepositoryHealtheducationTypeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 宣教内容分类 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    repositoryHealtheducationTypeGET(id: string , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationTypeViewResultEntry> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationTypeGET(_response));
        });
    }

    protected processRepositoryHealtheducationTypeGET(response: AxiosResponse): Promise<RepositoryHealtheducationTypeViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationTypeViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationTypeViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationTypeViewResultEntry>(null as any);
    }

    /**
     * 宣教内容分类 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    repositoryHealtheducationTypePOST(id: string, body: RepositoryHealtheducationTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationTypePOST(_response));
        });
    }

    protected processRepositoryHealtheducationTypePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容分类 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter104(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RepositoryHealtheducationTypeViewResult> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter104(_response));
        });
    }

    protected processFilter104(response: AxiosResponse): Promise<RepositoryHealtheducationTypeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RepositoryHealtheducationTypeViewResult.fromJS(resultData200);
            return Promise.resolve<RepositoryHealtheducationTypeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepositoryHealtheducationTypeViewResult>(null as any);
    }

    /**
     * 宣教内容分类 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    repositoryHealtheducationTypePOST2(body: RepositoryHealtheducationTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRepositoryHealtheducationTypePOST2(_response));
        });
    }

    protected processRepositoryHealtheducationTypePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容分类 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRepositoryHealtheducationType(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRepositoryHealtheducationType(_response));
        });
    }

    protected processMoveNodeForRepositoryHealtheducationType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容分类 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRepositoryHealtheducationType(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRepositoryHealtheducationType(_response));
        });
    }

    protected processUpNodeForRepositoryHealtheducationType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容分类 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRepositoryHealtheducationType(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRepositoryHealtheducationType(_response));
        });
    }

    protected processDownNodeForRepositoryHealtheducationType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 宣教内容分类 -- 根据Id删除数据
     * @return Success
     */
    delete100(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RepositoryHealtheducationType/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete100(_response));
        });
    }

    protected processDelete100(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomAccountGroupServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 账套分组 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomAccountGroupGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomAccountGroupResultEntry> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomAccountGroupGET(_response));
        });
    }

    protected processRoomAccountGroupGET(response: AxiosResponse): Promise<RoomAccountGroupResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomAccountGroupResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomAccountGroupResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomAccountGroupResultEntry>(null as any);
    }

    /**
     * 账套分组 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomAccountGroupPOST(id: string, body: RoomAccountGroupViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomAccountGroupPOST(_response));
        });
    }

    protected processRoomAccountGroupPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套分组 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter105(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomAccountGroupResult> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter105(_response));
        });
    }

    protected processFilter105(response: AxiosResponse): Promise<RoomAccountGroupResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomAccountGroupResult.fromJS(resultData200);
            return Promise.resolve<RoomAccountGroupResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomAccountGroupResult>(null as any);
    }

    /**
     * 账套分组 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomAccountGroupPOST2(body: RoomAccountGroupViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomAccountGroupPOST2(_response));
        });
    }

    protected processRoomAccountGroupPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套分组 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRoomAccountGroup(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRoomAccountGroup(_response));
        });
    }

    protected processMoveNodeForRoomAccountGroup(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套分组 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRoomAccountGroup(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRoomAccountGroup(_response));
        });
    }

    protected processUpNodeForRoomAccountGroup(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套分组 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRoomAccountGroup(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRoomAccountGroup(_response));
        });
    }

    protected processDownNodeForRoomAccountGroup(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套分组 -- 根据Id删除数据
     * @return Success
     */
    delete101(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroup/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete101(_response));
        });
    }

    protected processDelete101(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomAccountGroupItemServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 账套详细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomAccountGroupItemGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomAccountGroupItemResultEntry> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomAccountGroupItemGET(_response));
        });
    }

    protected processRoomAccountGroupItemGET(response: AxiosResponse): Promise<RoomAccountGroupItemResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomAccountGroupItemResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomAccountGroupItemResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomAccountGroupItemResultEntry>(null as any);
    }

    /**
     * 账套详细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomAccountGroupItemPOST(id: string, body: RoomAccountGroupItemViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomAccountGroupItemPOST(_response));
        });
    }

    protected processRoomAccountGroupItemPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套详细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter106(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomAccountGroupItemResult> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter106(_response));
        });
    }

    protected processFilter106(response: AxiosResponse): Promise<RoomAccountGroupItemResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomAccountGroupItemResult.fromJS(resultData200);
            return Promise.resolve<RoomAccountGroupItemResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomAccountGroupItemResult>(null as any);
    }

    /**
     * 账套详细(向下递归查询所有子项) -- 根据账套分组标识查询信息
     * @param roomAccountGroupId 账套分组标识(未分类填0)
     * @param filter (optional) 查询条件
     * @return Success
     */
    byRoomAccountGroupId(roomAccountGroupId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<InventoryViewResult> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem/ByRoomAccountGroupId/{roomAccountGroupId}";
        if (roomAccountGroupId === undefined || roomAccountGroupId === null)
            throw new Error("The parameter 'roomAccountGroupId' must be defined.");
        url_ = url_.replace("{roomAccountGroupId}", encodeURIComponent("" + roomAccountGroupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processByRoomAccountGroupId(_response));
        });
    }

    protected processByRoomAccountGroupId(response: AxiosResponse): Promise<InventoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = InventoryViewResult.fromJS(resultData200);
            return Promise.resolve<InventoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InventoryViewResult>(null as any);
    }

    /**
     * 账套详细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomAccountGroupItemPOST2(body: RoomAccountGroupItemViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomAccountGroupItemPOST2(_response));
        });
    }

    protected processRoomAccountGroupItemPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套详细 -- 批量新增数据
     * @param body (optional)
     * @return Success
     */
    batch6(body: RoomAccountGroupItemViewModel[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch6(_response));
        });
    }

    protected processBatch6(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 账套详细 -- 根据Id删除数据
     * @return Success
     */
    delete102(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomAccountGroupItem/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete102(_response));
        });
    }

    protected processDelete102(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomEarlyWarningRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 预警记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter107(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomEarlyWarningRecordViewResult> {
        let url_ = this.baseUrl + "/api/RoomEarlyWarningRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter107(_response));
        });
    }

    protected processFilter107(response: AxiosResponse): Promise<RoomEarlyWarningRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomEarlyWarningRecordViewResult.fromJS(resultData200);
            return Promise.resolve<RoomEarlyWarningRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomEarlyWarningRecordViewResult>(null as any);
    }
}

export class RoomItemListInventoryServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 库存统计
     * @param key (optional) 查询条件
     * @param startDate (optional) 开始日期
     * @param endDate (optional) 结束日期
     * @return Success
     */
    inventoryStatistics(key: string | undefined, startDate: dayjs.Dayjs | undefined, endDate: dayjs.Dayjs | undefined , cancelToken?: CancelToken | undefined): Promise<InventoryStatisticsViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemListInventory/InventoryStatistics?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processInventoryStatistics(_response));
        });
    }

    protected processInventoryStatistics(response: AxiosResponse): Promise<InventoryStatisticsViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = InventoryStatisticsViewResult.fromJS(resultData200);
            return Promise.resolve<InventoryStatisticsViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InventoryStatisticsViewResult>(null as any);
    }

    /**
     * 项目库存 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 项目名称
     * @return Success
     */
    filter108(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemListInventoryViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemListInventory/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter108(_response));
        });
    }

    protected processFilter108(response: AxiosResponse): Promise<RoomItemListInventoryViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemListInventoryViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemListInventoryViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemListInventoryViewResult>(null as any);
    }

    /**
     * 项目库存 -- 患者出库查询
     * @param filter (optional) 查询条件
     * @return Success
     */
    patientOut(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientOutViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemListInventory/PatientOut";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientOut(_response));
        });
    }

    protected processPatientOut(response: AxiosResponse): Promise<PatientOutViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientOutViewResult.fromJS(resultData200);
            return Promise.resolve<PatientOutViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientOutViewResult>(null as any);
    }

    /**
     * 项目库存 -- 患者出库明细查询
     * @param filter (optional) 查询条件
     * @param roomItemListId (optional) 项目
     * @return Success
     */
    patientOutDetail(filter: string | undefined, roomItemListId: string | undefined , cancelToken?: CancelToken | undefined): Promise<PatientOutItemViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemListInventory/PatientOutDetail?";
        if (roomItemListId === null)
            throw new Error("The parameter 'roomItemListId' cannot be null.");
        else if (roomItemListId !== undefined)
            url_ += "roomItemListId=" + encodeURIComponent("" + roomItemListId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPatientOutDetail(_response));
        });
    }

    protected processPatientOutDetail(response: AxiosResponse): Promise<PatientOutItemViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PatientOutItemViewResult.fromJS(resultData200);
            return Promise.resolve<PatientOutItemViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PatientOutItemViewResult>(null as any);
    }

    /**
     * 期初库存 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    updateInitial(id: string, body: RoomItemListInventoryEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemListInventory/UpdateInitial/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateInitial(_response));
        });
    }

    protected processUpdateInitial(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomItemListInventoryRecordServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 项目库存记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomItemListInventoryRecordGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomItemListInventoryRecordViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomItemListInventoryRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemListInventoryRecordGET(_response));
        });
    }

    protected processRoomItemListInventoryRecordGET(response: AxiosResponse): Promise<RoomItemListInventoryRecordViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemListInventoryRecordViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomItemListInventoryRecordViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemListInventoryRecordViewResultEntry>(null as any);
    }

    /**
     * 项目库存记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomItemListInventoryRecordPOST(id: string, body: RoomItemListInventoryRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemListInventoryRecord/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemListInventoryRecordPOST(_response));
        });
    }

    protected processRoomItemListInventoryRecordPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目库存记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter109(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemListInventoryRecordViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemListInventoryRecord/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter109(_response));
        });
    }

    protected processFilter109(response: AxiosResponse): Promise<RoomItemListInventoryRecordViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemListInventoryRecordViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemListInventoryRecordViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemListInventoryRecordViewResult>(null as any);
    }

    /**
     * 项目库存记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomItemListInventoryRecordPOST2(body: RoomItemListInventoryRecordEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemListInventoryRecord";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemListInventoryRecordPOST2(_response));
        });
    }

    protected processRoomItemListInventoryRecordPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目库存记录 -- 根据Id删除数据
     * @return Success
     */
    delete103(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemListInventoryRecord/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete103(_response));
        });
    }

    protected processDelete103(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomItemPriceServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 项目调价记录 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomItemPriceGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomItemPriceViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomItemPrice/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemPriceGET(_response));
        });
    }

    protected processRoomItemPriceGET(response: AxiosResponse): Promise<RoomItemPriceViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemPriceViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomItemPriceViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemPriceViewResultEntry>(null as any);
    }

    /**
     * 项目调价记录 -- 根据项目ID查询数据
     * @param roomItemListId 项目ID
     * @param filter (optional) 查询条件
     * @return Success
     */
    roomItemList(roomItemListId: string, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemPriceViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemPrice/RoomItemList/{roomItemListId}";
        if (roomItemListId === undefined || roomItemListId === null)
            throw new Error("The parameter 'roomItemListId' must be defined.");
        url_ = url_.replace("{roomItemListId}", encodeURIComponent("" + roomItemListId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemList(_response));
        });
    }

    protected processRoomItemList(response: AxiosResponse): Promise<RoomItemPriceViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemPriceViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemPriceViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemPriceViewResult>(null as any);
    }

    /**
     * 项目调价记录 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @param key (optional) 项目 - 分类/名称/简称/商品名/用法/厂家/拼音码/五笔码
     * @return Success
     */
    filter110(filter: string | undefined, key: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemPriceViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemPrice/Filter?";
        if (key === null)
            throw new Error("The parameter 'key' cannot be null.");
        else if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter110(_response));
        });
    }

    protected processFilter110(response: AxiosResponse): Promise<RoomItemPriceViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemPriceViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemPriceViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemPriceViewResult>(null as any);
    }

    /**
     * 项目调价记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomItemPricePOST(body: RoomItemPriceEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemPrice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemPricePOST(_response));
        });
    }

    protected processRoomItemPricePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomItemTypeServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 项目分类 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomItemTypeGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomItemTypeResultEntry> {
        let url_ = this.baseUrl + "/api/RoomItemType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemTypeGET(_response));
        });
    }

    protected processRoomItemTypeGET(response: AxiosResponse): Promise<RoomItemTypeResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemTypeResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomItemTypeResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemTypeResultEntry>(null as any);
    }

    /**
     * 项目分类 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomItemTypePOST(id: string, body: RoomItemTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemType/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemTypePOST(_response));
        });
    }

    protected processRoomItemTypePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目分类 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter111(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomItemTypeViewResult> {
        let url_ = this.baseUrl + "/api/RoomItemType/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter111(_response));
        });
    }

    protected processFilter111(response: AxiosResponse): Promise<RoomItemTypeViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomItemTypeViewResult.fromJS(resultData200);
            return Promise.resolve<RoomItemTypeViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomItemTypeViewResult>(null as any);
    }

    /**
     * 项目分类 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomItemTypePOST2(body: RoomItemTypeEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomItemTypePOST2(_response));
        });
    }

    protected processRoomItemTypePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目分类 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRoomItemType(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemType/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRoomItemType(_response));
        });
    }

    protected processMoveNodeForRoomItemType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目分类 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRoomItemType(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemType/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRoomItemType(_response));
        });
    }

    protected processUpNodeForRoomItemType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目分类 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRoomItemType(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemType/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRoomItemType(_response));
        });
    }

    protected processDownNodeForRoomItemType(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 项目分类 -- 根据Id删除数据
     * @return Success
     */
    delete104(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomItemType/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete104(_response));
        });
    }

    protected processDelete104(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomManufacturerServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 药品耗材生产厂家信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomManufacturerGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomManufacturerViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomManufacturerGET(_response));
        });
    }

    protected processRoomManufacturerGET(response: AxiosResponse): Promise<RoomManufacturerViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomManufacturerViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomManufacturerViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomManufacturerViewResultEntry>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomManufacturerPOST(id: string, body: RoomManufacturerEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomManufacturerPOST(_response));
        });
    }

    protected processRoomManufacturerPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter112(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomManufacturerViewResult> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter112(_response));
        });
    }

    protected processFilter112(response: AxiosResponse): Promise<RoomManufacturerViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomManufacturerViewResult.fromJS(resultData200);
            return Promise.resolve<RoomManufacturerViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomManufacturerViewResult>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomManufacturerPOST2(body: RoomManufacturerEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomManufacturer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomManufacturerPOST2(_response));
        });
    }

    protected processRoomManufacturerPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRoomManufacturer(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRoomManufacturer(_response));
        });
    }

    protected processMoveNodeForRoomManufacturer(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRoomManufacturer(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRoomManufacturer(_response));
        });
    }

    protected processUpNodeForRoomManufacturer(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRoomManufacturer(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRoomManufacturer(_response));
        });
    }

    protected processDownNodeForRoomManufacturer(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 药品耗材生产厂家信息 -- 根据Id删除数据
     * @return Success
     */
    delete105(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomManufacturer/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete105(_response));
        });
    }

    protected processDelete105(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomRecordInventoryItemBatchServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 盘库记录批次详细 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomRecordInventoryItemBatchGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomRecordInventoryItemBatchViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomRecordInventoryItemBatch/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordInventoryItemBatchGET(_response));
        });
    }

    protected processRoomRecordInventoryItemBatchGET(response: AxiosResponse): Promise<RoomRecordInventoryItemBatchViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInventoryItemBatchViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomRecordInventoryItemBatchViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInventoryItemBatchViewResultEntry>(null as any);
    }

    /**
     * 盘库记录批次详细 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomRecordInventoryItemBatchPUT(id: string, body: RoomRecordInventoryItemBatchEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInventoryItemBatch/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordInventoryItemBatchPUT(_response));
        });
    }

    protected processRoomRecordInventoryItemBatchPUT(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 盘库记录批次详细 -- 根据Id删除数据
     * @return Success
     */
    roomRecordInventoryItemBatchDELETE(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInventoryItemBatch/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordInventoryItemBatchDELETE(_response));
        });
    }

    protected processRoomRecordInventoryItemBatchDELETE(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 盘库记录批次详细 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter113(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomRecordInventoryItemBatchViewResult> {
        let url_ = this.baseUrl + "/api/RoomRecordInventoryItemBatch/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter113(_response));
        });
    }

    protected processFilter113(response: AxiosResponse): Promise<RoomRecordInventoryItemBatchViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomRecordInventoryItemBatchViewResult.fromJS(resultData200);
            return Promise.resolve<RoomRecordInventoryItemBatchViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomRecordInventoryItemBatchViewResult>(null as any);
    }

    /**
     * 盘库记录批次详细 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomRecordInventoryItemBatchPOST(body: RoomRecordInventoryItemBatchEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomRecordInventoryItemBatch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomRecordInventoryItemBatchPOST(_response));
        });
    }

    protected processRoomRecordInventoryItemBatchPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RoomSupplierServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 供应商信息 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    roomSupplierGET(id: string , cancelToken?: CancelToken | undefined): Promise<RoomSupplierViewResultEntry> {
        let url_ = this.baseUrl + "/api/RoomSupplier/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomSupplierGET(_response));
        });
    }

    protected processRoomSupplierGET(response: AxiosResponse): Promise<RoomSupplierViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomSupplierViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RoomSupplierViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomSupplierViewResultEntry>(null as any);
    }

    /**
     * 供应商信息 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    roomSupplierPOST(id: string, body: RoomSupplierEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomSupplier/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomSupplierPOST(_response));
        });
    }

    protected processRoomSupplierPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 供应商信息 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter114(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RoomSupplierViewResult> {
        let url_ = this.baseUrl + "/api/RoomSupplier/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter114(_response));
        });
    }

    protected processFilter114(response: AxiosResponse): Promise<RoomSupplierViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RoomSupplierViewResult.fromJS(resultData200);
            return Promise.resolve<RoomSupplierViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoomSupplierViewResult>(null as any);
    }

    /**
     * 供应商信息 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    roomSupplierPOST2(body: RoomSupplierEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomSupplier";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRoomSupplierPOST2(_response));
        });
    }

    protected processRoomSupplierPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 供应商信息 -- 移动节点-拖动
     * @param id 选中的节点ID
     * @param position (optional) 需要移动到的位置
     * @return Success
     */
    moveNodeForRoomSupplier(id: string, position: number | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomSupplier/{id}/Node/Move?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (position === null)
            throw new Error("The parameter 'position' cannot be null.");
        else if (position !== undefined)
            url_ += "position=" + encodeURIComponent("" + position) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveNodeForRoomSupplier(_response));
        });
    }

    protected processMoveNodeForRoomSupplier(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 供应商信息 -- 移动节点-上移
     * @param id 选中的节点ID
     * @return Success
     */
    upNodeForRoomSupplier(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomSupplier/{id}/Node/Up";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpNodeForRoomSupplier(_response));
        });
    }

    protected processUpNodeForRoomSupplier(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 供应商信息 -- 移动节点-下移
     * @param id 选中的节点ID
     * @return Success
     */
    downNodeForRoomSupplier(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomSupplier/{id}/Node/Down";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownNodeForRoomSupplier(_response));
        });
    }

    protected processDownNodeForRoomSupplier(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 供应商信息 -- 根据Id删除数据
     * @return Success
     */
    delete106(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RoomSupplier/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete106(_response));
        });
    }

    protected processDelete106(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RtmMessageServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 消息记录 -- 根据Id查询数据并更新消息状态为已读
     * @return Success
     */
    rtmMessageGET(id: string , cancelToken?: CancelToken | undefined): Promise<RtmMessageViewResultEntry> {
        let url_ = this.baseUrl + "/api/RtmMessage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRtmMessageGET(_response));
        });
    }

    protected processRtmMessageGET(response: AxiosResponse): Promise<RtmMessageViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RtmMessageViewResultEntry.fromJS(resultData200);
            return Promise.resolve<RtmMessageViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtmMessageViewResultEntry>(null as any);
    }

    /**
     * 消息记录 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    rtmMessagePOST(id: string, body: RtmMessageViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessage/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRtmMessagePOST(_response));
        });
    }

    protected processRtmMessagePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息记录 -- 根据条件查询数据
     * @param type (optional) 消息类型 1:通知 2:待办 3:报警 4:预警 为空或填写其他内容均返回全部
     * @param isRead (optional) 消息状态 0:未读 1:已读 为空或填写其他内容均返回全部
     * @param filter (optional)
     * @return Success
     */
    filter115(type: string | undefined, isRead: string | undefined, filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RtmMessageViewResult> {
        let url_ = this.baseUrl + "/api/RtmMessage/Filter?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        if (isRead === null)
            throw new Error("The parameter 'isRead' cannot be null.");
        else if (isRead !== undefined)
            url_ += "isRead=" + encodeURIComponent("" + isRead) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter115(_response));
        });
    }

    protected processFilter115(response: AxiosResponse): Promise<RtmMessageViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RtmMessageViewResult.fromJS(resultData200);
            return Promise.resolve<RtmMessageViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtmMessageViewResult>(null as any);
    }

    /**
     * 消息记录 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    rtmMessagePOST2(body: RtmMessageViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRtmMessagePOST2(_response));
        });
    }

    protected processRtmMessagePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息记录 - 批量更新消息状态为已读
     * @param body (optional) 消息Id集合
     * @return Success
     */
    batch7(body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessage/Msg/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch7(_response));
        });
    }

    protected processBatch7(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息记录 - 关注
     * @param id 消息Id
     * @return Success
     */
    focus(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessage/{id}/Focus";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFocus(_response));
        });
    }

    protected processFocus(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息记录 -- 根据Id删除数据
     * @return Success
     */
    delete107(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessage/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete107(_response));
        });
    }

    protected processDelete107(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息记录 -- 根据Id批量删除数据
     * @param body (optional)
     * @return Success
     */
    batch8(body: string[] | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessage/Delete/Batch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatch8(_response));
        });
    }

    protected processBatch8(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class RtmMessageFileServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 消息附件 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    rtmMessageFileGET(id: string , cancelToken?: CancelToken | undefined): Promise<RtmMessageFileResultEntry> {
        let url_ = this.baseUrl + "/api/RtmMessageFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRtmMessageFileGET(_response));
        });
    }

    protected processRtmMessageFileGET(response: AxiosResponse): Promise<RtmMessageFileResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RtmMessageFileResultEntry.fromJS(resultData200);
            return Promise.resolve<RtmMessageFileResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtmMessageFileResultEntry>(null as any);
    }

    /**
     * 消息附件 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    rtmMessageFilePOST(id: string, body: RtmMessageFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessageFile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRtmMessageFilePOST(_response));
        });
    }

    protected processRtmMessageFilePOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息附件 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter116(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<RtmMessageFileResult> {
        let url_ = this.baseUrl + "/api/RtmMessageFile/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter116(_response));
        });
    }

    protected processFilter116(response: AxiosResponse): Promise<RtmMessageFileResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RtmMessageFileResult.fromJS(resultData200);
            return Promise.resolve<RtmMessageFileResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtmMessageFileResult>(null as any);
    }

    /**
     * 消息附件 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    rtmMessageFilePOST2(body: RtmMessageFileViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessageFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRtmMessageFilePOST2(_response));
        });
    }

    protected processRtmMessageFilePOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 消息附件 -- 根据Id删除数据
     * @return Success
     */
    delete108(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/RtmMessageFile/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete108(_response));
        });
    }

    protected processDelete108(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class SysMenuExternalLinkServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 菜单外链 -- 根据Id查询数据(有数据返回TRUE，无数据返回FALSE)
     * @return Success
     */
    sysMenuExternalLinkGET(id: string , cancelToken?: CancelToken | undefined): Promise<SysMenuExternalLinkViewResultEntry> {
        let url_ = this.baseUrl + "/api/SysMenuExternalLink/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysMenuExternalLinkGET(_response));
        });
    }

    protected processSysMenuExternalLinkGET(response: AxiosResponse): Promise<SysMenuExternalLinkViewResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysMenuExternalLinkViewResultEntry.fromJS(resultData200);
            return Promise.resolve<SysMenuExternalLinkViewResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysMenuExternalLinkViewResultEntry>(null as any);
    }

    /**
     * 菜单外链 -- 更新数据
     * @param body (optional)
     * @return Success
     */
    sysMenuExternalLinkPOST(id: string, body: SysMenuExternalLinkEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysMenuExternalLink/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysMenuExternalLinkPOST(_response));
        });
    }

    protected processSysMenuExternalLinkPOST(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 菜单外链 -- 根据条件查询数据
     * @param filter (optional) 查询条件
     * @return Success
     */
    filter117(filter: string | undefined , cancelToken?: CancelToken | undefined): Promise<SysMenuExternalLinkViewResult> {
        let url_ = this.baseUrl + "/api/SysMenuExternalLink/Filter";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "filter": filter !== undefined && filter !== null ? "" + filter : "",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFilter117(_response));
        });
    }

    protected processFilter117(response: AxiosResponse): Promise<SysMenuExternalLinkViewResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SysMenuExternalLinkViewResult.fromJS(resultData200);
            return Promise.resolve<SysMenuExternalLinkViewResult>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysMenuExternalLinkViewResult>(null as any);
    }

    /**
     * 菜单外链 -- 新增数据
     * @param body (optional)
     * @return Success
     */
    sysMenuExternalLinkPOST2(body: SysMenuExternalLinkEditModel | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysMenuExternalLink";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSysMenuExternalLinkPOST2(_response));
        });
    }

    protected processSysMenuExternalLinkPOST2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 菜单外链 -- 根据Id删除数据
     * @return Success
     */
    delete109(id: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/SysMenuExternalLink/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete109(_response));
        });
    }

    protected processDelete109(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

export class TokenServiceProxy extends ServiceProxyBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        super();
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * 根据登录名或工号获取用户名
     * @param loginKey 登录名或工号
     * @return Success
     */
    tokenGET(loginKey: string , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Token/{loginKey}";
        if (loginKey === undefined || loginKey === null)
            throw new Error("The parameter 'loginKey' must be defined.");
        url_ = url_.replace("{loginKey}", encodeURIComponent("" + loginKey));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTokenGET(_response));
        });
    }

    protected processTokenGET(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 创建用户身份令牌
     * @param body (optional)
     * @return Success
     */
    tokenPOST(body: LoginViewModel | undefined , cancelToken?: CancelToken | undefined): Promise<TokenViewExtResultEntry> {
        let url_ = this.baseUrl + "/api/Token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTokenPOST(_response));
        });
    }

    protected processTokenPOST(response: AxiosResponse): Promise<TokenViewExtResultEntry> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TokenViewExtResultEntry.fromJS(resultData200);
            return Promise.resolve<TokenViewExtResultEntry>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TokenViewExtResultEntry>(null as any);
    }

    /**
     * 注销
     * @return Success
     */
    logout(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Token/Logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processLogout(_response));
        });
    }

    protected processLogout(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 测试身份
     * @return Success
     */
    tester(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Token/tester";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTester(_response));
        });
    }

    protected processTester(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 激活 -- 激活成功，返回注册信息；激活失败，返回原因
     * @param body (optional)
     * @return Success
     */
    activate(body: AuthorizeCodeView | undefined , cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Token/Activate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processActivate(_response));
        });
    }

    protected processActivate(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }

    /**
     * 验证 -- 验证通过，返回注册信息；不通过，返回注册码
     * @return Success
     */
    verify2(  cancelToken?: CancelToken | undefined): Promise<Result> {
        let url_ = this.baseUrl + "/api/Token/Verify";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
        }).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processVerify2(_response));
        });
    }

    protected processVerify2(response: AxiosResponse): Promise<Result> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Result.fromJS(resultData200);
            return Promise.resolve<Result>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Result>(null as any);
    }
}

/** 抗凝剂类型药品 */
export class AntiTmplTypeDrugEditModel implements IAntiTmplTypeDrugEditModel {
    tmplTypeId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IAntiTmplTypeDrugEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tmplTypeId = _data["tmplTypeId"];
            this.roomItemListId = _data["roomItemListId"];
            this.frequently = _data["frequently"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): AntiTmplTypeDrugEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new AntiTmplTypeDrugEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tmplTypeId"] = this.tmplTypeId;
        data["roomItemListId"] = this.roomItemListId;
        data["frequently"] = this.frequently;
        data["remark"] = this.remark;
        return data;
    }
}

/** 抗凝剂类型药品 */
export interface IAntiTmplTypeDrugEditModel {
    tmplTypeId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 抗凝剂类型药品 */
export class AntiTmplTypeDrugView implements IAntiTmplTypeDrugView {
    tmplTypeId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;

    constructor(data?: IAntiTmplTypeDrugView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tmplTypeId = _data["tmplTypeId"];
            this.roomItemListId = _data["roomItemListId"];
            this.frequently = _data["frequently"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.sellingPrice = _data["sellingPrice"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.spec = _data["spec"];
            this.manufacturer = _data["manufacturer"];
        }
    }

    static fromJS(data: any): AntiTmplTypeDrugView {
        data = typeof data === 'object' ? data : {};
        let result = new AntiTmplTypeDrugView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tmplTypeId"] = this.tmplTypeId;
        data["roomItemListId"] = this.roomItemListId;
        data["frequently"] = this.frequently;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["sellingPrice"] = this.sellingPrice;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["spec"] = this.spec;
        data["manufacturer"] = this.manufacturer;
        return data;
    }
}

/** 抗凝剂类型药品 */
export interface IAntiTmplTypeDrugView {
    tmplTypeId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
}

/** Reponse */
export class AntiTmplTypeDrugViewResult implements IAntiTmplTypeDrugViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AntiTmplTypeDrugView[] | undefined;

    constructor(data?: IAntiTmplTypeDrugViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AntiTmplTypeDrugView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AntiTmplTypeDrugViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new AntiTmplTypeDrugViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IAntiTmplTypeDrugViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: AntiTmplTypeDrugView[] | undefined;
}

/** Reponse */
export class AntiTmplTypeDrugViewResultEntry implements IAntiTmplTypeDrugViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: AntiTmplTypeDrugView;

    constructor(data?: IAntiTmplTypeDrugViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? AntiTmplTypeDrugView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AntiTmplTypeDrugViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new AntiTmplTypeDrugViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IAntiTmplTypeDrugViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: AntiTmplTypeDrugView;
}

/** 审批记录 */
export class ApproverRecordView implements IApproverRecordView {
    /** 记录ID */
    id?: string | undefined;
    /** 记录类型 */
    type?: string | undefined;
    /** 审批状态 */
    checked?: number;
    /** 原因 */
    reason?: string | undefined;
    /** 时长 */
    times?: number;
    /** 审批结果展示值 */
    approvedLabel?: string | undefined;
    /** 审批结果 */
    approved?: number;
    /** 申请用户ID */
    applyUserId?: string | undefined;
    /** 申请用户名称 */
    applyUserName?: string | undefined;
    /** 申请日期 */
    applicaTime?: string | undefined;
    /** 开始时间 */
    beginTime?: dayjs.Dayjs;
    /** 结束时间 */
    endTime?: dayjs.Dayjs;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;

    constructor(data?: IApproverRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.checked = _data["checked"];
            this.reason = _data["reason"];
            this.times = _data["times"];
            this.approvedLabel = _data["approvedLabel"];
            this.approved = _data["approved"];
            this.applyUserId = _data["applyUserId"];
            this.applyUserName = _data["applyUserName"];
            this.applicaTime = _data["applicaTime"];
            this.beginTime = _data["beginTime"] ? dayjs(_data["beginTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? dayjs(_data["endTime"].toString()) : <any>undefined;
            this.refuseReason = _data["refuseReason"];
        }
    }

    static fromJS(data: any): ApproverRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new ApproverRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["checked"] = this.checked;
        data["reason"] = this.reason;
        data["times"] = this.times;
        data["approvedLabel"] = this.approvedLabel;
        data["approved"] = this.approved;
        data["applyUserId"] = this.applyUserId;
        data["applyUserName"] = this.applyUserName;
        data["applicaTime"] = this.applicaTime;
        data["beginTime"] = this.beginTime ? this.beginTime.toLocaleString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toLocaleString() : <any>undefined;
        data["refuseReason"] = this.refuseReason;
        return data;
    }
}

/** 审批记录 */
export interface IApproverRecordView {
    /** 记录ID */
    id?: string | undefined;
    /** 记录类型 */
    type?: string | undefined;
    /** 审批状态 */
    checked?: number;
    /** 原因 */
    reason?: string | undefined;
    /** 时长 */
    times?: number;
    /** 审批结果展示值 */
    approvedLabel?: string | undefined;
    /** 审批结果 */
    approved?: number;
    /** 申请用户ID */
    applyUserId?: string | undefined;
    /** 申请用户名称 */
    applyUserName?: string | undefined;
    /** 申请日期 */
    applicaTime?: string | undefined;
    /** 开始时间 */
    beginTime?: dayjs.Dayjs;
    /** 结束时间 */
    endTime?: dayjs.Dayjs;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
}

/** Reponse */
export class ApproverRecordViewResult implements IApproverRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ApproverRecordView[] | undefined;

    constructor(data?: IApproverRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ApproverRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApproverRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new ApproverRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IApproverRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ApproverRecordView[] | undefined;
}

/** 注册码 */
export class AuthorizeCodeView implements IAuthorizeCodeView {
    /** 注册码 */
    code?: string | undefined;

    constructor(data?: IAuthorizeCodeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): AuthorizeCodeView {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorizeCodeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        return data;
    }
}

/** 注册码 */
export interface IAuthorizeCodeView {
    /** 注册码 */
    code?: string | undefined;
}

export class AuthorizeInfo implements IAuthorizeInfo {
    authEdition?: Edition;
    registerCode?: string | undefined;
    expiryPermanent?: boolean;
    expiryStart?: dayjs.Dayjs;
    expiryEnd?: dayjs.Dayjs;
    checkCode?: string | undefined;
    randomSeed?: number;
    hospital?: string | undefined;
    product?: string | undefined;
    readonly expireDay?: number;

    constructor(data?: IAuthorizeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.authEdition = _data["authEdition"];
            this.registerCode = _data["registerCode"];
            this.expiryPermanent = _data["expiryPermanent"];
            this.expiryStart = _data["expiryStart"] ? dayjs(_data["expiryStart"].toString()) : <any>undefined;
            this.expiryEnd = _data["expiryEnd"] ? dayjs(_data["expiryEnd"].toString()) : <any>undefined;
            this.checkCode = _data["checkCode"];
            this.randomSeed = _data["randomSeed"];
            this.hospital = _data["hospital"];
            this.product = _data["product"];
            (<any>this).expireDay = _data["expireDay"];
        }
    }

    static fromJS(data: any): AuthorizeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorizeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authEdition"] = this.authEdition;
        data["registerCode"] = this.registerCode;
        data["expiryPermanent"] = this.expiryPermanent;
        data["expiryStart"] = this.expiryStart ? this.expiryStart.toLocaleString() : <any>undefined;
        data["expiryEnd"] = this.expiryEnd ? this.expiryEnd.toLocaleString() : <any>undefined;
        data["checkCode"] = this.checkCode;
        data["randomSeed"] = this.randomSeed;
        data["hospital"] = this.hospital;
        data["product"] = this.product;
        data["expireDay"] = this.expireDay;
        return data;
    }
}

export interface IAuthorizeInfo {
    authEdition?: Edition;
    registerCode?: string | undefined;
    expiryPermanent?: boolean;
    expiryStart?: dayjs.Dayjs;
    expiryEnd?: dayjs.Dayjs;
    checkCode?: string | undefined;
    randomSeed?: number;
    hospital?: string | undefined;
    product?: string | undefined;
    expireDay?: number;
}

/** 总排床统计 */
export class BedScheduleCountView implements IBedScheduleCountView {
    /** 班次 */
    shiftName?: string | undefined;
    /** 已排床 */
    usedCount?: number;
    /** 可用排床 */
    enableCount?: number;
    /** 总床位 */
    totalCount?: number;

    constructor(data?: IBedScheduleCountView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shiftName = _data["shiftName"];
            this.usedCount = _data["usedCount"];
            this.enableCount = _data["enableCount"];
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): BedScheduleCountView {
        data = typeof data === 'object' ? data : {};
        let result = new BedScheduleCountView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shiftName"] = this.shiftName;
        data["usedCount"] = this.usedCount;
        data["enableCount"] = this.enableCount;
        data["totalCount"] = this.totalCount;
        return data;
    }
}

/** 总排床统计 */
export interface IBedScheduleCountView {
    /** 班次 */
    shiftName?: string | undefined;
    /** 已排床 */
    usedCount?: number;
    /** 可用排床 */
    enableCount?: number;
    /** 总床位 */
    totalCount?: number;
}

/** Reponse */
export class BedScheduleCountViewResult implements IBedScheduleCountViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: BedScheduleCountView[] | undefined;

    constructor(data?: IBedScheduleCountViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(BedScheduleCountView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BedScheduleCountViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new BedScheduleCountViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IBedScheduleCountViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: BedScheduleCountView[] | undefined;
}

/** 中心信息 */
export class CentralInformationEditModel implements ICentralInformationEditModel {
    /** 信息类型 */
    type!: string;
    /** 登记日期 */
    date!: dayjs.Dayjs;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICentralInformationEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CentralInformationEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CentralInformationEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["remark"] = this.remark;
        return data;
    }
}

/** 中心信息 */
export interface ICentralInformationEditModel {
    /** 信息类型 */
    type: string;
    /** 登记日期 */
    date: dayjs.Dayjs;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 中心信息 */
export class CentralInformationView implements ICentralInformationView {
    /** 信息类型 */
    type!: string;
    /** 登记日期 */
    date!: dayjs.Dayjs;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICentralInformationView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CentralInformationView {
        data = typeof data === 'object' ? data : {};
        let result = new CentralInformationView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 中心信息 */
export interface ICentralInformationView {
    /** 信息类型 */
    type: string;
    /** 登记日期 */
    date: dayjs.Dayjs;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CentralInformationViewResult implements ICentralInformationViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CentralInformationView[] | undefined;

    constructor(data?: ICentralInformationViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CentralInformationView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CentralInformationViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CentralInformationViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICentralInformationViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CentralInformationView[] | undefined;
}

/** Reponse */
export class CentralInformationViewResultEntry implements ICentralInformationViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CentralInformationView;

    constructor(data?: ICentralInformationViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CentralInformationView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CentralInformationViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CentralInformationViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICentralInformationViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CentralInformationView;
}

export class ComplicationCureMiddleView implements IComplicationCureMiddleView {
    /** 发生时间 */
    occurredTime!: dayjs.Dayjs;
    /** 透析记录标识 */
    cureRecordId!: string;
    /** 并发症 */
    name!: string;
    /** 处理 */
    dispose!: ComplicationItem[];
    /** 原因 */
    cause!: ComplicationItem[];
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: ComplicationFileItem[] | undefined;
    /** 透中事件记录标识 */
    cureComplicationId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IComplicationCureMiddleView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.dispose = [];
            this.cause = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.occurredTime = _data["occurredTime"] ? dayjs(_data["occurredTime"].toString()) : <any>undefined;
            this.cureRecordId = _data["cureRecordId"];
            this.name = _data["name"];
            if (Array.isArray(_data["dispose"])) {
                this.dispose = [] as any;
                for (let item of _data["dispose"])
                    this.dispose!.push(ComplicationItem.fromJS(item));
            }
            if (Array.isArray(_data["cause"])) {
                this.cause = [] as any;
                for (let item of _data["cause"])
                    this.cause!.push(ComplicationItem.fromJS(item));
            }
            this.remark = _data["remark"];
            if (Array.isArray(_data["complicationFiles"])) {
                this.complicationFiles = [] as any;
                for (let item of _data["complicationFiles"])
                    this.complicationFiles!.push(ComplicationFileItem.fromJS(item));
            }
            this.cureComplicationId = _data["cureComplicationId"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.surnameCode = _data["surnameCode"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ComplicationCureMiddleView {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationCureMiddleView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["occurredTime"] = this.occurredTime ? this.occurredTime.toLocaleString() : <any>undefined;
        data["cureRecordId"] = this.cureRecordId;
        data["name"] = this.name;
        if (Array.isArray(this.dispose)) {
            data["dispose"] = [];
            for (let item of this.dispose)
                data["dispose"].push(item.toJSON());
        }
        if (Array.isArray(this.cause)) {
            data["cause"] = [];
            for (let item of this.cause)
                data["cause"].push(item.toJSON());
        }
        data["remark"] = this.remark;
        if (Array.isArray(this.complicationFiles)) {
            data["complicationFiles"] = [];
            for (let item of this.complicationFiles)
                data["complicationFiles"].push(item.toJSON());
        }
        data["cureComplicationId"] = this.cureComplicationId;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["surnameCode"] = this.surnameCode;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IComplicationCureMiddleView {
    /** 发生时间 */
    occurredTime: dayjs.Dayjs;
    /** 透析记录标识 */
    cureRecordId: string;
    /** 并发症 */
    name: string;
    /** 处理 */
    dispose: ComplicationItem[];
    /** 原因 */
    cause: ComplicationItem[];
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: ComplicationFileItem[] | undefined;
    /** 透中事件记录标识 */
    cureComplicationId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class ComplicationCureMiddleViewResult implements IComplicationCureMiddleViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ComplicationCureMiddleView[] | undefined;

    constructor(data?: IComplicationCureMiddleViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ComplicationCureMiddleView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ComplicationCureMiddleViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationCureMiddleViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IComplicationCureMiddleViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ComplicationCureMiddleView[] | undefined;
}

export class ComplicationFileItem implements IComplicationFileItem {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;

    constructor(data?: IComplicationFileItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.extension = _data["extension"];
            this.length = _data["length"];
        }
    }

    static fromJS(data: any): ComplicationFileItem {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationFileItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["url"] = this.url;
        data["extension"] = this.extension;
        data["length"] = this.length;
        return data;
    }
}

export interface IComplicationFileItem {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
}

export class ComplicationItem implements IComplicationItem {
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IComplicationItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): ComplicationItem {
        data = typeof data === 'object' ? data : {};
        let result = new ComplicationItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IComplicationItem {
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析评估记录 */
export class CureAssementView implements ICureAssementView {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 评估类型 `DIC.DIALYSIS.ASSEMENT.TYPE` *透前评估,透析评估,透后评估* */
    type!: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId!: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 评估日期 */
    assementTime?: dayjs.Dayjs | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureAssementView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.type = _data["type"];
            this.tmplFormId = _data["tmplFormId"];
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.assementTime = _data["assementTime"] ? dayjs(_data["assementTime"].toString()) : <any>undefined;
            this.patientId = _data["patientId"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureAssementView {
        data = typeof data === 'object' ? data : {};
        let result = new CureAssementView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["type"] = this.type;
        data["tmplFormId"] = this.tmplFormId;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["assementTime"] = this.assementTime ? this.assementTime.toLocaleString() : <any>undefined;
        data["patientId"] = this.patientId;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透析评估记录 */
export interface ICureAssementView {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 评估类型 `DIC.DIALYSIS.ASSEMENT.TYPE` *透前评估,透析评估,透后评估* */
    type: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 评估日期 */
    assementTime?: dayjs.Dayjs | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureAssementViewResult implements ICureAssementViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureAssementView[] | undefined;

    constructor(data?: ICureAssementViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureAssementView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureAssementViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureAssementViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureAssementViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureAssementView[] | undefined;
}

/** Reponse */
export class CureAssementViewResultEntry implements ICureAssementViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureAssementView;

    constructor(data?: ICureAssementViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureAssementView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureAssementViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureAssementViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureAssementViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureAssementView;
}

/** 患者排床床位信息 */
export class CureBedItem implements ICureBedItem {
    /** 透析床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 透析床位名称 */
    deptDialysisBedName?: string | undefined;
    /** 序列 */
    deptDialysisBedSequence?: number;
    /** 科室设备标识 */
    devId?: string | undefined;
    /** 科室设备编号 */
    devCode?: string | undefined;
    /** 科室设备类型 */
    devType?: string | undefined;
    /** 科室设备型号 */
    devModel?: string | undefined;
    /** 是否阳性 *如阳性不可改为阴性* */
    devPositive?: number;
    /** 科室设备是否可用 */
    devAvailable?: number;
    /** 启用状态0,1 */
    deptDialysisBedEnabled?: number;
    /** 患者排床床位上的患者信息 */
    patients?: CurePatient[] | undefined;

    constructor(data?: ICureBedItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.deptDialysisBedName = _data["deptDialysisBedName"];
            this.deptDialysisBedSequence = _data["deptDialysisBedSequence"];
            this.devId = _data["devId"];
            this.devCode = _data["devCode"];
            this.devType = _data["devType"];
            this.devModel = _data["devModel"];
            this.devPositive = _data["devPositive"];
            this.devAvailable = _data["devAvailable"];
            this.deptDialysisBedEnabled = _data["deptDialysisBedEnabled"];
            if (Array.isArray(_data["patients"])) {
                this.patients = [] as any;
                for (let item of _data["patients"])
                    this.patients!.push(CurePatient.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBedItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureBedItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["deptDialysisBedName"] = this.deptDialysisBedName;
        data["deptDialysisBedSequence"] = this.deptDialysisBedSequence;
        data["devId"] = this.devId;
        data["devCode"] = this.devCode;
        data["devType"] = this.devType;
        data["devModel"] = this.devModel;
        data["devPositive"] = this.devPositive;
        data["devAvailable"] = this.devAvailable;
        data["deptDialysisBedEnabled"] = this.deptDialysisBedEnabled;
        if (Array.isArray(this.patients)) {
            data["patients"] = [];
            for (let item of this.patients)
                data["patients"].push(item.toJSON());
        }
        return data;
    }
}

/** 患者排床床位信息 */
export interface ICureBedItem {
    /** 透析床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 透析床位名称 */
    deptDialysisBedName?: string | undefined;
    /** 序列 */
    deptDialysisBedSequence?: number;
    /** 科室设备标识 */
    devId?: string | undefined;
    /** 科室设备编号 */
    devCode?: string | undefined;
    /** 科室设备类型 */
    devType?: string | undefined;
    /** 科室设备型号 */
    devModel?: string | undefined;
    /** 是否阳性 *如阳性不可改为阴性* */
    devPositive?: number;
    /** 科室设备是否可用 */
    devAvailable?: number;
    /** 启用状态0,1 */
    deptDialysisBedEnabled?: number;
    /** 患者排床床位上的患者信息 */
    patients?: CurePatient[] | undefined;
}

/** 床位患者明细 */
export class CureBedPatientDetail implements ICureBedPatientDetail {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 区间标识 */
    dialysisAreaId?: string | undefined;
    /** 床位 */
    dialysisAreaName?: string | undefined;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    dossierNum?: string | undefined;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者是否阳性0,1 */
    patientPositive?: number;
    /** 透析方式 `DIC.DIALYSIS.MODE`  *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义颜色 */
    fontColor?: string | undefined;
    /** 字体颜色名称 */
    fontColorName?: string | undefined;
    /** 透析器标识 */
    dialyzerId?: string | undefined;
    /** 透析器名称 */
    dialyzerName?: string | undefined;
    /** 透析器数量 */
    dialyzerCount?: string | undefined;
    /** 血滤器标识 */
    filterId?: string | undefined;
    /** 血滤器名称 */
    filterName?: string | undefined;
    /** 血滤器数量 */
    filterCount?: string | undefined;
    /** 灌流器标识 */
    perfusionId?: string | undefined;
    /** 灌流器名称 */
    perfusionName?: string | undefined;
    /** 灌流器数量 */
    perfusionCount?: string | undefined;
    /** 透析液标识 */
    dialysateId?: string | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 透析液数量 */
    dialysateCount?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 抗凝剂类型 */
    anticoagulantName?: string | undefined;
    /** 剂量 */
    anticoagulantTotal?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;

    constructor(data?: ICureBedPatientDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.weekdayName = _data["weekdayName"];
            this.dossierNum = _data["dossierNum"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientPositive = _data["patientPositive"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeName = _data["dialysisModeName"];
            this.color = _data["color"];
            this.colorName = _data["colorName"];
            this.fontColor = _data["fontColor"];
            this.fontColorName = _data["fontColorName"];
            this.dialyzerId = _data["dialyzerId"];
            this.dialyzerName = _data["dialyzerName"];
            this.dialyzerCount = _data["dialyzerCount"];
            this.filterId = _data["filterId"];
            this.filterName = _data["filterName"];
            this.filterCount = _data["filterCount"];
            this.perfusionId = _data["perfusionId"];
            this.perfusionName = _data["perfusionName"];
            this.perfusionCount = _data["perfusionCount"];
            this.dialysateId = _data["dialysateId"];
            this.dialysateName = _data["dialysateName"];
            this.dialysateCount = _data["dialysateCount"];
            this.icon = _data["icon"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.remark = _data["remark"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.anticoagulantTotal = _data["anticoagulantTotal"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(CureCostGroupView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureBedPatientDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CureBedPatientDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["weekday"] = this.weekday;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["weekdayName"] = this.weekdayName;
        data["dossierNum"] = this.dossierNum;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientPositive"] = this.patientPositive;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeName"] = this.dialysisModeName;
        data["color"] = this.color;
        data["colorName"] = this.colorName;
        data["fontColor"] = this.fontColor;
        data["fontColorName"] = this.fontColorName;
        data["dialyzerId"] = this.dialyzerId;
        data["dialyzerName"] = this.dialyzerName;
        data["dialyzerCount"] = this.dialyzerCount;
        data["filterId"] = this.filterId;
        data["filterName"] = this.filterName;
        data["filterCount"] = this.filterCount;
        data["perfusionId"] = this.perfusionId;
        data["perfusionName"] = this.perfusionName;
        data["perfusionCount"] = this.perfusionCount;
        data["dialysateId"] = this.dialysateId;
        data["dialysateName"] = this.dialysateName;
        data["dialysateCount"] = this.dialysateCount;
        data["icon"] = this.icon;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["remark"] = this.remark;
        data["anticoagulantName"] = this.anticoagulantName;
        data["anticoagulantTotal"] = this.anticoagulantTotal;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        return data;
    }
}

/** 床位患者明细 */
export interface ICureBedPatientDetail {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs | undefined;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 床位标识 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 区间标识 */
    dialysisAreaId?: string | undefined;
    /** 床位 */
    dialysisAreaName?: string | undefined;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    dossierNum?: string | undefined;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者是否阳性0,1 */
    patientPositive?: number;
    /** 透析方式 `DIC.DIALYSIS.MODE`  *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义颜色 */
    fontColor?: string | undefined;
    /** 字体颜色名称 */
    fontColorName?: string | undefined;
    /** 透析器标识 */
    dialyzerId?: string | undefined;
    /** 透析器名称 */
    dialyzerName?: string | undefined;
    /** 透析器数量 */
    dialyzerCount?: string | undefined;
    /** 血滤器标识 */
    filterId?: string | undefined;
    /** 血滤器名称 */
    filterName?: string | undefined;
    /** 血滤器数量 */
    filterCount?: string | undefined;
    /** 灌流器标识 */
    perfusionId?: string | undefined;
    /** 灌流器名称 */
    perfusionName?: string | undefined;
    /** 灌流器数量 */
    perfusionCount?: string | undefined;
    /** 透析液标识 */
    dialysateId?: string | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 透析液数量 */
    dialysateCount?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 抗凝剂类型 */
    anticoagulantName?: string | undefined;
    /** 剂量 */
    anticoagulantTotal?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
}

/** Reponse */
export class CureBedPatientDetailResultEntry implements ICureBedPatientDetailResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureBedPatientDetail;

    constructor(data?: ICureBedPatientDetailResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureBedPatientDetail.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureBedPatientDetailResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureBedPatientDetailResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureBedPatientDetailResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureBedPatientDetail;
}

/** 换床记录 */
export class CureChangeBed implements ICureChangeBed {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 原床位 */
    fromBedId?: string | undefined;
    /** 原床位 */
    fromBedName?: string | undefined;
    /** 现床位 */
    toBedId?: string | undefined;
    /** 现床位 */
    toBedName?: string | undefined;
    /** 原因 *如果是因为故障，反写到设备上* */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;

    constructor(data?: ICureChangeBed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.fromBedId = _data["fromBedId"];
            this.fromBedName = _data["fromBedName"];
            this.toBedId = _data["toBedId"];
            this.toBedName = _data["toBedName"];
            this.cause = _data["cause"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureChangeBed {
        data = typeof data === 'object' ? data : {};
        let result = new CureChangeBed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["fromBedId"] = this.fromBedId;
        data["fromBedName"] = this.fromBedName;
        data["toBedId"] = this.toBedId;
        data["toBedName"] = this.toBedName;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 换床记录 */
export interface ICureChangeBed {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 原床位 */
    fromBedId?: string | undefined;
    /** 原床位 */
    fromBedName?: string | undefined;
    /** 现床位 */
    toBedId?: string | undefined;
    /** 现床位 */
    toBedName?: string | undefined;
    /** 原因 *如果是因为故障，反写到设备上* */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;
}

/** Reponse */
export class CureChangeBedResult implements ICureChangeBedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureChangeBed[] | undefined;

    constructor(data?: ICureChangeBedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureChangeBed.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureChangeBedResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureChangeBedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureChangeBedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureChangeBed[] | undefined;
}

/** 换床记录 (ViewModel) */
export class CureChangeBedViewModel implements ICureChangeBedViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 原床位 */
    fromBedId!: string;
    /** 原床位 */
    fromBedName!: string;
    /** 现床位 */
    toBedId!: string;
    /** 现床位 */
    toBedName!: string;
    /** 原因 *如果是因为故障，反写到设备上* */
    cause!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureChangeBedViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.fromBedId = _data["fromBedId"];
            this.fromBedName = _data["fromBedName"];
            this.toBedId = _data["toBedId"];
            this.toBedName = _data["toBedName"];
            this.cause = _data["cause"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureChangeBedViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureChangeBedViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["fromBedId"] = this.fromBedId;
        data["fromBedName"] = this.fromBedName;
        data["toBedId"] = this.toBedId;
        data["toBedName"] = this.toBedName;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        return data;
    }
}

/** 换床记录 (ViewModel) */
export interface ICureChangeBedViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 原床位 */
    fromBedId: string;
    /** 原床位 */
    fromBedName: string;
    /** 现床位 */
    toBedId: string;
    /** 现床位 */
    toBedName: string;
    /** 原因 *如果是因为故障，反写到设备上* */
    cause: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析并发症 */
export class CureComplication implements ICureComplication {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 发生时间 */
    occurredTime?: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;

    constructor(data?: ICureComplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.occurredTime = _data["occurredTime"] ? dayjs(_data["occurredTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplication {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplication();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["occurredTime"] = this.occurredTime ? this.occurredTime.toLocaleString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析并发症 */
export interface ICureComplication {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 发生时间 */
    occurredTime?: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;
}

/** 透析并发症原因 */
export class CureComplicationCause implements ICureComplicationCause {
    /** 标识 */
    id?: string | undefined;
    /** [透析并发症标识](透析并发症) */
    cureComplicationId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    cureComplications?: CureComplication;

    constructor(data?: ICureComplicationCause) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureComplicationId = _data["cureComplicationId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.cureComplications = _data["cureComplications"] ? CureComplication.fromJS(_data["cureComplications"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplicationCause {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationCause();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureComplicationId"] = this.cureComplicationId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["cureComplications"] = this.cureComplications ? this.cureComplications.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析并发症原因 */
export interface ICureComplicationCause {
    /** 标识 */
    id?: string | undefined;
    /** [透析并发症标识](透析并发症) */
    cureComplicationId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    cureComplications?: CureComplication;
}

/** Reponse */
export class CureComplicationCauseResult implements ICureComplicationCauseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationCause[] | undefined;

    constructor(data?: ICureComplicationCauseResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureComplicationCause.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureComplicationCauseResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationCauseResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureComplicationCauseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationCause[] | undefined;
}

/** Reponse */
export class CureComplicationCauseResultEntry implements ICureComplicationCauseResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplicationCause;

    constructor(data?: ICureComplicationCauseResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureComplicationCause.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplicationCauseResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationCauseResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureComplicationCauseResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplicationCause;
}

/** 透析并发症原因 (ViewModel) */
export class CureComplicationCauseViewModel implements ICureComplicationCauseViewModel {
    /** [透析并发症标识](透析并发症Id) */
    cureComplicationId!: string;
    /** 名称 */
    name!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureComplicationCauseViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureComplicationId = _data["cureComplicationId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureComplicationCauseViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationCauseViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureComplicationId"] = this.cureComplicationId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析并发症原因 (ViewModel) */
export interface ICureComplicationCauseViewModel {
    /** [透析并发症标识](透析并发症Id) */
    cureComplicationId: string;
    /** 名称 */
    name: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析并发症处理 */
export class CureComplicationDispose implements ICureComplicationDispose {
    /** 标识 */
    id?: string | undefined;
    /** [透析并发症标识](透析并发症) */
    cureComplicationId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    cureComplications?: CureComplication;

    constructor(data?: ICureComplicationDispose) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureComplicationId = _data["cureComplicationId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.cureComplications = _data["cureComplications"] ? CureComplication.fromJS(_data["cureComplications"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplicationDispose {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationDispose();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureComplicationId"] = this.cureComplicationId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["cureComplications"] = this.cureComplications ? this.cureComplications.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析并发症处理 */
export interface ICureComplicationDispose {
    /** 标识 */
    id?: string | undefined;
    /** [透析并发症标识](透析并发症) */
    cureComplicationId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    cureComplications?: CureComplication;
}

/** Reponse */
export class CureComplicationDisposeResult implements ICureComplicationDisposeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationDispose[] | undefined;

    constructor(data?: ICureComplicationDisposeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureComplicationDispose.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureComplicationDisposeResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationDisposeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureComplicationDisposeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationDispose[] | undefined;
}

/** Reponse */
export class CureComplicationDisposeResultEntry implements ICureComplicationDisposeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplicationDispose;

    constructor(data?: ICureComplicationDisposeResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureComplicationDispose.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplicationDisposeResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationDisposeResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureComplicationDisposeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplicationDispose;
}

/** 透析并发症处理 (ViewModel) */
export class CureComplicationDisposeViewModel implements ICureComplicationDisposeViewModel {
    /** [透析并发症标识](透析并发症Id) */
    cureComplicationId!: string;
    /** 名称 */
    name!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureComplicationDisposeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureComplicationId = _data["cureComplicationId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureComplicationDisposeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationDisposeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureComplicationId"] = this.cureComplicationId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析并发症处理 (ViewModel) */
export interface ICureComplicationDisposeViewModel {
    /** [透析并发症标识](透析并发症Id) */
    cureComplicationId: string;
    /** 名称 */
    name: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析并发症照片 */
export class CureComplicationFile implements ICureComplicationFile {
    /** 标识 */
    id?: string | undefined;
    /** [透析并发症标识](透析并发症) */
    cureComplicationId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    cureComplications?: CureComplication;
    hfsFiless?: HfsFiles;

    constructor(data?: ICureComplicationFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureComplicationId = _data["cureComplicationId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.cureComplications = _data["cureComplications"] ? CureComplication.fromJS(_data["cureComplications"]) : <any>undefined;
            this.hfsFiless = _data["hfsFiless"] ? HfsFiles.fromJS(_data["hfsFiless"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplicationFile {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureComplicationId"] = this.cureComplicationId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["cureComplications"] = this.cureComplications ? this.cureComplications.toJSON() : <any>undefined;
        data["hfsFiless"] = this.hfsFiless ? this.hfsFiless.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析并发症照片 */
export interface ICureComplicationFile {
    /** 标识 */
    id?: string | undefined;
    /** [透析并发症标识](透析并发症) */
    cureComplicationId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    cureComplications?: CureComplication;
    hfsFiless?: HfsFiles;
}

/** Reponse */
export class CureComplicationFileResult implements ICureComplicationFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationFile[] | undefined;

    constructor(data?: ICureComplicationFileResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureComplicationFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureComplicationFileResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationFileResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureComplicationFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureComplicationFile[] | undefined;
}

/** 透析并发症照片 (ViewModel) */
export class CureComplicationFileViewModel implements ICureComplicationFileViewModel {
    /** [透析并发症标识](透析并发症Id) */
    cureComplicationId!: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureComplicationFileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureComplicationId = _data["cureComplicationId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureComplicationFileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationFileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureComplicationId"] = this.cureComplicationId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析并发症照片 (ViewModel) */
export interface ICureComplicationFileViewModel {
    /** [透析并发症标识](透析并发症Id) */
    cureComplicationId: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId: string;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class CureComplicationResultEntry implements ICureComplicationResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplication;

    constructor(data?: ICureComplicationResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureComplication.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureComplicationResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureComplicationResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureComplication;
}

/** 透析并发症 (ViewModel) */
export class CureComplicationViewModel implements ICureComplicationViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 发生时间 */
    occurredTime!: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId!: string;
    /** 操作者姓名 */
    operatorName!: string;
    /** 名称 */
    name!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureComplicationViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.occurredTime = _data["occurredTime"] ? dayjs(_data["occurredTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureComplicationViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureComplicationViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["occurredTime"] = this.occurredTime ? this.occurredTime.toLocaleString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析并发症 (ViewModel) */
export interface ICureComplicationViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 发生时间 */
    occurredTime: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId: string;
    /** 操作者姓名 */
    operatorName: string;
    /** 名称 */
    name: string;
    /** 备注 */
    remark?: string | undefined;
}

export class CureCostGroupView implements ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 批号管理 */
    batchManage!: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: ICureCostGroupView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.batchManage = _data["batchManage"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.devBarCode = _data["devBarCode"];
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.sequence = _data["sequence"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.spec = _data["spec"];
            this.sellingPrice = _data["sellingPrice"];
            this.unit = _data["unit"];
            this.unitLabel = _data["unitLabel"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Label = _data["unitLevel1Label"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.enabled = _data["enabled"];
            this.inventoryCount = _data["inventoryCount"];
            this.batchNo = _data["batchNo"];
            if (Array.isArray(_data["batchItems"])) {
                this.batchItems = [] as any;
                for (let item of _data["batchItems"])
                    this.batchItems!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCostGroupView {
        data = typeof data === 'object' ? data : {};
        let result = new CureCostGroupView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["batchManage"] = this.batchManage;
        data["code"] = this.code;
        data["name"] = this.name;
        data["devBarCode"] = this.devBarCode;
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["sequence"] = this.sequence;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["spec"] = this.spec;
        data["sellingPrice"] = this.sellingPrice;
        data["unit"] = this.unit;
        data["unitLabel"] = this.unitLabel;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Label"] = this.unitLevel1Label;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["enabled"] = this.enabled;
        data["inventoryCount"] = this.inventoryCount;
        data["batchNo"] = this.batchNo;
        if (Array.isArray(this.batchItems)) {
            data["batchItems"] = [];
            for (let item of this.batchItems)
                data["batchItems"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICureCostGroupView {
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 批号管理 */
    batchManage: number | undefined;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 项目标识 */
    cureRecordConsumableId?: string | undefined;
    /** 项目排序 */
    sequence?: number;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 种类名称 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 售价 */
    sellingPrice?: number | undefined;
    /** 基本单位 */
    unit?: string | undefined;
    /** 基本单位显示值 */
    unitLabel?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 一级单位显示值 */
    unitLevel1Label?: string | undefined;
    /** 一级单位与基本单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 项目启用状态0,1 */
    enabled?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 批号明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;
}

/** 透后病程记录 */
export class CureCourseEditModel implements ICureCourseEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 病程记录内容 */
    content!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureCourseEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureCourseEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureCourseEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透后病程记录 */
export interface ICureCourseEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 病程记录内容 */
    content: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 透后病程记录 */
export class CureCourseView implements ICureCourseView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 病程记录内容 */
    content!: string;
    /** 备注 */
    remark?: string | undefined;
    /** id */
    id?: string | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 是否已经下机 */
    hasDown?: boolean;
    /** 是否已经透后病程记录 */
    hasCureCourse?: boolean;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 标识 */
    cureCourseId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 记录人员名称 */
    sysUserName?: string | undefined;
    /** 记录人员别名 */
    sysUserName2?: string | undefined;
    /** 记录人员全名 */
    sysUserNameFull?: string | undefined;
    /** [记录人员标识](#用户信息) */
    sysUserId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureCourseView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.content = _data["content"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.hasDown = _data["hasDown"];
            this.hasCureCourse = _data["hasCureCourse"];
            this.patientId = _data["patientId"];
            this.cureCourseId = _data["cureCourseId"];
            this.sn = _data["sn"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.sysUserName = _data["sysUserName"];
            this.sysUserName2 = _data["sysUserName2"];
            this.sysUserNameFull = _data["sysUserNameFull"];
            this.sysUserId = _data["sysUserId"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureCourseView {
        data = typeof data === 'object' ? data : {};
        let result = new CureCourseView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["content"] = this.content;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["timeOff"] = this.timeOff ? this.timeOff.toLocaleString() : <any>undefined;
        data["hasDown"] = this.hasDown;
        data["hasCureCourse"] = this.hasCureCourse;
        data["patientId"] = this.patientId;
        data["cureCourseId"] = this.cureCourseId;
        data["sn"] = this.sn;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["sysUserName"] = this.sysUserName;
        data["sysUserName2"] = this.sysUserName2;
        data["sysUserNameFull"] = this.sysUserNameFull;
        data["sysUserId"] = this.sysUserId;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透后病程记录 */
export interface ICureCourseView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 病程记录内容 */
    content: string;
    /** 备注 */
    remark?: string | undefined;
    /** id */
    id?: string | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 是否已经下机 */
    hasDown?: boolean;
    /** 是否已经透后病程记录 */
    hasCureCourse?: boolean;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 标识 */
    cureCourseId?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析区间标识 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 记录人员名称 */
    sysUserName?: string | undefined;
    /** 记录人员别名 */
    sysUserName2?: string | undefined;
    /** 记录人员全名 */
    sysUserNameFull?: string | undefined;
    /** [记录人员标识](#用户信息) */
    sysUserId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureCourseViewResult implements ICureCourseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCourseView[] | undefined;

    constructor(data?: ICureCourseViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureCourseView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureCourseViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureCourseViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureCourseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureCourseView[] | undefined;
}

/** Reponse */
export class CureCourseViewResultEntry implements ICureCourseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureCourseView;

    constructor(data?: ICureCourseViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureCourseView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureCourseViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureCourseViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureCourseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureCourseView;
}

/** 透析医嘱 */
export class CureDa implements ICureDa {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 执行日期 */
    execDate?: dayjs.Dayjs;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 自备药0,1 */
    owned?: number;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 排序 */
    order?: number;
    cureRecords?: CureRecord;
    patients?: Patient;
    roomItemLists?: RoomItemList;

    constructor(data?: ICureDa) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.patientId = _data["patientId"];
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.content = _data["content"];
            this.groupId = _data["groupId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.status = _data["status"];
            this.owned = _data["owned"];
            this.orally = _data["orally"];
            this.patientDaLongtermId = _data["patientDaLongtermId"];
            this.patientDaTemporaryId = _data["patientDaTemporaryId"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.order = _data["order"];
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.roomItemLists = _data["roomItemLists"] ? RoomItemList.fromJS(_data["roomItemLists"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDa {
        data = typeof data === 'object' ? data : {};
        let result = new CureDa();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["patientId"] = this.patientId;
        data["execDate"] = this.execDate ? this.execDate.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["content"] = this.content;
        data["groupId"] = this.groupId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toLocaleString() : <any>undefined;
        data["checkTime"] = this.checkTime ? this.checkTime.toLocaleString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toLocaleString() : <any>undefined;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["status"] = this.status;
        data["owned"] = this.owned;
        data["orally"] = this.orally;
        data["patientDaLongtermId"] = this.patientDaLongtermId;
        data["patientDaTemporaryId"] = this.patientDaTemporaryId;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["order"] = this.order;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["roomItemLists"] = this.roomItemLists ? this.roomItemLists.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析医嘱 */
export interface ICureDa {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 执行日期 */
    execDate?: dayjs.Dayjs;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 自备药0,1 */
    owned?: number;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 排序 */
    order?: number;
    cureRecords?: CureRecord;
    patients?: Patient;
    roomItemLists?: RoomItemList;
}

/** 透析医嘱修改记录 */
export class CureDaLog implements ICureDaLog {
    /** 标识 */
    id?: string | undefined;
    /** [透析医嘱标识](透析医嘱) */
    cureDaId?: string | undefined;
    /** 操作时间 */
    operatorTime?: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 修改原因 */
    cause?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureDas?: CureDa;

    constructor(data?: ICureDaLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureDaId = _data["cureDaId"];
            this.operatorTime = _data["operatorTime"] ? dayjs(_data["operatorTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.cause = _data["cause"];
            this.content = _data["content"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureDas = _data["cureDas"] ? CureDa.fromJS(_data["cureDas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDaLog {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureDaId"] = this.cureDaId;
        data["operatorTime"] = this.operatorTime ? this.operatorTime.toLocaleString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["cause"] = this.cause;
        data["content"] = this.content;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["cureDas"] = this.cureDas ? this.cureDas.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析医嘱修改记录 */
export interface ICureDaLog {
    /** 标识 */
    id?: string | undefined;
    /** [透析医嘱标识](透析医嘱) */
    cureDaId?: string | undefined;
    /** 操作时间 */
    operatorTime?: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 修改原因 */
    cause?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureDas?: CureDa;
}

/** Reponse */
export class CureDaLogResult implements ICureDaLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaLog[] | undefined;

    constructor(data?: ICureDaLogResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDaLog.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDaLogResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaLogResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDaLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaLog[] | undefined;
}

/** 透析医嘱修改记录 (ViewModel) */
export class CureDaLogViewModel implements ICureDaLogViewModel {
    /** [透析医嘱标识](透析医嘱Id) */
    cureDaId!: string;
    /** 操作时间 */
    operatorTime!: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId!: string;
    /** 操作者姓名 */
    operatorName!: string;
    /** 修改原因 */
    cause?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;

    constructor(data?: ICureDaLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureDaId = _data["cureDaId"];
            this.operatorTime = _data["operatorTime"] ? dayjs(_data["operatorTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.cause = _data["cause"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): CureDaLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureDaId"] = this.cureDaId;
        data["operatorTime"] = this.operatorTime ? this.operatorTime.toLocaleString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["cause"] = this.cause;
        data["content"] = this.content;
        return data;
    }
}

/** 透析医嘱修改记录 (ViewModel) */
export interface ICureDaLogViewModel {
    /** [透析医嘱标识](透析医嘱Id) */
    cureDaId: string;
    /** 操作时间 */
    operatorTime: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId: string;
    /** 操作者姓名 */
    operatorName: string;
    /** 修改原因 */
    cause?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
}

/** Reponse */
export class CureDaResultEntry implements ICureDaResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDa;

    constructor(data?: ICureDaResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureDa.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDaResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureDaResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDa;
}

/** 临时透析医嘱 */
export class CureDaTemp implements ICureDaTemp {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 长嘱或临嘱标识 */
    daId?: string | undefined;
    cureRecords?: CureRecord;

    constructor(data?: ICureDaTemp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.daId = _data["daId"];
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDaTemp {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaTemp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["daId"] = this.daId;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 临时透析医嘱 */
export interface ICureDaTemp {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 长嘱或临嘱标识 */
    daId?: string | undefined;
    cureRecords?: CureRecord;
}

/** Reponse */
export class CureDaTempResult implements ICureDaTempResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaTemp[] | undefined;

    constructor(data?: ICureDaTempResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDaTemp.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDaTempResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaTempResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDaTempResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaTemp[] | undefined;
}

/** Reponse */
export class CureDaTempResultEntry implements ICureDaTempResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDaTemp;

    constructor(data?: ICureDaTempResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureDaTemp.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDaTempResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaTempResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureDaTempResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDaTemp;
}

/** 临时透析医嘱 (ViewModel) */
export class CureDaTempViewModel implements ICureDaTempViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 长嘱或临嘱标识 */
    daId?: string | undefined;

    constructor(data?: ICureDaTempViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.daId = _data["daId"];
        }
    }

    static fromJS(data: any): CureDaTempViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaTempViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["daId"] = this.daId;
        return data;
    }
}

/** 临时透析医嘱 (ViewModel) */
export interface ICureDaTempViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 长嘱或临嘱标识 */
    daId?: string | undefined;
}

/** 透析医嘱 */
export class CureDaView implements ICureDaView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned!: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行日期 */
    execDate!: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 排序 */
    order!: number;
    /** 基本单位（用于组合规格） `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 一级单位（用于组合规格） `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 区域 */
    deptDialysisAreaId?: string | undefined;
    /** 区域排序 */
    deptDialysisSequence?: number | undefined;
    /** 区域名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床位序号 */
    bedSequence?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者拼音首字母 */
    pinYinCode?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 医嘱类型 */
    cureDaTypeName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 项目分类标识 */
    roomItemTypeId?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 完整规格 */
    fullSpecLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 是否允许核对(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowCheck?: boolean;
    /** 是否允许编辑(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowModify?: boolean;
    /** 是否允许执行(已核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能执行)(用户权限未判断) */
    allowExec?: boolean;
    /** 是否允许撤销(未执行未撤销的医嘱，才能撤销)(用户权限未判断) */
    allowRevocation?: boolean;
    /** 撤销人 */
    revocationer?: string | undefined;
    /** 撤销时间 */
    revocationTime?: dayjs.Dayjs | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 来源标签 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;

    constructor(data?: ICureDaView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.name = _data["name"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.orally = _data["orally"];
            this.owned = _data["owned"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.execDate = _data["execDate"] ? dayjs(_data["execDate"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.order = _data["order"];
            this.unitBase = _data["unitBase"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.unitLevel1 = _data["unitLevel1"];
            this.groupId = _data["groupId"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.patientDaLongtermId = _data["patientDaLongtermId"];
            this.patientDaTemporaryId = _data["patientDaTemporaryId"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.deptDialysisSequence = _data["deptDialysisSequence"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.bedNumber = _data["bedNumber"];
            this.bedSequence = _data["bedSequence"];
            this.patientName = _data["patientName"];
            this.patientAge = _data["patientAge"];
            this.patientGender = _data["patientGender"];
            this.patientDept = _data["patientDept"];
            this.patientInNo = _data["patientInNo"];
            this.patientBed = _data["patientBed"];
            this.hospName = _data["hospName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.pinYinCode = _data["pinYinCode"];
            this.idNumber = _data["idNumber"];
            this.idType = _data["idType"];
            this.cureDaTypeName = _data["cureDaTypeName"];
            this.cureDaContent = _data["cureDaContent"];
            this.group = _data["group"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.unitName = _data["unitName"];
            this.singleUnitName = _data["singleUnitName"];
            this.usageName = _data["usageName"];
            this.statusName = _data["statusName"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.fullSpecLabel = _data["fullSpecLabel"];
            this.nameGoods = _data["nameGoods"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            this.allowCheck = _data["allowCheck"];
            this.allowModify = _data["allowModify"];
            this.allowExec = _data["allowExec"];
            this.allowRevocation = _data["allowRevocation"];
            this.revocationer = _data["revocationer"];
            this.revocationTime = _data["revocationTime"] ? dayjs(_data["revocationTime"].toString()) : <any>undefined;
            this.typeName = _data["typeName"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.patientId = _data["patientId"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.execNurseName = _data["execNurseName"];
            this.execNurseTime = _data["execNurseTime"];
            this.openTimeHH = _data["openTimeHH"];
            this.openTimeDate = _data["openTimeDate"];
        }
    }

    static fromJS(data: any): CureDaView {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["type"] = this.type;
        data["content"] = this.content;
        data["name"] = this.name;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["orally"] = this.orally;
        data["owned"] = this.owned;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toLocaleString() : <any>undefined;
        data["execDate"] = this.execDate ? this.execDate.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["order"] = this.order;
        data["unitBase"] = this.unitBase;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["unitLevel1"] = this.unitLevel1;
        data["groupId"] = this.groupId;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["checkTime"] = this.checkTime ? this.checkTime.toLocaleString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toLocaleString() : <any>undefined;
        data["status"] = this.status;
        data["patientDaLongtermId"] = this.patientDaLongtermId;
        data["patientDaTemporaryId"] = this.patientDaTemporaryId;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["deptDialysisSequence"] = this.deptDialysisSequence;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["bedNumber"] = this.bedNumber;
        data["bedSequence"] = this.bedSequence;
        data["patientName"] = this.patientName;
        data["patientAge"] = this.patientAge;
        data["patientGender"] = this.patientGender;
        data["patientDept"] = this.patientDept;
        data["patientInNo"] = this.patientInNo;
        data["patientBed"] = this.patientBed;
        data["hospName"] = this.hospName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["pinYinCode"] = this.pinYinCode;
        data["idNumber"] = this.idNumber;
        data["idType"] = this.idType;
        data["cureDaTypeName"] = this.cureDaTypeName;
        data["cureDaContent"] = this.cureDaContent;
        data["group"] = this.group;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["unitName"] = this.unitName;
        data["singleUnitName"] = this.singleUnitName;
        data["usageName"] = this.usageName;
        data["statusName"] = this.statusName;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["fullSpecLabel"] = this.fullSpecLabel;
        data["nameGoods"] = this.nameGoods;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        data["allowCheck"] = this.allowCheck;
        data["allowModify"] = this.allowModify;
        data["allowExec"] = this.allowExec;
        data["allowRevocation"] = this.allowRevocation;
        data["revocationer"] = this.revocationer;
        data["revocationTime"] = this.revocationTime ? this.revocationTime.toLocaleString() : <any>undefined;
        data["typeName"] = this.typeName;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["patientId"] = this.patientId;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["execNurseName"] = this.execNurseName;
        data["execNurseTime"] = this.execNurseTime;
        data["openTimeHH"] = this.openTimeHH;
        data["openTimeDate"] = this.openTimeDate;
        return data;
    }
}

/** 透析医嘱 */
export interface ICureDaView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** [项目标识](#项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 数量单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次用量 *前端验证必填* */
    singleDosage?: number | undefined;
    /** 单次用量单位 `DIC.SYS.UNIT`  *前端验证必填* */
    singleUnit?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 自备药0,1 */
    owned: number;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 执行日期 */
    execDate: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** 排序 */
    order: number;
    /** 基本单位（用于组合规格） `DIC.SYS.UNIT` */
    unitBase?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 一级单位（用于组合规格） `DIC.SYS.UNIT` */
    unitLevel1?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 长期医嘱标识 *医嘱来源* */
    patientDaLongtermId?: string | undefined;
    /** 临时医嘱标识 *医嘱来源* */
    patientDaTemporaryId?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 区域 */
    deptDialysisAreaId?: string | undefined;
    /** 区域排序 */
    deptDialysisSequence?: number | undefined;
    /** 区域名称 */
    deptDialysisAreaName?: string | undefined;
    /** 床号 */
    bedNumber?: string | undefined;
    /** 床位序号 */
    bedSequence?: number | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    patientAge?: string | undefined;
    patientGender?: string | undefined;
    patientDept?: string | undefined;
    patientInNo?: string | undefined;
    patientBed?: string | undefined;
    hospName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者拼音首字母 */
    pinYinCode?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 医嘱类型 */
    cureDaTypeName?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 项目分类标识 */
    roomItemTypeId?: string | undefined;
    /** 数量单位名称 */
    unitName?: string | undefined;
    /** 单次用量单位名称 */
    singleUnitName?: string | undefined;
    /** 用法名称 */
    usageName?: string | undefined;
    /** 执行状态名称 */
    statusName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 完整规格 */
    fullSpecLabel?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 是否允许核对(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowCheck?: boolean;
    /** 是否允许编辑(未核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能核对)(用户权限未判断) */
    allowModify?: boolean;
    /** 是否允许执行(已核对已上机的医嘱，并且开启下机后允许执行或者未下机，才能执行)(用户权限未判断) */
    allowExec?: boolean;
    /** 是否允许撤销(未执行未撤销的医嘱，才能撤销)(用户权限未判断) */
    allowRevocation?: boolean;
    /** 撤销人 */
    revocationer?: string | undefined;
    /** 撤销时间 */
    revocationTime?: dayjs.Dayjs | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 来源标签 */
    source?: string | undefined;
    /** 药品库存 */
    inventoryCount?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 患者标识 */
    patientId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    execNurseName?: string | undefined;
    execNurseTime?: string | undefined;
    openTimeHH?: string | undefined;
    openTimeDate?: string | undefined;
}

/** Reponse */
export class CureDaViewResult implements ICureDaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaView[] | undefined;

    constructor(data?: ICureDaViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDaView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDaViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaView[] | undefined;
}

/** 作废医嘱 */
export class CureDaVoided implements ICureDaVoided {
    /** 标识 */
    id?: string | undefined;
    /** [透析医嘱标识](透析医嘱) */
    cureDaId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [透析记录单标识](透析记录单信息) */
    cureRecordId?: string | undefined;
    /** 操作人 */
    operater?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;
    /** 作废原因 */
    reason?: string | undefined;
    cureDas?: CureDa;
    patients?: Patient;
    cureRecords?: CureRecord;

    constructor(data?: ICureDaVoided) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureDaId = _data["cureDaId"];
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.operater = _data["operater"];
            this.operateTime = _data["operateTime"] ? dayjs(_data["operateTime"].toString()) : <any>undefined;
            this.reason = _data["reason"];
            this.cureDas = _data["cureDas"] ? CureDa.fromJS(_data["cureDas"]) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDaVoided {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaVoided();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureDaId"] = this.cureDaId;
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["operater"] = this.operater;
        data["operateTime"] = this.operateTime ? this.operateTime.toLocaleString() : <any>undefined;
        data["reason"] = this.reason;
        data["cureDas"] = this.cureDas ? this.cureDas.toJSON() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 作废医嘱 */
export interface ICureDaVoided {
    /** 标识 */
    id?: string | undefined;
    /** [透析医嘱标识](透析医嘱) */
    cureDaId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [透析记录单标识](透析记录单信息) */
    cureRecordId?: string | undefined;
    /** 操作人 */
    operater?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;
    /** 作废原因 */
    reason?: string | undefined;
    cureDas?: CureDa;
    patients?: Patient;
    cureRecords?: CureRecord;
}

/** 作废医嘱 */
export class CureDaVoidedCustomView implements ICureDaVoidedCustomView {
    /** 标识 */
    id?: string | undefined;
    /** [透析医嘱标识](透析医嘱) */
    cureDaId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [透析记录单标识](透析记录单信息) */
    cureRecordId?: string | undefined;
    /** 操作人 */
    operater?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;
    /** 作废原因 */
    reason?: string | undefined;
    cureDas?: CureDa;
    patients?: Patient;
    cureRecords?: CureRecord;
    /** 医嘱内容 */
    content?: string | undefined;
    /** 开立医生 */
    doctorName?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    group?: string | undefined;
    groupId?: string | undefined;

    constructor(data?: ICureDaVoidedCustomView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureDaId = _data["cureDaId"];
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.operater = _data["operater"];
            this.operateTime = _data["operateTime"] ? dayjs(_data["operateTime"].toString()) : <any>undefined;
            this.reason = _data["reason"];
            this.cureDas = _data["cureDas"] ? CureDa.fromJS(_data["cureDas"]) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
            this.content = _data["content"];
            this.doctorName = _data["doctorName"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseName = _data["nurseName"];
            this.group = _data["group"];
            this.groupId = _data["groupId"];
        }
    }

    static fromJS(data: any): CureDaVoidedCustomView {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaVoidedCustomView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureDaId"] = this.cureDaId;
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["operater"] = this.operater;
        data["operateTime"] = this.operateTime ? this.operateTime.toLocaleString() : <any>undefined;
        data["reason"] = this.reason;
        data["cureDas"] = this.cureDas ? this.cureDas.toJSON() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        data["content"] = this.content;
        data["doctorName"] = this.doctorName;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseName"] = this.nurseName;
        data["group"] = this.group;
        data["groupId"] = this.groupId;
        return data;
    }
}

/** 作废医嘱 */
export interface ICureDaVoidedCustomView {
    /** 标识 */
    id?: string | undefined;
    /** [透析医嘱标识](透析医嘱) */
    cureDaId?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [透析记录单标识](透析记录单信息) */
    cureRecordId?: string | undefined;
    /** 操作人 */
    operater?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;
    /** 作废原因 */
    reason?: string | undefined;
    cureDas?: CureDa;
    patients?: Patient;
    cureRecords?: CureRecord;
    /** 医嘱内容 */
    content?: string | undefined;
    /** 开立医生 */
    doctorName?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    group?: string | undefined;
    groupId?: string | undefined;
}

/** Reponse */
export class CureDaVoidedCustomViewResult implements ICureDaVoidedCustomViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaVoidedCustomView[] | undefined;

    constructor(data?: ICureDaVoidedCustomViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureDaVoidedCustomView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDaVoidedCustomViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaVoidedCustomViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureDaVoidedCustomViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureDaVoidedCustomView[] | undefined;
}

/** 作废医嘱 */
export class CureDaVoidedEditModel implements ICureDaVoidedEditModel {
    /** [透析医嘱标识](#透析医嘱) */
    cureDaId?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** [透析记录单标识](#透析记录单信息) */
    cureRecordId?: string | undefined;
    /** 操作人 */
    operater?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;
    /** 作废原因 */
    reason?: string | undefined;

    constructor(data?: ICureDaVoidedEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureDaId = _data["cureDaId"];
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.operater = _data["operater"];
            this.operateTime = _data["operateTime"] ? dayjs(_data["operateTime"].toString()) : <any>undefined;
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): CureDaVoidedEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaVoidedEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureDaId"] = this.cureDaId;
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["operater"] = this.operater;
        data["operateTime"] = this.operateTime ? this.operateTime.toLocaleString() : <any>undefined;
        data["reason"] = this.reason;
        return data;
    }
}

/** 作废医嘱 */
export interface ICureDaVoidedEditModel {
    /** [透析医嘱标识](#透析医嘱) */
    cureDaId?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** [透析记录单标识](#透析记录单信息) */
    cureRecordId?: string | undefined;
    /** 操作人 */
    operater?: string | undefined;
    /** 操作时间 */
    operateTime?: dayjs.Dayjs | undefined;
    /** 作废原因 */
    reason?: string | undefined;
}

/** Reponse */
export class CureDaVoidedResultEntry implements ICureDaVoidedResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDaVoided;

    constructor(data?: ICureDaVoidedResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureDaVoided.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureDaVoidedResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureDaVoidedResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureDaVoidedResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureDaVoided;
}

/** 透析区间信息 */
export class CureDialysisItem implements ICureDialysisItem {
    /** 透析区间标识 */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    deptDialysisAreaType?: string | undefined;
    /** 类型名称 */
    deptDialysisAreaTypeName?: string | undefined;
    /** 图标 */
    deptDialysisAreaIcon?: string | undefined;
    /** 图标 */
    deptDialysisAreaIconLabel?: string | undefined;
    /** 是否阳性分区0,1 */
    deptDialysisAreaPositive?: number;
    /** 序列 */
    deptDialysisAreaSequence?: number;
    /** 启用状态0,1 */
    deptDialysisAreaEnabled?: number;
    /** 患者排床床位信息 */
    bedItems?: CureBedItem[] | undefined;

    constructor(data?: ICureDialysisItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.deptDialysisAreaType = _data["deptDialysisAreaType"];
            this.deptDialysisAreaTypeName = _data["deptDialysisAreaTypeName"];
            this.deptDialysisAreaIcon = _data["deptDialysisAreaIcon"];
            this.deptDialysisAreaIconLabel = _data["deptDialysisAreaIconLabel"];
            this.deptDialysisAreaPositive = _data["deptDialysisAreaPositive"];
            this.deptDialysisAreaSequence = _data["deptDialysisAreaSequence"];
            this.deptDialysisAreaEnabled = _data["deptDialysisAreaEnabled"];
            if (Array.isArray(_data["bedItems"])) {
                this.bedItems = [] as any;
                for (let item of _data["bedItems"])
                    this.bedItems!.push(CureBedItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureDialysisItem {
        data = typeof data === 'object' ? data : {};
        let result = new CureDialysisItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["deptDialysisAreaType"] = this.deptDialysisAreaType;
        data["deptDialysisAreaTypeName"] = this.deptDialysisAreaTypeName;
        data["deptDialysisAreaIcon"] = this.deptDialysisAreaIcon;
        data["deptDialysisAreaIconLabel"] = this.deptDialysisAreaIconLabel;
        data["deptDialysisAreaPositive"] = this.deptDialysisAreaPositive;
        data["deptDialysisAreaSequence"] = this.deptDialysisAreaSequence;
        data["deptDialysisAreaEnabled"] = this.deptDialysisAreaEnabled;
        if (Array.isArray(this.bedItems)) {
            data["bedItems"] = [];
            for (let item of this.bedItems)
                data["bedItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析区间信息 */
export interface ICureDialysisItem {
    /** 透析区间标识 */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    deptDialysisAreaType?: string | undefined;
    /** 类型名称 */
    deptDialysisAreaTypeName?: string | undefined;
    /** 图标 */
    deptDialysisAreaIcon?: string | undefined;
    /** 图标 */
    deptDialysisAreaIconLabel?: string | undefined;
    /** 是否阳性分区0,1 */
    deptDialysisAreaPositive?: number;
    /** 序列 */
    deptDialysisAreaSequence?: number;
    /** 启用状态0,1 */
    deptDialysisAreaEnabled?: number;
    /** 患者排床床位信息 */
    bedItems?: CureBedItem[] | undefined;
}

export class CureFieldValueView implements ICureFieldValueView {
    /** 透析记录单 */
    cureRecordId?: string | undefined;
    /** 字段名 */
    fieldKey?: string | undefined;
    /** 字段值 */
    fieldValue?: string | undefined;
    /** 字段类型 */
    dataType?: string | undefined;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: ICureFieldValueView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.fieldKey = _data["fieldKey"];
            this.fieldValue = _data["fieldValue"];
            this.dataType = _data["dataType"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): CureFieldValueView {
        data = typeof data === 'object' ? data : {};
        let result = new CureFieldValueView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["fieldKey"] = this.fieldKey;
        data["fieldValue"] = this.fieldValue;
        data["dataType"] = this.dataType;
        data["unit"] = this.unit;
        return data;
    }
}

export interface ICureFieldValueView {
    /** 透析记录单 */
    cureRecordId?: string | undefined;
    /** 字段名 */
    fieldKey?: string | undefined;
    /** 字段值 */
    fieldValue?: string | undefined;
    /** 字段类型 */
    dataType?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
}

/** 抗高血压药治疗信息 */
export class CureInformationAntihypertensiveAgentsEditModel implements ICureInformationAntihypertensiveAgentsEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 处方种类 *多选* *钙通道阻滞剂,ACEI,ARB,α阻滞剂 ,αβ阻滞剂,中枢性降压药,利尿剂,其它 */
    prescription?: string | undefined;
    /** 其它处方种类 */
    prescriptionOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureInformationAntihypertensiveAgentsEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.prescription = _data["prescription"];
            this.prescriptionOther = _data["prescriptionOther"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureInformationAntihypertensiveAgentsEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationAntihypertensiveAgentsEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["prescription"] = this.prescription;
        data["prescriptionOther"] = this.prescriptionOther;
        data["remark"] = this.remark;
        return data;
    }
}

/** 抗高血压药治疗信息 */
export interface ICureInformationAntihypertensiveAgentsEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 处方种类 *多选* *钙通道阻滞剂,ACEI,ARB,α阻滞剂 ,αβ阻滞剂,中枢性降压药,利尿剂,其它 */
    prescription?: string | undefined;
    /** 其它处方种类 */
    prescriptionOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 抗高血压药治疗信息 */
export class CureInformationAntihypertensiveAgentsView implements ICureInformationAntihypertensiveAgentsView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 处方种类 *多选* *钙通道阻滞剂,ACEI,ARB,α阻滞剂 ,αβ阻滞剂,中枢性降压药,利尿剂,其它 */
    prescription?: string | undefined;
    /** 其它处方种类 */
    prescriptionOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureInformationAntihypertensiveAgentsView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.prescription = _data["prescription"];
            this.prescriptionOther = _data["prescriptionOther"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationAntihypertensiveAgentsView {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationAntihypertensiveAgentsView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["prescription"] = this.prescription;
        data["prescriptionOther"] = this.prescriptionOther;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 抗高血压药治疗信息 */
export interface ICureInformationAntihypertensiveAgentsView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 处方种类 *多选* *钙通道阻滞剂,ACEI,ARB,α阻滞剂 ,αβ阻滞剂,中枢性降压药,利尿剂,其它 */
    prescription?: string | undefined;
    /** 其它处方种类 */
    prescriptionOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureInformationAntihypertensiveAgentsViewResult implements ICureInformationAntihypertensiveAgentsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationAntihypertensiveAgentsView[] | undefined;

    constructor(data?: ICureInformationAntihypertensiveAgentsViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInformationAntihypertensiveAgentsView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationAntihypertensiveAgentsViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationAntihypertensiveAgentsViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInformationAntihypertensiveAgentsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationAntihypertensiveAgentsView[] | undefined;
}

/** Reponse */
export class CureInformationAntihypertensiveAgentsViewResultEntry implements ICureInformationAntihypertensiveAgentsViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationAntihypertensiveAgentsView;

    constructor(data?: ICureInformationAntihypertensiveAgentsViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureInformationAntihypertensiveAgentsView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationAntihypertensiveAgentsViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationAntihypertensiveAgentsViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureInformationAntihypertensiveAgentsViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationAntihypertensiveAgentsView;
}

/** 铁剂治疗信息 */
export class CureInformationChalybeateEditModel implements ICureInformationChalybeateEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 方式 *单选* *口服,静脉* */
    style?: string | undefined;
    /** 口服种类 *单选* *多糖铁复合物,复方硫酸亚铁叶酸片,琥珀酸亚铁片,其它 */
    orallyKind?: string | undefined;
    /** 其它口服种类 */
    orallyKindOther?: string | undefined;
    /** 多糖铁复合物剂量（/日） */
    polysaccharideIronDose?: string | undefined;
    /** 多糖铁复合物单位 */
    polysaccharideIronUnit?: string | undefined;
    /** 复方硫酸亚铁叶酸片剂量（/日） */
    compoundFerrousDose?: string | undefined;
    /** 复方硫酸亚铁叶酸片单位 */
    compoundFerrousUnit?: string | undefined;
    /** 琥珀酸亚铁片剂量（/日） */
    ferrousSuccinateDose?: string | undefined;
    /** 琥珀酸亚铁片单位 */
    ferrousSuccinateUnit?: string | undefined;
    /** 静脉种类 *单选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁,其它 */
    vienKind?: string | undefined;
    /** 其它静脉种类 */
    vienKindOther?: string | undefined;
    /** 蔗糖铁剂量（/周） */
    ironSucroseDose?: string | undefined;
    /** 蔗糖铁单位 */
    ironSucroseUnit?: string | undefined;
    /** 右旋糖苷铁剂量（/周） */
    ironDextrinDose?: string | undefined;
    /** 右旋糖苷铁单位 */
    ironDextrinUnit?: string | undefined;
    /** 葡萄糖醛酸铁剂量（/周） */
    ferricGlucuronateDose?: string | undefined;
    /** 葡萄糖醛酸铁单位 */
    ferricGlucuronateUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureInformationChalybeateEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.style = _data["style"];
            this.orallyKind = _data["orallyKind"];
            this.orallyKindOther = _data["orallyKindOther"];
            this.polysaccharideIronDose = _data["polysaccharideIronDose"];
            this.polysaccharideIronUnit = _data["polysaccharideIronUnit"];
            this.compoundFerrousDose = _data["compoundFerrousDose"];
            this.compoundFerrousUnit = _data["compoundFerrousUnit"];
            this.ferrousSuccinateDose = _data["ferrousSuccinateDose"];
            this.ferrousSuccinateUnit = _data["ferrousSuccinateUnit"];
            this.vienKind = _data["vienKind"];
            this.vienKindOther = _data["vienKindOther"];
            this.ironSucroseDose = _data["ironSucroseDose"];
            this.ironSucroseUnit = _data["ironSucroseUnit"];
            this.ironDextrinDose = _data["ironDextrinDose"];
            this.ironDextrinUnit = _data["ironDextrinUnit"];
            this.ferricGlucuronateDose = _data["ferricGlucuronateDose"];
            this.ferricGlucuronateUnit = _data["ferricGlucuronateUnit"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureInformationChalybeateEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationChalybeateEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["style"] = this.style;
        data["orallyKind"] = this.orallyKind;
        data["orallyKindOther"] = this.orallyKindOther;
        data["polysaccharideIronDose"] = this.polysaccharideIronDose;
        data["polysaccharideIronUnit"] = this.polysaccharideIronUnit;
        data["compoundFerrousDose"] = this.compoundFerrousDose;
        data["compoundFerrousUnit"] = this.compoundFerrousUnit;
        data["ferrousSuccinateDose"] = this.ferrousSuccinateDose;
        data["ferrousSuccinateUnit"] = this.ferrousSuccinateUnit;
        data["vienKind"] = this.vienKind;
        data["vienKindOther"] = this.vienKindOther;
        data["ironSucroseDose"] = this.ironSucroseDose;
        data["ironSucroseUnit"] = this.ironSucroseUnit;
        data["ironDextrinDose"] = this.ironDextrinDose;
        data["ironDextrinUnit"] = this.ironDextrinUnit;
        data["ferricGlucuronateDose"] = this.ferricGlucuronateDose;
        data["ferricGlucuronateUnit"] = this.ferricGlucuronateUnit;
        data["remark"] = this.remark;
        return data;
    }
}

/** 铁剂治疗信息 */
export interface ICureInformationChalybeateEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 方式 *单选* *口服,静脉* */
    style?: string | undefined;
    /** 口服种类 *单选* *多糖铁复合物,复方硫酸亚铁叶酸片,琥珀酸亚铁片,其它 */
    orallyKind?: string | undefined;
    /** 其它口服种类 */
    orallyKindOther?: string | undefined;
    /** 多糖铁复合物剂量（/日） */
    polysaccharideIronDose?: string | undefined;
    /** 多糖铁复合物单位 */
    polysaccharideIronUnit?: string | undefined;
    /** 复方硫酸亚铁叶酸片剂量（/日） */
    compoundFerrousDose?: string | undefined;
    /** 复方硫酸亚铁叶酸片单位 */
    compoundFerrousUnit?: string | undefined;
    /** 琥珀酸亚铁片剂量（/日） */
    ferrousSuccinateDose?: string | undefined;
    /** 琥珀酸亚铁片单位 */
    ferrousSuccinateUnit?: string | undefined;
    /** 静脉种类 *单选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁,其它 */
    vienKind?: string | undefined;
    /** 其它静脉种类 */
    vienKindOther?: string | undefined;
    /** 蔗糖铁剂量（/周） */
    ironSucroseDose?: string | undefined;
    /** 蔗糖铁单位 */
    ironSucroseUnit?: string | undefined;
    /** 右旋糖苷铁剂量（/周） */
    ironDextrinDose?: string | undefined;
    /** 右旋糖苷铁单位 */
    ironDextrinUnit?: string | undefined;
    /** 葡萄糖醛酸铁剂量（/周） */
    ferricGlucuronateDose?: string | undefined;
    /** 葡萄糖醛酸铁单位 */
    ferricGlucuronateUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 铁剂治疗信息 */
export class CureInformationChalybeateView implements ICureInformationChalybeateView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 方式 *单选* *口服,静脉* */
    style?: string | undefined;
    /** 口服种类 *单选* *多糖铁复合物,复方硫酸亚铁叶酸片,琥珀酸亚铁片,其它 */
    orallyKind?: string | undefined;
    /** 其它口服种类 */
    orallyKindOther?: string | undefined;
    /** 多糖铁复合物剂量（/日） */
    polysaccharideIronDose?: string | undefined;
    /** 多糖铁复合物单位 */
    polysaccharideIronUnit?: string | undefined;
    /** 复方硫酸亚铁叶酸片剂量（/日） */
    compoundFerrousDose?: string | undefined;
    /** 复方硫酸亚铁叶酸片单位 */
    compoundFerrousUnit?: string | undefined;
    /** 琥珀酸亚铁片剂量（/日） */
    ferrousSuccinateDose?: string | undefined;
    /** 琥珀酸亚铁片单位 */
    ferrousSuccinateUnit?: string | undefined;
    /** 静脉种类 *单选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁,其它 */
    vienKind?: string | undefined;
    /** 其它静脉种类 */
    vienKindOther?: string | undefined;
    /** 蔗糖铁剂量（/周） */
    ironSucroseDose?: string | undefined;
    /** 蔗糖铁单位 */
    ironSucroseUnit?: string | undefined;
    /** 右旋糖苷铁剂量（/周） */
    ironDextrinDose?: string | undefined;
    /** 右旋糖苷铁单位 */
    ironDextrinUnit?: string | undefined;
    /** 葡萄糖醛酸铁剂量（/周） */
    ferricGlucuronateDose?: string | undefined;
    /** 葡萄糖醛酸铁单位 */
    ferricGlucuronateUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureInformationChalybeateView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.style = _data["style"];
            this.orallyKind = _data["orallyKind"];
            this.orallyKindOther = _data["orallyKindOther"];
            this.polysaccharideIronDose = _data["polysaccharideIronDose"];
            this.polysaccharideIronUnit = _data["polysaccharideIronUnit"];
            this.compoundFerrousDose = _data["compoundFerrousDose"];
            this.compoundFerrousUnit = _data["compoundFerrousUnit"];
            this.ferrousSuccinateDose = _data["ferrousSuccinateDose"];
            this.ferrousSuccinateUnit = _data["ferrousSuccinateUnit"];
            this.vienKind = _data["vienKind"];
            this.vienKindOther = _data["vienKindOther"];
            this.ironSucroseDose = _data["ironSucroseDose"];
            this.ironSucroseUnit = _data["ironSucroseUnit"];
            this.ironDextrinDose = _data["ironDextrinDose"];
            this.ironDextrinUnit = _data["ironDextrinUnit"];
            this.ferricGlucuronateDose = _data["ferricGlucuronateDose"];
            this.ferricGlucuronateUnit = _data["ferricGlucuronateUnit"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationChalybeateView {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationChalybeateView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["style"] = this.style;
        data["orallyKind"] = this.orallyKind;
        data["orallyKindOther"] = this.orallyKindOther;
        data["polysaccharideIronDose"] = this.polysaccharideIronDose;
        data["polysaccharideIronUnit"] = this.polysaccharideIronUnit;
        data["compoundFerrousDose"] = this.compoundFerrousDose;
        data["compoundFerrousUnit"] = this.compoundFerrousUnit;
        data["ferrousSuccinateDose"] = this.ferrousSuccinateDose;
        data["ferrousSuccinateUnit"] = this.ferrousSuccinateUnit;
        data["vienKind"] = this.vienKind;
        data["vienKindOther"] = this.vienKindOther;
        data["ironSucroseDose"] = this.ironSucroseDose;
        data["ironSucroseUnit"] = this.ironSucroseUnit;
        data["ironDextrinDose"] = this.ironDextrinDose;
        data["ironDextrinUnit"] = this.ironDextrinUnit;
        data["ferricGlucuronateDose"] = this.ferricGlucuronateDose;
        data["ferricGlucuronateUnit"] = this.ferricGlucuronateUnit;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 铁剂治疗信息 */
export interface ICureInformationChalybeateView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 方式 *单选* *口服,静脉* */
    style?: string | undefined;
    /** 口服种类 *单选* *多糖铁复合物,复方硫酸亚铁叶酸片,琥珀酸亚铁片,其它 */
    orallyKind?: string | undefined;
    /** 其它口服种类 */
    orallyKindOther?: string | undefined;
    /** 多糖铁复合物剂量（/日） */
    polysaccharideIronDose?: string | undefined;
    /** 多糖铁复合物单位 */
    polysaccharideIronUnit?: string | undefined;
    /** 复方硫酸亚铁叶酸片剂量（/日） */
    compoundFerrousDose?: string | undefined;
    /** 复方硫酸亚铁叶酸片单位 */
    compoundFerrousUnit?: string | undefined;
    /** 琥珀酸亚铁片剂量（/日） */
    ferrousSuccinateDose?: string | undefined;
    /** 琥珀酸亚铁片单位 */
    ferrousSuccinateUnit?: string | undefined;
    /** 静脉种类 *单选* *蔗糖铁,右旋糖苷铁,葡萄糖醛酸铁,其它 */
    vienKind?: string | undefined;
    /** 其它静脉种类 */
    vienKindOther?: string | undefined;
    /** 蔗糖铁剂量（/周） */
    ironSucroseDose?: string | undefined;
    /** 蔗糖铁单位 */
    ironSucroseUnit?: string | undefined;
    /** 右旋糖苷铁剂量（/周） */
    ironDextrinDose?: string | undefined;
    /** 右旋糖苷铁单位 */
    ironDextrinUnit?: string | undefined;
    /** 葡萄糖醛酸铁剂量（/周） */
    ferricGlucuronateDose?: string | undefined;
    /** 葡萄糖醛酸铁单位 */
    ferricGlucuronateUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureInformationChalybeateViewResult implements ICureInformationChalybeateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationChalybeateView[] | undefined;

    constructor(data?: ICureInformationChalybeateViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInformationChalybeateView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationChalybeateViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationChalybeateViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInformationChalybeateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationChalybeateView[] | undefined;
}

/** Reponse */
export class CureInformationChalybeateViewResultEntry implements ICureInformationChalybeateViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationChalybeateView;

    constructor(data?: ICureInformationChalybeateViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureInformationChalybeateView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationChalybeateViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationChalybeateViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureInformationChalybeateViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationChalybeateView;
}

/** esa治疗信息 */
export class CureInformationEsaEditModel implements ICureInformationEsaEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 促红素通用名称 *单选* *重组人红细胞生成素α,重组人红细胞生成素β,达依泊汀,持续性红细胞生成素受体激动剂,缺氧诱导因子稳定剂,其它* */
    commonName?: string | undefined;
    /** 其它促红素说明 */
    commonNameOther?: string | undefined;
    /** 种类 *单选* *国产,进口* */
    kind?: string | undefined;
    /** 用药方式 *多选* *皮下,静脉* */
    pharmacyStyle?: string | undefined;
    /** 皮下剂量（/周） */
    subcutaneousDose?: string | undefined;
    /** 皮下剂量单位 */
    subcutaneousUnit?: string | undefined;
    /** 静脉剂量（/周） */
    veinDose?: string | undefined;
    /** 静脉剂量单位 */
    veinUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureInformationEsaEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.commonName = _data["commonName"];
            this.commonNameOther = _data["commonNameOther"];
            this.kind = _data["kind"];
            this.pharmacyStyle = _data["pharmacyStyle"];
            this.subcutaneousDose = _data["subcutaneousDose"];
            this.subcutaneousUnit = _data["subcutaneousUnit"];
            this.veinDose = _data["veinDose"];
            this.veinUnit = _data["veinUnit"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureInformationEsaEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationEsaEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["commonName"] = this.commonName;
        data["commonNameOther"] = this.commonNameOther;
        data["kind"] = this.kind;
        data["pharmacyStyle"] = this.pharmacyStyle;
        data["subcutaneousDose"] = this.subcutaneousDose;
        data["subcutaneousUnit"] = this.subcutaneousUnit;
        data["veinDose"] = this.veinDose;
        data["veinUnit"] = this.veinUnit;
        data["remark"] = this.remark;
        return data;
    }
}

/** esa治疗信息 */
export interface ICureInformationEsaEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 促红素通用名称 *单选* *重组人红细胞生成素α,重组人红细胞生成素β,达依泊汀,持续性红细胞生成素受体激动剂,缺氧诱导因子稳定剂,其它* */
    commonName?: string | undefined;
    /** 其它促红素说明 */
    commonNameOther?: string | undefined;
    /** 种类 *单选* *国产,进口* */
    kind?: string | undefined;
    /** 用药方式 *多选* *皮下,静脉* */
    pharmacyStyle?: string | undefined;
    /** 皮下剂量（/周） */
    subcutaneousDose?: string | undefined;
    /** 皮下剂量单位 */
    subcutaneousUnit?: string | undefined;
    /** 静脉剂量（/周） */
    veinDose?: string | undefined;
    /** 静脉剂量单位 */
    veinUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** esa治疗信息 */
export class CureInformationEsaView implements ICureInformationEsaView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 促红素通用名称 *单选* *重组人红细胞生成素α,重组人红细胞生成素β,达依泊汀,持续性红细胞生成素受体激动剂,缺氧诱导因子稳定剂,其它* */
    commonName?: string | undefined;
    /** 其它促红素说明 */
    commonNameOther?: string | undefined;
    /** 种类 *单选* *国产,进口* */
    kind?: string | undefined;
    /** 用药方式 *多选* *皮下,静脉* */
    pharmacyStyle?: string | undefined;
    /** 皮下剂量（/周） */
    subcutaneousDose?: string | undefined;
    /** 皮下剂量单位 */
    subcutaneousUnit?: string | undefined;
    /** 静脉剂量（/周） */
    veinDose?: string | undefined;
    /** 静脉剂量单位 */
    veinUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureInformationEsaView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.commonName = _data["commonName"];
            this.commonNameOther = _data["commonNameOther"];
            this.kind = _data["kind"];
            this.pharmacyStyle = _data["pharmacyStyle"];
            this.subcutaneousDose = _data["subcutaneousDose"];
            this.subcutaneousUnit = _data["subcutaneousUnit"];
            this.veinDose = _data["veinDose"];
            this.veinUnit = _data["veinUnit"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationEsaView {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationEsaView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["commonName"] = this.commonName;
        data["commonNameOther"] = this.commonNameOther;
        data["kind"] = this.kind;
        data["pharmacyStyle"] = this.pharmacyStyle;
        data["subcutaneousDose"] = this.subcutaneousDose;
        data["subcutaneousUnit"] = this.subcutaneousUnit;
        data["veinDose"] = this.veinDose;
        data["veinUnit"] = this.veinUnit;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** esa治疗信息 */
export interface ICureInformationEsaView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度 */
    quarter?: string | undefined;
    /** 促红素通用名称 *单选* *重组人红细胞生成素α,重组人红细胞生成素β,达依泊汀,持续性红细胞生成素受体激动剂,缺氧诱导因子稳定剂,其它* */
    commonName?: string | undefined;
    /** 其它促红素说明 */
    commonNameOther?: string | undefined;
    /** 种类 *单选* *国产,进口* */
    kind?: string | undefined;
    /** 用药方式 *多选* *皮下,静脉* */
    pharmacyStyle?: string | undefined;
    /** 皮下剂量（/周） */
    subcutaneousDose?: string | undefined;
    /** 皮下剂量单位 */
    subcutaneousUnit?: string | undefined;
    /** 静脉剂量（/周） */
    veinDose?: string | undefined;
    /** 静脉剂量单位 */
    veinUnit?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureInformationEsaViewResult implements ICureInformationEsaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationEsaView[] | undefined;

    constructor(data?: ICureInformationEsaViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInformationEsaView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationEsaViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationEsaViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInformationEsaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationEsaView[] | undefined;
}

/** Reponse */
export class CureInformationEsaViewResultEntry implements ICureInformationEsaViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationEsaView;

    constructor(data?: ICureInformationEsaViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureInformationEsaView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationEsaViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationEsaViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureInformationEsaViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationEsaView;
}

/** HIF-PHI治疗信息 */
export class CureInformationHIFPHIEditModel implements ICureInformationHIFPHIEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 维生素D及衍生物是否使用 */
    vitaminDUse?: number | undefined;
    /** 含钙的磷结合剂是否使用 */
    phosphorousCalciumUse?: number | undefined;
    /** 不含钙铝的磷结合剂是否使用 */
    phosphorousUse?: number | undefined;

    constructor(data?: ICureInformationHIFPHIEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.remark = _data["remark"];
            this.vitaminDUse = _data["vitaminDUse"];
            this.phosphorousCalciumUse = _data["phosphorousCalciumUse"];
            this.phosphorousUse = _data["phosphorousUse"];
        }
    }

    static fromJS(data: any): CureInformationHIFPHIEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationHIFPHIEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["remark"] = this.remark;
        data["vitaminDUse"] = this.vitaminDUse;
        data["phosphorousCalciumUse"] = this.phosphorousCalciumUse;
        data["phosphorousUse"] = this.phosphorousUse;
        return data;
    }
}

/** HIF-PHI治疗信息 */
export interface ICureInformationHIFPHIEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used: number;
    /** 备注 */
    remark?: string | undefined;
    /** 维生素D及衍生物是否使用 */
    vitaminDUse?: number | undefined;
    /** 含钙的磷结合剂是否使用 */
    phosphorousCalciumUse?: number | undefined;
    /** 不含钙铝的磷结合剂是否使用 */
    phosphorousUse?: number | undefined;
}

/** HIF-PHI治疗信息 */
export class CureInformationHIFPHIView implements ICureInformationHIFPHIView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 维生素D及衍生物是否使用 */
    vitaminDUse?: number | undefined;
    /** 含钙的磷结合剂是否使用 */
    phosphorousCalciumUse?: number | undefined;
    /** 不含钙铝的磷结合剂是否使用 */
    phosphorousUse?: number | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureInformationHIFPHIView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.remark = _data["remark"];
            this.vitaminDUse = _data["vitaminDUse"];
            this.phosphorousCalciumUse = _data["phosphorousCalciumUse"];
            this.phosphorousUse = _data["phosphorousUse"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationHIFPHIView {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationHIFPHIView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["remark"] = this.remark;
        data["vitaminDUse"] = this.vitaminDUse;
        data["phosphorousCalciumUse"] = this.phosphorousCalciumUse;
        data["phosphorousUse"] = this.phosphorousUse;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** HIF-PHI治疗信息 */
export interface ICureInformationHIFPHIView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used: number;
    /** 备注 */
    remark?: string | undefined;
    /** 维生素D及衍生物是否使用 */
    vitaminDUse?: number | undefined;
    /** 含钙的磷结合剂是否使用 */
    phosphorousCalciumUse?: number | undefined;
    /** 不含钙铝的磷结合剂是否使用 */
    phosphorousUse?: number | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureInformationHIFPHIViewResult implements ICureInformationHIFPHIViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationHIFPHIView[] | undefined;

    constructor(data?: ICureInformationHIFPHIViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInformationHIFPHIView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationHIFPHIViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationHIFPHIViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInformationHIFPHIViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationHIFPHIView[] | undefined;
}

/** Reponse */
export class CureInformationHIFPHIViewResultEntry implements ICureInformationHIFPHIViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationHIFPHIView;

    constructor(data?: ICureInformationHIFPHIViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureInformationHIFPHIView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationHIFPHIViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationHIFPHIViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureInformationHIFPHIViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationHIFPHIView;
}

/** MBD干预药治疗信息 */
export class CureInformationMbdEditModel implements ICureInformationMbdEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 维生素D及衍生物 *多选* *骨化三醇,帕立骨化醇,阿法骨化醇,其它 */
    vitaminD?: string | undefined;
    /** 其它维生素D及衍生物 */
    vitaminDOther?: string | undefined;
    /** 含钙的磷结合剂 *多选* *碳酸钙,醋酸钙,葡萄糖酸钙,其它 */
    phosphorousCalcium?: string | undefined;
    /** 其他含钙的磷结合剂 */
    phosphorousCalciumOther?: string | undefined;
    /** 含铝的磷结合剂 *多选* *氢氧化铝,硫糖铝,其它 */
    phosphorousAluminum?: string | undefined;
    /** 其他含铝的磷结合剂 */
    phosphorousAluminumOther?: string | undefined;
    /** 不含钙铝的磷结合剂 *多选* *碳酸镧,司维拉姆,其它 */
    phosphorous?: string | undefined;
    /** 其他不含钙铝的磷结合剂 */
    phosphorousOther?: string | undefined;
    /** 拟钙剂 *多选* *西那卡塞,其它 */
    calcimimetics?: string | undefined;
    /** 其他拟钙剂 */
    calcimimeticsOther?: string | undefined;
    /** 其它药物 *多选* *鲑鱼降钙素,重组人生长激素,二膦酸盐,其它 */
    otherDrugs?: string | undefined;
    /** 其它药物 */
    otherDrugsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 维生素D及衍生物是否使用 */
    vitaminDUse?: number | undefined;
    /** 含钙的磷结合剂是否使用 */
    phosphorousCalciumUse?: number | undefined;
    /** 不含钙铝的磷结合剂是否使用 */
    phosphorousUse?: number | undefined;

    constructor(data?: ICureInformationMbdEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.vitaminD = _data["vitaminD"];
            this.vitaminDOther = _data["vitaminDOther"];
            this.phosphorousCalcium = _data["phosphorousCalcium"];
            this.phosphorousCalciumOther = _data["phosphorousCalciumOther"];
            this.phosphorousAluminum = _data["phosphorousAluminum"];
            this.phosphorousAluminumOther = _data["phosphorousAluminumOther"];
            this.phosphorous = _data["phosphorous"];
            this.phosphorousOther = _data["phosphorousOther"];
            this.calcimimetics = _data["calcimimetics"];
            this.calcimimeticsOther = _data["calcimimeticsOther"];
            this.otherDrugs = _data["otherDrugs"];
            this.otherDrugsOther = _data["otherDrugsOther"];
            this.remark = _data["remark"];
            this.vitaminDUse = _data["vitaminDUse"];
            this.phosphorousCalciumUse = _data["phosphorousCalciumUse"];
            this.phosphorousUse = _data["phosphorousUse"];
        }
    }

    static fromJS(data: any): CureInformationMbdEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationMbdEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["vitaminD"] = this.vitaminD;
        data["vitaminDOther"] = this.vitaminDOther;
        data["phosphorousCalcium"] = this.phosphorousCalcium;
        data["phosphorousCalciumOther"] = this.phosphorousCalciumOther;
        data["phosphorousAluminum"] = this.phosphorousAluminum;
        data["phosphorousAluminumOther"] = this.phosphorousAluminumOther;
        data["phosphorous"] = this.phosphorous;
        data["phosphorousOther"] = this.phosphorousOther;
        data["calcimimetics"] = this.calcimimetics;
        data["calcimimeticsOther"] = this.calcimimeticsOther;
        data["otherDrugs"] = this.otherDrugs;
        data["otherDrugsOther"] = this.otherDrugsOther;
        data["remark"] = this.remark;
        data["vitaminDUse"] = this.vitaminDUse;
        data["phosphorousCalciumUse"] = this.phosphorousCalciumUse;
        data["phosphorousUse"] = this.phosphorousUse;
        return data;
    }
}

/** MBD干预药治疗信息 */
export interface ICureInformationMbdEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 维生素D及衍生物 *多选* *骨化三醇,帕立骨化醇,阿法骨化醇,其它 */
    vitaminD?: string | undefined;
    /** 其它维生素D及衍生物 */
    vitaminDOther?: string | undefined;
    /** 含钙的磷结合剂 *多选* *碳酸钙,醋酸钙,葡萄糖酸钙,其它 */
    phosphorousCalcium?: string | undefined;
    /** 其他含钙的磷结合剂 */
    phosphorousCalciumOther?: string | undefined;
    /** 含铝的磷结合剂 *多选* *氢氧化铝,硫糖铝,其它 */
    phosphorousAluminum?: string | undefined;
    /** 其他含铝的磷结合剂 */
    phosphorousAluminumOther?: string | undefined;
    /** 不含钙铝的磷结合剂 *多选* *碳酸镧,司维拉姆,其它 */
    phosphorous?: string | undefined;
    /** 其他不含钙铝的磷结合剂 */
    phosphorousOther?: string | undefined;
    /** 拟钙剂 *多选* *西那卡塞,其它 */
    calcimimetics?: string | undefined;
    /** 其他拟钙剂 */
    calcimimeticsOther?: string | undefined;
    /** 其它药物 *多选* *鲑鱼降钙素,重组人生长激素,二膦酸盐,其它 */
    otherDrugs?: string | undefined;
    /** 其它药物 */
    otherDrugsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 维生素D及衍生物是否使用 */
    vitaminDUse?: number | undefined;
    /** 含钙的磷结合剂是否使用 */
    phosphorousCalciumUse?: number | undefined;
    /** 不含钙铝的磷结合剂是否使用 */
    phosphorousUse?: number | undefined;
}

/** MBD干预药治疗信息 */
export class CureInformationMbdView implements ICureInformationMbdView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 维生素D及衍生物 *多选* *骨化三醇,帕立骨化醇,阿法骨化醇,其它 */
    vitaminD?: string | undefined;
    /** 其它维生素D及衍生物 */
    vitaminDOther?: string | undefined;
    /** 含钙的磷结合剂 *多选* *碳酸钙,醋酸钙,葡萄糖酸钙,其它 */
    phosphorousCalcium?: string | undefined;
    /** 其他含钙的磷结合剂 */
    phosphorousCalciumOther?: string | undefined;
    /** 含铝的磷结合剂 *多选* *氢氧化铝,硫糖铝,其它 */
    phosphorousAluminum?: string | undefined;
    /** 其他含铝的磷结合剂 */
    phosphorousAluminumOther?: string | undefined;
    /** 不含钙铝的磷结合剂 *多选* *碳酸镧,司维拉姆,其它 */
    phosphorous?: string | undefined;
    /** 其他不含钙铝的磷结合剂 */
    phosphorousOther?: string | undefined;
    /** 拟钙剂 *多选* *西那卡塞,其它 */
    calcimimetics?: string | undefined;
    /** 其他拟钙剂 */
    calcimimeticsOther?: string | undefined;
    /** 其它药物 *多选* *鲑鱼降钙素,重组人生长激素,二膦酸盐,其它 */
    otherDrugs?: string | undefined;
    /** 其它药物 */
    otherDrugsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 维生素D及衍生物是否使用 */
    vitaminDUse?: number | undefined;
    /** 含钙的磷结合剂是否使用 */
    phosphorousCalciumUse?: number | undefined;
    /** 不含钙铝的磷结合剂是否使用 */
    phosphorousUse?: number | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureInformationMbdView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.vitaminD = _data["vitaminD"];
            this.vitaminDOther = _data["vitaminDOther"];
            this.phosphorousCalcium = _data["phosphorousCalcium"];
            this.phosphorousCalciumOther = _data["phosphorousCalciumOther"];
            this.phosphorousAluminum = _data["phosphorousAluminum"];
            this.phosphorousAluminumOther = _data["phosphorousAluminumOther"];
            this.phosphorous = _data["phosphorous"];
            this.phosphorousOther = _data["phosphorousOther"];
            this.calcimimetics = _data["calcimimetics"];
            this.calcimimeticsOther = _data["calcimimeticsOther"];
            this.otherDrugs = _data["otherDrugs"];
            this.otherDrugsOther = _data["otherDrugsOther"];
            this.remark = _data["remark"];
            this.vitaminDUse = _data["vitaminDUse"];
            this.phosphorousCalciumUse = _data["phosphorousCalciumUse"];
            this.phosphorousUse = _data["phosphorousUse"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationMbdView {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationMbdView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["vitaminD"] = this.vitaminD;
        data["vitaminDOther"] = this.vitaminDOther;
        data["phosphorousCalcium"] = this.phosphorousCalcium;
        data["phosphorousCalciumOther"] = this.phosphorousCalciumOther;
        data["phosphorousAluminum"] = this.phosphorousAluminum;
        data["phosphorousAluminumOther"] = this.phosphorousAluminumOther;
        data["phosphorous"] = this.phosphorous;
        data["phosphorousOther"] = this.phosphorousOther;
        data["calcimimetics"] = this.calcimimetics;
        data["calcimimeticsOther"] = this.calcimimeticsOther;
        data["otherDrugs"] = this.otherDrugs;
        data["otherDrugsOther"] = this.otherDrugsOther;
        data["remark"] = this.remark;
        data["vitaminDUse"] = this.vitaminDUse;
        data["phosphorousCalciumUse"] = this.phosphorousCalciumUse;
        data["phosphorousUse"] = this.phosphorousUse;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** MBD干预药治疗信息 */
export interface ICureInformationMbdView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 维生素D及衍生物 *多选* *骨化三醇,帕立骨化醇,阿法骨化醇,其它 */
    vitaminD?: string | undefined;
    /** 其它维生素D及衍生物 */
    vitaminDOther?: string | undefined;
    /** 含钙的磷结合剂 *多选* *碳酸钙,醋酸钙,葡萄糖酸钙,其它 */
    phosphorousCalcium?: string | undefined;
    /** 其他含钙的磷结合剂 */
    phosphorousCalciumOther?: string | undefined;
    /** 含铝的磷结合剂 *多选* *氢氧化铝,硫糖铝,其它 */
    phosphorousAluminum?: string | undefined;
    /** 其他含铝的磷结合剂 */
    phosphorousAluminumOther?: string | undefined;
    /** 不含钙铝的磷结合剂 *多选* *碳酸镧,司维拉姆,其它 */
    phosphorous?: string | undefined;
    /** 其他不含钙铝的磷结合剂 */
    phosphorousOther?: string | undefined;
    /** 拟钙剂 *多选* *西那卡塞,其它 */
    calcimimetics?: string | undefined;
    /** 其他拟钙剂 */
    calcimimeticsOther?: string | undefined;
    /** 其它药物 *多选* *鲑鱼降钙素,重组人生长激素,二膦酸盐,其它 */
    otherDrugs?: string | undefined;
    /** 其它药物 */
    otherDrugsOther?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 维生素D及衍生物是否使用 */
    vitaminDUse?: number | undefined;
    /** 含钙的磷结合剂是否使用 */
    phosphorousCalciumUse?: number | undefined;
    /** 不含钙铝的磷结合剂是否使用 */
    phosphorousUse?: number | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureInformationMbdViewResult implements ICureInformationMbdViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationMbdView[] | undefined;

    constructor(data?: ICureInformationMbdViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInformationMbdView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationMbdViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationMbdViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInformationMbdViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationMbdView[] | undefined;
}

/** Reponse */
export class CureInformationMbdViewResultEntry implements ICureInformationMbdViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationMbdView;

    constructor(data?: ICureInformationMbdViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureInformationMbdView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationMbdViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationMbdViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureInformationMbdViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationMbdView;
}

/** 其他药物治疗信息资料 */
export class CureInformationOtherDataEditModel implements ICureInformationOtherDataEditModel {
    /** [其他药物治疗信息](#其他药物治疗信息) */
    cureInformationOtherId?: string | undefined;
    /** 路径 */
    url!: string;
    /** 拍摄日期 */
    captureDate?: dayjs.Dayjs | undefined;
    /** 标签 */
    labels?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureInformationOtherDataEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureInformationOtherId = _data["cureInformationOtherId"];
            this.url = _data["url"];
            this.captureDate = _data["captureDate"] ? dayjs(_data["captureDate"].toString()) : <any>undefined;
            this.labels = _data["labels"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureInformationOtherDataEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherDataEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureInformationOtherId"] = this.cureInformationOtherId;
        data["url"] = this.url;
        data["captureDate"] = this.captureDate ? this.captureDate.toLocaleString() : <any>undefined;
        data["labels"] = this.labels;
        data["remark"] = this.remark;
        return data;
    }
}

/** 其他药物治疗信息资料 */
export interface ICureInformationOtherDataEditModel {
    /** [其他药物治疗信息](#其他药物治疗信息) */
    cureInformationOtherId?: string | undefined;
    /** 路径 */
    url: string;
    /** 拍摄日期 */
    captureDate?: dayjs.Dayjs | undefined;
    /** 标签 */
    labels?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 其他药物治疗信息资料 */
export class CureInformationOtherDataView implements ICureInformationOtherDataView {
    /** [其他药物治疗信息](#其他药物治疗信息) */
    cureInformationOtherId?: string | undefined;
    /** 路径 */
    url!: string;
    /** 拍摄日期 */
    captureDate?: dayjs.Dayjs | undefined;
    /** 标签 */
    labels?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureInformationOtherDataView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureInformationOtherId = _data["cureInformationOtherId"];
            this.url = _data["url"];
            this.captureDate = _data["captureDate"] ? dayjs(_data["captureDate"].toString()) : <any>undefined;
            this.labels = _data["labels"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationOtherDataView {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherDataView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureInformationOtherId"] = this.cureInformationOtherId;
        data["url"] = this.url;
        data["captureDate"] = this.captureDate ? this.captureDate.toLocaleString() : <any>undefined;
        data["labels"] = this.labels;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 其他药物治疗信息资料 */
export interface ICureInformationOtherDataView {
    /** [其他药物治疗信息](#其他药物治疗信息) */
    cureInformationOtherId?: string | undefined;
    /** 路径 */
    url: string;
    /** 拍摄日期 */
    captureDate?: dayjs.Dayjs | undefined;
    /** 标签 */
    labels?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureInformationOtherDataViewResult implements ICureInformationOtherDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationOtherDataView[] | undefined;

    constructor(data?: ICureInformationOtherDataViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInformationOtherDataView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationOtherDataViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherDataViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInformationOtherDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationOtherDataView[] | undefined;
}

/** Reponse */
export class CureInformationOtherDataViewResultEntry implements ICureInformationOtherDataViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationOtherDataView;

    constructor(data?: ICureInformationOtherDataViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureInformationOtherDataView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationOtherDataViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherDataViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureInformationOtherDataViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationOtherDataView;
}

/** 其他药物治疗信息治疗信息 */
export class CureInformationOtherEditModel implements ICureInformationOtherEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 营养支持药物分类 *多选* *左旋肉碱,叶酸,α酮酸,高能营养补充液,其它 */
    nurSupportDrugs?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式 *多选* *口服,静脉 */
    nurSupportLCarnitineStyle?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量 *（/日）* */
    nurSupportLCarnitineStyleOrallyDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量 *（/日）* */
    nurlSupportLCarnitineStyleVeinDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleVeinUnit?: string | undefined;
    /** 叶酸用药方式 *多选* *口服,静脉 */
    nurSupportFolicCidStyle?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量 *（/日）* */
    nurSupportFolicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportFolicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量 *（/日）* */
    nurSupportFolicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportFolicCidVeinUnit?: string | undefined;
    /** α酮酸用药方式 *多选* *口服,静脉 */
    nurSupportKetonicCidStyle?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量 *（/日）* */
    nurSupportKetonicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportKetonicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量 *（/日）* */
    nurSupportKetonicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportKetonicCidVeinUnit?: string | undefined;
    /** 高能营养补充液用药方式 *多选* *口服,静脉 */
    nurSupportHighEnergyStyle?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量 *（/日）* */
    nurSupportHighEnergyStyleOrallyDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量单位 *剂量单位* */
    nurSupportHighEnergyStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量 *（/日）* */
    nurSupportHighEnergyStyleVeinDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportHighEnergyVeinUnit?: string | undefined;
    /** 其它营养支持药物用药方式 *多选* *口服,静脉 */
    nurSupportOtherStyle?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量 *（/日）* */
    nurSupportOtherStyleOrallyDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量单位 *剂量单位* */
    nurSupportOtherStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量 *（/日）* */
    nurSupportOtherStyleVeinDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportOtherVeinUnit?: string | undefined;
    /** 降脂药物分类 *多选* *他汀类,贝特类,烟酸类,胆酸螯合剂,胆固醇吸收抑制剂,其它 */
    lipidLoweringDrugs?: string | undefined;
    /** 降脂药物分类其他 */
    lipidLoweringDrugsOther?: string | undefined;
    /** 抗血小板药物分类 *多选* *阿司匹林,双嘧达莫（潘生丁）,噻氯匹定,氯吡格雷,其它 */
    antiplateletDrugs?: string | undefined;
    /** 抗血小板药物分类其他 */
    antiplateletDrugsOther?: string | undefined;
    /** 其它药物分类 */
    otherDrugs?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 其他药物资料属性 */
    items?: CureInformationOtherDataEditModel[] | undefined;

    constructor(data?: ICureInformationOtherEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.nurSupportDrugs = _data["nurSupportDrugs"];
            this.nurSupportLCarnitineStyle = _data["nurSupportLCarnitineStyle"];
            this.nurSupportLCarnitineStyleOrallyDose = _data["nurSupportLCarnitineStyleOrallyDose"];
            this.nurSupportLCarnitineStyleOrallyUnit = _data["nurSupportLCarnitineStyleOrallyUnit"];
            this.nurlSupportLCarnitineStyleVeinDose = _data["nurlSupportLCarnitineStyleVeinDose"];
            this.nurSupportLCarnitineStyleVeinUnit = _data["nurSupportLCarnitineStyleVeinUnit"];
            this.nurSupportFolicCidStyle = _data["nurSupportFolicCidStyle"];
            this.nurSupportFolicCidStyleOrallyDose = _data["nurSupportFolicCidStyleOrallyDose"];
            this.nurSupportFolicCidStyleOrallyUnit = _data["nurSupportFolicCidStyleOrallyUnit"];
            this.nurSupportFolicCidStyleVeinDose = _data["nurSupportFolicCidStyleVeinDose"];
            this.nurSupportFolicCidVeinUnit = _data["nurSupportFolicCidVeinUnit"];
            this.nurSupportKetonicCidStyle = _data["nurSupportKetonicCidStyle"];
            this.nurSupportKetonicCidStyleOrallyDose = _data["nurSupportKetonicCidStyleOrallyDose"];
            this.nurSupportKetonicCidStyleOrallyUnit = _data["nurSupportKetonicCidStyleOrallyUnit"];
            this.nurSupportKetonicCidStyleVeinDose = _data["nurSupportKetonicCidStyleVeinDose"];
            this.nurSupportKetonicCidVeinUnit = _data["nurSupportKetonicCidVeinUnit"];
            this.nurSupportHighEnergyStyle = _data["nurSupportHighEnergyStyle"];
            this.nurSupportHighEnergyStyleOrallyDose = _data["nurSupportHighEnergyStyleOrallyDose"];
            this.nurSupportHighEnergyStyleOrallyUnit = _data["nurSupportHighEnergyStyleOrallyUnit"];
            this.nurSupportHighEnergyStyleVeinDose = _data["nurSupportHighEnergyStyleVeinDose"];
            this.nurSupportHighEnergyVeinUnit = _data["nurSupportHighEnergyVeinUnit"];
            this.nurSupportOtherStyle = _data["nurSupportOtherStyle"];
            this.nurSupportOtherStyleOrallyDose = _data["nurSupportOtherStyleOrallyDose"];
            this.nurSupportOtherStyleOrallyUnit = _data["nurSupportOtherStyleOrallyUnit"];
            this.nurSupportOtherStyleVeinDose = _data["nurSupportOtherStyleVeinDose"];
            this.nurSupportOtherVeinUnit = _data["nurSupportOtherVeinUnit"];
            this.lipidLoweringDrugs = _data["lipidLoweringDrugs"];
            this.lipidLoweringDrugsOther = _data["lipidLoweringDrugsOther"];
            this.antiplateletDrugs = _data["antiplateletDrugs"];
            this.antiplateletDrugsOther = _data["antiplateletDrugsOther"];
            this.otherDrugs = _data["otherDrugs"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureInformationOtherDataEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationOtherEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["nurSupportDrugs"] = this.nurSupportDrugs;
        data["nurSupportLCarnitineStyle"] = this.nurSupportLCarnitineStyle;
        data["nurSupportLCarnitineStyleOrallyDose"] = this.nurSupportLCarnitineStyleOrallyDose;
        data["nurSupportLCarnitineStyleOrallyUnit"] = this.nurSupportLCarnitineStyleOrallyUnit;
        data["nurlSupportLCarnitineStyleVeinDose"] = this.nurlSupportLCarnitineStyleVeinDose;
        data["nurSupportLCarnitineStyleVeinUnit"] = this.nurSupportLCarnitineStyleVeinUnit;
        data["nurSupportFolicCidStyle"] = this.nurSupportFolicCidStyle;
        data["nurSupportFolicCidStyleOrallyDose"] = this.nurSupportFolicCidStyleOrallyDose;
        data["nurSupportFolicCidStyleOrallyUnit"] = this.nurSupportFolicCidStyleOrallyUnit;
        data["nurSupportFolicCidStyleVeinDose"] = this.nurSupportFolicCidStyleVeinDose;
        data["nurSupportFolicCidVeinUnit"] = this.nurSupportFolicCidVeinUnit;
        data["nurSupportKetonicCidStyle"] = this.nurSupportKetonicCidStyle;
        data["nurSupportKetonicCidStyleOrallyDose"] = this.nurSupportKetonicCidStyleOrallyDose;
        data["nurSupportKetonicCidStyleOrallyUnit"] = this.nurSupportKetonicCidStyleOrallyUnit;
        data["nurSupportKetonicCidStyleVeinDose"] = this.nurSupportKetonicCidStyleVeinDose;
        data["nurSupportKetonicCidVeinUnit"] = this.nurSupportKetonicCidVeinUnit;
        data["nurSupportHighEnergyStyle"] = this.nurSupportHighEnergyStyle;
        data["nurSupportHighEnergyStyleOrallyDose"] = this.nurSupportHighEnergyStyleOrallyDose;
        data["nurSupportHighEnergyStyleOrallyUnit"] = this.nurSupportHighEnergyStyleOrallyUnit;
        data["nurSupportHighEnergyStyleVeinDose"] = this.nurSupportHighEnergyStyleVeinDose;
        data["nurSupportHighEnergyVeinUnit"] = this.nurSupportHighEnergyVeinUnit;
        data["nurSupportOtherStyle"] = this.nurSupportOtherStyle;
        data["nurSupportOtherStyleOrallyDose"] = this.nurSupportOtherStyleOrallyDose;
        data["nurSupportOtherStyleOrallyUnit"] = this.nurSupportOtherStyleOrallyUnit;
        data["nurSupportOtherStyleVeinDose"] = this.nurSupportOtherStyleVeinDose;
        data["nurSupportOtherVeinUnit"] = this.nurSupportOtherVeinUnit;
        data["lipidLoweringDrugs"] = this.lipidLoweringDrugs;
        data["lipidLoweringDrugsOther"] = this.lipidLoweringDrugsOther;
        data["antiplateletDrugs"] = this.antiplateletDrugs;
        data["antiplateletDrugsOther"] = this.antiplateletDrugsOther;
        data["otherDrugs"] = this.otherDrugs;
        data["remark"] = this.remark;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 其他药物治疗信息治疗信息 */
export interface ICureInformationOtherEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 营养支持药物分类 *多选* *左旋肉碱,叶酸,α酮酸,高能营养补充液,其它 */
    nurSupportDrugs?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式 *多选* *口服,静脉 */
    nurSupportLCarnitineStyle?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量 *（/日）* */
    nurSupportLCarnitineStyleOrallyDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量 *（/日）* */
    nurlSupportLCarnitineStyleVeinDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleVeinUnit?: string | undefined;
    /** 叶酸用药方式 *多选* *口服,静脉 */
    nurSupportFolicCidStyle?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量 *（/日）* */
    nurSupportFolicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportFolicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量 *（/日）* */
    nurSupportFolicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportFolicCidVeinUnit?: string | undefined;
    /** α酮酸用药方式 *多选* *口服,静脉 */
    nurSupportKetonicCidStyle?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量 *（/日）* */
    nurSupportKetonicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportKetonicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量 *（/日）* */
    nurSupportKetonicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportKetonicCidVeinUnit?: string | undefined;
    /** 高能营养补充液用药方式 *多选* *口服,静脉 */
    nurSupportHighEnergyStyle?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量 *（/日）* */
    nurSupportHighEnergyStyleOrallyDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量单位 *剂量单位* */
    nurSupportHighEnergyStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量 *（/日）* */
    nurSupportHighEnergyStyleVeinDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportHighEnergyVeinUnit?: string | undefined;
    /** 其它营养支持药物用药方式 *多选* *口服,静脉 */
    nurSupportOtherStyle?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量 *（/日）* */
    nurSupportOtherStyleOrallyDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量单位 *剂量单位* */
    nurSupportOtherStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量 *（/日）* */
    nurSupportOtherStyleVeinDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportOtherVeinUnit?: string | undefined;
    /** 降脂药物分类 *多选* *他汀类,贝特类,烟酸类,胆酸螯合剂,胆固醇吸收抑制剂,其它 */
    lipidLoweringDrugs?: string | undefined;
    /** 降脂药物分类其他 */
    lipidLoweringDrugsOther?: string | undefined;
    /** 抗血小板药物分类 *多选* *阿司匹林,双嘧达莫（潘生丁）,噻氯匹定,氯吡格雷,其它 */
    antiplateletDrugs?: string | undefined;
    /** 抗血小板药物分类其他 */
    antiplateletDrugsOther?: string | undefined;
    /** 其它药物分类 */
    otherDrugs?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 其他药物资料属性 */
    items?: CureInformationOtherDataEditModel[] | undefined;
}

/** 其他药物治疗信息治疗信息 */
export class CureInformationOtherView implements ICureInformationOtherView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation!: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 营养支持药物分类 *多选* *左旋肉碱,叶酸,α酮酸,高能营养补充液,其它 */
    nurSupportDrugs?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式 *多选* *口服,静脉 */
    nurSupportLCarnitineStyle?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量 *（/日）* */
    nurSupportLCarnitineStyleOrallyDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量 *（/日）* */
    nurlSupportLCarnitineStyleVeinDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleVeinUnit?: string | undefined;
    /** 叶酸用药方式 *多选* *口服,静脉 */
    nurSupportFolicCidStyle?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量 *（/日）* */
    nurSupportFolicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportFolicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量 *（/日）* */
    nurSupportFolicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportFolicCidVeinUnit?: string | undefined;
    /** α酮酸用药方式 *多选* *口服,静脉 */
    nurSupportKetonicCidStyle?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量 *（/日）* */
    nurSupportKetonicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportKetonicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量 *（/日）* */
    nurSupportKetonicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportKetonicCidVeinUnit?: string | undefined;
    /** 高能营养补充液用药方式 *多选* *口服,静脉 */
    nurSupportHighEnergyStyle?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量 *（/日）* */
    nurSupportHighEnergyStyleOrallyDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量单位 *剂量单位* */
    nurSupportHighEnergyStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量 *（/日）* */
    nurSupportHighEnergyStyleVeinDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportHighEnergyVeinUnit?: string | undefined;
    /** 其它营养支持药物用药方式 *多选* *口服,静脉 */
    nurSupportOtherStyle?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量 *（/日）* */
    nurSupportOtherStyleOrallyDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量单位 *剂量单位* */
    nurSupportOtherStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量 *（/日）* */
    nurSupportOtherStyleVeinDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportOtherVeinUnit?: string | undefined;
    /** 降脂药物分类 *多选* *他汀类,贝特类,烟酸类,胆酸螯合剂,胆固醇吸收抑制剂,其它 */
    lipidLoweringDrugs?: string | undefined;
    /** 降脂药物分类其他 */
    lipidLoweringDrugsOther?: string | undefined;
    /** 抗血小板药物分类 *多选* *阿司匹林,双嘧达莫（潘生丁）,噻氯匹定,氯吡格雷,其它 */
    antiplateletDrugs?: string | undefined;
    /** 抗血小板药物分类其他 */
    antiplateletDrugsOther?: string | undefined;
    /** 其它药物分类 */
    otherDrugs?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 其他药物资料属性 */
    items?: CureInformationOtherDataView[] | undefined;

    constructor(data?: ICureInformationOtherView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.variation = _data["variation"];
            this.used = _data["used"];
            this.quarter = _data["quarter"];
            this.nurSupportDrugs = _data["nurSupportDrugs"];
            this.nurSupportLCarnitineStyle = _data["nurSupportLCarnitineStyle"];
            this.nurSupportLCarnitineStyleOrallyDose = _data["nurSupportLCarnitineStyleOrallyDose"];
            this.nurSupportLCarnitineStyleOrallyUnit = _data["nurSupportLCarnitineStyleOrallyUnit"];
            this.nurlSupportLCarnitineStyleVeinDose = _data["nurlSupportLCarnitineStyleVeinDose"];
            this.nurSupportLCarnitineStyleVeinUnit = _data["nurSupportLCarnitineStyleVeinUnit"];
            this.nurSupportFolicCidStyle = _data["nurSupportFolicCidStyle"];
            this.nurSupportFolicCidStyleOrallyDose = _data["nurSupportFolicCidStyleOrallyDose"];
            this.nurSupportFolicCidStyleOrallyUnit = _data["nurSupportFolicCidStyleOrallyUnit"];
            this.nurSupportFolicCidStyleVeinDose = _data["nurSupportFolicCidStyleVeinDose"];
            this.nurSupportFolicCidVeinUnit = _data["nurSupportFolicCidVeinUnit"];
            this.nurSupportKetonicCidStyle = _data["nurSupportKetonicCidStyle"];
            this.nurSupportKetonicCidStyleOrallyDose = _data["nurSupportKetonicCidStyleOrallyDose"];
            this.nurSupportKetonicCidStyleOrallyUnit = _data["nurSupportKetonicCidStyleOrallyUnit"];
            this.nurSupportKetonicCidStyleVeinDose = _data["nurSupportKetonicCidStyleVeinDose"];
            this.nurSupportKetonicCidVeinUnit = _data["nurSupportKetonicCidVeinUnit"];
            this.nurSupportHighEnergyStyle = _data["nurSupportHighEnergyStyle"];
            this.nurSupportHighEnergyStyleOrallyDose = _data["nurSupportHighEnergyStyleOrallyDose"];
            this.nurSupportHighEnergyStyleOrallyUnit = _data["nurSupportHighEnergyStyleOrallyUnit"];
            this.nurSupportHighEnergyStyleVeinDose = _data["nurSupportHighEnergyStyleVeinDose"];
            this.nurSupportHighEnergyVeinUnit = _data["nurSupportHighEnergyVeinUnit"];
            this.nurSupportOtherStyle = _data["nurSupportOtherStyle"];
            this.nurSupportOtherStyleOrallyDose = _data["nurSupportOtherStyleOrallyDose"];
            this.nurSupportOtherStyleOrallyUnit = _data["nurSupportOtherStyleOrallyUnit"];
            this.nurSupportOtherStyleVeinDose = _data["nurSupportOtherStyleVeinDose"];
            this.nurSupportOtherVeinUnit = _data["nurSupportOtherVeinUnit"];
            this.lipidLoweringDrugs = _data["lipidLoweringDrugs"];
            this.lipidLoweringDrugsOther = _data["lipidLoweringDrugsOther"];
            this.antiplateletDrugs = _data["antiplateletDrugs"];
            this.antiplateletDrugsOther = _data["antiplateletDrugsOther"];
            this.otherDrugs = _data["otherDrugs"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CureInformationOtherDataView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationOtherView {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["variation"] = this.variation;
        data["used"] = this.used;
        data["quarter"] = this.quarter;
        data["nurSupportDrugs"] = this.nurSupportDrugs;
        data["nurSupportLCarnitineStyle"] = this.nurSupportLCarnitineStyle;
        data["nurSupportLCarnitineStyleOrallyDose"] = this.nurSupportLCarnitineStyleOrallyDose;
        data["nurSupportLCarnitineStyleOrallyUnit"] = this.nurSupportLCarnitineStyleOrallyUnit;
        data["nurlSupportLCarnitineStyleVeinDose"] = this.nurlSupportLCarnitineStyleVeinDose;
        data["nurSupportLCarnitineStyleVeinUnit"] = this.nurSupportLCarnitineStyleVeinUnit;
        data["nurSupportFolicCidStyle"] = this.nurSupportFolicCidStyle;
        data["nurSupportFolicCidStyleOrallyDose"] = this.nurSupportFolicCidStyleOrallyDose;
        data["nurSupportFolicCidStyleOrallyUnit"] = this.nurSupportFolicCidStyleOrallyUnit;
        data["nurSupportFolicCidStyleVeinDose"] = this.nurSupportFolicCidStyleVeinDose;
        data["nurSupportFolicCidVeinUnit"] = this.nurSupportFolicCidVeinUnit;
        data["nurSupportKetonicCidStyle"] = this.nurSupportKetonicCidStyle;
        data["nurSupportKetonicCidStyleOrallyDose"] = this.nurSupportKetonicCidStyleOrallyDose;
        data["nurSupportKetonicCidStyleOrallyUnit"] = this.nurSupportKetonicCidStyleOrallyUnit;
        data["nurSupportKetonicCidStyleVeinDose"] = this.nurSupportKetonicCidStyleVeinDose;
        data["nurSupportKetonicCidVeinUnit"] = this.nurSupportKetonicCidVeinUnit;
        data["nurSupportHighEnergyStyle"] = this.nurSupportHighEnergyStyle;
        data["nurSupportHighEnergyStyleOrallyDose"] = this.nurSupportHighEnergyStyleOrallyDose;
        data["nurSupportHighEnergyStyleOrallyUnit"] = this.nurSupportHighEnergyStyleOrallyUnit;
        data["nurSupportHighEnergyStyleVeinDose"] = this.nurSupportHighEnergyStyleVeinDose;
        data["nurSupportHighEnergyVeinUnit"] = this.nurSupportHighEnergyVeinUnit;
        data["nurSupportOtherStyle"] = this.nurSupportOtherStyle;
        data["nurSupportOtherStyleOrallyDose"] = this.nurSupportOtherStyleOrallyDose;
        data["nurSupportOtherStyleOrallyUnit"] = this.nurSupportOtherStyleOrallyUnit;
        data["nurSupportOtherStyleVeinDose"] = this.nurSupportOtherStyleVeinDose;
        data["nurSupportOtherVeinUnit"] = this.nurSupportOtherVeinUnit;
        data["lipidLoweringDrugs"] = this.lipidLoweringDrugs;
        data["lipidLoweringDrugsOther"] = this.lipidLoweringDrugsOther;
        data["antiplateletDrugs"] = this.antiplateletDrugs;
        data["antiplateletDrugsOther"] = this.antiplateletDrugsOther;
        data["otherDrugs"] = this.otherDrugs;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 其他药物治疗信息治疗信息 */
export interface ICureInformationOtherView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 有无变化0,1 */
    variation: number;
    /** 是否使用0,1 */
    used?: number;
    /** 季度*上半年，下半年* */
    quarter?: string | undefined;
    /** 营养支持药物分类 *多选* *左旋肉碱,叶酸,α酮酸,高能营养补充液,其它 */
    nurSupportDrugs?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式 *多选* *口服,静脉 */
    nurSupportLCarnitineStyle?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量 *（/日）* */
    nurSupportLCarnitineStyleOrallyDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-口服-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量 *（/日）* */
    nurlSupportLCarnitineStyleVeinDose?: string | undefined;
    /** 营养支持药物-左旋肉碱用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportLCarnitineStyleVeinUnit?: string | undefined;
    /** 叶酸用药方式 *多选* *口服,静脉 */
    nurSupportFolicCidStyle?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量 *（/日）* */
    nurSupportFolicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportFolicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量 *（/日）* */
    nurSupportFolicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-叶酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportFolicCidVeinUnit?: string | undefined;
    /** α酮酸用药方式 *多选* *口服,静脉 */
    nurSupportKetonicCidStyle?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量 *（/日）* */
    nurSupportKetonicCidStyleOrallyDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-口服-剂量单位 *剂量单位* */
    nurSupportKetonicCidStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量 *（/日）* */
    nurSupportKetonicCidStyleVeinDose?: string | undefined;
    /** 营养支持药物-α酮酸用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportKetonicCidVeinUnit?: string | undefined;
    /** 高能营养补充液用药方式 *多选* *口服,静脉 */
    nurSupportHighEnergyStyle?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量 *（/日）* */
    nurSupportHighEnergyStyleOrallyDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-口服-剂量单位 *剂量单位* */
    nurSupportHighEnergyStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量 *（/日）* */
    nurSupportHighEnergyStyleVeinDose?: string | undefined;
    /** 营养支持药物-高能营养补充液用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportHighEnergyVeinUnit?: string | undefined;
    /** 其它营养支持药物用药方式 *多选* *口服,静脉 */
    nurSupportOtherStyle?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量 *（/日）* */
    nurSupportOtherStyleOrallyDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-口服-剂量单位 *剂量单位* */
    nurSupportOtherStyleOrallyUnit?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量 *（/日）* */
    nurSupportOtherStyleVeinDose?: string | undefined;
    /** 营养支持药物-其它营养支持药物用药方式-静脉-剂量单位 *剂量单位* */
    nurSupportOtherVeinUnit?: string | undefined;
    /** 降脂药物分类 *多选* *他汀类,贝特类,烟酸类,胆酸螯合剂,胆固醇吸收抑制剂,其它 */
    lipidLoweringDrugs?: string | undefined;
    /** 降脂药物分类其他 */
    lipidLoweringDrugsOther?: string | undefined;
    /** 抗血小板药物分类 *多选* *阿司匹林,双嘧达莫（潘生丁）,噻氯匹定,氯吡格雷,其它 */
    antiplateletDrugs?: string | undefined;
    /** 抗血小板药物分类其他 */
    antiplateletDrugsOther?: string | undefined;
    /** 其它药物分类 */
    otherDrugs?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 其他药物资料属性 */
    items?: CureInformationOtherDataView[] | undefined;
}

/** Reponse */
export class CureInformationOtherViewResult implements ICureInformationOtherViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationOtherView[] | undefined;

    constructor(data?: ICureInformationOtherViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureInformationOtherView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureInformationOtherViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureInformationOtherViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureInformationOtherView[] | undefined;
}

/** Reponse */
export class CureInformationOtherViewResultEntry implements ICureInformationOtherViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationOtherView;

    constructor(data?: ICureInformationOtherViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureInformationOtherView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureInformationOtherViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureInformationOtherViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureInformationOtherViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureInformationOtherView;
}

/** 透析过程记录 */
export class CureLog implements ICureLog {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 操作时间 */
    operatorTime?: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 类型 *确认方案,核对医嘱,记录并发症,透中护理等* */
    type?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;

    constructor(data?: ICureLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.operatorTime = _data["operatorTime"] ? dayjs(_data["operatorTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureLog {
        data = typeof data === 'object' ? data : {};
        let result = new CureLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["operatorTime"] = this.operatorTime ? this.operatorTime.toLocaleString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["type"] = this.type;
        data["content"] = this.content;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析过程记录 */
export interface ICureLog {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 操作时间 */
    operatorTime?: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 类型 *确认方案,核对医嘱,记录并发症,透中护理等* */
    type?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;
}

/** 透析过程记录照片 */
export class CureLogFile implements ICureLogFile {
    /** 标识 */
    id?: string | undefined;
    /** [透析过程记录标识](透析过程记录) */
    cureLogId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    cureLogs?: CureLog;
    hfsFiless?: HfsFiles;

    constructor(data?: ICureLogFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureLogId = _data["cureLogId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.cureLogs = _data["cureLogs"] ? CureLog.fromJS(_data["cureLogs"]) : <any>undefined;
            this.hfsFiless = _data["hfsFiless"] ? HfsFiles.fromJS(_data["hfsFiless"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureLogFile {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureLogId"] = this.cureLogId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["cureLogs"] = this.cureLogs ? this.cureLogs.toJSON() : <any>undefined;
        data["hfsFiless"] = this.hfsFiless ? this.hfsFiless.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析过程记录照片 */
export interface ICureLogFile {
    /** 标识 */
    id?: string | undefined;
    /** [透析过程记录标识](透析过程记录) */
    cureLogId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    cureLogs?: CureLog;
    hfsFiless?: HfsFiles;
}

/** Reponse */
export class CureLogFileResult implements ICureLogFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureLogFile[] | undefined;

    constructor(data?: ICureLogFileResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureLogFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureLogFileResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogFileResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureLogFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureLogFile[] | undefined;
}

/** Reponse */
export class CureLogFileResultEntry implements ICureLogFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureLogFile;

    constructor(data?: ICureLogFileResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureLogFile.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureLogFileResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogFileResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureLogFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureLogFile;
}

/** 透析过程记录照片 (ViewModel) */
export class CureLogFileViewModel implements ICureLogFileViewModel {
    /** [透析过程记录标识](透析过程记录Id) */
    cureLogId!: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureLogFileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureLogId = _data["cureLogId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureLogFileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogFileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureLogId"] = this.cureLogId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析过程记录照片 (ViewModel) */
export interface ICureLogFileViewModel {
    /** [透析过程记录标识](透析过程记录Id) */
    cureLogId: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId: string;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class CureLogResult implements ICureLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureLog[] | undefined;

    constructor(data?: ICureLogResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureLog.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureLogResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureLog[] | undefined;
}

/** Reponse */
export class CureLogResultEntry implements ICureLogResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureLog;

    constructor(data?: ICureLogResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureLog.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureLogResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureLogResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureLog;
}

/** 透析过程记录 (ViewModel) */
export class CureLogViewModel implements ICureLogViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 操作时间 */
    operatorTime!: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId!: string;
    /** 操作者姓名 */
    operatorName!: string;
    /** 类型 *确认方案,核对医嘱,记录并发症,透中护理等* */
    type?: string | undefined;
    /** 内容 */
    content?: string | undefined;

    constructor(data?: ICureLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.operatorTime = _data["operatorTime"] ? dayjs(_data["operatorTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.type = _data["type"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): CureLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["operatorTime"] = this.operatorTime ? this.operatorTime.toLocaleString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["type"] = this.type;
        data["content"] = this.content;
        return data;
    }
}

/** 透析过程记录 (ViewModel) */
export interface ICureLogViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 操作时间 */
    operatorTime: dayjs.Dayjs;
    /** 操作者标识 */
    operatorId: string;
    /** 操作者姓名 */
    operatorName: string;
    /** 类型 *确认方案,核对医嘱,记录并发症,透中护理等* */
    type?: string | undefined;
    /** 内容 */
    content?: string | undefined;
}

/** 透析排班耗材 */
export class CureOrderShiftConsumableEditModel implements ICureOrderShiftConsumableEditModel {
    /** [透析排班标识](#透析排班) */
    cureOrderShiftId!: string;
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureOrderShiftConsumableEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureOrderShiftId = _data["cureOrderShiftId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureOrderShiftConsumableEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftConsumableEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureOrderShiftId"] = this.cureOrderShiftId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析排班耗材 */
export interface ICureOrderShiftConsumableEditModel {
    /** [透析排班标识](#透析排班) */
    cureOrderShiftId: string;
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析排班耗材 */
export class CureOrderShiftConsumableView implements ICureOrderShiftConsumableView {
    /** [透析排班标识](#透析排班) */
    cureOrderShiftId!: string;
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureOrderShiftConsumableView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureOrderShiftId = _data["cureOrderShiftId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureOrderShiftConsumableView {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftConsumableView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureOrderShiftId"] = this.cureOrderShiftId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透析排班耗材 */
export interface ICureOrderShiftConsumableView {
    /** [透析排班标识](#透析排班) */
    cureOrderShiftId: string;
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureOrderShiftConsumableViewResult implements ICureOrderShiftConsumableViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOrderShiftConsumableView[] | undefined;

    constructor(data?: ICureOrderShiftConsumableViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureOrderShiftConsumableView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureOrderShiftConsumableViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftConsumableViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureOrderShiftConsumableViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOrderShiftConsumableView[] | undefined;
}

/** Reponse */
export class CureOrderShiftConsumableViewResultEntry implements ICureOrderShiftConsumableViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureOrderShiftConsumableView;

    constructor(data?: ICureOrderShiftConsumableViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureOrderShiftConsumableView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureOrderShiftConsumableViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftConsumableViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureOrderShiftConsumableViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureOrderShiftConsumableView;
}

/** 透析排班 */
export class CureOrderShiftEditModel implements ICureOrderShiftEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 透析日期 */
    dialysisDate!: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](#透析班次) */
    cureShiftId!: string;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 排床院区 */
    sysHospitalAreaId!: string;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;

    constructor(data?: ICureOrderShiftEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisMode = _data["dialysisMode"];
            this.cureShiftId = _data["cureShiftId"];
            this.color = _data["color"];
            this.fontColor = _data["fontColor"];
            this.icon = _data["icon"];
            this.cureRecordId = _data["cureRecordId"];
            this.remark = _data["remark"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(RoomRecordItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureOrderShiftEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["dialysisMode"] = this.dialysisMode;
        data["cureShiftId"] = this.cureShiftId;
        data["color"] = this.color;
        data["fontColor"] = this.fontColor;
        data["icon"] = this.icon;
        data["cureRecordId"] = this.cureRecordId;
        data["remark"] = this.remark;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析排班 */
export interface ICureOrderShiftEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 透析日期 */
    dialysisDate: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](#透析班次) */
    cureShiftId: string;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 排床院区 */
    sysHospitalAreaId: string;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;
}

/** 透析排班 */
export class CureOrderShiftView implements ICureOrderShiftView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 透析日期 */
    dialysisDate!: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](#透析班次) */
    cureShiftId!: string;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 排床院区 */
    sysHospitalAreaId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureOrderShiftView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisMode = _data["dialysisMode"];
            this.cureShiftId = _data["cureShiftId"];
            this.color = _data["color"];
            this.fontColor = _data["fontColor"];
            this.icon = _data["icon"];
            this.cureRecordId = _data["cureRecordId"];
            this.remark = _data["remark"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureOrderShiftView {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["dialysisMode"] = this.dialysisMode;
        data["cureShiftId"] = this.cureShiftId;
        data["color"] = this.color;
        data["fontColor"] = this.fontColor;
        data["icon"] = this.icon;
        data["cureRecordId"] = this.cureRecordId;
        data["remark"] = this.remark;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透析排班 */
export interface ICureOrderShiftView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 透析日期 */
    dialysisDate: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](#透析班次) */
    cureShiftId: string;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 排床院区 */
    sysHospitalAreaId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureOrderShiftViewResult implements ICureOrderShiftViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOrderShiftView[] | undefined;

    constructor(data?: ICureOrderShiftViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureOrderShiftView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureOrderShiftViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureOrderShiftViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureOrderShiftViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureOrderShiftView[] | undefined;
}

/** 患者排床详细信息 */
export class CurePatient implements ICurePatient {
    isShift?: boolean;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次颜色 */
    shiftColor?: string | undefined;
    /** 班次序列 */
    sequence?: number;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endTime?: string | undefined;
    patient?: CureBedPatientDetail;

    constructor(data?: ICurePatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isShift = _data["isShift"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.weekday = _data["weekday"];
            this.weekdayName = _data["weekdayName"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.shiftColor = _data["shiftColor"];
            this.sequence = _data["sequence"];
            this.beginTime = _data["beginTime"];
            this.endTime = _data["endTime"];
            this.patient = _data["patient"] ? CureBedPatientDetail.fromJS(_data["patient"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePatient {
        data = typeof data === 'object' ? data : {};
        let result = new CurePatient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isShift"] = this.isShift;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["weekday"] = this.weekday;
        data["weekdayName"] = this.weekdayName;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["shiftColor"] = this.shiftColor;
        data["sequence"] = this.sequence;
        data["beginTime"] = this.beginTime;
        data["endTime"] = this.endTime;
        data["patient"] = this.patient ? this.patient.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者排床详细信息 */
export interface ICurePatient {
    isShift?: boolean;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 透析日 `DIC.DIALYSIS.WEEKDAY` */
    weekday?: number;
    /** 透析日名称 */
    weekdayName?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次颜色 */
    shiftColor?: string | undefined;
    /** 班次序列 */
    sequence?: number;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endTime?: string | undefined;
    patient?: CureBedPatientDetail;
}

/** 患者处方 */
export class CurePrescription implements ICurePrescription {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [医生标识](用户信息) */
    doctorId?: string | undefined;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type?: string | undefined;
    /** 处方日期 */
    date?: dayjs.Dayjs;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode?: string | undefined;
    /** 透析时长 *分钟* */
    dialysisDuration?: number;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    patients?: Patient;
    doctors?: SysUser;
    patientVascularAccesss?: PatientVascularAccess;

    constructor(data?: ICurePrescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.doctorId = _data["doctorId"];
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.totalCount = _data["totalCount"];
            this.usageCount = _data["usageCount"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDuration = _data["dialysisDuration"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.rfm = _data["rfm"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.dialysateName = _data["dialysateName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.nonReason = _data["nonReason"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.dialysisFrequency = _data["dialysisFrequency"];
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.doctors = _data["doctors"] ? SysUser.fromJS(_data["doctors"]) : <any>undefined;
            this.patientVascularAccesss = _data["patientVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientVascularAccesss"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePrescription {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["doctorId"] = this.doctorId;
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["beginDate"] = this.beginDate ? this.beginDate.toLocaleString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toLocaleString() : <any>undefined;
        data["totalCount"] = this.totalCount;
        data["usageCount"] = this.usageCount;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDuration"] = this.dialysisDuration;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["rfm"] = this.rfm;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["dialysateName"] = this.dialysateName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["anticoagulantName"] = this.anticoagulantName;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["nonReason"] = this.nonReason;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["dialysisFrequency"] = this.dialysisFrequency;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["doctors"] = this.doctors ? this.doctors.toJSON() : <any>undefined;
        data["patientVascularAccesss"] = this.patientVascularAccesss ? this.patientVascularAccesss.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者处方 */
export interface ICurePrescription {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** [医生标识](用户信息) */
    doctorId?: string | undefined;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type?: string | undefined;
    /** 处方日期 */
    date?: dayjs.Dayjs;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode?: string | undefined;
    /** 透析时长 *分钟* */
    dialysisDuration?: number;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    patients?: Patient;
    doctors?: SysUser;
    patientVascularAccesss?: PatientVascularAccess;
}

/** 患者处方耗材 */
export class CurePrescriptionConsumable implements ICurePrescriptionConsumable {
    /** 标识 */
    id?: string | undefined;
    /** [处方标识](患者处方) */
    curePrescriptionId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 耗材数量 */
    count?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    curePrescriptions?: CurePrescription;
    roomItemLists?: RoomItemList;

    constructor(data?: ICurePrescriptionConsumable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.curePrescriptionId = _data["curePrescriptionId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.curePrescriptions = _data["curePrescriptions"] ? CurePrescription.fromJS(_data["curePrescriptions"]) : <any>undefined;
            this.roomItemLists = _data["roomItemLists"] ? RoomItemList.fromJS(_data["roomItemLists"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePrescriptionConsumable {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionConsumable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["curePrescriptionId"] = this.curePrescriptionId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["curePrescriptions"] = this.curePrescriptions ? this.curePrescriptions.toJSON() : <any>undefined;
        data["roomItemLists"] = this.roomItemLists ? this.roomItemLists.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者处方耗材 */
export interface ICurePrescriptionConsumable {
    /** 标识 */
    id?: string | undefined;
    /** [处方标识](患者处方) */
    curePrescriptionId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 耗材数量 */
    count?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    curePrescriptions?: CurePrescription;
    roomItemLists?: RoomItemList;
}

/** Reponse */
export class CurePrescriptionConsumableResult implements ICurePrescriptionConsumableResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CurePrescriptionConsumable[] | undefined;

    constructor(data?: ICurePrescriptionConsumableResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CurePrescriptionConsumable.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurePrescriptionConsumableResult {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionConsumableResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionConsumableResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CurePrescriptionConsumable[] | undefined;
}

/** Reponse */
export class CurePrescriptionConsumableResultEntry implements ICurePrescriptionConsumableResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionConsumable;

    constructor(data?: ICurePrescriptionConsumableResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CurePrescriptionConsumable.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePrescriptionConsumableResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionConsumableResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionConsumableResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionConsumable;
}

/** 处方耗材 */
export class CurePrescriptionConsumableView implements ICurePrescriptionConsumableView {
    /** 耗材标识-透析器 */
    roomItemListTXQId?: string | undefined;
    /** 耗材标识-灌流器 */
    roomItemListGLQId?: string | undefined;
    /** 耗材标识-血滤器 */
    roomItemListXLQId?: string | undefined;
    /** 耗材标识-血路管 */
    roomItemListXLGId?: string | undefined;
    /** 耗材标识-内瘘针 */
    roomItemListNLZId?: string | undefined;
    /** 耗材标识-置换液管路 */
    roomItemListZHYGLId?: string | undefined;
    /** 耗材-透析器数量 */
    roomItemListTXQCount?: number | undefined;
    /** 耗材-灌流器数量 */
    roomItemListGLQCount?: number | undefined;
    /** 耗材-血滤器数量 */
    roomItemListXLQCount?: number | undefined;
    /** 耗材-血路管数量 */
    roomItemListXLGCount?: number | undefined;
    /** 耗材-内瘘针数量 */
    roomItemListNLZCount?: number | undefined;
    /** 耗材-置换液管路数量 */
    roomItemListZHYGLCount?: number | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabel?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabel?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabel?: string | undefined;

    constructor(data?: ICurePrescriptionConsumableView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListTXQId = _data["roomItemListTXQId"];
            this.roomItemListGLQId = _data["roomItemListGLQId"];
            this.roomItemListXLQId = _data["roomItemListXLQId"];
            this.roomItemListXLGId = _data["roomItemListXLGId"];
            this.roomItemListNLZId = _data["roomItemListNLZId"];
            this.roomItemListZHYGLId = _data["roomItemListZHYGLId"];
            this.roomItemListTXQCount = _data["roomItemListTXQCount"];
            this.roomItemListGLQCount = _data["roomItemListGLQCount"];
            this.roomItemListXLQCount = _data["roomItemListXLQCount"];
            this.roomItemListXLGCount = _data["roomItemListXLGCount"];
            this.roomItemListNLZCount = _data["roomItemListNLZCount"];
            this.roomItemListZHYGLCount = _data["roomItemListZHYGLCount"];
            this.roomItemListTXQLabel = _data["roomItemListTXQLabel"];
            this.roomItemListGLQLabel = _data["roomItemListGLQLabel"];
            this.roomItemListXLQLabel = _data["roomItemListXLQLabel"];
            this.roomItemListXLGLabel = _data["roomItemListXLGLabel"];
            this.roomItemListNLZLabel = _data["roomItemListNLZLabel"];
            this.roomItemListZHYGLLabel = _data["roomItemListZHYGLLabel"];
        }
    }

    static fromJS(data: any): CurePrescriptionConsumableView {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionConsumableView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListTXQId"] = this.roomItemListTXQId;
        data["roomItemListGLQId"] = this.roomItemListGLQId;
        data["roomItemListXLQId"] = this.roomItemListXLQId;
        data["roomItemListXLGId"] = this.roomItemListXLGId;
        data["roomItemListNLZId"] = this.roomItemListNLZId;
        data["roomItemListZHYGLId"] = this.roomItemListZHYGLId;
        data["roomItemListTXQCount"] = this.roomItemListTXQCount;
        data["roomItemListGLQCount"] = this.roomItemListGLQCount;
        data["roomItemListXLQCount"] = this.roomItemListXLQCount;
        data["roomItemListXLGCount"] = this.roomItemListXLGCount;
        data["roomItemListNLZCount"] = this.roomItemListNLZCount;
        data["roomItemListZHYGLCount"] = this.roomItemListZHYGLCount;
        data["roomItemListTXQLabel"] = this.roomItemListTXQLabel;
        data["roomItemListGLQLabel"] = this.roomItemListGLQLabel;
        data["roomItemListXLQLabel"] = this.roomItemListXLQLabel;
        data["roomItemListXLGLabel"] = this.roomItemListXLGLabel;
        data["roomItemListNLZLabel"] = this.roomItemListNLZLabel;
        data["roomItemListZHYGLLabel"] = this.roomItemListZHYGLLabel;
        return data;
    }
}

/** 处方耗材 */
export interface ICurePrescriptionConsumableView {
    /** 耗材标识-透析器 */
    roomItemListTXQId?: string | undefined;
    /** 耗材标识-灌流器 */
    roomItemListGLQId?: string | undefined;
    /** 耗材标识-血滤器 */
    roomItemListXLQId?: string | undefined;
    /** 耗材标识-血路管 */
    roomItemListXLGId?: string | undefined;
    /** 耗材标识-内瘘针 */
    roomItemListNLZId?: string | undefined;
    /** 耗材标识-置换液管路 */
    roomItemListZHYGLId?: string | undefined;
    /** 耗材-透析器数量 */
    roomItemListTXQCount?: number | undefined;
    /** 耗材-灌流器数量 */
    roomItemListGLQCount?: number | undefined;
    /** 耗材-血滤器数量 */
    roomItemListXLQCount?: number | undefined;
    /** 耗材-血路管数量 */
    roomItemListXLGCount?: number | undefined;
    /** 耗材-内瘘针数量 */
    roomItemListNLZCount?: number | undefined;
    /** 耗材-置换液管路数量 */
    roomItemListZHYGLCount?: number | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabel?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabel?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabel?: string | undefined;
}

/** 患者处方耗材 (ViewModel) */
export class CurePrescriptionConsumableViewModel implements ICurePrescriptionConsumableViewModel {
    /** [处方标识](患者处方Id) */
    curePrescriptionId!: string;
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICurePrescriptionConsumableViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.curePrescriptionId = _data["curePrescriptionId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CurePrescriptionConsumableViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionConsumableViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["curePrescriptionId"] = this.curePrescriptionId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者处方耗材 (ViewModel) */
export interface ICurePrescriptionConsumableViewModel {
    /** [处方标识](患者处方Id) */
    curePrescriptionId: string;
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class CurePrescriptionConsumableViewResultEntry implements ICurePrescriptionConsumableViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionConsumableView;

    constructor(data?: ICurePrescriptionConsumableViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CurePrescriptionConsumableView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePrescriptionConsumableViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionConsumableViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionConsumableViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionConsumableView;
}

/** 患者处方药品 */
export class CurePrescriptionDrugEditModel implements ICurePrescriptionDrugEditModel {
    /** [处方标识](#患者处方) */
    curePrescriptionId!: string;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICurePrescriptionDrugEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.curePrescriptionId = _data["curePrescriptionId"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.unitUsage = _data["unitUsage"];
            this.dosage = _data["dosage"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CurePrescriptionDrugEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionDrugEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["curePrescriptionId"] = this.curePrescriptionId;
        data["anticoagulantName"] = this.anticoagulantName;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["unitUsage"] = this.unitUsage;
        data["dosage"] = this.dosage;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者处方药品 */
export interface ICurePrescriptionDrugEditModel {
    /** [处方标识](#患者处方) */
    curePrescriptionId: string;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 患者处方药品 */
export class CurePrescriptionDrugView implements ICurePrescriptionDrugView {
    /** [处方标识](#患者处方) */
    curePrescriptionId!: string;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;

    constructor(data?: ICurePrescriptionDrugView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.curePrescriptionId = _data["curePrescriptionId"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.unitUsage = _data["unitUsage"];
            this.dosage = _data["dosage"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.spec = _data["spec"];
            this.manufacturer = _data["manufacturer"];
        }
    }

    static fromJS(data: any): CurePrescriptionDrugView {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionDrugView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["curePrescriptionId"] = this.curePrescriptionId;
        data["anticoagulantName"] = this.anticoagulantName;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["unitUsage"] = this.unitUsage;
        data["dosage"] = this.dosage;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["spec"] = this.spec;
        data["manufacturer"] = this.manufacturer;
        return data;
    }
}

/** 患者处方药品 */
export interface ICurePrescriptionDrugView {
    /** [处方标识](#患者处方) */
    curePrescriptionId: string;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
}

/** Reponse */
export class CurePrescriptionDrugViewResult implements ICurePrescriptionDrugViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CurePrescriptionDrugView[] | undefined;

    constructor(data?: ICurePrescriptionDrugViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CurePrescriptionDrugView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurePrescriptionDrugViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionDrugViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionDrugViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CurePrescriptionDrugView[] | undefined;
}

/** Reponse */
export class CurePrescriptionDrugViewResultEntry implements ICurePrescriptionDrugViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionDrugView;

    constructor(data?: ICurePrescriptionDrugViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CurePrescriptionDrugView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePrescriptionDrugViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionDrugViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionDrugViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionDrugView;
}

/** 透析处方新增 */
export class CurePrescriptionEditModel implements ICurePrescriptionEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode!: string;
    /** 透析时长 *分钟* */
    dialysisDuration!: number;
    /** 干体重 *从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 血管通路 */
    patientVascularAccessName!: string;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType!: string;
    /** 抗凝剂模版类型 */
    antiTmplType!: string;
    /** [血管通路](#患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    /** 费用项目 */
    cureCostGroups?: RoomRecordItem[] | undefined;
    /** 抗凝剂药品 */
    curePrescriptionDrugs?: CurePrescriptionDrugEditModel[] | undefined;

    constructor(data?: ICurePrescriptionEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.totalCount = _data["totalCount"];
            this.usageCount = _data["usageCount"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDuration = _data["dialysisDuration"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.rfm = _data["rfm"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.dialysateName = _data["dialysateName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.nonReason = _data["nonReason"];
            this.remark = _data["remark"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.antiTmplType = _data["antiTmplType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.dialysisFrequency = _data["dialysisFrequency"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(RoomRecordItem.fromJS(item));
            }
            if (Array.isArray(_data["curePrescriptionDrugs"])) {
                this.curePrescriptionDrugs = [] as any;
                for (let item of _data["curePrescriptionDrugs"])
                    this.curePrescriptionDrugs!.push(CurePrescriptionDrugEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurePrescriptionEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["beginDate"] = this.beginDate ? this.beginDate.toLocaleString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toLocaleString() : <any>undefined;
        data["totalCount"] = this.totalCount;
        data["usageCount"] = this.usageCount;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDuration"] = this.dialysisDuration;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["rfm"] = this.rfm;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["dialysateName"] = this.dialysateName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["anticoagulantName"] = this.anticoagulantName;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["nonReason"] = this.nonReason;
        data["remark"] = this.remark;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["antiTmplType"] = this.antiTmplType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["dialysisFrequency"] = this.dialysisFrequency;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.curePrescriptionDrugs)) {
            data["curePrescriptionDrugs"] = [];
            for (let item of this.curePrescriptionDrugs)
                data["curePrescriptionDrugs"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析处方新增 */
export interface ICurePrescriptionEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode: string;
    /** 透析时长 *分钟* */
    dialysisDuration: number;
    /** 干体重 *从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](#患者血管通路) */
    patientVascularAccessId: string;
    /** 血管通路 */
    patientVascularAccessName: string;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType: string;
    /** 抗凝剂模版类型 */
    antiTmplType: string;
    /** [血管通路](#患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    /** 费用项目 */
    cureCostGroups?: RoomRecordItem[] | undefined;
    /** 抗凝剂药品 */
    curePrescriptionDrugs?: CurePrescriptionDrugEditModel[] | undefined;
}

/** 患者处方展现 */
export class CurePrescriptionView implements ICurePrescriptionView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type!: string;
    /** 处方日期 */
    date!: dayjs.Dayjs;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode!: string;
    /** 透析时长 *分钟* */
    dialysisDuration!: number;
    /** 干体重 *从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](#患者血管通路) */
    patientVascularAccessId!: string;
    /** 血管通路 */
    patientVascularAccessName!: string;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType!: string;
    /** 抗凝剂模版类型 */
    antiTmplType!: string;
    /** [血管通路](#患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    /** 医生名称 */
    doctorName?: string | undefined;
    /** 处方类型名称 */
    typeName?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 置换方式名称 */
    rfmName?: string | undefined;
    /** 大类名称 */
    classify1Name?: string | undefined;
    /** 小类名称 */
    classify2Name?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitName?: string | undefined;
    /** 透析器 */
    txq?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [医生标识](用户信息Id) */
    doctorId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
    /** 抗凝剂药品 */
    curePrescriptionDrugs?: CurePrescriptionDrugView[] | undefined;

    constructor(data?: ICurePrescriptionView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.type = _data["type"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.totalCount = _data["totalCount"];
            this.usageCount = _data["usageCount"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisDuration = _data["dialysisDuration"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.rfm = _data["rfm"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.dialysateName = _data["dialysateName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.anticoagulantName = _data["anticoagulantName"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.nonReason = _data["nonReason"];
            this.remark = _data["remark"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.antiTmplType = _data["antiTmplType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.dialysisFrequency = _data["dialysisFrequency"];
            this.doctorName = _data["doctorName"];
            this.typeName = _data["typeName"];
            this.dialysisModeName = _data["dialysisModeName"];
            this.rfmName = _data["rfmName"];
            this.classify1Name = _data["classify1Name"];
            this.classify2Name = _data["classify2Name"];
            this.firstUnitName = _data["firstUnitName"];
            this.txq = _data["txq"];
            this.id = _data["id"];
            this.doctorId = _data["doctorId"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(CureCostGroupView.fromJS(item));
            }
            if (Array.isArray(_data["curePrescriptionDrugs"])) {
                this.curePrescriptionDrugs = [] as any;
                for (let item of _data["curePrescriptionDrugs"])
                    this.curePrescriptionDrugs!.push(CurePrescriptionDrugView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurePrescriptionView {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["type"] = this.type;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["beginDate"] = this.beginDate ? this.beginDate.toLocaleString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toLocaleString() : <any>undefined;
        data["totalCount"] = this.totalCount;
        data["usageCount"] = this.usageCount;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisDuration"] = this.dialysisDuration;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["rfm"] = this.rfm;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["dialysateName"] = this.dialysateName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["anticoagulantName"] = this.anticoagulantName;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["nonReason"] = this.nonReason;
        data["remark"] = this.remark;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["antiTmplType"] = this.antiTmplType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["dialysisFrequency"] = this.dialysisFrequency;
        data["doctorName"] = this.doctorName;
        data["typeName"] = this.typeName;
        data["dialysisModeName"] = this.dialysisModeName;
        data["rfmName"] = this.rfmName;
        data["classify1Name"] = this.classify1Name;
        data["classify2Name"] = this.classify2Name;
        data["firstUnitName"] = this.firstUnitName;
        data["txq"] = this.txq;
        data["id"] = this.id;
        data["doctorId"] = this.doctorId;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.curePrescriptionDrugs)) {
            data["curePrescriptionDrugs"] = [];
            for (let item of this.curePrescriptionDrugs)
                data["curePrescriptionDrugs"].push(item.toJSON());
        }
        return data;
    }
}

/** 患者处方展现 */
export interface ICurePrescriptionView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 处方类型 `DIC.PRESCRIPTION.TYPE` *字典值* */
    type: string;
    /** 处方日期 */
    date: dayjs.Dayjs;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs | undefined;
    /** 停止时间 */
    endDate?: dayjs.Dayjs | undefined;
    /** 计次总次数 */
    totalCount?: number | undefined;
    /** 已用次数 */
    usageCount?: number | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisMode: string;
    /** 透析时长 *分钟* */
    dialysisDuration: number;
    /** 干体重 *从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](#患者血管通路) */
    patientVascularAccessId: string;
    /** 血管通路 */
    patientVascularAccessName: string;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它抗凝剂 */
    anticoagulantOther?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType: string;
    /** 抗凝剂模版类型 */
    antiTmplType: string;
    /** [血管通路](#患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 透析治疗频次 *1次/周;2次/周;3次/周;4次/周;5次/周;6次/周;7次/周;3次/2周;5次/2周;7次/2周* */
    dialysisFrequency?: string | undefined;
    /** 医生名称 */
    doctorName?: string | undefined;
    /** 处方类型名称 */
    typeName?: string | undefined;
    /** 透析方式名称 */
    dialysisModeName?: string | undefined;
    /** 置换方式名称 */
    rfmName?: string | undefined;
    /** 大类名称 */
    classify1Name?: string | undefined;
    /** 小类名称 */
    classify2Name?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitName?: string | undefined;
    /** 透析器 */
    txq?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [医生标识](用户信息Id) */
    doctorId?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 费用组套 */
    cureCostGroups?: CureCostGroupView[] | undefined;
    /** 抗凝剂药品 */
    curePrescriptionDrugs?: CurePrescriptionDrugView[] | undefined;
}

/** Reponse */
export class CurePrescriptionViewResult implements ICurePrescriptionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CurePrescriptionView[] | undefined;

    constructor(data?: ICurePrescriptionViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CurePrescriptionView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CurePrescriptionViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CurePrescriptionView[] | undefined;
}

/** Reponse */
export class CurePrescriptionViewResultEntry implements ICurePrescriptionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionView;

    constructor(data?: ICurePrescriptionViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CurePrescriptionView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CurePrescriptionViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CurePrescriptionViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICurePrescriptionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CurePrescriptionView;
}

export class CureProgressNoteEditModel implements ICureProgressNoteEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 标题 */
    title!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 病程内容 */
    content!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureProgressNoteEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.title = _data["title"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureProgressNoteEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureProgressNoteEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["title"] = this.title;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

export interface ICureProgressNoteEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 标题 */
    title: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 病程内容 */
    content: string;
    /** 备注 */
    remark?: string | undefined;
}

export class CureProgressNoteView implements ICureProgressNoteView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 标题 */
    title!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 病程内容 */
    content!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [医生标识](用户信息Id) */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 医生别名 */
    doctorName2?: string | undefined;
    /** 医生全名 */
    doctorNameFull?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureProgressNoteView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.title = _data["title"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.content = _data["content"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.doctorName2 = _data["doctorName2"];
            this.doctorNameFull = _data["doctorNameFull"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureProgressNoteView {
        data = typeof data === 'object' ? data : {};
        let result = new CureProgressNoteView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["title"] = this.title;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["content"] = this.content;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["doctorName2"] = this.doctorName2;
        data["doctorNameFull"] = this.doctorNameFull;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface ICureProgressNoteView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 标题 */
    title: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 病程内容 */
    content: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [医生标识](用户信息Id) */
    doctorId?: string | undefined;
    /** 医生姓名 */
    doctorName?: string | undefined;
    /** 医生别名 */
    doctorName2?: string | undefined;
    /** 医生全名 */
    doctorNameFull?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureProgressNoteViewResult implements ICureProgressNoteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureProgressNoteView[] | undefined;

    constructor(data?: ICureProgressNoteViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureProgressNoteView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureProgressNoteViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureProgressNoteViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureProgressNoteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureProgressNoteView[] | undefined;
}

/** Reponse */
export class CureProgressNoteViewResultEntry implements ICureProgressNoteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureProgressNoteView;

    constructor(data?: ICureProgressNoteViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureProgressNoteView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureProgressNoteViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureProgressNoteViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureProgressNoteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureProgressNoteView;
}

/** 透析记录 */
export class CureRecord implements ICureRecord {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish?: number;
    /** 是否归档 */
    isArchive?: number;
    patients?: Patient;
    patientVascularAccesss?: PatientVascularAccess;
    patientOtherVascularAccesss?: PatientVascularAccess;

    constructor(data?: ICureRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineId = _data["dialysisMachineId"];
            this.dialysisMachineType = _data["dialysisMachineType"];
            this.dialysisMachineTypeLabel = _data["dialysisMachineTypeLabel"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.rfm = _data["rfm"];
            this.rfmLabel = _data["rfmLabel"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.ufc = _data["ufc"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.afterBpPositionLabel = _data["afterBpPositionLabel"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeBeforeWeight = _data["timeBeforeWeight"] ? dayjs(_data["timeBeforeWeight"].toString()) : <any>undefined;
            this.timeBeforeBp = _data["timeBeforeBp"] ? dayjs(_data["timeBeforeBp"].toString()) : <any>undefined;
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeAssementBefore = _data["timeAssementBefore"] ? dayjs(_data["timeAssementBefore"].toString()) : <any>undefined;
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            this.timeFirstMonitor = _data["timeFirstMonitor"] ? dayjs(_data["timeFirstMonitor"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.timeDisinfect = _data["timeDisinfect"] ? dayjs(_data["timeDisinfect"].toString()) : <any>undefined;
            this.timeAssementAfter = _data["timeAssementAfter"] ? dayjs(_data["timeAssementAfter"].toString()) : <any>undefined;
            this.timeAfterWeight = _data["timeAfterWeight"] ? dayjs(_data["timeAfterWeight"].toString()) : <any>undefined;
            this.timeAfterBp = _data["timeAfterBp"] ? dayjs(_data["timeAfterBp"].toString()) : <any>undefined;
            this.timeAfterSummary = _data["timeAfterSummary"] ? dayjs(_data["timeAfterSummary"].toString()) : <any>undefined;
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
            this.assementUserId = _data["assementUserId"];
            this.assementUserName = _data["assementUserName"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.assementBeforeNurseId = _data["assementBeforeNurseId"];
            this.assementBeforeNurseName = _data["assementBeforeNurseName"];
            this.punctureMethod = _data["punctureMethod"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.onTemp = _data["onTemp"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.verify = _data["verify"];
            this.offNurseId = _data["offNurseId"];
            this.offNurseName = _data["offNurseName"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            this.assementAfterNurseId = _data["assementAfterNurseId"];
            this.assementAfterNurseName = _data["assementAfterNurseName"];
            this.summaryAfterNurseId = _data["summaryAfterNurseId"];
            this.summaryAfterNurseName = _data["summaryAfterNurseName"];
            this.offEarly = _data["offEarly"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.suggestionNext = _data["suggestionNext"];
            this.cancelReason = _data["cancelReason"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.iuf = _data["iuf"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.patientPrescriptionId = _data["patientPrescriptionId"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.isReplenish = _data["isReplenish"];
            this.isArchive = _data["isArchive"];
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.patientVascularAccesss = _data["patientVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientVascularAccesss"]) : <any>undefined;
            this.patientOtherVascularAccesss = _data["patientOtherVascularAccesss"] ? PatientVascularAccess.fromJS(_data["patientOtherVascularAccesss"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecord {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineId"] = this.dialysisMachineId;
        data["dialysisMachineType"] = this.dialysisMachineType;
        data["dialysisMachineTypeLabel"] = this.dialysisMachineTypeLabel;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["rfm"] = this.rfm;
        data["rfmLabel"] = this.rfmLabel;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["ufc"] = this.ufc;
        data["afterWeight"] = this.afterWeight;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterBpPosition"] = this.afterBpPosition;
        data["afterBpPositionLabel"] = this.afterBpPositionLabel;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeBeforeWeight"] = this.timeBeforeWeight ? this.timeBeforeWeight.toLocaleString() : <any>undefined;
        data["timeBeforeBp"] = this.timeBeforeBp ? this.timeBeforeBp.toLocaleString() : <any>undefined;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toLocaleString() : <any>undefined;
        data["enact"] = this.enact;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toLocaleString() : <any>undefined;
        data["check"] = this.check;
        data["timeAssementBefore"] = this.timeAssementBefore ? this.timeAssementBefore.toLocaleString() : <any>undefined;
        data["timeOn"] = this.timeOn ? this.timeOn.toLocaleString() : <any>undefined;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toLocaleString() : <any>undefined;
        data["timeFirstMonitor"] = this.timeFirstMonitor ? this.timeFirstMonitor.toLocaleString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toLocaleString() : <any>undefined;
        data["timeDisinfect"] = this.timeDisinfect ? this.timeDisinfect.toLocaleString() : <any>undefined;
        data["timeAssementAfter"] = this.timeAssementAfter ? this.timeAssementAfter.toLocaleString() : <any>undefined;
        data["timeAfterWeight"] = this.timeAfterWeight ? this.timeAfterWeight.toLocaleString() : <any>undefined;
        data["timeAfterBp"] = this.timeAfterBp ? this.timeAfterBp.toLocaleString() : <any>undefined;
        data["timeAfterSummary"] = this.timeAfterSummary ? this.timeAfterSummary.toLocaleString() : <any>undefined;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toLocaleString() : <any>undefined;
        data["assementUserId"] = this.assementUserId;
        data["assementUserName"] = this.assementUserName;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["assementBeforeNurseId"] = this.assementBeforeNurseId;
        data["assementBeforeNurseName"] = this.assementBeforeNurseName;
        data["punctureMethod"] = this.punctureMethod;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["onTemp"] = this.onTemp;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["verify"] = this.verify;
        data["offNurseId"] = this.offNurseId;
        data["offNurseName"] = this.offNurseName;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        data["assementAfterNurseId"] = this.assementAfterNurseId;
        data["assementAfterNurseName"] = this.assementAfterNurseName;
        data["summaryAfterNurseId"] = this.summaryAfterNurseId;
        data["summaryAfterNurseName"] = this.summaryAfterNurseName;
        data["offEarly"] = this.offEarly;
        data["offEarlyCause"] = this.offEarlyCause;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["suggestionNext"] = this.suggestionNext;
        data["cancelReason"] = this.cancelReason;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["iuf"] = this.iuf;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toLocaleString() : <any>undefined;
        data["patientPrescriptionId"] = this.patientPrescriptionId;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["isReplenish"] = this.isReplenish;
        data["isArchive"] = this.isArchive;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["patientVascularAccesss"] = this.patientVascularAccesss ? this.patientVascularAccesss.toJSON() : <any>undefined;
        data["patientOtherVascularAccesss"] = this.patientOtherVascularAccesss ? this.patientOtherVascularAccesss.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析记录 */
export interface ICureRecord {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish?: number;
    /** 是否归档 */
    isArchive?: number;
    patients?: Patient;
    patientVascularAccesss?: PatientVascularAccess;
    patientOtherVascularAccesss?: PatientVascularAccess;
}

/** 患者透析抗凝剂药品 */
export class CureRecordAnticoagulantDrugEditModel implements ICureRecordAnticoagulantDrugEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;

    constructor(data?: ICureRecordAnticoagulantDrugEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.usage = _data["usage"];
            this.unitUsage = _data["unitUsage"];
            this.dosage = _data["dosage"];
            this.remark = _data["remark"];
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.sellingPrice = _data["sellingPrice"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.spec = _data["spec"];
            this.manufacturer = _data["manufacturer"];
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantDrugEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantDrugEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["usage"] = this.usage;
        data["unitUsage"] = this.unitUsage;
        data["dosage"] = this.dosage;
        data["remark"] = this.remark;
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["sellingPrice"] = this.sellingPrice;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["spec"] = this.spec;
        data["manufacturer"] = this.manufacturer;
        return data;
    }
}

/** 患者透析抗凝剂药品 */
export interface ICureRecordAnticoagulantDrugEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 售价 */
    sellingPrice?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
}

/** 患者透析抗凝剂药品 */
export class CureRecordAnticoagulantDrugView implements ICureRecordAnticoagulantDrugView {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;

    constructor(data?: ICureRecordAnticoagulantDrugView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.usage = _data["usage"];
            this.unitUsage = _data["unitUsage"];
            this.dosage = _data["dosage"];
            this.remark = _data["remark"];
            this.roomItemListId = _data["roomItemListId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.spec = _data["spec"];
            this.manufacturer = _data["manufacturer"];
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantDrugView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantDrugView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["usage"] = this.usage;
        data["unitUsage"] = this.unitUsage;
        data["dosage"] = this.dosage;
        data["remark"] = this.remark;
        data["roomItemListId"] = this.roomItemListId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["spec"] = this.spec;
        data["manufacturer"] = this.manufacturer;
        return data;
    }
}

/** 患者透析抗凝剂药品 */
export interface ICureRecordAnticoagulantDrugView {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 剂量 */
    usage?: number | undefined;
    /** 剂量单位 */
    unitUsage?: string | undefined;
    /** 数量 */
    dosage?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [耗材标识](#项目清单) */
    roomItemListId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 药品名称 */
    roomItemListName?: string | undefined;
    /** 药品简称 */
    roomItemListShortName?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
}

/** Reponse */
export class CureRecordAnticoagulantDrugViewResult implements ICureRecordAnticoagulantDrugViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordAnticoagulantDrugView[] | undefined;

    constructor(data?: ICureRecordAnticoagulantDrugViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordAnticoagulantDrugView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantDrugViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantDrugViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordAnticoagulantDrugViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordAnticoagulantDrugView[] | undefined;
}

/** Reponse */
export class CureRecordAnticoagulantDrugViewResultEntry implements ICureRecordAnticoagulantDrugViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordAnticoagulantDrugView;

    constructor(data?: ICureRecordAnticoagulantDrugViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordAnticoagulantDrugView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantDrugViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantDrugViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordAnticoagulantDrugViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordAnticoagulantDrugView;
}

/** 抗凝剂 */
export class CureRecordAnticoagulantView implements ICureRecordAnticoagulantView {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 大类显示值 */
    classify1Lable?: string | undefined;
    /** 小类显示值 */
    classify2Lable?: string | undefined;
    /** 首剂-单位显示值 */
    firstUnitLable?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    other?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordAnticoagulantView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.classify1Lable = _data["classify1Lable"];
            this.classify2Lable = _data["classify2Lable"];
            this.firstUnitLable = _data["firstUnitLable"];
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.name = _data["name"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.other = _data["other"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["classify1Lable"] = this.classify1Lable;
        data["classify2Lable"] = this.classify2Lable;
        data["firstUnitLable"] = this.firstUnitLable;
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["name"] = this.name;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["other"] = this.other;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 抗凝剂 */
export interface ICureRecordAnticoagulantView {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 大类显示值 */
    classify1Lable?: string | undefined;
    /** 小类显示值 */
    classify2Lable?: string | undefined;
    /** 首剂-单位显示值 */
    firstUnitLable?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    other?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 患者透析抗凝剂 (ViewModel) */
export class CureRecordAnticoagulantViewModel implements ICureRecordAnticoagulantViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 名称 */
    name!: string;
    /** 抗凝剂模版类型 */
    antiTmplType!: string;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1!: string;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    other?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordAnticoagulantViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.name = _data["name"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.concentration = _data["concentration"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.other = _data["other"];
            this.nonReason = _data["nonReason"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["name"] = this.name;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["concentration"] = this.concentration;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["other"] = this.other;
        data["nonReason"] = this.nonReason;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者透析抗凝剂 (ViewModel) */
export interface ICureRecordAnticoagulantViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 名称 */
    name: string;
    /** 抗凝剂模版类型 */
    antiTmplType: string;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1: string;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *普通肝素/阿加曲班* */
    first?: number | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    other?: string | undefined;
    /** 无肝素原因 */
    nonReason?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class CureRecordAnticoagulantViewResult implements ICureRecordAnticoagulantViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordAnticoagulantView[] | undefined;

    constructor(data?: ICureRecordAnticoagulantViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordAnticoagulantView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordAnticoagulantViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordAnticoagulantView[] | undefined;
}

/** Reponse */
export class CureRecordAnticoagulantViewResultEntry implements ICureRecordAnticoagulantViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordAnticoagulantView;

    constructor(data?: ICureRecordAnticoagulantViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordAnticoagulantView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordAnticoagulantViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordAnticoagulantViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordAnticoagulantViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordAnticoagulantView;
}

/** 透析记录修改记录 */
export class CureRecordChangeEditModel implements ICureRecordChangeEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 修改类型 *标识修改的是制定处方，透析评估，透中监测，透中事件中* */
    type!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 修改内容 */
    changeContent?: string | undefined;

    constructor(data?: ICureRecordChangeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.type = _data["type"];
            this.remark = _data["remark"];
            this.changeContent = _data["changeContent"];
        }
    }

    static fromJS(data: any): CureRecordChangeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordChangeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["type"] = this.type;
        data["remark"] = this.remark;
        data["changeContent"] = this.changeContent;
        return data;
    }
}

/** 透析记录修改记录 */
export interface ICureRecordChangeEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 修改类型 *标识修改的是制定处方，透析评估，透中监测，透中事件中* */
    type: string;
    /** 备注 */
    remark?: string | undefined;
    /** 修改内容 */
    changeContent?: string | undefined;
}

/** 透析记录修改记录 */
export class CureRecordChangeView implements ICureRecordChangeView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 修改类型 *标识修改的是制定处方，透析评估，透中监测，透中事件中* */
    type!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 修改内容 */
    changeContent?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordChangeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.type = _data["type"];
            this.remark = _data["remark"];
            this.changeContent = _data["changeContent"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordChangeView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordChangeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["type"] = this.type;
        data["remark"] = this.remark;
        data["changeContent"] = this.changeContent;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透析记录修改记录 */
export interface ICureRecordChangeView {
    /** [透析记录标识](#透析记录) */
    cureRecordId?: string | undefined;
    /** 修改类型 *标识修改的是制定处方，透析评估，透中监测，透中事件中* */
    type: string;
    /** 备注 */
    remark?: string | undefined;
    /** 修改内容 */
    changeContent?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureRecordChangeViewResult implements ICureRecordChangeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordChangeView[] | undefined;

    constructor(data?: ICureRecordChangeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordChangeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordChangeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordChangeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordChangeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordChangeView[] | undefined;
}

/** Reponse */
export class CureRecordChangeViewResultEntry implements ICureRecordChangeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordChangeView;

    constructor(data?: ICureRecordChangeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordChangeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordChangeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordChangeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordChangeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordChangeView;
}

/** 透析耗材 */
export class CureRecordConsumable implements ICureRecordConsumable {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 耗材数量 */
    count?: number;
    /** 编码 */
    code?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;
    roomItemLists?: RoomItemList;

    constructor(data?: ICureRecordConsumable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.code = _data["code"];
            this.devBarCode = _data["devBarCode"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
            this.roomItemLists = _data["roomItemLists"] ? RoomItemList.fromJS(_data["roomItemLists"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordConsumable {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["code"] = this.code;
        data["devBarCode"] = this.devBarCode;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        data["roomItemLists"] = this.roomItemLists ? this.roomItemLists.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析耗材 */
export interface ICureRecordConsumable {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 耗材数量 */
    count?: number;
    /** 编码 */
    code?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureRecords?: CureRecord;
    roomItemLists?: RoomItemList;
}

/** 透析耗材 */
export class CureRecordConsumableItemEditModel implements ICureRecordConsumableItemEditModel {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount!: number;
    /** 批号 */
    batchNo?: string | undefined;

    constructor(data?: ICureRecordConsumableItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.roomRecordInId = _data["roomRecordInId"];
            this.batchCount = _data["batchCount"];
            this.batchNo = _data["batchNo"];
        }
    }

    static fromJS(data: any): CureRecordConsumableItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["roomRecordInId"] = this.roomRecordInId;
        data["batchCount"] = this.batchCount;
        data["batchNo"] = this.batchNo;
        return data;
    }
}

/** 透析耗材 */
export interface ICureRecordConsumableItemEditModel {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount: number;
    /** 批号 */
    batchNo?: string | undefined;
}

/** 透析耗材 */
export class CureRecordConsumableItemView implements ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount!: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordConsumableItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordConsumableId = _data["cureRecordConsumableId"];
            this.roomRecordInId = _data["roomRecordInId"];
            this.batchCount = _data["batchCount"];
            this.batchNo = _data["batchNo"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.surplusCount = _data["surplusCount"];
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordConsumableItemView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordConsumableId"] = this.cureRecordConsumableId;
        data["roomRecordInId"] = this.roomRecordInId;
        data["batchCount"] = this.batchCount;
        data["batchNo"] = this.batchNo;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["surplusCount"] = this.surplusCount;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透析耗材 */
export interface ICureRecordConsumableItemView {
    /** [透析耗材标识](#透析耗材) */
    cureRecordConsumableId?: string | undefined;
    /** [入库记录标识](#入库记录) */
    roomRecordInId?: string | undefined;
    /** 耗材数量 */
    batchCount: number;
    /** 批号 */
    batchNo?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 批号剩余数量 */
    surplusCount?: number;
    /** 批号有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureRecordConsumableItemViewResult implements ICureRecordConsumableItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: ICureRecordConsumableItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordConsumableItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordConsumableItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordConsumableItemView[] | undefined;
}

/** Reponse */
export class CureRecordConsumableItemViewResultEntry implements ICureRecordConsumableItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordConsumableItemView;

    constructor(data?: ICureRecordConsumableItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordConsumableItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordConsumableItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordConsumableItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordConsumableItemView;
}

/** Reponse */
export class CureRecordConsumableResult implements ICureRecordConsumableResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordConsumable[] | undefined;

    constructor(data?: ICureRecordConsumableResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordConsumable.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordConsumableResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordConsumableResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordConsumable[] | undefined;
}

/** Reponse */
export class CureRecordConsumableResultEntry implements ICureRecordConsumableResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordConsumable;

    constructor(data?: ICureRecordConsumableResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordConsumable.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordConsumableResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordConsumableResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordConsumable;
}

/** 透析耗材 (ViewModel) */
export class CureRecordConsumableViewModel implements ICureRecordConsumableViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 编码 */
    code?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordConsumableViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.code = _data["code"];
            this.devBarCode = _data["devBarCode"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordConsumableViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordConsumableViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["code"] = this.code;
        data["devBarCode"] = this.devBarCode;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析耗材 (ViewModel) */
export interface ICureRecordConsumableViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 编码 */
    code?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析液 */
export class CureRecordDialysateView implements ICureRecordDialysateView {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 大类显示值 */
    classify1Lable?: string | undefined;
    /** 小类显示值 */
    classify2Lable?: string | undefined;
    /** 首剂-单位显示值 */
    firstUnitLable?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordDialysateView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.classify1Lable = _data["classify1Lable"];
            this.classify2Lable = _data["classify2Lable"];
            this.firstUnitLable = _data["firstUnitLable"];
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.name = _data["name"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordDialysateView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordDialysateView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["classify1Lable"] = this.classify1Lable;
        data["classify2Lable"] = this.classify2Lable;
        data["firstUnitLable"] = this.firstUnitLable;
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["name"] = this.name;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透析液 */
export interface ICureRecordDialysateView {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 大类显示值 */
    classify1Lable?: string | undefined;
    /** 小类显示值 */
    classify2Lable?: string | undefined;
    /** 首剂-单位显示值 */
    firstUnitLable?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 患者透析透析液 (ViewModel) */
export class CureRecordDialysateViewModel implements ICureRecordDialysateViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 名称 */
    name!: string;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordDialysateViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.name = _data["name"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordDialysateViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordDialysateViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["name"] = this.name;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者透析透析液 (ViewModel) */
export interface ICureRecordDialysateViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 名称 */
    name: string;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class CureRecordDialysateViewResult implements ICureRecordDialysateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordDialysateView[] | undefined;

    constructor(data?: ICureRecordDialysateViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordDialysateView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordDialysateViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordDialysateViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordDialysateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordDialysateView[] | undefined;
}

/** Reponse */
export class CureRecordDialysateViewResultEntry implements ICureRecordDialysateViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordDialysateView;

    constructor(data?: ICureRecordDialysateViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordDialysateView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordDialysateViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordDialysateViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordDialysateViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordDialysateView;
}

/** 透析记录自定义字段 */
export class CureRecordFieldItemEditModel implements ICureRecordFieldItemEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 模块 */
    module!: string;
    /** 自定义字段名 */
    fieldKey!: string;
    /** 自定义字段值 */
    fieldValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 明细关联id */
    relevanceId?: string | undefined;

    constructor(data?: ICureRecordFieldItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.module = _data["module"];
            this.fieldKey = _data["fieldKey"];
            this.fieldValue = _data["fieldValue"];
            this.remark = _data["remark"];
            this.relevanceId = _data["relevanceId"];
        }
    }

    static fromJS(data: any): CureRecordFieldItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFieldItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["module"] = this.module;
        data["fieldKey"] = this.fieldKey;
        data["fieldValue"] = this.fieldValue;
        data["remark"] = this.remark;
        data["relevanceId"] = this.relevanceId;
        return data;
    }
}

/** 透析记录自定义字段 */
export interface ICureRecordFieldItemEditModel {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 模块 */
    module: string;
    /** 自定义字段名 */
    fieldKey: string;
    /** 自定义字段值 */
    fieldValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 明细关联id */
    relevanceId?: string | undefined;
}

/** 透析记录自定义字段 */
export class CureRecordFieldItemView implements ICureRecordFieldItemView {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 模块 */
    module!: string;
    /** 自定义字段名 */
    fieldKey!: string;
    /** 自定义字段值 */
    fieldValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 明细关联id */
    relevanceId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordFieldItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.module = _data["module"];
            this.fieldKey = _data["fieldKey"];
            this.fieldValue = _data["fieldValue"];
            this.remark = _data["remark"];
            this.relevanceId = _data["relevanceId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordFieldItemView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFieldItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["module"] = this.module;
        data["fieldKey"] = this.fieldKey;
        data["fieldValue"] = this.fieldValue;
        data["remark"] = this.remark;
        data["relevanceId"] = this.relevanceId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透析记录自定义字段 */
export interface ICureRecordFieldItemView {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 模块 */
    module: string;
    /** 自定义字段名 */
    fieldKey: string;
    /** 自定义字段值 */
    fieldValue?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 明细关联id */
    relevanceId?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureRecordFieldItemViewResult implements ICureRecordFieldItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordFieldItemView[] | undefined;

    constructor(data?: ICureRecordFieldItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordFieldItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordFieldItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFieldItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordFieldItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordFieldItemView[] | undefined;
}

/** Reponse */
export class CureRecordFieldItemViewResultEntry implements ICureRecordFieldItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordFieldItemView;

    constructor(data?: ICureRecordFieldItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordFieldItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordFieldItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFieldItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordFieldItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordFieldItemView;
}

export class CureRecordFileView implements ICureRecordFileView {
    /** 标识 */
    id?: string | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 表头行数 */
    row?: number | undefined;
    /** 透析记录单HTML文本 */
    content?: string | undefined;

    constructor(data?: ICureRecordFileView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.lastId = _data["lastId"];
            this.nextId = _data["nextId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftName = _data["shiftName"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedName = _data["bedName"];
            this.patientName = _data["patientName"];
            this.assementBefore = _data["assementBefore"] ? CureRecordItemAssement.fromJS(_data["assementBefore"]) : <any>undefined;
            this.assementAfter = _data["assementAfter"] ? CureRecordItemAssement.fromJS(_data["assementAfter"]) : <any>undefined;
            this.assementDialysis = _data["assementDialysis"] ? CureRecordItemAssement.fromJS(_data["assementDialysis"]) : <any>undefined;
            this.row = _data["row"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): CureRecordFileView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFileView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["lastId"] = this.lastId;
        data["nextId"] = this.nextId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedName"] = this.bedName;
        data["patientName"] = this.patientName;
        data["assementBefore"] = this.assementBefore ? this.assementBefore.toJSON() : <any>undefined;
        data["assementAfter"] = this.assementAfter ? this.assementAfter.toJSON() : <any>undefined;
        data["assementDialysis"] = this.assementDialysis ? this.assementDialysis.toJSON() : <any>undefined;
        data["row"] = this.row;
        data["content"] = this.content;
        return data;
    }
}

export interface ICureRecordFileView {
    /** 标识 */
    id?: string | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 表头行数 */
    row?: number | undefined;
    /** 透析记录单HTML文本 */
    content?: string | undefined;
}

/** Reponse */
export class CureRecordFileViewResult implements ICureRecordFileViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordFileView[] | undefined;

    constructor(data?: ICureRecordFileViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordFileView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordFileViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFileViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordFileViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordFileView[] | undefined;
}

/** Reponse */
export class CureRecordFileViewResultEntry implements ICureRecordFileViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordFileView;

    constructor(data?: ICureRecordFileViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordFileView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordFileViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordFileViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordFileViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordFileView;
}

/** 抗凝剂 */
export class CureRecordItemAnticoagulant implements ICureRecordItemAnticoagulant {
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂简称 */
    anticoagulantShortName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *枸橼酸钠>浓度* */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 无抗凝剂原因 */
    nonReason?: string | undefined;

    constructor(data?: ICureRecordItemAnticoagulant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.anticoagulantName = _data["anticoagulantName"];
            this.anticoagulantShortName = _data["anticoagulantShortName"];
            this.antiTmplType = _data["antiTmplType"];
            this.classify1 = _data["classify1"];
            this.classify2 = _data["classify2"];
            this.first = _data["first"];
            this.firstUnit = _data["firstUnit"];
            this.appendRate = _data["appendRate"];
            this.appendRateUnit = _data["appendRateUnit"];
            this.appendTime = _data["appendTime"];
            this.append = _data["append"];
            this.appendUnit = _data["appendUnit"];
            this.concentration = _data["concentration"];
            this.total = _data["total"];
            this.totalUnit = _data["totalUnit"];
            this.anticoagulantOther = _data["anticoagulantOther"];
            this.classify1Label = _data["classify1Label"];
            this.classify2Label = _data["classify2Label"];
            this.firstUnitLabel = _data["firstUnitLabel"];
            this.nonReason = _data["nonReason"];
        }
    }

    static fromJS(data: any): CureRecordItemAnticoagulant {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemAnticoagulant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["anticoagulantName"] = this.anticoagulantName;
        data["anticoagulantShortName"] = this.anticoagulantShortName;
        data["antiTmplType"] = this.antiTmplType;
        data["classify1"] = this.classify1;
        data["classify2"] = this.classify2;
        data["first"] = this.first;
        data["firstUnit"] = this.firstUnit;
        data["appendRate"] = this.appendRate;
        data["appendRateUnit"] = this.appendRateUnit;
        data["appendTime"] = this.appendTime;
        data["append"] = this.append;
        data["appendUnit"] = this.appendUnit;
        data["concentration"] = this.concentration;
        data["total"] = this.total;
        data["totalUnit"] = this.totalUnit;
        data["anticoagulantOther"] = this.anticoagulantOther;
        data["classify1Label"] = this.classify1Label;
        data["classify2Label"] = this.classify2Label;
        data["firstUnitLabel"] = this.firstUnitLabel;
        data["nonReason"] = this.nonReason;
        return data;
    }
}

/** 抗凝剂 */
export interface ICureRecordItemAnticoagulant {
    /** 抗凝剂名称 */
    anticoagulantName?: string | undefined;
    /** 抗凝剂简称 */
    anticoagulantShortName?: string | undefined;
    /** 抗凝剂模版类型 */
    antiTmplType?: string | undefined;
    /** 大类 `DIC.ANTICOAGULANT.TYPE` *普通肝素,低分子肝素,枸橼酸钠,阿加曲班* */
    classify1?: string | undefined;
    /** 小类 `DIC.ANTICOAGULANT.LMWH.TYPE` *低分子肝素>低分子肝素钠,低分子肝素>钙,低分子肝素>其它* */
    classify2?: string | undefined;
    /** 首剂量 *枸橼酸钠>浓度* */
    first?: number | undefined;
    /** 首剂-单位 `DIC.ANTICOAGULANT.UNIT` *mg,IU* */
    firstUnit?: string | undefined;
    /** 追加速率 *枸橼酸钠>速率* */
    appendRate?: number | undefined;
    /** 追加速率-单位 *mg/h,IU/h* */
    appendRateUnit?: string | undefined;
    /** 追加时间 *h* */
    appendTime?: number | undefined;
    /** 追加 */
    append?: number | undefined;
    /** 追加-单位 *mg,IU* */
    appendUnit?: string | undefined;
    /** 浓度 *枸橼酸钠>浓度* */
    concentration?: number | undefined;
    /** 总量 */
    total?: number | undefined;
    /** 总量-单位 *mg,IU* */
    totalUnit?: string | undefined;
    /** 其它 */
    anticoagulantOther?: string | undefined;
    /** 大类名称 */
    classify1Label?: string | undefined;
    /** 小类名称 */
    classify2Label?: string | undefined;
    /** 首剂-单位名称 */
    firstUnitLabel?: string | undefined;
    /** 无抗凝剂原因 */
    nonReason?: string | undefined;
}

/** 透前评估 */
export class CureRecordItemAssement implements ICureRecordItemAssement {
    /** 表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 受支持的表单自定义数据 */
    values?: SysFormValueView[] | undefined;

    constructor(data?: ICureRecordItemAssement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(SysFormValueView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordItemAssement {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemAssement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        return data;
    }
}

/** 透前评估 */
export interface ICureRecordItemAssement {
    /** 表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 受支持的表单自定义数据 */
    values?: SysFormValueView[] | undefined;
}

/** 透中事件 */
export class CureRecordItemComplication implements ICureRecordItemComplication {
    /** 标识 */
    id?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 发生时间 */
    occurredTime?: dayjs.Dayjs;
    /** 并发症名称 */
    name?: string | undefined;
    /** 处理 */
    dispose?: string | undefined;
    /** 原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: CureRecordItemComplicationFile[] | undefined;

    constructor(data?: ICureRecordItemComplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.occurredTime = _data["occurredTime"] ? dayjs(_data["occurredTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.dispose = _data["dispose"];
            this.cause = _data["cause"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["complicationFiles"])) {
                this.complicationFiles = [] as any;
                for (let item of _data["complicationFiles"])
                    this.complicationFiles!.push(CureRecordItemComplicationFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordItemComplication {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemComplication();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["occurredTime"] = this.occurredTime ? this.occurredTime.toLocaleString() : <any>undefined;
        data["name"] = this.name;
        data["dispose"] = this.dispose;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        if (Array.isArray(this.complicationFiles)) {
            data["complicationFiles"] = [];
            for (let item of this.complicationFiles)
                data["complicationFiles"].push(item.toJSON());
        }
        return data;
    }
}

/** 透中事件 */
export interface ICureRecordItemComplication {
    /** 标识 */
    id?: string | undefined;
    /** 操作者标识 */
    operatorId?: string | undefined;
    /** 操作者姓名 */
    operatorName?: string | undefined;
    /** 发生时间 */
    occurredTime?: dayjs.Dayjs;
    /** 并发症名称 */
    name?: string | undefined;
    /** 处理 */
    dispose?: string | undefined;
    /** 原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件列表 */
    complicationFiles?: CureRecordItemComplicationFile[] | undefined;
}

export class CureRecordItemComplicationFile implements ICureRecordItemComplicationFile {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;

    constructor(data?: ICureRecordItemComplicationFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.extension = _data["extension"];
            this.length = _data["length"];
        }
    }

    static fromJS(data: any): CureRecordItemComplicationFile {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemComplicationFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["url"] = this.url;
        data["extension"] = this.extension;
        data["length"] = this.length;
        return data;
    }
}

export interface ICureRecordItemComplicationFile {
    /** 文件标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
}

/** 耗材 */
export class CureRecordItemConsumable implements ICureRecordItemConsumable {
    /** 耗材标识-透析器 */
    roomItemListTXQId?: string | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-所有透析器名称 */
    roomItemListTXQLabels?: string | undefined;
    /** 耗材-透析器数量 */
    roomItemListTXQCount?: number | undefined;
    /** 透析器耗材条码 */
    roomItemListTXQDevBarCode?: string | undefined;
    /** 透析器耗材批号 */
    roomItemListTXQBatchNo?: string | undefined;
    /** 耗材标识-灌流器 */
    roomItemListGLQId?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabels?: string | undefined;
    /** 灌流器耗材条码 */
    roomItemListGLQDevBarCode?: string | undefined;
    /** 灌流器耗材批号 */
    roomItemListGLQBatchNo?: string | undefined;
    /** 耗材-灌流器数量 */
    roomItemListGLQCount?: number | undefined;
    /** 耗材标识-血滤器 */
    roomItemListXLQId?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabels?: string | undefined;
    /** 耗材-血滤器数量 */
    roomItemListXLQCount?: number | undefined;
    /** 血滤器耗材条码 */
    roomItemListXLQDevBarCode?: string | undefined;
    /** 血滤器耗材批号 */
    roomItemListXLQBatchNo?: string | undefined;
    /** 耗材标识-血路管 */
    roomItemListXLGId?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabel?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabels?: string | undefined;
    /** 耗材-血路管数量 */
    roomItemListXLGCount?: number | undefined;
    /** 血路管耗材条码 */
    roomItemListXLGDevBarCode?: string | undefined;
    /** 血路管耗材批号 */
    roomItemListXLGBatchNo?: string | undefined;
    /** 耗材标识-内瘘针 */
    roomItemListNLZId?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabel?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabels?: string | undefined;
    /** 耗材-内瘘针数量 */
    roomItemListNLZCount?: number | undefined;
    /** 内瘘针耗材条码 */
    roomItemListNLZDevBarCode?: string | undefined;
    /** 耗材标识-置换液管路 */
    roomItemListZHYGLId?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabel?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabels?: string | undefined;
    /** 耗材-置换液管路数量 */
    roomItemListZHYGLCount?: number | undefined;
    /** 置换液管路耗材条码 */
    roomItemListZHYGLDevBarCode?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheter?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheters?: string | undefined;
    /** 灌流连接管条码 */
    perfusionCatheterDevBarCode?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparator?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparators?: string | undefined;
    /** 血浆分离器条码 */
    plasmaSeparatorDevBarCode?: string | undefined;

    constructor(data?: ICureRecordItemConsumable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListTXQId = _data["roomItemListTXQId"];
            this.roomItemListTXQLabel = _data["roomItemListTXQLabel"];
            this.roomItemListTXQLabels = _data["roomItemListTXQLabels"];
            this.roomItemListTXQCount = _data["roomItemListTXQCount"];
            this.roomItemListTXQDevBarCode = _data["roomItemListTXQDevBarCode"];
            this.roomItemListTXQBatchNo = _data["roomItemListTXQBatchNo"];
            this.roomItemListGLQId = _data["roomItemListGLQId"];
            this.roomItemListGLQLabel = _data["roomItemListGLQLabel"];
            this.roomItemListGLQLabels = _data["roomItemListGLQLabels"];
            this.roomItemListGLQDevBarCode = _data["roomItemListGLQDevBarCode"];
            this.roomItemListGLQBatchNo = _data["roomItemListGLQBatchNo"];
            this.roomItemListGLQCount = _data["roomItemListGLQCount"];
            this.roomItemListXLQId = _data["roomItemListXLQId"];
            this.roomItemListXLQLabel = _data["roomItemListXLQLabel"];
            this.roomItemListXLQLabels = _data["roomItemListXLQLabels"];
            this.roomItemListXLQCount = _data["roomItemListXLQCount"];
            this.roomItemListXLQDevBarCode = _data["roomItemListXLQDevBarCode"];
            this.roomItemListXLQBatchNo = _data["roomItemListXLQBatchNo"];
            this.roomItemListXLGId = _data["roomItemListXLGId"];
            this.roomItemListXLGLabel = _data["roomItemListXLGLabel"];
            this.roomItemListXLGLabels = _data["roomItemListXLGLabels"];
            this.roomItemListXLGCount = _data["roomItemListXLGCount"];
            this.roomItemListXLGDevBarCode = _data["roomItemListXLGDevBarCode"];
            this.roomItemListXLGBatchNo = _data["roomItemListXLGBatchNo"];
            this.roomItemListNLZId = _data["roomItemListNLZId"];
            this.roomItemListNLZLabel = _data["roomItemListNLZLabel"];
            this.roomItemListNLZLabels = _data["roomItemListNLZLabels"];
            this.roomItemListNLZCount = _data["roomItemListNLZCount"];
            this.roomItemListNLZDevBarCode = _data["roomItemListNLZDevBarCode"];
            this.roomItemListZHYGLId = _data["roomItemListZHYGLId"];
            this.roomItemListZHYGLLabel = _data["roomItemListZHYGLLabel"];
            this.roomItemListZHYGLLabels = _data["roomItemListZHYGLLabels"];
            this.roomItemListZHYGLCount = _data["roomItemListZHYGLCount"];
            this.roomItemListZHYGLDevBarCode = _data["roomItemListZHYGLDevBarCode"];
            this.perfusionCatheter = _data["perfusionCatheter"];
            this.perfusionCatheters = _data["perfusionCatheters"];
            this.perfusionCatheterDevBarCode = _data["perfusionCatheterDevBarCode"];
            this.plasmaSeparator = _data["plasmaSeparator"];
            this.plasmaSeparators = _data["plasmaSeparators"];
            this.plasmaSeparatorDevBarCode = _data["plasmaSeparatorDevBarCode"];
        }
    }

    static fromJS(data: any): CureRecordItemConsumable {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemConsumable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListTXQId"] = this.roomItemListTXQId;
        data["roomItemListTXQLabel"] = this.roomItemListTXQLabel;
        data["roomItemListTXQLabels"] = this.roomItemListTXQLabels;
        data["roomItemListTXQCount"] = this.roomItemListTXQCount;
        data["roomItemListTXQDevBarCode"] = this.roomItemListTXQDevBarCode;
        data["roomItemListTXQBatchNo"] = this.roomItemListTXQBatchNo;
        data["roomItemListGLQId"] = this.roomItemListGLQId;
        data["roomItemListGLQLabel"] = this.roomItemListGLQLabel;
        data["roomItemListGLQLabels"] = this.roomItemListGLQLabels;
        data["roomItemListGLQDevBarCode"] = this.roomItemListGLQDevBarCode;
        data["roomItemListGLQBatchNo"] = this.roomItemListGLQBatchNo;
        data["roomItemListGLQCount"] = this.roomItemListGLQCount;
        data["roomItemListXLQId"] = this.roomItemListXLQId;
        data["roomItemListXLQLabel"] = this.roomItemListXLQLabel;
        data["roomItemListXLQLabels"] = this.roomItemListXLQLabels;
        data["roomItemListXLQCount"] = this.roomItemListXLQCount;
        data["roomItemListXLQDevBarCode"] = this.roomItemListXLQDevBarCode;
        data["roomItemListXLQBatchNo"] = this.roomItemListXLQBatchNo;
        data["roomItemListXLGId"] = this.roomItemListXLGId;
        data["roomItemListXLGLabel"] = this.roomItemListXLGLabel;
        data["roomItemListXLGLabels"] = this.roomItemListXLGLabels;
        data["roomItemListXLGCount"] = this.roomItemListXLGCount;
        data["roomItemListXLGDevBarCode"] = this.roomItemListXLGDevBarCode;
        data["roomItemListXLGBatchNo"] = this.roomItemListXLGBatchNo;
        data["roomItemListNLZId"] = this.roomItemListNLZId;
        data["roomItemListNLZLabel"] = this.roomItemListNLZLabel;
        data["roomItemListNLZLabels"] = this.roomItemListNLZLabels;
        data["roomItemListNLZCount"] = this.roomItemListNLZCount;
        data["roomItemListNLZDevBarCode"] = this.roomItemListNLZDevBarCode;
        data["roomItemListZHYGLId"] = this.roomItemListZHYGLId;
        data["roomItemListZHYGLLabel"] = this.roomItemListZHYGLLabel;
        data["roomItemListZHYGLLabels"] = this.roomItemListZHYGLLabels;
        data["roomItemListZHYGLCount"] = this.roomItemListZHYGLCount;
        data["roomItemListZHYGLDevBarCode"] = this.roomItemListZHYGLDevBarCode;
        data["perfusionCatheter"] = this.perfusionCatheter;
        data["perfusionCatheters"] = this.perfusionCatheters;
        data["perfusionCatheterDevBarCode"] = this.perfusionCatheterDevBarCode;
        data["plasmaSeparator"] = this.plasmaSeparator;
        data["plasmaSeparators"] = this.plasmaSeparators;
        data["plasmaSeparatorDevBarCode"] = this.plasmaSeparatorDevBarCode;
        return data;
    }
}

/** 耗材 */
export interface ICureRecordItemConsumable {
    /** 耗材标识-透析器 */
    roomItemListTXQId?: string | undefined;
    /** 耗材-透析器名称 */
    roomItemListTXQLabel?: string | undefined;
    /** 耗材-所有透析器名称 */
    roomItemListTXQLabels?: string | undefined;
    /** 耗材-透析器数量 */
    roomItemListTXQCount?: number | undefined;
    /** 透析器耗材条码 */
    roomItemListTXQDevBarCode?: string | undefined;
    /** 透析器耗材批号 */
    roomItemListTXQBatchNo?: string | undefined;
    /** 耗材标识-灌流器 */
    roomItemListGLQId?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabel?: string | undefined;
    /** 耗材-灌流器名称 */
    roomItemListGLQLabels?: string | undefined;
    /** 灌流器耗材条码 */
    roomItemListGLQDevBarCode?: string | undefined;
    /** 灌流器耗材批号 */
    roomItemListGLQBatchNo?: string | undefined;
    /** 耗材-灌流器数量 */
    roomItemListGLQCount?: number | undefined;
    /** 耗材标识-血滤器 */
    roomItemListXLQId?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabel?: string | undefined;
    /** 耗材-血滤器名称 */
    roomItemListXLQLabels?: string | undefined;
    /** 耗材-血滤器数量 */
    roomItemListXLQCount?: number | undefined;
    /** 血滤器耗材条码 */
    roomItemListXLQDevBarCode?: string | undefined;
    /** 血滤器耗材批号 */
    roomItemListXLQBatchNo?: string | undefined;
    /** 耗材标识-血路管 */
    roomItemListXLGId?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabel?: string | undefined;
    /** 耗材-血路管名称 */
    roomItemListXLGLabels?: string | undefined;
    /** 耗材-血路管数量 */
    roomItemListXLGCount?: number | undefined;
    /** 血路管耗材条码 */
    roomItemListXLGDevBarCode?: string | undefined;
    /** 血路管耗材批号 */
    roomItemListXLGBatchNo?: string | undefined;
    /** 耗材标识-内瘘针 */
    roomItemListNLZId?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabel?: string | undefined;
    /** 耗材-内瘘针名称 */
    roomItemListNLZLabels?: string | undefined;
    /** 耗材-内瘘针数量 */
    roomItemListNLZCount?: number | undefined;
    /** 内瘘针耗材条码 */
    roomItemListNLZDevBarCode?: string | undefined;
    /** 耗材标识-置换液管路 */
    roomItemListZHYGLId?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabel?: string | undefined;
    /** 耗材-置换液管路名称 */
    roomItemListZHYGLLabels?: string | undefined;
    /** 耗材-置换液管路数量 */
    roomItemListZHYGLCount?: number | undefined;
    /** 置换液管路耗材条码 */
    roomItemListZHYGLDevBarCode?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheter?: string | undefined;
    /** 灌流连接管 */
    perfusionCatheters?: string | undefined;
    /** 灌流连接管条码 */
    perfusionCatheterDevBarCode?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparator?: string | undefined;
    /** 血浆分离器 */
    plasmaSeparators?: string | undefined;
    /** 血浆分离器条码 */
    plasmaSeparatorDevBarCode?: string | undefined;
}

/** 透析医嘱 */
export class CureRecordItemDa implements ICureRecordItemDa {
    /** 标识 */
    id?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 用量 */
    dosage?: number;
    /** 单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次数量 */
    singleDosage?: number | undefined;
    /** 单次数量单位 */
    singleUnit?: string | undefined;
    /** 单次数量单位显示值 */
    singleUnitLabel?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 用法显示值 */
    usageLabel?: string | undefined;
    /** 执行状态显示值 */
    statusLabel?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordItemDa) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.groupId = _data["groupId"];
            this.group = _data["group"];
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.doctorCreateTime = _data["doctorCreateTime"] ? dayjs(_data["doctorCreateTime"].toString()) : <any>undefined;
            this.checkTime = _data["checkTime"] ? dayjs(_data["checkTime"].toString()) : <any>undefined;
            this.execTime = _data["execTime"] ? dayjs(_data["execTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.nameGoods = _data["nameGoods"];
            this.roomItemListId = _data["roomItemListId"];
            this.usage = _data["usage"];
            this.dosage = _data["dosage"];
            this.unit = _data["unit"];
            this.singleDosage = _data["singleDosage"];
            this.singleUnit = _data["singleUnit"];
            this.singleUnitLabel = _data["singleUnitLabel"];
            this.orally = _data["orally"];
            this.status = _data["status"];
            this.cureDaContent = _data["cureDaContent"];
            this.unitLabel = _data["unitLabel"];
            this.usageLabel = _data["usageLabel"];
            this.statusLabel = _data["statusLabel"];
            this.type = _data["type"];
            this.typeName = _data["typeName"];
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordItemDa {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemDa();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["groupId"] = this.groupId;
        data["group"] = this.group;
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["doctorCreateTime"] = this.doctorCreateTime ? this.doctorCreateTime.toLocaleString() : <any>undefined;
        data["checkTime"] = this.checkTime ? this.checkTime.toLocaleString() : <any>undefined;
        data["execTime"] = this.execTime ? this.execTime.toLocaleString() : <any>undefined;
        data["name"] = this.name;
        data["nameGoods"] = this.nameGoods;
        data["roomItemListId"] = this.roomItemListId;
        data["usage"] = this.usage;
        data["dosage"] = this.dosage;
        data["unit"] = this.unit;
        data["singleDosage"] = this.singleDosage;
        data["singleUnit"] = this.singleUnit;
        data["singleUnitLabel"] = this.singleUnitLabel;
        data["orally"] = this.orally;
        data["status"] = this.status;
        data["cureDaContent"] = this.cureDaContent;
        data["unitLabel"] = this.unitLabel;
        data["usageLabel"] = this.usageLabel;
        data["statusLabel"] = this.statusLabel;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析医嘱 */
export interface ICureRecordItemDa {
    /** 标识 */
    id?: string | undefined;
    /** 分组标识 */
    groupId?: string | undefined;
    /** 分组 */
    group?: string | undefined;
    /** 开立医生标识 */
    doctorId?: string | undefined;
    /** 开立医生姓名 */
    doctorName?: string | undefined;
    /** 核对护士标识 */
    checkNurseId?: string | undefined;
    /** 核对护士姓名 */
    checkNurseName?: string | undefined;
    /** 执行护士标识 */
    nurseId?: string | undefined;
    /** 执行护士姓名 */
    nurseName?: string | undefined;
    /** 开立时间 */
    doctorCreateTime?: dayjs.Dayjs | undefined;
    /** 核对时间 */
    checkTime?: dayjs.Dayjs | undefined;
    /** 执行时间 */
    execTime?: dayjs.Dayjs | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 用法 `DIC.DA.USAGEMODE` *口服,外敷,静脉注射,静脉滴注* */
    usage?: string | undefined;
    /** 用量 */
    dosage?: number;
    /** 单位 `DIC.SYS.UNIT` */
    unit?: string | undefined;
    /** 单次数量 */
    singleDosage?: number | undefined;
    /** 单次数量单位 */
    singleUnit?: string | undefined;
    /** 单次数量单位显示值 */
    singleUnitLabel?: string | undefined;
    /** 口服药0,1 */
    orally?: number | undefined;
    /** 执行状态 `DIC.DIALYSIS.DA.STATUS` *待核对,已核对(待执行),已撤销,待调整,已执行* */
    status?: string | undefined;
    /** 医嘱内容 */
    cureDaContent?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 用法显示值 */
    usageLabel?: string | undefined;
    /** 执行状态显示值 */
    statusLabel?: string | undefined;
    /** 医嘱类型 `DIC.DA.TYPE` *药品、耗材、护理、文字、组合* */
    type?: string | undefined;
    /** 医嘱类型名称 */
    typeName?: string | undefined;
    /** 医嘱内容 *文字医嘱使用* */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析液 */
export class CureRecordItemDialysate implements ICureRecordItemDialysate {
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 透析液简称 */
    dialysateShortName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;

    constructor(data?: ICureRecordItemDialysate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysateName = _data["dialysateName"];
            this.dialysateShortName = _data["dialysateShortName"];
            this.flowRate = _data["flowRate"];
            this.temp = _data["temp"];
            this.cond = _data["cond"];
            this.k = _data["k"];
            this.ca = _data["ca"];
            this.na = _data["na"];
            this.hco = _data["hco"];
            this.glucose = _data["glucose"];
        }
    }

    static fromJS(data: any): CureRecordItemDialysate {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemDialysate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysateName"] = this.dialysateName;
        data["dialysateShortName"] = this.dialysateShortName;
        data["flowRate"] = this.flowRate;
        data["temp"] = this.temp;
        data["cond"] = this.cond;
        data["k"] = this.k;
        data["ca"] = this.ca;
        data["na"] = this.na;
        data["hco"] = this.hco;
        data["glucose"] = this.glucose;
        return data;
    }
}

/** 透析液 */
export interface ICureRecordItemDialysate {
    /** 透析液名称 */
    dialysateName?: string | undefined;
    /** 透析液简称 */
    dialysateShortName?: string | undefined;
    /** 流量 *ml/min* */
    flowRate?: number | undefined;
    /** 温度 */
    temp?: number | undefined;
    /** 电导度 *mS/cm* */
    cond?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 钙 */
    ca?: number | undefined;
    /** 钠 */
    na?: number | undefined;
    /** 碳酸氢根 */
    hco?: number | undefined;
    /** 葡萄糖 *mmol/L* */
    glucose?: number | undefined;
}

/** 消毒信息 */
export class CureRecordItemDisinfect implements ICureRecordItemDisinfect {
    /** 开始时间 */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 */
    endDate?: dayjs.Dayjs;
    /** 消毒时长(分钟) */
    disinfectTime?: number;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 */
    disinfectTemp?: string | undefined;
    /** 柠檬酸消毒温度 */
    citricAcidTemp?: string | undefined;

    constructor(data?: ICureRecordItemDisinfect) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.disinfectTime = _data["disinfectTime"];
            this.programInternal = _data["programInternal"];
            this.programInternalLabel = _data["programInternalLabel"];
            this.internalOperatorId = _data["internalOperatorId"];
            this.internalOperatorName = _data["internalOperatorName"];
            this.programExterior = _data["programExterior"];
            this.programExteriorLabel = _data["programExteriorLabel"];
            this.externalOperatorId = _data["externalOperatorId"];
            this.externalOperatorName = _data["externalOperatorName"];
            this.bedUnitCleaning = _data["bedUnitCleaning"];
            this.filterScreenChanging = _data["filterScreenChanging"];
            this.disinfectTemp = _data["disinfectTemp"];
            this.citricAcidTemp = _data["citricAcidTemp"];
        }
    }

    static fromJS(data: any): CureRecordItemDisinfect {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemDisinfect();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["beginDate"] = this.beginDate ? this.beginDate.toLocaleString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toLocaleString() : <any>undefined;
        data["disinfectTime"] = this.disinfectTime;
        data["programInternal"] = this.programInternal;
        data["programInternalLabel"] = this.programInternalLabel;
        data["internalOperatorId"] = this.internalOperatorId;
        data["internalOperatorName"] = this.internalOperatorName;
        data["programExterior"] = this.programExterior;
        data["programExteriorLabel"] = this.programExteriorLabel;
        data["externalOperatorId"] = this.externalOperatorId;
        data["externalOperatorName"] = this.externalOperatorName;
        data["bedUnitCleaning"] = this.bedUnitCleaning;
        data["filterScreenChanging"] = this.filterScreenChanging;
        data["disinfectTemp"] = this.disinfectTemp;
        data["citricAcidTemp"] = this.citricAcidTemp;
        return data;
    }
}

/** 消毒信息 */
export interface ICureRecordItemDisinfect {
    /** 开始时间 */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 */
    endDate?: dayjs.Dayjs;
    /** 消毒时长(分钟) */
    disinfectTime?: number;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 */
    disinfectTemp?: string | undefined;
    /** 柠檬酸消毒温度 */
    citricAcidTemp?: string | undefined;
}

/** 透中监测 */
export class CureRecordItemMonitor implements ICureRecordItemMonitor {
    /** 标识 */
    id?: string | undefined;
    /** 监测时间 */
    monitorTime?: dayjs.Dayjs | undefined;
    /** 记录护士标识 */
    nurseId?: string | undefined;
    /** 记录护士姓名 */
    nurseName?: string | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 血流量单位 */
    bloodFlowRateUnit?: string | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 静脉压单位 */
    venousPressureUnit?: string | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 动脉压单位 */
    arterialPressureUnit?: string | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* */
    tmp?: number | undefined;
    /** 跨膜压单位 */
    tmpUnit?: string | undefined;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    position?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 收缩压单位 */
    sbpUnit?: string | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 舒张压单位 */
    dbpUnit?: string | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 脉搏单位 */
    pulseUnit?: string | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 呼吸单位 */
    breatheUnit?: string | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 体温单位 */
    tempUnit?: string | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤率单位 */
    ufrUnit?: string | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 超滤量单位 */
    ufvUnit?: string | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液流量单位 */
    dialysateFlowRateUnit?: string | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液温度单位 */
    dialysateTempUnit?: string | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 透析液电导度单位 */
    dialysateCondUnit?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液流量单位 */
    rfrUnit?: string | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    /** 置换液量单位 */
    rfvUnit?: string | undefined;
    /** 肝素量 *mg* */
    heparin?: number | undefined;
    /** 肝素量单位 */
    heparinUnit?: string | undefined;
    /** 管路情况 `DIC.DIALYSIS.MONITOR.TUBE` *多选* */
    remarkTube?: string | undefined;
    /** 渗血情况 `DIC.DIALYSIS.MONITOR.ERRHYSIS` *多选* */
    remarkErrhysis?: string | undefined;
    /** 抗凝情况 `DIC.DIALYSIS.MONITOR.ANT` *多选* */
    remarkAnticoagulation?: string | undefined;
    /** 管路情况显示值 */
    remarkTubeLabel?: string | undefined;
    /** 渗血情况显示值 */
    remarkErrhysisLabel?: string | undefined;
    /** 抗凝情况显示值 */
    remarkAnticoagulationLabel?: string | undefined;
    /** 病情与处理 *病情与处理模板* `DIC.DIALYSIS.MONITOR.REMARK` *选择后往编辑域中追加* */
    remark?: string | undefined;
    /** 血压 */
    bp?: string | undefined;
    /** 血压单位 */
    bpUnit?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;

    constructor(data?: ICureRecordItemMonitor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.monitorTime = _data["monitorTime"] ? dayjs(_data["monitorTime"].toString()) : <any>undefined;
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.bloodFlowRateUnit = _data["bloodFlowRateUnit"];
            this.venousPressure = _data["venousPressure"];
            this.venousPressureUnit = _data["venousPressureUnit"];
            this.arterialPressure = _data["arterialPressure"];
            this.arterialPressureUnit = _data["arterialPressureUnit"];
            this.tmp = _data["tmp"];
            this.tmpUnit = _data["tmpUnit"];
            this.position = _data["position"];
            this.positionLabel = _data["positionLabel"];
            this.sbp = _data["sbp"];
            this.sbpUnit = _data["sbpUnit"];
            this.dbp = _data["dbp"];
            this.dbpUnit = _data["dbpUnit"];
            this.pulse = _data["pulse"];
            this.pulseUnit = _data["pulseUnit"];
            this.breathe = _data["breathe"];
            this.breatheUnit = _data["breatheUnit"];
            this.temp = _data["temp"];
            this.tempUnit = _data["tempUnit"];
            this.ufr = _data["ufr"];
            this.ufrUnit = _data["ufrUnit"];
            this.ufv = _data["ufv"];
            this.ufvUnit = _data["ufvUnit"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.dialysateFlowRateUnit = _data["dialysateFlowRateUnit"];
            this.dialysateTemp = _data["dialysateTemp"];
            this.dialysateTempUnit = _data["dialysateTempUnit"];
            this.dialysateCond = _data["dialysateCond"];
            this.dialysateCondUnit = _data["dialysateCondUnit"];
            this.rfr = _data["rfr"];
            this.rfrUnit = _data["rfrUnit"];
            this.rfv = _data["rfv"];
            this.cumulativeHeparinVolume = _data["cumulativeHeparinVolume"];
            this.rfvUnit = _data["rfvUnit"];
            this.heparin = _data["heparin"];
            this.heparinUnit = _data["heparinUnit"];
            this.remarkTube = _data["remarkTube"];
            this.remarkErrhysis = _data["remarkErrhysis"];
            this.remarkAnticoagulation = _data["remarkAnticoagulation"];
            this.remarkTubeLabel = _data["remarkTubeLabel"];
            this.remarkErrhysisLabel = _data["remarkErrhysisLabel"];
            this.remarkAnticoagulationLabel = _data["remarkAnticoagulationLabel"];
            this.remark = _data["remark"];
            this.bp = _data["bp"];
            this.bpUnit = _data["bpUnit"];
            this.ext1 = _data["ext1"];
            this.ext2 = _data["ext2"];
            this.ext3 = _data["ext3"];
            this.ext4 = _data["ext4"];
            this.ext5 = _data["ext5"];
            this.ext6 = _data["ext6"];
            this.ext7 = _data["ext7"];
            this.ext8 = _data["ext8"];
            this.ext9 = _data["ext9"];
            this.ext10 = _data["ext10"];
        }
    }

    static fromJS(data: any): CureRecordItemMonitor {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemMonitor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["monitorTime"] = this.monitorTime ? this.monitorTime.toLocaleString() : <any>undefined;
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["bloodFlowRateUnit"] = this.bloodFlowRateUnit;
        data["venousPressure"] = this.venousPressure;
        data["venousPressureUnit"] = this.venousPressureUnit;
        data["arterialPressure"] = this.arterialPressure;
        data["arterialPressureUnit"] = this.arterialPressureUnit;
        data["tmp"] = this.tmp;
        data["tmpUnit"] = this.tmpUnit;
        data["position"] = this.position;
        data["positionLabel"] = this.positionLabel;
        data["sbp"] = this.sbp;
        data["sbpUnit"] = this.sbpUnit;
        data["dbp"] = this.dbp;
        data["dbpUnit"] = this.dbpUnit;
        data["pulse"] = this.pulse;
        data["pulseUnit"] = this.pulseUnit;
        data["breathe"] = this.breathe;
        data["breatheUnit"] = this.breatheUnit;
        data["temp"] = this.temp;
        data["tempUnit"] = this.tempUnit;
        data["ufr"] = this.ufr;
        data["ufrUnit"] = this.ufrUnit;
        data["ufv"] = this.ufv;
        data["ufvUnit"] = this.ufvUnit;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["dialysateFlowRateUnit"] = this.dialysateFlowRateUnit;
        data["dialysateTemp"] = this.dialysateTemp;
        data["dialysateTempUnit"] = this.dialysateTempUnit;
        data["dialysateCond"] = this.dialysateCond;
        data["dialysateCondUnit"] = this.dialysateCondUnit;
        data["rfr"] = this.rfr;
        data["rfrUnit"] = this.rfrUnit;
        data["rfv"] = this.rfv;
        data["cumulativeHeparinVolume"] = this.cumulativeHeparinVolume;
        data["rfvUnit"] = this.rfvUnit;
        data["heparin"] = this.heparin;
        data["heparinUnit"] = this.heparinUnit;
        data["remarkTube"] = this.remarkTube;
        data["remarkErrhysis"] = this.remarkErrhysis;
        data["remarkAnticoagulation"] = this.remarkAnticoagulation;
        data["remarkTubeLabel"] = this.remarkTubeLabel;
        data["remarkErrhysisLabel"] = this.remarkErrhysisLabel;
        data["remarkAnticoagulationLabel"] = this.remarkAnticoagulationLabel;
        data["remark"] = this.remark;
        data["bp"] = this.bp;
        data["bpUnit"] = this.bpUnit;
        data["ext1"] = this.ext1;
        data["ext2"] = this.ext2;
        data["ext3"] = this.ext3;
        data["ext4"] = this.ext4;
        data["ext5"] = this.ext5;
        data["ext6"] = this.ext6;
        data["ext7"] = this.ext7;
        data["ext8"] = this.ext8;
        data["ext9"] = this.ext9;
        data["ext10"] = this.ext10;
        return data;
    }
}

/** 透中监测 */
export interface ICureRecordItemMonitor {
    /** 标识 */
    id?: string | undefined;
    /** 监测时间 */
    monitorTime?: dayjs.Dayjs | undefined;
    /** 记录护士标识 */
    nurseId?: string | undefined;
    /** 记录护士姓名 */
    nurseName?: string | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** 血流量单位 */
    bloodFlowRateUnit?: string | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 静脉压单位 */
    venousPressureUnit?: string | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 动脉压单位 */
    arterialPressureUnit?: string | undefined;
    /** 跨膜压 *mmHg Transmembrane Pressure* */
    tmp?: number | undefined;
    /** 跨膜压单位 */
    tmpUnit?: string | undefined;
    /** 测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    position?: string | undefined;
    /** 测量位置显示值 */
    positionLabel?: string | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 收缩压单位 */
    sbpUnit?: string | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 舒张压单位 */
    dbpUnit?: string | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 脉搏单位 */
    pulseUnit?: string | undefined;
    /** 呼吸 *次/分* */
    breathe?: number | undefined;
    /** 呼吸单位 */
    breatheUnit?: string | undefined;
    /** 体温 */
    temp?: number | undefined;
    /** 体温单位 */
    tempUnit?: string | undefined;
    /** 超滤率 *ml/h Ultrafiltration Rate* */
    ufr?: number | undefined;
    /** 超滤率单位 */
    ufrUnit?: string | undefined;
    /** 超滤量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 超滤量单位 */
    ufvUnit?: string | undefined;
    /** 透析液流量 *ml/min* */
    dialysateFlowRate?: number | undefined;
    /** 透析液流量单位 */
    dialysateFlowRateUnit?: string | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 透析液温度单位 */
    dialysateTempUnit?: string | undefined;
    /** 透析液电导度 *mS/cm dialysate conductivity* */
    dialysateCond?: number | undefined;
    /** 透析液电导度单位 */
    dialysateCondUnit?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液流量单位 */
    rfrUnit?: string | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    /** 置换液量单位 */
    rfvUnit?: string | undefined;
    /** 肝素量 *mg* */
    heparin?: number | undefined;
    /** 肝素量单位 */
    heparinUnit?: string | undefined;
    /** 管路情况 `DIC.DIALYSIS.MONITOR.TUBE` *多选* */
    remarkTube?: string | undefined;
    /** 渗血情况 `DIC.DIALYSIS.MONITOR.ERRHYSIS` *多选* */
    remarkErrhysis?: string | undefined;
    /** 抗凝情况 `DIC.DIALYSIS.MONITOR.ANT` *多选* */
    remarkAnticoagulation?: string | undefined;
    /** 管路情况显示值 */
    remarkTubeLabel?: string | undefined;
    /** 渗血情况显示值 */
    remarkErrhysisLabel?: string | undefined;
    /** 抗凝情况显示值 */
    remarkAnticoagulationLabel?: string | undefined;
    /** 病情与处理 *病情与处理模板* `DIC.DIALYSIS.MONITOR.REMARK` *选择后往编辑域中追加* */
    remark?: string | undefined;
    /** 血压 */
    bp?: string | undefined;
    /** 血压单位 */
    bpUnit?: string | undefined;
    /** 字段1 *预留字段用于使用* */
    ext1?: string | undefined;
    /** 字段2 *预留字段用于使用* */
    ext2?: string | undefined;
    /** 字段3 *预留字段用于使用* */
    ext3?: string | undefined;
    /** 字段4 *预留字段用于使用* */
    ext4?: string | undefined;
    /** 字段5 *预留字段用于使用* */
    ext5?: string | undefined;
    /** 字段6 *预留字段用于使用* */
    ext6?: string | undefined;
    /** 字段7 *预留字段用于使用* */
    ext7?: string | undefined;
    /** 字段8 *预留字段用于使用* */
    ext8?: string | undefined;
    /** 字段9 *预留字段用于使用* */
    ext9?: string | undefined;
    /** 字段10 *预留字段用于使用* */
    ext10?: string | undefined;
}

/** 透后小结 */
export class CureRecordItemSummary implements ICureRecordItemSummary {
    /** 小结内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordItemSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordItemSummary {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordItemSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透后小结 */
export interface ICureRecordItemSummary {
    /** 小结内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析use修改记录 */
export class CureRecordLogView implements ICureRecordLogView {
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 拒绝原因 *多个以;分隔* */
    cause?: string | undefined;
    /** 透析方式 */
    causeMode?: string | undefined;
    /** 生命体征 */
    causeVitlsigns?: string | undefined;
    /** 抗凝剂 */
    causeAnticoagulant?: string | undefined;
    /** 透析液 */
    causeDialysate?: string | undefined;
    /** 耗材 */
    causeConsumable?: string | undefined;
    /** 医嘱 */
    causeDa?: string | undefined;
    /** 其它 */
    causeOther?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 处理状态0,1 */
    status!: number;
    /** 来源 *方案确认,交叉核对* */
    source!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.cause = _data["cause"];
            this.causeMode = _data["causeMode"];
            this.causeVitlsigns = _data["causeVitlsigns"];
            this.causeAnticoagulant = _data["causeAnticoagulant"];
            this.causeDialysate = _data["causeDialysate"];
            this.causeConsumable = _data["causeConsumable"];
            this.causeDa = _data["causeDa"];
            this.causeOther = _data["causeOther"];
            this.content = _data["content"];
            this.status = _data["status"];
            this.source = _data["source"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordLogView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["cause"] = this.cause;
        data["causeMode"] = this.causeMode;
        data["causeVitlsigns"] = this.causeVitlsigns;
        data["causeAnticoagulant"] = this.causeAnticoagulant;
        data["causeDialysate"] = this.causeDialysate;
        data["causeConsumable"] = this.causeConsumable;
        data["causeDa"] = this.causeDa;
        data["causeOther"] = this.causeOther;
        data["content"] = this.content;
        data["status"] = this.status;
        data["source"] = this.source;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透析use修改记录 */
export interface ICureRecordLogView {
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 拒绝原因 *多个以;分隔* */
    cause?: string | undefined;
    /** 透析方式 */
    causeMode?: string | undefined;
    /** 生命体征 */
    causeVitlsigns?: string | undefined;
    /** 抗凝剂 */
    causeAnticoagulant?: string | undefined;
    /** 透析液 */
    causeDialysate?: string | undefined;
    /** 耗材 */
    causeConsumable?: string | undefined;
    /** 医嘱 */
    causeDa?: string | undefined;
    /** 其它 */
    causeOther?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 处理状态0,1 */
    status: number;
    /** 来源 *方案确认,交叉核对* */
    source: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 透析记录修改记录 (ViewModel) */
export class CureRecordLogViewModel implements ICureRecordLogViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId!: string;
    /** 拒绝原因 *多个以;分隔* */
    cause?: string | undefined;
    /** 透析方式 */
    causeMode?: string | undefined;
    /** 生命体征 */
    causeVitlsigns?: string | undefined;
    /** 抗凝剂 */
    causeAnticoagulant?: string | undefined;
    /** 透析液 */
    causeDialysate?: string | undefined;
    /** 耗材 */
    causeConsumable?: string | undefined;
    /** 医嘱 */
    causeDa?: string | undefined;
    /** 其它 */
    causeOther?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 处理状态0,1 */
    status!: number;
    /** 来源 *方案确认,交叉核对* */
    source!: string;

    constructor(data?: ICureRecordLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.cause = _data["cause"];
            this.causeMode = _data["causeMode"];
            this.causeVitlsigns = _data["causeVitlsigns"];
            this.causeAnticoagulant = _data["causeAnticoagulant"];
            this.causeDialysate = _data["causeDialysate"];
            this.causeConsumable = _data["causeConsumable"];
            this.causeDa = _data["causeDa"];
            this.causeOther = _data["causeOther"];
            this.content = _data["content"];
            this.status = _data["status"];
            this.source = _data["source"];
        }
    }

    static fromJS(data: any): CureRecordLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["cause"] = this.cause;
        data["causeMode"] = this.causeMode;
        data["causeVitlsigns"] = this.causeVitlsigns;
        data["causeAnticoagulant"] = this.causeAnticoagulant;
        data["causeDialysate"] = this.causeDialysate;
        data["causeConsumable"] = this.causeConsumable;
        data["causeDa"] = this.causeDa;
        data["causeOther"] = this.causeOther;
        data["content"] = this.content;
        data["status"] = this.status;
        data["source"] = this.source;
        return data;
    }
}

/** 透析记录修改记录 (ViewModel) */
export interface ICureRecordLogViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId: string;
    /** 拒绝原因 *多个以;分隔* */
    cause?: string | undefined;
    /** 透析方式 */
    causeMode?: string | undefined;
    /** 生命体征 */
    causeVitlsigns?: string | undefined;
    /** 抗凝剂 */
    causeAnticoagulant?: string | undefined;
    /** 透析液 */
    causeDialysate?: string | undefined;
    /** 耗材 */
    causeConsumable?: string | undefined;
    /** 医嘱 */
    causeDa?: string | undefined;
    /** 其它 */
    causeOther?: string | undefined;
    /** 修改内容 */
    content?: string | undefined;
    /** 处理状态0,1 */
    status: number;
    /** 来源 *方案确认,交叉核对* */
    source: string;
}

/** Reponse */
export class CureRecordLogViewResult implements ICureRecordLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordLogView[] | undefined;

    constructor(data?: ICureRecordLogViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordLogViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordLogViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordLogView[] | undefined;
}

/** Reponse */
export class CureRecordLogViewResultEntry implements ICureRecordLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordLogView;

    constructor(data?: ICureRecordLogViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordLogView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordLogViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordLogViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordLogView;
}

/** 患者透析签名 */
export class CureRecordSignatureEditModel implements ICureRecordSignatureEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureRecordSignatureEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.signature = _data["signature"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureRecordSignatureEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordSignatureEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["signature"] = this.signature;
        data["remark"] = this.remark;
        return data;
    }
}

/** 患者透析签名 */
export interface ICureRecordSignatureEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 患者透析签名 */
export class CureRecordSignatureView implements ICureRecordSignatureView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId!: string;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureRecordSignatureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.cureRecordId = _data["cureRecordId"];
            this.signature = _data["signature"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordSignatureView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordSignatureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["cureRecordId"] = this.cureRecordId;
        data["signature"] = this.signature;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 患者透析签名 */
export interface ICureRecordSignatureView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [透析记录标识](#透析记录) */
    cureRecordId: string;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature: string;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureRecordSignatureViewResult implements ICureRecordSignatureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordSignatureView[] | undefined;

    constructor(data?: ICureRecordSignatureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordSignatureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordSignatureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordSignatureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordSignatureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordSignatureView[] | undefined;
}

/** Reponse */
export class CureRecordSignatureViewResultEntry implements ICureRecordSignatureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordSignatureView;

    constructor(data?: ICureRecordSignatureViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordSignatureView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordSignatureViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordSignatureViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordSignatureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordSignatureView;
}

/** 透析记录单 */
export class CureRecordView implements ICureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型显示值 */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 设备号 */
    dialysisMachineSn?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight1?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientOtherVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight1?: number | undefined;
    /** 透前净体重 */
    readonly beforeNetWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    readonly ufg1?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 偏移后透前体重 */
    deductionBeforeWeight?: number | undefined;
    /** 偏移后透后体重 */
    deductionAfterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight1?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前血压 *mmHg* */
    beforeBp?: string | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置显示值 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后血压 *mmHg* */
    afterBp?: string | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 上次透后体重 */
    preAfterWeight?: number | undefined;
    /** 上次透后体重 */
    preAfterWeight1?: number | undefined;
    /** 较干体重增加量 */
    addBestWeight?: number | undefined;
    /** 本次透析体重下降量 */
    reduceWeight?: number | undefined;
    appendWeight?: number | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 穿刺方法 */
    punctureMethod?: string | undefined;
    /** 穿刺方法显示值 */
    punctureMethodLabel?: string | undefined;
    /** 穿刺护士 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士 */
    punctureNurseName?: string | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 透前体温 */
    onTemp?: number | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    vascularLocation?: string | undefined;
    /** 血管通路部位 */
    vascularPosition?: string | undefined;
    monitorBP?: string | undefined;
    monitorFirstPulse?: string | undefined;
    monitorFirstTime?: dayjs.Dayjs | undefined;
    monitorLastBP?: string | undefined;
    monitorLastPulse?: string | undefined;
    monitorLastTime?: dayjs.Dayjs | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊住院号 */
    readonly hospitalNumber?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 病历夹号 *病历夹号* */
    dossierNumber?: string | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析次数 */
    dialysisCount?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 点位穿刺节点 */
    punctureNodes?: string | undefined;
    /** 点位穿刺节点备注 */
    punctureNodesRemark?: string | undefined;
    /** 穿刺记录备注 */
    punctureRemark?: string | undefined;
    /** 是否单超0,1 */
    iufLabel?: string | undefined;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 是否归档 */
    isArchive?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 指纹图片 */
    finger?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 病情 `DIC.PEOPLE.CONDITION` */
    medicareCondition?: string | undefined;
    /** 病情显示值 */
    medicareConditionName?: string | undefined;
    /** 治疗状态名称 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析龄 */
    dialysisAgeMonth?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    cureDialysate?: CureRecordItemDialysate;
    cureAnticoagulant?: CureRecordItemAnticoagulant;
    cureConsumable?: CureRecordItemConsumable;
    cureMonitorFirst?: CureRecordItemMonitor;
    cureMonitorLast?: CureRecordItemMonitor;
    /** 透中监测 */
    cureMonitor?: CureRecordItemMonitor[] | undefined;
    cureComplicationFirst?: CureRecordItemComplication;
    /** 透中事件 */
    cureComplication?: CureRecordItemComplication[] | undefined;
    /** 透析医嘱 */
    cureDa?: CureRecordItemDa[] | undefined;
    cureSummary?: CureRecordItemSummary;
    disinfect?: CureRecordItemDisinfect;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 受支持的表单自定义数据 */
    assementValues?: SysFormValueView[] | undefined;
    /** 透前评估用 */
    assementValuesBefore?: SysFormValueView[] | undefined;
    /** 透后评估用 */
    assementValuesAfter?: SysFormValueView[] | undefined;
    /** 透析评估用 */
    assementValuesDialysis?: SysFormValueView[] | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature?: string | undefined;
    /** 自定义字段 */
    cureFieldValues?: CureFieldValueView[] | undefined;

    constructor(data?: ICureRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineId = _data["dialysisMachineId"];
            this.dialysisMachineType = _data["dialysisMachineType"];
            this.dialysisMachineTypeLabel = _data["dialysisMachineTypeLabel"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMachineSn = _data["dialysisMachineSn"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bestWeight1 = _data["bestWeight1"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.rfm = _data["rfm"];
            this.rfmLabel = _data["rfmLabel"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeight1 = _data["beforeWeight1"];
            (<any>this).beforeNetWeight = _data["beforeNetWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            (<any>this).ufg1 = _data["ufg1"];
            this.ufc = _data["ufc"];
            this.deductionBeforeWeight = _data["deductionBeforeWeight"];
            this.deductionAfterWeight = _data["deductionAfterWeight"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeight1 = _data["afterWeight1"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforeBp = _data["beforeBp"];
            this.beforePulse = _data["beforePulse"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.afterBpPositionLabel = _data["afterBpPositionLabel"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterBp = _data["afterBp"];
            this.afterPulse = _data["afterPulse"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeBeforeWeight = _data["timeBeforeWeight"] ? dayjs(_data["timeBeforeWeight"].toString()) : <any>undefined;
            this.preAfterWeight = _data["preAfterWeight"];
            this.preAfterWeight1 = _data["preAfterWeight1"];
            this.addBestWeight = _data["addBestWeight"];
            this.reduceWeight = _data["reduceWeight"];
            this.appendWeight = _data["appendWeight"];
            this.timeBeforeBp = _data["timeBeforeBp"] ? dayjs(_data["timeBeforeBp"].toString()) : <any>undefined;
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeAssementBefore = _data["timeAssementBefore"] ? dayjs(_data["timeAssementBefore"].toString()) : <any>undefined;
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.punctureMethod = _data["punctureMethod"];
            this.punctureMethodLabel = _data["punctureMethodLabel"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            this.timeFirstMonitor = _data["timeFirstMonitor"] ? dayjs(_data["timeFirstMonitor"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.timeDisinfect = _data["timeDisinfect"] ? dayjs(_data["timeDisinfect"].toString()) : <any>undefined;
            this.timeAssementAfter = _data["timeAssementAfter"] ? dayjs(_data["timeAssementAfter"].toString()) : <any>undefined;
            this.timeAfterWeight = _data["timeAfterWeight"] ? dayjs(_data["timeAfterWeight"].toString()) : <any>undefined;
            this.timeAfterBp = _data["timeAfterBp"] ? dayjs(_data["timeAfterBp"].toString()) : <any>undefined;
            this.timeAfterSummary = _data["timeAfterSummary"] ? dayjs(_data["timeAfterSummary"].toString()) : <any>undefined;
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.assementBeforeNurseId = _data["assementBeforeNurseId"];
            this.assementBeforeNurseName = _data["assementBeforeNurseName"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.onTemp = _data["onTemp"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.verify = _data["verify"];
            this.offNurseId = _data["offNurseId"];
            this.offNurseName = _data["offNurseName"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            this.assementAfterNurseId = _data["assementAfterNurseId"];
            this.vascularLocation = _data["vascularLocation"];
            this.vascularPosition = _data["vascularPosition"];
            this.monitorBP = _data["monitorBP"];
            this.monitorFirstPulse = _data["monitorFirstPulse"];
            this.monitorFirstTime = _data["monitorFirstTime"] ? dayjs(_data["monitorFirstTime"].toString()) : <any>undefined;
            this.monitorLastBP = _data["monitorLastBP"];
            this.monitorLastPulse = _data["monitorLastPulse"];
            this.monitorLastTime = _data["monitorLastTime"] ? dayjs(_data["monitorLastTime"].toString()) : <any>undefined;
            this.assementAfterNurseName = _data["assementAfterNurseName"];
            this.summaryAfterNurseId = _data["summaryAfterNurseId"];
            this.summaryAfterNurseName = _data["summaryAfterNurseName"];
            this.offEarly = _data["offEarly"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.cancelReason = _data["cancelReason"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            (<any>this).hospitalNumber = _data["hospitalNumber"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisLabel = _data["diagnosisLabel"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dossierNumber = _data["dossierNumber"];
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCount = _data["dialysisCount"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.iuf = _data["iuf"];
            this.punctureNodes = _data["punctureNodes"];
            this.punctureNodesRemark = _data["punctureNodesRemark"];
            this.punctureRemark = _data["punctureRemark"];
            this.iufLabel = _data["iufLabel"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.isArchive = _data["isArchive"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.lastId = _data["lastId"];
            this.nextId = _data["nextId"];
            this.patientName = _data["patientName"];
            this.finger = _data["finger"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.medicareCondition = _data["medicareCondition"];
            this.medicareConditionName = _data["medicareConditionName"];
            this.statusLabel = _data["statusLabel"];
            this.dialysisAge = _data["dialysisAge"];
            this.dialysisAgeMonth = _data["dialysisAgeMonth"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.cureDialysate = _data["cureDialysate"] ? CureRecordItemDialysate.fromJS(_data["cureDialysate"]) : <any>undefined;
            this.cureAnticoagulant = _data["cureAnticoagulant"] ? CureRecordItemAnticoagulant.fromJS(_data["cureAnticoagulant"]) : <any>undefined;
            this.cureConsumable = _data["cureConsumable"] ? CureRecordItemConsumable.fromJS(_data["cureConsumable"]) : <any>undefined;
            this.cureMonitorFirst = _data["cureMonitorFirst"] ? CureRecordItemMonitor.fromJS(_data["cureMonitorFirst"]) : <any>undefined;
            this.cureMonitorLast = _data["cureMonitorLast"] ? CureRecordItemMonitor.fromJS(_data["cureMonitorLast"]) : <any>undefined;
            if (Array.isArray(_data["cureMonitor"])) {
                this.cureMonitor = [] as any;
                for (let item of _data["cureMonitor"])
                    this.cureMonitor!.push(CureRecordItemMonitor.fromJS(item));
            }
            this.cureComplicationFirst = _data["cureComplicationFirst"] ? CureRecordItemComplication.fromJS(_data["cureComplicationFirst"]) : <any>undefined;
            if (Array.isArray(_data["cureComplication"])) {
                this.cureComplication = [] as any;
                for (let item of _data["cureComplication"])
                    this.cureComplication!.push(CureRecordItemComplication.fromJS(item));
            }
            if (Array.isArray(_data["cureDa"])) {
                this.cureDa = [] as any;
                for (let item of _data["cureDa"])
                    this.cureDa!.push(CureRecordItemDa.fromJS(item));
            }
            this.cureSummary = _data["cureSummary"] ? CureRecordItemSummary.fromJS(_data["cureSummary"]) : <any>undefined;
            this.disinfect = _data["disinfect"] ? CureRecordItemDisinfect.fromJS(_data["disinfect"]) : <any>undefined;
            this.assementBefore = _data["assementBefore"] ? CureRecordItemAssement.fromJS(_data["assementBefore"]) : <any>undefined;
            this.assementAfter = _data["assementAfter"] ? CureRecordItemAssement.fromJS(_data["assementAfter"]) : <any>undefined;
            this.assementDialysis = _data["assementDialysis"] ? CureRecordItemAssement.fromJS(_data["assementDialysis"]) : <any>undefined;
            if (Array.isArray(_data["assementValues"])) {
                this.assementValues = [] as any;
                for (let item of _data["assementValues"])
                    this.assementValues!.push(SysFormValueView.fromJS(item));
            }
            if (Array.isArray(_data["assementValuesBefore"])) {
                this.assementValuesBefore = [] as any;
                for (let item of _data["assementValuesBefore"])
                    this.assementValuesBefore!.push(SysFormValueView.fromJS(item));
            }
            if (Array.isArray(_data["assementValuesAfter"])) {
                this.assementValuesAfter = [] as any;
                for (let item of _data["assementValuesAfter"])
                    this.assementValuesAfter!.push(SysFormValueView.fromJS(item));
            }
            if (Array.isArray(_data["assementValuesDialysis"])) {
                this.assementValuesDialysis = [] as any;
                for (let item of _data["assementValuesDialysis"])
                    this.assementValuesDialysis!.push(SysFormValueView.fromJS(item));
            }
            this.signature = _data["signature"];
            if (Array.isArray(_data["cureFieldValues"])) {
                this.cureFieldValues = [] as any;
                for (let item of _data["cureFieldValues"])
                    this.cureFieldValues!.push(CureFieldValueView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineId"] = this.dialysisMachineId;
        data["dialysisMachineType"] = this.dialysisMachineType;
        data["dialysisMachineTypeLabel"] = this.dialysisMachineTypeLabel;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMachineSn"] = this.dialysisMachineSn;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bestWeight1"] = this.bestWeight1;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["rfm"] = this.rfm;
        data["rfmLabel"] = this.rfmLabel;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeight1"] = this.beforeWeight1;
        data["beforeNetWeight"] = this.beforeNetWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["ufg1"] = this.ufg1;
        data["ufc"] = this.ufc;
        data["deductionBeforeWeight"] = this.deductionBeforeWeight;
        data["deductionAfterWeight"] = this.deductionAfterWeight;
        data["afterWeight"] = this.afterWeight;
        data["afterWeight1"] = this.afterWeight1;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforeBp"] = this.beforeBp;
        data["beforePulse"] = this.beforePulse;
        data["afterBpPosition"] = this.afterBpPosition;
        data["afterBpPositionLabel"] = this.afterBpPositionLabel;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterBp"] = this.afterBp;
        data["afterPulse"] = this.afterPulse;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeBeforeWeight"] = this.timeBeforeWeight ? this.timeBeforeWeight.toLocaleString() : <any>undefined;
        data["preAfterWeight"] = this.preAfterWeight;
        data["preAfterWeight1"] = this.preAfterWeight1;
        data["addBestWeight"] = this.addBestWeight;
        data["reduceWeight"] = this.reduceWeight;
        data["appendWeight"] = this.appendWeight;
        data["timeBeforeBp"] = this.timeBeforeBp ? this.timeBeforeBp.toLocaleString() : <any>undefined;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toLocaleString() : <any>undefined;
        data["enact"] = this.enact;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toLocaleString() : <any>undefined;
        data["check"] = this.check;
        data["timeAssementBefore"] = this.timeAssementBefore ? this.timeAssementBefore.toLocaleString() : <any>undefined;
        data["timeOn"] = this.timeOn ? this.timeOn.toLocaleString() : <any>undefined;
        data["punctureMethod"] = this.punctureMethod;
        data["punctureMethodLabel"] = this.punctureMethodLabel;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toLocaleString() : <any>undefined;
        data["timeFirstMonitor"] = this.timeFirstMonitor ? this.timeFirstMonitor.toLocaleString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toLocaleString() : <any>undefined;
        data["timeDisinfect"] = this.timeDisinfect ? this.timeDisinfect.toLocaleString() : <any>undefined;
        data["timeAssementAfter"] = this.timeAssementAfter ? this.timeAssementAfter.toLocaleString() : <any>undefined;
        data["timeAfterWeight"] = this.timeAfterWeight ? this.timeAfterWeight.toLocaleString() : <any>undefined;
        data["timeAfterBp"] = this.timeAfterBp ? this.timeAfterBp.toLocaleString() : <any>undefined;
        data["timeAfterSummary"] = this.timeAfterSummary ? this.timeAfterSummary.toLocaleString() : <any>undefined;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["assementBeforeNurseId"] = this.assementBeforeNurseId;
        data["assementBeforeNurseName"] = this.assementBeforeNurseName;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["onTemp"] = this.onTemp;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["verify"] = this.verify;
        data["offNurseId"] = this.offNurseId;
        data["offNurseName"] = this.offNurseName;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        data["assementAfterNurseId"] = this.assementAfterNurseId;
        data["vascularLocation"] = this.vascularLocation;
        data["vascularPosition"] = this.vascularPosition;
        data["monitorBP"] = this.monitorBP;
        data["monitorFirstPulse"] = this.monitorFirstPulse;
        data["monitorFirstTime"] = this.monitorFirstTime ? this.monitorFirstTime.toLocaleString() : <any>undefined;
        data["monitorLastBP"] = this.monitorLastBP;
        data["monitorLastPulse"] = this.monitorLastPulse;
        data["monitorLastTime"] = this.monitorLastTime ? this.monitorLastTime.toLocaleString() : <any>undefined;
        data["assementAfterNurseName"] = this.assementAfterNurseName;
        data["summaryAfterNurseId"] = this.summaryAfterNurseId;
        data["summaryAfterNurseName"] = this.summaryAfterNurseName;
        data["offEarly"] = this.offEarly;
        data["offEarlyCause"] = this.offEarlyCause;
        data["cancelReason"] = this.cancelReason;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["hospitalNumber"] = this.hospitalNumber;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisLabel"] = this.diagnosisLabel;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dossierNumber"] = this.dossierNumber;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCount"] = this.dialysisCount;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["iuf"] = this.iuf;
        data["punctureNodes"] = this.punctureNodes;
        data["punctureNodesRemark"] = this.punctureNodesRemark;
        data["punctureRemark"] = this.punctureRemark;
        data["iufLabel"] = this.iufLabel;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toLocaleString() : <any>undefined;
        data["isArchive"] = this.isArchive;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["lastId"] = this.lastId;
        data["nextId"] = this.nextId;
        data["patientName"] = this.patientName;
        data["finger"] = this.finger;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["medicareCondition"] = this.medicareCondition;
        data["medicareConditionName"] = this.medicareConditionName;
        data["statusLabel"] = this.statusLabel;
        data["dialysisAge"] = this.dialysisAge;
        data["dialysisAgeMonth"] = this.dialysisAgeMonth;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toLocaleString() : <any>undefined;
        data["cureDialysate"] = this.cureDialysate ? this.cureDialysate.toJSON() : <any>undefined;
        data["cureAnticoagulant"] = this.cureAnticoagulant ? this.cureAnticoagulant.toJSON() : <any>undefined;
        data["cureConsumable"] = this.cureConsumable ? this.cureConsumable.toJSON() : <any>undefined;
        data["cureMonitorFirst"] = this.cureMonitorFirst ? this.cureMonitorFirst.toJSON() : <any>undefined;
        data["cureMonitorLast"] = this.cureMonitorLast ? this.cureMonitorLast.toJSON() : <any>undefined;
        if (Array.isArray(this.cureMonitor)) {
            data["cureMonitor"] = [];
            for (let item of this.cureMonitor)
                data["cureMonitor"].push(item.toJSON());
        }
        data["cureComplicationFirst"] = this.cureComplicationFirst ? this.cureComplicationFirst.toJSON() : <any>undefined;
        if (Array.isArray(this.cureComplication)) {
            data["cureComplication"] = [];
            for (let item of this.cureComplication)
                data["cureComplication"].push(item.toJSON());
        }
        if (Array.isArray(this.cureDa)) {
            data["cureDa"] = [];
            for (let item of this.cureDa)
                data["cureDa"].push(item.toJSON());
        }
        data["cureSummary"] = this.cureSummary ? this.cureSummary.toJSON() : <any>undefined;
        data["disinfect"] = this.disinfect ? this.disinfect.toJSON() : <any>undefined;
        data["assementBefore"] = this.assementBefore ? this.assementBefore.toJSON() : <any>undefined;
        data["assementAfter"] = this.assementAfter ? this.assementAfter.toJSON() : <any>undefined;
        data["assementDialysis"] = this.assementDialysis ? this.assementDialysis.toJSON() : <any>undefined;
        if (Array.isArray(this.assementValues)) {
            data["assementValues"] = [];
            for (let item of this.assementValues)
                data["assementValues"].push(item.toJSON());
        }
        if (Array.isArray(this.assementValuesBefore)) {
            data["assementValuesBefore"] = [];
            for (let item of this.assementValuesBefore)
                data["assementValuesBefore"].push(item.toJSON());
        }
        if (Array.isArray(this.assementValuesAfter)) {
            data["assementValuesAfter"] = [];
            for (let item of this.assementValuesAfter)
                data["assementValuesAfter"].push(item.toJSON());
        }
        if (Array.isArray(this.assementValuesDialysis)) {
            data["assementValuesDialysis"] = [];
            for (let item of this.assementValuesDialysis)
                data["assementValuesDialysis"].push(item.toJSON());
        }
        data["signature"] = this.signature;
        if (Array.isArray(this.cureFieldValues)) {
            data["cureFieldValues"] = [];
            for (let item of this.cureFieldValues)
                data["cureFieldValues"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析记录单 */
export interface ICureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型显示值 */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 设备号 */
    dialysisMachineSn?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight1?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    /** [血管通路](患者血管通路) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路类型 */
    patientOtherVascularAccessType?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式显示值 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重 *kg* */
    beforeWeight1?: number | undefined;
    /** 透前净体重 */
    beforeNetWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg1?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 偏移后透前体重 */
    deductionBeforeWeight?: number | undefined;
    /** 偏移后透后体重 */
    deductionAfterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight1?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置显示值 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前血压 *mmHg* */
    beforeBp?: string | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢,下肢,拒测* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置显示值 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后血压 *mmHg* */
    afterBp?: string | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 上次透后体重 */
    preAfterWeight?: number | undefined;
    /** 上次透后体重 */
    preAfterWeight1?: number | undefined;
    /** 较干体重增加量 */
    addBestWeight?: number | undefined;
    /** 本次透析体重下降量 */
    reduceWeight?: number | undefined;
    appendWeight?: number | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 穿刺方法 */
    punctureMethod?: string | undefined;
    /** 穿刺方法显示值 */
    punctureMethodLabel?: string | undefined;
    /** 穿刺护士 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士 */
    punctureNurseName?: string | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 透前体温 */
    onTemp?: number | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    vascularLocation?: string | undefined;
    /** 血管通路部位 */
    vascularPosition?: string | undefined;
    monitorBP?: string | undefined;
    monitorFirstPulse?: string | undefined;
    monitorFirstTime?: dayjs.Dayjs | undefined;
    monitorLastBP?: string | undefined;
    monitorLastPulse?: string | undefined;
    monitorLastTime?: dayjs.Dayjs | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 */
    offEarlyCause?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 门诊住院号 */
    hospitalNumber?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 病历夹号 *病历夹号* */
    dossierNumber?: string | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析次数 */
    dialysisCount?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否单超0,1 */
    iuf?: number;
    /** 点位穿刺节点 */
    punctureNodes?: string | undefined;
    /** 点位穿刺节点备注 */
    punctureNodesRemark?: string | undefined;
    /** 穿刺记录备注 */
    punctureRemark?: string | undefined;
    /** 是否单超0,1 */
    iufLabel?: string | undefined;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 是否归档 */
    isArchive?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 指纹图片 */
    finger?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 病情 `DIC.PEOPLE.CONDITION` */
    medicareCondition?: string | undefined;
    /** 病情显示值 */
    medicareConditionName?: string | undefined;
    /** 治疗状态名称 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析龄 */
    dialysisAgeMonth?: string | undefined;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    cureDialysate?: CureRecordItemDialysate;
    cureAnticoagulant?: CureRecordItemAnticoagulant;
    cureConsumable?: CureRecordItemConsumable;
    cureMonitorFirst?: CureRecordItemMonitor;
    cureMonitorLast?: CureRecordItemMonitor;
    /** 透中监测 */
    cureMonitor?: CureRecordItemMonitor[] | undefined;
    cureComplicationFirst?: CureRecordItemComplication;
    /** 透中事件 */
    cureComplication?: CureRecordItemComplication[] | undefined;
    /** 透析医嘱 */
    cureDa?: CureRecordItemDa[] | undefined;
    cureSummary?: CureRecordItemSummary;
    disinfect?: CureRecordItemDisinfect;
    assementBefore?: CureRecordItemAssement;
    assementAfter?: CureRecordItemAssement;
    assementDialysis?: CureRecordItemAssement;
    /** 受支持的表单自定义数据 */
    assementValues?: SysFormValueView[] | undefined;
    /** 透前评估用 */
    assementValuesBefore?: SysFormValueView[] | undefined;
    /** 透后评估用 */
    assementValuesAfter?: SysFormValueView[] | undefined;
    /** 透析评估用 */
    assementValuesDialysis?: SysFormValueView[] | undefined;
    /** 影像文件 *data:image/jpeg;base64,...* */
    signature?: string | undefined;
    /** 自定义字段 */
    cureFieldValues?: CureFieldValueView[] | undefined;
}

/** 透析记录 (ViewModel) */
export class CureRecordViewModel implements ICureRecordViewModel {
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn!: string;
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 透析日期 */
    dialysisDate!: dayjs.Dayjs;
    /** 班次 */
    shiftId!: string;
    /** 班次 */
    shiftName!: string;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode!: string;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel!: string;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet!: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路Id) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status!: string;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否单超0,1 */
    iuf!: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish!: number;
    /** 是否归档 */
    isArchive!: number;

    constructor(data?: ICureRecordViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMachineId = _data["dialysisMachineId"];
            this.dialysisMachineType = _data["dialysisMachineType"];
            this.dialysisMachineTypeLabel = _data["dialysisMachineTypeLabel"];
            this.dialysisMachineModel = _data["dialysisMachineModel"];
            this.dialysisMachineNo = _data["dialysisMachineNo"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.rfm = _data["rfm"];
            this.rfmLabel = _data["rfmLabel"];
            this.rfr = _data["rfr"];
            this.rfv = _data["rfv"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.ufc = _data["ufc"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.beforeBpPosition = _data["beforeBpPosition"];
            this.beforeBpPositionLabel = _data["beforeBpPositionLabel"];
            this.beforeSbp = _data["beforeSbp"];
            this.beforeDbp = _data["beforeDbp"];
            this.beforePulse = _data["beforePulse"];
            this.afterBpPosition = _data["afterBpPosition"];
            this.afterBpPositionLabel = _data["afterBpPositionLabel"];
            this.afterSbp = _data["afterSbp"];
            this.afterDbp = _data["afterDbp"];
            this.afterPulse = _data["afterPulse"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeBeforeWeight = _data["timeBeforeWeight"] ? dayjs(_data["timeBeforeWeight"].toString()) : <any>undefined;
            this.timeBeforeBp = _data["timeBeforeBp"] ? dayjs(_data["timeBeforeBp"].toString()) : <any>undefined;
            this.timeEnactDoctor = _data["timeEnactDoctor"] ? dayjs(_data["timeEnactDoctor"].toString()) : <any>undefined;
            this.enact = _data["enact"];
            this.timeCheckNurse = _data["timeCheckNurse"] ? dayjs(_data["timeCheckNurse"].toString()) : <any>undefined;
            this.check = _data["check"];
            this.timeAssementBefore = _data["timeAssementBefore"] ? dayjs(_data["timeAssementBefore"].toString()) : <any>undefined;
            this.timeOn = _data["timeOn"] ? dayjs(_data["timeOn"].toString()) : <any>undefined;
            this.timeVerify = _data["timeVerify"] ? dayjs(_data["timeVerify"].toString()) : <any>undefined;
            this.timeFirstMonitor = _data["timeFirstMonitor"] ? dayjs(_data["timeFirstMonitor"].toString()) : <any>undefined;
            this.timeOff = _data["timeOff"] ? dayjs(_data["timeOff"].toString()) : <any>undefined;
            this.timeDisinfect = _data["timeDisinfect"] ? dayjs(_data["timeDisinfect"].toString()) : <any>undefined;
            this.timeAssementAfter = _data["timeAssementAfter"] ? dayjs(_data["timeAssementAfter"].toString()) : <any>undefined;
            this.timeAfterWeight = _data["timeAfterWeight"] ? dayjs(_data["timeAfterWeight"].toString()) : <any>undefined;
            this.timeAfterBp = _data["timeAfterBp"] ? dayjs(_data["timeAfterBp"].toString()) : <any>undefined;
            this.timeAfterSummary = _data["timeAfterSummary"] ? dayjs(_data["timeAfterSummary"].toString()) : <any>undefined;
            this.timeAssement = _data["timeAssement"] ? dayjs(_data["timeAssement"].toString()) : <any>undefined;
            this.assementUserId = _data["assementUserId"];
            this.assementUserName = _data["assementUserName"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.enactDoctorId = _data["enactDoctorId"];
            this.enactDoctorName = _data["enactDoctorName"];
            this.checkNurseId = _data["checkNurseId"];
            this.checkNurseName = _data["checkNurseName"];
            this.assementBeforeNurseId = _data["assementBeforeNurseId"];
            this.assementBeforeNurseName = _data["assementBeforeNurseName"];
            this.punctureMethod = _data["punctureMethod"];
            this.onNurseId = _data["onNurseId"];
            this.onNurseName = _data["onNurseName"];
            this.onTemp = _data["onTemp"];
            this.punctureNurseId = _data["punctureNurseId"];
            this.punctureNurseName = _data["punctureNurseName"];
            this.verifyNurseId = _data["verifyNurseId"];
            this.verifyNurseName = _data["verifyNurseName"];
            this.verify = _data["verify"];
            this.offNurseId = _data["offNurseId"];
            this.offNurseName = _data["offNurseName"];
            this.offTemp = _data["offTemp"];
            this.offBreathe = _data["offBreathe"];
            this.assementAfterNurseId = _data["assementAfterNurseId"];
            this.assementAfterNurseName = _data["assementAfterNurseName"];
            this.summaryAfterNurseId = _data["summaryAfterNurseId"];
            this.summaryAfterNurseName = _data["summaryAfterNurseName"];
            this.offEarly = _data["offEarly"];
            this.offEarlyCause = _data["offEarlyCause"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.suggestion = _data["suggestion"];
            this.suggestionNext = _data["suggestionNext"];
            this.cancelReason = _data["cancelReason"];
            this.bedNurseId = _data["bedNurseId"];
            this.bedNurseName = _data["bedNurseName"];
            this.remark = _data["remark"];
            this.iuf = _data["iuf"];
            this.iufMode = _data["iufMode"];
            this.iufHour = _data["iufHour"];
            this.iufValue = _data["iufValue"];
            this.iufStartTime = _data["iufStartTime"] ? dayjs(_data["iufStartTime"].toString()) : <any>undefined;
            this.patientPrescriptionId = _data["patientPrescriptionId"];
            this.placementNurseId = _data["placementNurseId"];
            this.placementNurseName = _data["placementNurseName"];
            this.qualityNurseId = _data["qualityNurseId"];
            this.qualityNurseName = _data["qualityNurseName"];
            this.isReplenish = _data["isReplenish"];
            this.isArchive = _data["isArchive"];
        }
    }

    static fromJS(data: any): CureRecordViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMachineId"] = this.dialysisMachineId;
        data["dialysisMachineType"] = this.dialysisMachineType;
        data["dialysisMachineTypeLabel"] = this.dialysisMachineTypeLabel;
        data["dialysisMachineModel"] = this.dialysisMachineModel;
        data["dialysisMachineNo"] = this.dialysisMachineNo;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["rfm"] = this.rfm;
        data["rfmLabel"] = this.rfmLabel;
        data["rfr"] = this.rfr;
        data["rfv"] = this.rfv;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["ufc"] = this.ufc;
        data["afterWeight"] = this.afterWeight;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["beforeBpPosition"] = this.beforeBpPosition;
        data["beforeBpPositionLabel"] = this.beforeBpPositionLabel;
        data["beforeSbp"] = this.beforeSbp;
        data["beforeDbp"] = this.beforeDbp;
        data["beforePulse"] = this.beforePulse;
        data["afterBpPosition"] = this.afterBpPosition;
        data["afterBpPositionLabel"] = this.afterBpPositionLabel;
        data["afterSbp"] = this.afterSbp;
        data["afterDbp"] = this.afterDbp;
        data["afterPulse"] = this.afterPulse;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeBeforeWeight"] = this.timeBeforeWeight ? this.timeBeforeWeight.toLocaleString() : <any>undefined;
        data["timeBeforeBp"] = this.timeBeforeBp ? this.timeBeforeBp.toLocaleString() : <any>undefined;
        data["timeEnactDoctor"] = this.timeEnactDoctor ? this.timeEnactDoctor.toLocaleString() : <any>undefined;
        data["enact"] = this.enact;
        data["timeCheckNurse"] = this.timeCheckNurse ? this.timeCheckNurse.toLocaleString() : <any>undefined;
        data["check"] = this.check;
        data["timeAssementBefore"] = this.timeAssementBefore ? this.timeAssementBefore.toLocaleString() : <any>undefined;
        data["timeOn"] = this.timeOn ? this.timeOn.toLocaleString() : <any>undefined;
        data["timeVerify"] = this.timeVerify ? this.timeVerify.toLocaleString() : <any>undefined;
        data["timeFirstMonitor"] = this.timeFirstMonitor ? this.timeFirstMonitor.toLocaleString() : <any>undefined;
        data["timeOff"] = this.timeOff ? this.timeOff.toLocaleString() : <any>undefined;
        data["timeDisinfect"] = this.timeDisinfect ? this.timeDisinfect.toLocaleString() : <any>undefined;
        data["timeAssementAfter"] = this.timeAssementAfter ? this.timeAssementAfter.toLocaleString() : <any>undefined;
        data["timeAfterWeight"] = this.timeAfterWeight ? this.timeAfterWeight.toLocaleString() : <any>undefined;
        data["timeAfterBp"] = this.timeAfterBp ? this.timeAfterBp.toLocaleString() : <any>undefined;
        data["timeAfterSummary"] = this.timeAfterSummary ? this.timeAfterSummary.toLocaleString() : <any>undefined;
        data["timeAssement"] = this.timeAssement ? this.timeAssement.toLocaleString() : <any>undefined;
        data["assementUserId"] = this.assementUserId;
        data["assementUserName"] = this.assementUserName;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["enactDoctorId"] = this.enactDoctorId;
        data["enactDoctorName"] = this.enactDoctorName;
        data["checkNurseId"] = this.checkNurseId;
        data["checkNurseName"] = this.checkNurseName;
        data["assementBeforeNurseId"] = this.assementBeforeNurseId;
        data["assementBeforeNurseName"] = this.assementBeforeNurseName;
        data["punctureMethod"] = this.punctureMethod;
        data["onNurseId"] = this.onNurseId;
        data["onNurseName"] = this.onNurseName;
        data["onTemp"] = this.onTemp;
        data["punctureNurseId"] = this.punctureNurseId;
        data["punctureNurseName"] = this.punctureNurseName;
        data["verifyNurseId"] = this.verifyNurseId;
        data["verifyNurseName"] = this.verifyNurseName;
        data["verify"] = this.verify;
        data["offNurseId"] = this.offNurseId;
        data["offNurseName"] = this.offNurseName;
        data["offTemp"] = this.offTemp;
        data["offBreathe"] = this.offBreathe;
        data["assementAfterNurseId"] = this.assementAfterNurseId;
        data["assementAfterNurseName"] = this.assementAfterNurseName;
        data["summaryAfterNurseId"] = this.summaryAfterNurseId;
        data["summaryAfterNurseName"] = this.summaryAfterNurseName;
        data["offEarly"] = this.offEarly;
        data["offEarlyCause"] = this.offEarlyCause;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["suggestion"] = this.suggestion;
        data["suggestionNext"] = this.suggestionNext;
        data["cancelReason"] = this.cancelReason;
        data["bedNurseId"] = this.bedNurseId;
        data["bedNurseName"] = this.bedNurseName;
        data["remark"] = this.remark;
        data["iuf"] = this.iuf;
        data["iufMode"] = this.iufMode;
        data["iufHour"] = this.iufHour;
        data["iufValue"] = this.iufValue;
        data["iufStartTime"] = this.iufStartTime ? this.iufStartTime.toLocaleString() : <any>undefined;
        data["patientPrescriptionId"] = this.patientPrescriptionId;
        data["placementNurseId"] = this.placementNurseId;
        data["placementNurseName"] = this.placementNurseName;
        data["qualityNurseId"] = this.qualityNurseId;
        data["qualityNurseName"] = this.qualityNurseName;
        data["isReplenish"] = this.isReplenish;
        data["isArchive"] = this.isArchive;
        return data;
    }
}

/** 透析记录 (ViewModel) */
export interface ICureRecordViewModel {
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn: string;
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 透析日期 */
    dialysisDate: dayjs.Dayjs;
    /** 班次 */
    shiftId: string;
    /** 班次 */
    shiftName: string;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位 */
    bedName?: string | undefined;
    /** 透析机标识 */
    dialysisMachineId?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineType?: string | undefined;
    /** 透析机类型 `DIC.DEV.TYPE` */
    dialysisMachineTypeLabel?: string | undefined;
    /** 透析机型号 */
    dialysisMachineModel?: string | undefined;
    /** 透析机编号 */
    dialysisMachineNo?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode: string;
    /** 透析方式 `DIC.DIALYSIS.MODE` */
    dialysisModeLabel: string;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路Id) */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessType?: string | undefined;
    /** [血管通路](患者血管通路Id) */
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessType?: string | undefined;
    /** 置换方式 `DIC.DIALYSIS.RFM` *ml/min Replacement Fluid method 前置换,后置换* */
    rfm?: string | undefined;
    /** 置换方式 */
    rfmLabel?: string | undefined;
    /** 置换液流量 *ml/min Replacement Fluid Rate* */
    rfr?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 治疗流程状态 `DIC.DIALYSIS.STATUS` *已签到,上机准备,治疗中,已下机,已结束* */
    status: string;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 净脱水量 *ml Ultrafiltration Complete* */
    ufc?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 透前血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    beforeBpPosition?: string | undefined;
    /** 透前血压测量位置 */
    beforeBpPositionLabel?: string | undefined;
    /** 透前收缩压 *mmHg* */
    beforeSbp?: number | undefined;
    /** 透前舒张压 *mmHg* */
    beforeDbp?: number | undefined;
    /** 透前脉搏 *次/分* */
    beforePulse?: number | undefined;
    /** 透后血压测量位置 `DIC.PATIENT.MEASURE.BP.POSITION` *上肢* */
    afterBpPosition?: string | undefined;
    /** 透后血压测量位置 */
    afterBpPositionLabel?: string | undefined;
    /** 透后收缩压 *mmHg* */
    afterSbp?: number | undefined;
    /** 透后舒张压 *mmHg* */
    afterDbp?: number | undefined;
    /** 透后脉搏 *次/分* */
    afterPulse?: number | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 透前体重时间 */
    timeBeforeWeight?: dayjs.Dayjs | undefined;
    /** 透前血压时间 */
    timeBeforeBp?: dayjs.Dayjs | undefined;
    /** 医生制定方案时间 */
    timeEnactDoctor?: dayjs.Dayjs | undefined;
    /** 方案是否制定0,1 */
    enact?: number | undefined;
    /** 护士确认方案时间 */
    timeCheckNurse?: dayjs.Dayjs | undefined;
    /** 方案是否通过0,1 */
    check?: number | undefined;
    /** 透前评估时间 */
    timeAssementBefore?: dayjs.Dayjs | undefined;
    /** 穿刺时间 */
    timeOn?: dayjs.Dayjs | undefined;
    /** 交叉核对时间 */
    timeVerify?: dayjs.Dayjs | undefined;
    /** 首次监测时间 */
    timeFirstMonitor?: dayjs.Dayjs | undefined;
    /** 下机时间 */
    timeOff?: dayjs.Dayjs | undefined;
    /** 消毒时间 */
    timeDisinfect?: dayjs.Dayjs | undefined;
    /** 透后评估时间 */
    timeAssementAfter?: dayjs.Dayjs | undefined;
    /** 透后体重时间 */
    timeAfterWeight?: dayjs.Dayjs | undefined;
    /** 透后血压时间 */
    timeAfterBp?: dayjs.Dayjs | undefined;
    /** 透后小结时间 */
    timeAfterSummary?: dayjs.Dayjs | undefined;
    /** 透析评估时间 */
    timeAssement?: dayjs.Dayjs | undefined;
    /** 透析评估医护标识 */
    assementUserId?: string | undefined;
    /** 透析评估医护姓名 */
    assementUserName?: string | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 制定方案医生标识 */
    enactDoctorId?: string | undefined;
    /** 制定方案医生姓名 */
    enactDoctorName?: string | undefined;
    /** 确认方案护士标识 */
    checkNurseId?: string | undefined;
    /** 确认方案护士姓名 */
    checkNurseName?: string | undefined;
    /** 透前评估护士标识 */
    assementBeforeNurseId?: string | undefined;
    /** 透前评估护士姓名 */
    assementBeforeNurseName?: string | undefined;
    /** 穿刺方法 `DIC.DIALYSIS.PUNCTURE.METHOD` */
    punctureMethod?: string | undefined;
    /** 上机护士标识 */
    onNurseId?: string | undefined;
    /** 上机护士姓名 */
    onNurseName?: string | undefined;
    /** 上机体温 */
    onTemp?: number | undefined;
    /** 穿刺护士标识 */
    punctureNurseId?: string | undefined;
    /** 穿刺护士姓名 */
    punctureNurseName?: string | undefined;
    /** 核对护士标识 */
    verifyNurseId?: string | undefined;
    /** 核对护士姓名 */
    verifyNurseName?: string | undefined;
    /** 核对是否通过0,1 */
    verify?: number | undefined;
    /** 下机护士标识 */
    offNurseId?: string | undefined;
    /** 下机护士姓名 */
    offNurseName?: string | undefined;
    /** 下机体温 */
    offTemp?: number | undefined;
    /** 下机呼吸 */
    offBreathe?: number | undefined;
    /** 透后评估护士标识 */
    assementAfterNurseId?: string | undefined;
    /** 透后评估护士姓名 */
    assementAfterNurseName?: string | undefined;
    /** 透后小结护士标识 */
    summaryAfterNurseId?: string | undefined;
    /** 透后小结护士姓名 */
    summaryAfterNurseName?: string | undefined;
    /** 是否提前下机0,1 *判断标准：提前半个小时以上下机* */
    offEarly?: number | undefined;
    /** 提前下机原因 *字典模板* `DIC.DIALYSIS.OFFEARLY.TMPL` */
    offEarlyCause?: string | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 透析建议 */
    suggestion?: string | undefined;
    /** 下次透析建议 */
    suggestionNext?: string | undefined;
    /** 取消透析原因 *在交叉核对之前都可以取消透析* */
    cancelReason?: string | undefined;
    /** 管床护士标识 */
    bedNurseId?: string | undefined;
    /** 管床护士姓名 */
    bedNurseName?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 是否单超0,1 */
    iuf: number;
    /** 单超方式 */
    iufMode?: string | undefined;
    /** 单超时间 *h* */
    iufHour?: number | undefined;
    /** 单超量 */
    iufValue?: number | undefined;
    /** 单超开始时间 */
    iufStartTime?: dayjs.Dayjs | undefined;
    /** 患者处方id */
    patientPrescriptionId?: string | undefined;
    /** 置管护士标识 */
    placementNurseId?: string | undefined;
    /** 置管护士姓名 */
    placementNurseName?: string | undefined;
    /** 质控护士标识 */
    qualityNurseId?: string | undefined;
    /** 质控护士姓名 */
    qualityNurseName?: string | undefined;
    /** 是否补录 */
    isReplenish: number;
    /** 是否归档 */
    isArchive: number;
}

/** Reponse */
export class CureRecordViewResult implements ICureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordView[] | undefined;

    constructor(data?: ICureRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureRecordView[] | undefined;
}

/** Reponse */
export class CureRecordViewResultEntry implements ICureRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordView;

    constructor(data?: ICureRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureRecordView;
}

/** 透析排床 */
export class CureSchedule implements ICureSchedule {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](透析班次) */
    cureShiftId?: string | undefined;
    /** [透析床位标识](透析床位) */
    deptDialysisBedId?: string | undefined;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 排床院区 */
    sysHospitalAreaId?: string | undefined;
    patients?: Patient;
    cureShifts?: CureShift;
    deptDialysisBeds?: DeptDialysisBed;

    constructor(data?: ICureSchedule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisMode = _data["dialysisMode"];
            this.cureShiftId = _data["cureShiftId"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.color = _data["color"];
            this.fontColor = _data["fontColor"];
            this.icon = _data["icon"];
            this.cureRecordId = _data["cureRecordId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
            this.cureShifts = _data["cureShifts"] ? CureShift.fromJS(_data["cureShifts"]) : <any>undefined;
            this.deptDialysisBeds = _data["deptDialysisBeds"] ? DeptDialysisBed.fromJS(_data["deptDialysisBeds"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureSchedule {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchedule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["dialysisMode"] = this.dialysisMode;
        data["cureShiftId"] = this.cureShiftId;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["color"] = this.color;
        data["fontColor"] = this.fontColor;
        data["icon"] = this.icon;
        data["cureRecordId"] = this.cureRecordId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        data["cureShifts"] = this.cureShifts ? this.cureShifts.toJSON() : <any>undefined;
        data["deptDialysisBeds"] = this.deptDialysisBeds ? this.deptDialysisBeds.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析排床 */
export interface ICureSchedule {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](透析班次) */
    cureShiftId?: string | undefined;
    /** [透析床位标识](透析床位) */
    deptDialysisBedId?: string | undefined;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 排床院区 */
    sysHospitalAreaId?: string | undefined;
    patients?: Patient;
    cureShifts?: CureShift;
    deptDialysisBeds?: DeptDialysisBed;
}

/** 透析排床耗材 */
export class CureScheduleConsumable implements ICureScheduleConsumable {
    /** 标识 */
    id?: string | undefined;
    /** [透析排床标识](透析排床) */
    cureScheduleId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 耗材数量 */
    count?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureSchedules?: CureSchedule;
    roomItemLists?: RoomItemList;

    constructor(data?: ICureScheduleConsumable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureScheduleId = _data["cureScheduleId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureSchedules = _data["cureSchedules"] ? CureSchedule.fromJS(_data["cureSchedules"]) : <any>undefined;
            this.roomItemLists = _data["roomItemLists"] ? RoomItemList.fromJS(_data["roomItemLists"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheduleConsumable {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleConsumable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureScheduleId"] = this.cureScheduleId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["cureSchedules"] = this.cureSchedules ? this.cureSchedules.toJSON() : <any>undefined;
        data["roomItemLists"] = this.roomItemLists ? this.roomItemLists.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析排床耗材 */
export interface ICureScheduleConsumable {
    /** 标识 */
    id?: string | undefined;
    /** [透析排床标识](透析排床) */
    cureScheduleId?: string | undefined;
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 耗材数量 */
    count?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureSchedules?: CureSchedule;
    roomItemLists?: RoomItemList;
}

/** Reponse */
export class CureScheduleConsumableResult implements ICureScheduleConsumableResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleConsumable[] | undefined;

    constructor(data?: ICureScheduleConsumableResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureScheduleConsumable.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleConsumableResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleConsumableResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureScheduleConsumableResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleConsumable[] | undefined;
}

/** Reponse */
export class CureScheduleConsumableResultEntry implements ICureScheduleConsumableResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheduleConsumable;

    constructor(data?: ICureScheduleConsumableResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureScheduleConsumable.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheduleConsumableResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleConsumableResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureScheduleConsumableResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheduleConsumable;
}

/** 透析排床耗材 (ViewModel) */
export class CureScheduleConsumableViewModel implements ICureScheduleConsumableViewModel {
    /** [透析排床标识](透析排床Id) */
    cureScheduleId!: string;
    /** 耗材分类代码 */
    roomItemTypeCode!: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ICureScheduleConsumableViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureScheduleId = _data["cureScheduleId"];
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): CureScheduleConsumableViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleConsumableViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureScheduleId"] = this.cureScheduleId;
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["remark"] = this.remark;
        return data;
    }
}

/** 透析排床耗材 (ViewModel) */
export interface ICureScheduleConsumableViewModel {
    /** [透析排床标识](透析排床Id) */
    cureScheduleId: string;
    /** 耗材分类代码 */
    roomItemTypeCode: string;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 透析排床 */
export class CureScheduleDetailView implements ICureScheduleDetailView {
    /** 班次 */
    sysHospitalAreas?: SysHospitalArea[] | undefined;
    /** 透析区间 */
    deptDialysisAreas?: DeptDialysisArea[] | undefined;
    /** 班次 */
    cureShifts?: CureShift[] | undefined;
    /** 患者排床透析区间信息 */
    dialysisItems?: CureDialysisItem[] | undefined;

    constructor(data?: ICureScheduleDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sysHospitalAreas"])) {
                this.sysHospitalAreas = [] as any;
                for (let item of _data["sysHospitalAreas"])
                    this.sysHospitalAreas!.push(SysHospitalArea.fromJS(item));
            }
            if (Array.isArray(_data["deptDialysisAreas"])) {
                this.deptDialysisAreas = [] as any;
                for (let item of _data["deptDialysisAreas"])
                    this.deptDialysisAreas!.push(DeptDialysisArea.fromJS(item));
            }
            if (Array.isArray(_data["cureShifts"])) {
                this.cureShifts = [] as any;
                for (let item of _data["cureShifts"])
                    this.cureShifts!.push(CureShift.fromJS(item));
            }
            if (Array.isArray(_data["dialysisItems"])) {
                this.dialysisItems = [] as any;
                for (let item of _data["dialysisItems"])
                    this.dialysisItems!.push(CureDialysisItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sysHospitalAreas)) {
            data["sysHospitalAreas"] = [];
            for (let item of this.sysHospitalAreas)
                data["sysHospitalAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.deptDialysisAreas)) {
            data["deptDialysisAreas"] = [];
            for (let item of this.deptDialysisAreas)
                data["deptDialysisAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.cureShifts)) {
            data["cureShifts"] = [];
            for (let item of this.cureShifts)
                data["cureShifts"].push(item.toJSON());
        }
        if (Array.isArray(this.dialysisItems)) {
            data["dialysisItems"] = [];
            for (let item of this.dialysisItems)
                data["dialysisItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析排床 */
export interface ICureScheduleDetailView {
    /** 班次 */
    sysHospitalAreas?: SysHospitalArea[] | undefined;
    /** 透析区间 */
    deptDialysisAreas?: DeptDialysisArea[] | undefined;
    /** 班次 */
    cureShifts?: CureShift[] | undefined;
    /** 患者排床透析区间信息 */
    dialysisItems?: CureDialysisItem[] | undefined;
}

/** Reponse */
export class CureScheduleDetailViewResultEntry implements ICureScheduleDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheduleDetailView;

    constructor(data?: ICureScheduleDetailViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureScheduleDetailView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheduleDetailViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDetailViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureScheduleDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheduleDetailView;
}

export class CureScheduleDetailViewSupper implements ICureScheduleDetailViewSupper {
    dialysis?: CureDialysisItem;
    bed?: CureBedItem;
    shift?: CurePatient;
    monday?: CureBedPatientDetail;
    tuesday?: CureBedPatientDetail;
    wednesday?: CureBedPatientDetail;
    thursday?: CureBedPatientDetail;
    friday?: CureBedPatientDetail;
    saturday?: CureBedPatientDetail;
    sunday?: CureBedPatientDetail;

    constructor(data?: ICureScheduleDetailViewSupper) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysis = _data["dialysis"] ? CureDialysisItem.fromJS(_data["dialysis"]) : <any>undefined;
            this.bed = _data["bed"] ? CureBedItem.fromJS(_data["bed"]) : <any>undefined;
            this.shift = _data["shift"] ? CurePatient.fromJS(_data["shift"]) : <any>undefined;
            this.monday = _data["monday"] ? CureBedPatientDetail.fromJS(_data["monday"]) : <any>undefined;
            this.tuesday = _data["tuesday"] ? CureBedPatientDetail.fromJS(_data["tuesday"]) : <any>undefined;
            this.wednesday = _data["wednesday"] ? CureBedPatientDetail.fromJS(_data["wednesday"]) : <any>undefined;
            this.thursday = _data["thursday"] ? CureBedPatientDetail.fromJS(_data["thursday"]) : <any>undefined;
            this.friday = _data["friday"] ? CureBedPatientDetail.fromJS(_data["friday"]) : <any>undefined;
            this.saturday = _data["saturday"] ? CureBedPatientDetail.fromJS(_data["saturday"]) : <any>undefined;
            this.sunday = _data["sunday"] ? CureBedPatientDetail.fromJS(_data["sunday"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheduleDetailViewSupper {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDetailViewSupper();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysis"] = this.dialysis ? this.dialysis.toJSON() : <any>undefined;
        data["bed"] = this.bed ? this.bed.toJSON() : <any>undefined;
        data["shift"] = this.shift ? this.shift.toJSON() : <any>undefined;
        data["monday"] = this.monday ? this.monday.toJSON() : <any>undefined;
        data["tuesday"] = this.tuesday ? this.tuesday.toJSON() : <any>undefined;
        data["wednesday"] = this.wednesday ? this.wednesday.toJSON() : <any>undefined;
        data["thursday"] = this.thursday ? this.thursday.toJSON() : <any>undefined;
        data["friday"] = this.friday ? this.friday.toJSON() : <any>undefined;
        data["saturday"] = this.saturday ? this.saturday.toJSON() : <any>undefined;
        data["sunday"] = this.sunday ? this.sunday.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICureScheduleDetailViewSupper {
    dialysis?: CureDialysisItem;
    bed?: CureBedItem;
    shift?: CurePatient;
    monday?: CureBedPatientDetail;
    tuesday?: CureBedPatientDetail;
    wednesday?: CureBedPatientDetail;
    thursday?: CureBedPatientDetail;
    friday?: CureBedPatientDetail;
    saturday?: CureBedPatientDetail;
    sunday?: CureBedPatientDetail;
}

/** Reponse */
export class CureScheduleDetailViewSupperResult implements ICureScheduleDetailViewSupperResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleDetailViewSupper[] | undefined;

    constructor(data?: ICureScheduleDetailViewSupperResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureScheduleDetailViewSupper.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleDetailViewSupperResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDetailViewSupperResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureScheduleDetailViewSupperResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleDetailViewSupper[] | undefined;
}

/** 透析排床明细拖动 */
export class CureScheduleDragEditModel implements ICureScheduleDragEditModel {
    from?: CureUpdateItemModel;
    to?: CureUpdateItemModel;
    /** 原因 *如果是因为故障，反写到设备上* */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 换床 */
    bedAllocation?: number;

    constructor(data?: ICureScheduleDragEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from = _data["from"] ? CureUpdateItemModel.fromJS(_data["from"]) : <any>undefined;
            this.to = _data["to"] ? CureUpdateItemModel.fromJS(_data["to"]) : <any>undefined;
            this.cause = _data["cause"];
            this.remark = _data["remark"];
            this.bedAllocation = _data["bedAllocation"];
        }
    }

    static fromJS(data: any): CureScheduleDragEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleDragEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from ? this.from.toJSON() : <any>undefined;
        data["to"] = this.to ? this.to.toJSON() : <any>undefined;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        data["bedAllocation"] = this.bedAllocation;
        return data;
    }
}

/** 透析排床明细拖动 */
export interface ICureScheduleDragEditModel {
    from?: CureUpdateItemModel;
    to?: CureUpdateItemModel;
    /** 原因 *如果是因为故障，反写到设备上* */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 换床 */
    bedAllocation?: number;
}

export class CureScheduleEditModel implements ICureScheduleEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 透析日期 */
    dialysisDate!: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](#透析班次) */
    cureShiftId!: string;
    /** [透析床位标识](#透析床位) */
    deptDialysisBedId!: string;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 排床院区 */
    sysHospitalAreaId!: string;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;

    constructor(data?: ICureScheduleEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.dialysisMode = _data["dialysisMode"];
            this.cureShiftId = _data["cureShiftId"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.color = _data["color"];
            this.icon = _data["icon"];
            this.cureRecordId = _data["cureRecordId"];
            this.remark = _data["remark"];
            this.fontColor = _data["fontColor"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(RoomRecordItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["dialysisMode"] = this.dialysisMode;
        data["cureShiftId"] = this.cureShiftId;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["color"] = this.color;
        data["icon"] = this.icon;
        data["cureRecordId"] = this.cureRecordId;
        data["remark"] = this.remark;
        data["fontColor"] = this.fontColor;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICureScheduleEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 透析日期 */
    dialysisDate: dayjs.Dayjs;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** [透析班次标识](#透析班次) */
    cureShiftId: string;
    /** [透析床位标识](#透析床位) */
    deptDialysisBedId: string;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 透析记录标识 *签到时生成* */
    cureRecordId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 排床院区 */
    sysHospitalAreaId: string;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;
}

export class CureScheduleRecordView implements ICureScheduleRecordView {
    /** 用户标识 */
    id?: string | undefined;
    /** [医生标识](用户信息) */
    userId?: string | undefined;
    /** 用户姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次简称 */
    shiftShortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureScheduleRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.shiftShortName = _data["shiftShortName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheduleRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["shiftShortName"] = this.shiftShortName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface ICureScheduleRecordView {
    /** 用户标识 */
    id?: string | undefined;
    /** [医生标识](用户信息) */
    userId?: string | undefined;
    /** 用户姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次简称 */
    shiftShortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureScheduleRecordViewResult implements ICureScheduleRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleRecordView[] | undefined;

    constructor(data?: ICureScheduleRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureScheduleRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureScheduleRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleRecordView[] | undefined;
}

export class CureScheduleSaveEditModel implements ICureScheduleSaveEditModel {
    /** 模板标识 */
    tmplId!: string;
    /** 科室标识 */
    arearId!: string;
    /** 日期(eg. 2018/11/26 ~ 2018/12/02) */
    date!: string;

    constructor(data?: ICureScheduleSaveEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tmplId = _data["tmplId"];
            this.arearId = _data["arearId"];
            this.date = _data["date"];
        }
    }

    static fromJS(data: any): CureScheduleSaveEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleSaveEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tmplId"] = this.tmplId;
        data["arearId"] = this.arearId;
        data["date"] = this.date;
        return data;
    }
}

export interface ICureScheduleSaveEditModel {
    /** 模板标识 */
    tmplId: string;
    /** 科室标识 */
    arearId: string;
    /** 日期(eg. 2018/11/26 ~ 2018/12/02) */
    date: string;
}

/** 透析排班 */
export class CureScheduleShiftView implements ICureScheduleShiftView {
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者标签（阴/阳） */
    positive?: number | undefined;
    /** 排班详情 */
    items?: WeekItem[] | undefined;

    constructor(data?: ICureScheduleShiftView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.positive = _data["positive"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(WeekItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleShiftView {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleShiftView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["positive"] = this.positive;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析排班 */
export interface ICureScheduleShiftView {
    /** 患者标识 */
    patientId?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者标签（阴/阳） */
    positive?: number | undefined;
    /** 排班详情 */
    items?: WeekItem[] | undefined;
}

/** Reponse */
export class CureScheduleShiftViewResult implements ICureScheduleShiftViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleShiftView[] | undefined;

    constructor(data?: ICureScheduleShiftViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureScheduleShiftView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureScheduleShiftViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheduleShiftViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureScheduleShiftViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheduleShiftView[] | undefined;
}

/** 治疗方案 */
export class CureScheme implements ICureScheme {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 频率 *1按日,2按周* */
    frequency?: number;
    /** 周期 */
    period?: number;
    /** 次数 *按日:1,按周:2* */
    count?: number;
    /** 首次透析日期 *当频率按日需要使用* */
    firstDialysisDate?: dayjs.Dayjs | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: ICureScheme) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.dialysisMode = _data["dialysisMode"];
            this.frequency = _data["frequency"];
            this.period = _data["period"];
            this.count = _data["count"];
            this.firstDialysisDate = _data["firstDialysisDate"] ? dayjs(_data["firstDialysisDate"].toString()) : <any>undefined;
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureScheme {
        data = typeof data === 'object' ? data : {};
        let result = new CureScheme();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["dialysisMode"] = this.dialysisMode;
        data["frequency"] = this.frequency;
        data["period"] = this.period;
        data["count"] = this.count;
        data["firstDialysisDate"] = this.firstDialysisDate ? this.firstDialysisDate.toLocaleString() : <any>undefined;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 治疗方案 */
export interface ICureScheme {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析方式 */
    dialysisMode?: string | undefined;
    /** 频率 *1按日,2按周* */
    frequency?: number;
    /** 周期 */
    period?: number;
    /** 次数 *按日:1,按周:2* */
    count?: number;
    /** 首次透析日期 *当频率按日需要使用* */
    firstDialysisDate?: dayjs.Dayjs | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** Reponse */
export class CureSchemeResult implements ICureSchemeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheme[] | undefined;

    constructor(data?: ICureSchemeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureScheme.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureSchemeResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchemeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureSchemeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureScheme[] | undefined;
}

/** Reponse */
export class CureSchemeResultEntry implements ICureSchemeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheme;

    constructor(data?: ICureSchemeResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureScheme.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureSchemeResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchemeResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureSchemeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureScheme;
}

/** 治疗方案 (ViewModel) */
export class CureSchemeViewModel implements ICureSchemeViewModel {
    /** [患者标识](患者信息Id) */
    patientId!: string;
    /** 透析方式 */
    dialysisMode!: string;
    /** 频率 *1按日,2按周* */
    frequency!: number;
    /** 周期 */
    period!: number;
    /** 次数 *按日:1,按周:2* */
    count!: number;
    /** 首次透析日期 *当频率按日需要使用* */
    firstDialysisDate?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: ICureSchemeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.dialysisMode = _data["dialysisMode"];
            this.frequency = _data["frequency"];
            this.period = _data["period"];
            this.count = _data["count"];
            this.firstDialysisDate = _data["firstDialysisDate"] ? dayjs(_data["firstDialysisDate"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): CureSchemeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureSchemeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["dialysisMode"] = this.dialysisMode;
        data["frequency"] = this.frequency;
        data["period"] = this.period;
        data["count"] = this.count;
        data["firstDialysisDate"] = this.firstDialysisDate ? this.firstDialysisDate.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 治疗方案 (ViewModel) */
export interface ICureSchemeViewModel {
    /** [患者标识](患者信息Id) */
    patientId: string;
    /** 透析方式 */
    dialysisMode: string;
    /** 频率 *1按日,2按周* */
    frequency: number;
    /** 周期 */
    period: number;
    /** 次数 *按日:1,按周:2* */
    count: number;
    /** 首次透析日期 *当频率按日需要使用* */
    firstDialysisDate?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 透析班次 */
export class CureShift implements ICureShift {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endDate?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ICureShift) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.beginTime = _data["beginTime"];
            this.endDate = _data["endDate"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CureShift {
        data = typeof data === 'object' ? data : {};
        let result = new CureShift();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["beginTime"] = this.beginTime;
        data["endDate"] = this.endDate;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透析班次 */
export interface ICureShift {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 *○不允许重复* */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    beginTime?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    endDate?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class CureShiftResult implements ICureShiftResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureShift[] | undefined;

    constructor(data?: ICureShiftResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureShift.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureShiftResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureShiftResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureShiftResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureShift[] | undefined;
}

/** Reponse */
export class CureShiftResultEntry implements ICureShiftResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureShift;

    constructor(data?: ICureShiftResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureShift.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureShiftResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureShiftResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureShiftResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureShift;
}

/** 透析班次 (ViewModel) */
export class CureShiftViewModel implements ICureShiftViewModel {
    /** 名称 *○不允许重复* */
    name!: string;
    /** 简称 *○不允许重复* */
    shortName!: string;
    /** 开始时间 *HH:mm:ss* */
    beginTime!: string;
    /** 结束时间 *HH:mm:ss* */
    endDate!: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: ICureShiftViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.beginTime = _data["beginTime"];
            this.endDate = _data["endDate"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): CureShiftViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureShiftViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["beginTime"] = this.beginTime;
        data["endDate"] = this.endDate;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 透析班次 (ViewModel) */
export interface ICureShiftViewModel {
    /** 名称 *○不允许重复* */
    name: string;
    /** 简称 *○不允许重复* */
    shortName: string;
    /** 开始时间 *HH:mm:ss* */
    beginTime: string;
    /** 结束时间 *HH:mm:ss* */
    endDate: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 体温记录单明细 */
export class CureTemperatureRecordDetailEditModel implements ICureTemperatureRecordDetailEditModel {
    /** [体温记录单标识](#体温记录单信息) */
    cureTemperatureRecordId!: string;
    /** 记录日期 */
    recordDate!: dayjs.Dayjs;
    /** 脉搏测量时间 */
    pulseTime?: dayjs.Dayjs | undefined;
    /** 脉搏 */
    pulse?: number | undefined;
    /** 体温测量时间 */
    temperatureTime?: dayjs.Dayjs | undefined;
    /** 体温 */
    temperature?: number | undefined;
    /** 疼痛评估时间 */
    painTime?: dayjs.Dayjs | undefined;
    /** 疼痛级别 */
    pain?: number | undefined;
    /** 呼吸测量时间 */
    breatheTime?: dayjs.Dayjs | undefined;
    /** 呼吸 */
    breathe?: number | undefined;
    /** 大便次数 */
    poop?: number | undefined;
    /** 尿量ml */
    pee?: number | undefined;
    /** 痰量ml */
    sputum?: number | undefined;
    /** 引流量ml */
    diversion?: number | undefined;
    /** 呕吐量ml */
    vomit?: number | undefined;
    /** 总量ml */
    total?: number | undefined;
    /** 入量ml */
    input?: number | undefined;
    /** BMR(%) */
    bmr?: number | undefined;
    /** 早班收缩压 */
    amSbp?: number | undefined;
    /** 早班舒张压 */
    amDbp?: number | undefined;
    /** 中班收缩压 */
    pmSbp?: number | undefined;
    /** 中班舒张压 */
    pmDbp?: number | undefined;
    /** 体重kg */
    weight?: string | undefined;
    /** 手术后天数 */
    surgeryDays?: number | undefined;
    /** 分娩后天数 */
    childbirthDays?: number | undefined;
    /** 住院天数 */
    hospitalizedDays?: number | undefined;
    /** 患者状态 */
    cureTempDetailStatus?: CureTemperatureRecordDetailStatusEditModel[] | undefined;

    constructor(data?: ICureTemperatureRecordDetailEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureTemperatureRecordId = _data["cureTemperatureRecordId"];
            this.recordDate = _data["recordDate"] ? dayjs(_data["recordDate"].toString()) : <any>undefined;
            this.pulseTime = _data["pulseTime"] ? dayjs(_data["pulseTime"].toString()) : <any>undefined;
            this.pulse = _data["pulse"];
            this.temperatureTime = _data["temperatureTime"] ? dayjs(_data["temperatureTime"].toString()) : <any>undefined;
            this.temperature = _data["temperature"];
            this.painTime = _data["painTime"] ? dayjs(_data["painTime"].toString()) : <any>undefined;
            this.pain = _data["pain"];
            this.breatheTime = _data["breatheTime"] ? dayjs(_data["breatheTime"].toString()) : <any>undefined;
            this.breathe = _data["breathe"];
            this.poop = _data["poop"];
            this.pee = _data["pee"];
            this.sputum = _data["sputum"];
            this.diversion = _data["diversion"];
            this.vomit = _data["vomit"];
            this.total = _data["total"];
            this.input = _data["input"];
            this.bmr = _data["bmr"];
            this.amSbp = _data["amSbp"];
            this.amDbp = _data["amDbp"];
            this.pmSbp = _data["pmSbp"];
            this.pmDbp = _data["pmDbp"];
            this.weight = _data["weight"];
            this.surgeryDays = _data["surgeryDays"];
            this.childbirthDays = _data["childbirthDays"];
            this.hospitalizedDays = _data["hospitalizedDays"];
            if (Array.isArray(_data["cureTempDetailStatus"])) {
                this.cureTempDetailStatus = [] as any;
                for (let item of _data["cureTempDetailStatus"])
                    this.cureTempDetailStatus!.push(CureTemperatureRecordDetailStatusEditModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureTemperatureRecordId"] = this.cureTemperatureRecordId;
        data["recordDate"] = this.recordDate ? this.recordDate.toLocaleString() : <any>undefined;
        data["pulseTime"] = this.pulseTime ? this.pulseTime.toLocaleString() : <any>undefined;
        data["pulse"] = this.pulse;
        data["temperatureTime"] = this.temperatureTime ? this.temperatureTime.toLocaleString() : <any>undefined;
        data["temperature"] = this.temperature;
        data["painTime"] = this.painTime ? this.painTime.toLocaleString() : <any>undefined;
        data["pain"] = this.pain;
        data["breatheTime"] = this.breatheTime ? this.breatheTime.toLocaleString() : <any>undefined;
        data["breathe"] = this.breathe;
        data["poop"] = this.poop;
        data["pee"] = this.pee;
        data["sputum"] = this.sputum;
        data["diversion"] = this.diversion;
        data["vomit"] = this.vomit;
        data["total"] = this.total;
        data["input"] = this.input;
        data["bmr"] = this.bmr;
        data["amSbp"] = this.amSbp;
        data["amDbp"] = this.amDbp;
        data["pmSbp"] = this.pmSbp;
        data["pmDbp"] = this.pmDbp;
        data["weight"] = this.weight;
        data["surgeryDays"] = this.surgeryDays;
        data["childbirthDays"] = this.childbirthDays;
        data["hospitalizedDays"] = this.hospitalizedDays;
        if (Array.isArray(this.cureTempDetailStatus)) {
            data["cureTempDetailStatus"] = [];
            for (let item of this.cureTempDetailStatus)
                data["cureTempDetailStatus"].push(item.toJSON());
        }
        return data;
    }
}

/** 体温记录单明细 */
export interface ICureTemperatureRecordDetailEditModel {
    /** [体温记录单标识](#体温记录单信息) */
    cureTemperatureRecordId: string;
    /** 记录日期 */
    recordDate: dayjs.Dayjs;
    /** 脉搏测量时间 */
    pulseTime?: dayjs.Dayjs | undefined;
    /** 脉搏 */
    pulse?: number | undefined;
    /** 体温测量时间 */
    temperatureTime?: dayjs.Dayjs | undefined;
    /** 体温 */
    temperature?: number | undefined;
    /** 疼痛评估时间 */
    painTime?: dayjs.Dayjs | undefined;
    /** 疼痛级别 */
    pain?: number | undefined;
    /** 呼吸测量时间 */
    breatheTime?: dayjs.Dayjs | undefined;
    /** 呼吸 */
    breathe?: number | undefined;
    /** 大便次数 */
    poop?: number | undefined;
    /** 尿量ml */
    pee?: number | undefined;
    /** 痰量ml */
    sputum?: number | undefined;
    /** 引流量ml */
    diversion?: number | undefined;
    /** 呕吐量ml */
    vomit?: number | undefined;
    /** 总量ml */
    total?: number | undefined;
    /** 入量ml */
    input?: number | undefined;
    /** BMR(%) */
    bmr?: number | undefined;
    /** 早班收缩压 */
    amSbp?: number | undefined;
    /** 早班舒张压 */
    amDbp?: number | undefined;
    /** 中班收缩压 */
    pmSbp?: number | undefined;
    /** 中班舒张压 */
    pmDbp?: number | undefined;
    /** 体重kg */
    weight?: string | undefined;
    /** 手术后天数 */
    surgeryDays?: number | undefined;
    /** 分娩后天数 */
    childbirthDays?: number | undefined;
    /** 住院天数 */
    hospitalizedDays?: number | undefined;
    /** 患者状态 */
    cureTempDetailStatus?: CureTemperatureRecordDetailStatusEditModel[] | undefined;
}

/** 体温记录单明细患者状态 */
export class CureTemperatureRecordDetailStatusEditModel implements ICureTemperatureRecordDetailStatusEditModel {
    /** [体温记录单明细标识](#体温记录单明细信息) */
    cureTemperatureRecordDetailId!: string;
    /** 记录时间 */
    statusTime!: dayjs.Dayjs;
    /** 患者状态 */
    patientStatus!: string;
    /** 标识 */
    id?: string | undefined;

    constructor(data?: ICureTemperatureRecordDetailStatusEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureTemperatureRecordDetailId = _data["cureTemperatureRecordDetailId"];
            this.statusTime = _data["statusTime"] ? dayjs(_data["statusTime"].toString()) : <any>undefined;
            this.patientStatus = _data["patientStatus"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailStatusEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailStatusEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureTemperatureRecordDetailId"] = this.cureTemperatureRecordDetailId;
        data["statusTime"] = this.statusTime ? this.statusTime.toLocaleString() : <any>undefined;
        data["patientStatus"] = this.patientStatus;
        data["id"] = this.id;
        return data;
    }
}

/** 体温记录单明细患者状态 */
export interface ICureTemperatureRecordDetailStatusEditModel {
    /** [体温记录单明细标识](#体温记录单明细信息) */
    cureTemperatureRecordDetailId: string;
    /** 记录时间 */
    statusTime: dayjs.Dayjs;
    /** 患者状态 */
    patientStatus: string;
    /** 标识 */
    id?: string | undefined;
}

/** 体温记录单明细患者状态 */
export class CureTemperatureRecordDetailStatusView implements ICureTemperatureRecordDetailStatusView {
    /** [体温记录单明细标识](#体温记录单明细信息) */
    cureTemperatureRecordDetailId!: string;
    /** 记录时间 */
    statusTime!: dayjs.Dayjs;
    /** 患者状态 */
    patientStatus!: string;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 打印显示的内容 */
    printStatus?: string | undefined;

    constructor(data?: ICureTemperatureRecordDetailStatusView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureTemperatureRecordDetailId = _data["cureTemperatureRecordDetailId"];
            this.statusTime = _data["statusTime"] ? dayjs(_data["statusTime"].toString()) : <any>undefined;
            this.patientStatus = _data["patientStatus"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.printStatus = _data["printStatus"];
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailStatusView {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailStatusView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureTemperatureRecordDetailId"] = this.cureTemperatureRecordDetailId;
        data["statusTime"] = this.statusTime ? this.statusTime.toLocaleString() : <any>undefined;
        data["patientStatus"] = this.patientStatus;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["printStatus"] = this.printStatus;
        return data;
    }
}

/** 体温记录单明细患者状态 */
export interface ICureTemperatureRecordDetailStatusView {
    /** [体温记录单明细标识](#体温记录单明细信息) */
    cureTemperatureRecordDetailId: string;
    /** 记录时间 */
    statusTime: dayjs.Dayjs;
    /** 患者状态 */
    patientStatus: string;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 打印显示的内容 */
    printStatus?: string | undefined;
}

/** Reponse */
export class CureTemperatureRecordDetailStatusViewResult implements ICureTemperatureRecordDetailStatusViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemperatureRecordDetailStatusView[] | undefined;

    constructor(data?: ICureTemperatureRecordDetailStatusViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureTemperatureRecordDetailStatusView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailStatusViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailStatusViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureTemperatureRecordDetailStatusViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemperatureRecordDetailStatusView[] | undefined;
}

/** Reponse */
export class CureTemperatureRecordDetailStatusViewResultEntry implements ICureTemperatureRecordDetailStatusViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureTemperatureRecordDetailStatusView;

    constructor(data?: ICureTemperatureRecordDetailStatusViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureTemperatureRecordDetailStatusView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailStatusViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailStatusViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureTemperatureRecordDetailStatusViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureTemperatureRecordDetailStatusView;
}

/** 体温记录单明细 */
export class CureTemperatureRecordDetailView implements ICureTemperatureRecordDetailView {
    /** [体温记录单标识](#体温记录单信息) */
    cureTemperatureRecordId!: string;
    /** 记录日期 */
    recordDate!: dayjs.Dayjs;
    /** 脉搏测量时间 */
    pulseTime?: dayjs.Dayjs | undefined;
    /** 脉搏 */
    pulse?: number | undefined;
    /** 体温测量时间 */
    temperatureTime?: dayjs.Dayjs | undefined;
    /** 体温 */
    temperature?: number | undefined;
    /** 疼痛评估时间 */
    painTime?: dayjs.Dayjs | undefined;
    /** 疼痛级别 */
    pain?: number | undefined;
    /** 呼吸测量时间 */
    breatheTime?: dayjs.Dayjs | undefined;
    /** 呼吸 */
    breathe?: number | undefined;
    /** 大便次数 */
    poop?: number | undefined;
    /** 尿量ml */
    pee?: number | undefined;
    /** 痰量ml */
    sputum?: number | undefined;
    /** 引流量ml */
    diversion?: number | undefined;
    /** 呕吐量ml */
    vomit?: number | undefined;
    /** 总量ml */
    total?: number | undefined;
    /** 入量ml */
    input?: number | undefined;
    /** BMR(%) */
    bmr?: number | undefined;
    /** 早班收缩压 */
    amSbp?: number | undefined;
    /** 早班舒张压 */
    amDbp?: number | undefined;
    /** 中班收缩压 */
    pmSbp?: number | undefined;
    /** 中班舒张压 */
    pmDbp?: number | undefined;
    /** 体重kg */
    weight?: string | undefined;
    /** 手术后天数 */
    surgeryDays?: number | undefined;
    /** 分娩后天数 */
    childbirthDays?: number | undefined;
    /** 住院天数 */
    hospitalizedDays?: number | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者状态 */
    cureTempDetailStatus?: CureTemperatureRecordDetailStatusView[] | undefined;

    constructor(data?: ICureTemperatureRecordDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureTemperatureRecordId = _data["cureTemperatureRecordId"];
            this.recordDate = _data["recordDate"] ? dayjs(_data["recordDate"].toString()) : <any>undefined;
            this.pulseTime = _data["pulseTime"] ? dayjs(_data["pulseTime"].toString()) : <any>undefined;
            this.pulse = _data["pulse"];
            this.temperatureTime = _data["temperatureTime"] ? dayjs(_data["temperatureTime"].toString()) : <any>undefined;
            this.temperature = _data["temperature"];
            this.painTime = _data["painTime"] ? dayjs(_data["painTime"].toString()) : <any>undefined;
            this.pain = _data["pain"];
            this.breatheTime = _data["breatheTime"] ? dayjs(_data["breatheTime"].toString()) : <any>undefined;
            this.breathe = _data["breathe"];
            this.poop = _data["poop"];
            this.pee = _data["pee"];
            this.sputum = _data["sputum"];
            this.diversion = _data["diversion"];
            this.vomit = _data["vomit"];
            this.total = _data["total"];
            this.input = _data["input"];
            this.bmr = _data["bmr"];
            this.amSbp = _data["amSbp"];
            this.amDbp = _data["amDbp"];
            this.pmSbp = _data["pmSbp"];
            this.pmDbp = _data["pmDbp"];
            this.weight = _data["weight"];
            this.surgeryDays = _data["surgeryDays"];
            this.childbirthDays = _data["childbirthDays"];
            this.hospitalizedDays = _data["hospitalizedDays"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["cureTempDetailStatus"])) {
                this.cureTempDetailStatus = [] as any;
                for (let item of _data["cureTempDetailStatus"])
                    this.cureTempDetailStatus!.push(CureTemperatureRecordDetailStatusView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureTemperatureRecordId"] = this.cureTemperatureRecordId;
        data["recordDate"] = this.recordDate ? this.recordDate.toLocaleString() : <any>undefined;
        data["pulseTime"] = this.pulseTime ? this.pulseTime.toLocaleString() : <any>undefined;
        data["pulse"] = this.pulse;
        data["temperatureTime"] = this.temperatureTime ? this.temperatureTime.toLocaleString() : <any>undefined;
        data["temperature"] = this.temperature;
        data["painTime"] = this.painTime ? this.painTime.toLocaleString() : <any>undefined;
        data["pain"] = this.pain;
        data["breatheTime"] = this.breatheTime ? this.breatheTime.toLocaleString() : <any>undefined;
        data["breathe"] = this.breathe;
        data["poop"] = this.poop;
        data["pee"] = this.pee;
        data["sputum"] = this.sputum;
        data["diversion"] = this.diversion;
        data["vomit"] = this.vomit;
        data["total"] = this.total;
        data["input"] = this.input;
        data["bmr"] = this.bmr;
        data["amSbp"] = this.amSbp;
        data["amDbp"] = this.amDbp;
        data["pmSbp"] = this.pmSbp;
        data["pmDbp"] = this.pmDbp;
        data["weight"] = this.weight;
        data["surgeryDays"] = this.surgeryDays;
        data["childbirthDays"] = this.childbirthDays;
        data["hospitalizedDays"] = this.hospitalizedDays;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        if (Array.isArray(this.cureTempDetailStatus)) {
            data["cureTempDetailStatus"] = [];
            for (let item of this.cureTempDetailStatus)
                data["cureTempDetailStatus"].push(item.toJSON());
        }
        return data;
    }
}

/** 体温记录单明细 */
export interface ICureTemperatureRecordDetailView {
    /** [体温记录单标识](#体温记录单信息) */
    cureTemperatureRecordId: string;
    /** 记录日期 */
    recordDate: dayjs.Dayjs;
    /** 脉搏测量时间 */
    pulseTime?: dayjs.Dayjs | undefined;
    /** 脉搏 */
    pulse?: number | undefined;
    /** 体温测量时间 */
    temperatureTime?: dayjs.Dayjs | undefined;
    /** 体温 */
    temperature?: number | undefined;
    /** 疼痛评估时间 */
    painTime?: dayjs.Dayjs | undefined;
    /** 疼痛级别 */
    pain?: number | undefined;
    /** 呼吸测量时间 */
    breatheTime?: dayjs.Dayjs | undefined;
    /** 呼吸 */
    breathe?: number | undefined;
    /** 大便次数 */
    poop?: number | undefined;
    /** 尿量ml */
    pee?: number | undefined;
    /** 痰量ml */
    sputum?: number | undefined;
    /** 引流量ml */
    diversion?: number | undefined;
    /** 呕吐量ml */
    vomit?: number | undefined;
    /** 总量ml */
    total?: number | undefined;
    /** 入量ml */
    input?: number | undefined;
    /** BMR(%) */
    bmr?: number | undefined;
    /** 早班收缩压 */
    amSbp?: number | undefined;
    /** 早班舒张压 */
    amDbp?: number | undefined;
    /** 中班收缩压 */
    pmSbp?: number | undefined;
    /** 中班舒张压 */
    pmDbp?: number | undefined;
    /** 体重kg */
    weight?: string | undefined;
    /** 手术后天数 */
    surgeryDays?: number | undefined;
    /** 分娩后天数 */
    childbirthDays?: number | undefined;
    /** 住院天数 */
    hospitalizedDays?: number | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者状态 */
    cureTempDetailStatus?: CureTemperatureRecordDetailStatusView[] | undefined;
}

/** Reponse */
export class CureTemperatureRecordDetailViewResult implements ICureTemperatureRecordDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemperatureRecordDetailView[] | undefined;

    constructor(data?: ICureTemperatureRecordDetailViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureTemperatureRecordDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureTemperatureRecordDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemperatureRecordDetailView[] | undefined;
}

/** Reponse */
export class CureTemperatureRecordDetailViewResultEntry implements ICureTemperatureRecordDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureTemperatureRecordDetailView;

    constructor(data?: ICureTemperatureRecordDetailViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureTemperatureRecordDetailView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureTemperatureRecordDetailViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordDetailViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureTemperatureRecordDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureTemperatureRecordDetailView;
}

/** 体温记录单 */
export class CureTemperatureRecordEditModel implements ICureTemperatureRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 年龄 */
    age?: number | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 入院日期 */
    admissionDate!: dayjs.Dayjs;
    /** 住院号 */
    hospitalNumber!: string;
    /** 床号 */
    bedNo!: string;

    constructor(data?: ICureTemperatureRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.age = _data["age"];
            this.department = _data["department"];
            this.admissionDate = _data["admissionDate"] ? dayjs(_data["admissionDate"].toString()) : <any>undefined;
            this.hospitalNumber = _data["hospitalNumber"];
            this.bedNo = _data["bedNo"];
        }
    }

    static fromJS(data: any): CureTemperatureRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["age"] = this.age;
        data["department"] = this.department;
        data["admissionDate"] = this.admissionDate ? this.admissionDate.toLocaleString() : <any>undefined;
        data["hospitalNumber"] = this.hospitalNumber;
        data["bedNo"] = this.bedNo;
        return data;
    }
}

/** 体温记录单 */
export interface ICureTemperatureRecordEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 年龄 */
    age?: number | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 入院日期 */
    admissionDate: dayjs.Dayjs;
    /** 住院号 */
    hospitalNumber: string;
    /** 床号 */
    bedNo: string;
}

/** 体温记录单 */
export class CureTemperatureRecordView implements ICureTemperatureRecordView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 年龄 */
    age?: number | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 入院日期 */
    admissionDate!: dayjs.Dayjs;
    /** 住院号 */
    hospitalNumber!: string;
    /** 床号 */
    bedNo!: string;
    /** 标识 */
    id!: string;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别 */
    genderName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 体温单明细 */
    cureTempDetail?: CureTemperatureRecordDetailView[] | undefined;

    constructor(data?: ICureTemperatureRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.age = _data["age"];
            this.department = _data["department"];
            this.admissionDate = _data["admissionDate"] ? dayjs(_data["admissionDate"].toString()) : <any>undefined;
            this.hospitalNumber = _data["hospitalNumber"];
            this.bedNo = _data["bedNo"];
            this.id = _data["id"];
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.genderName = _data["genderName"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["cureTempDetail"])) {
                this.cureTempDetail = [] as any;
                for (let item of _data["cureTempDetail"])
                    this.cureTempDetail!.push(CureTemperatureRecordDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTemperatureRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["age"] = this.age;
        data["department"] = this.department;
        data["admissionDate"] = this.admissionDate ? this.admissionDate.toLocaleString() : <any>undefined;
        data["hospitalNumber"] = this.hospitalNumber;
        data["bedNo"] = this.bedNo;
        data["id"] = this.id;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["genderName"] = this.genderName;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        if (Array.isArray(this.cureTempDetail)) {
            data["cureTempDetail"] = [];
            for (let item of this.cureTempDetail)
                data["cureTempDetail"].push(item.toJSON());
        }
        return data;
    }
}

/** 体温记录单 */
export interface ICureTemperatureRecordView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 年龄 */
    age?: number | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 入院日期 */
    admissionDate: dayjs.Dayjs;
    /** 住院号 */
    hospitalNumber: string;
    /** 床号 */
    bedNo: string;
    /** 标识 */
    id: string;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别 */
    genderName?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 体温单明细 */
    cureTempDetail?: CureTemperatureRecordDetailView[] | undefined;
}

/** Reponse */
export class CureTemperatureRecordViewResult implements ICureTemperatureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemperatureRecordView[] | undefined;

    constructor(data?: ICureTemperatureRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CureTemperatureRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureTemperatureRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ICureTemperatureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: CureTemperatureRecordView[] | undefined;
}

/** Reponse */
export class CureTemperatureRecordViewResultEntry implements ICureTemperatureRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureTemperatureRecordView;

    constructor(data?: ICureTemperatureRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? CureTemperatureRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CureTemperatureRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new CureTemperatureRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ICureTemperatureRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: CureTemperatureRecordView;
}

/** 透析排床明细拖动 - 单元格信息 */
export class CureUpdateItemModel implements ICureUpdateItemModel {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 透析床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 透析排床标识 */
    cureScheduleId?: string | undefined;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;

    constructor(data?: ICureUpdateItemModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.cureScheduleId = _data["cureScheduleId"];
            this.dialysisMode = _data["dialysisMode"];
            this.color = _data["color"];
            this.fontColor = _data["fontColor"];
            this.icon = _data["icon"];
            if (Array.isArray(_data["cureCostGroups"])) {
                this.cureCostGroups = [] as any;
                for (let item of _data["cureCostGroups"])
                    this.cureCostGroups!.push(RoomRecordItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CureUpdateItemModel {
        data = typeof data === 'object' ? data : {};
        let result = new CureUpdateItemModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["cureScheduleId"] = this.cureScheduleId;
        data["dialysisMode"] = this.dialysisMode;
        data["color"] = this.color;
        data["fontColor"] = this.fontColor;
        data["icon"] = this.icon;
        if (Array.isArray(this.cureCostGroups)) {
            data["cureCostGroups"] = [];
            for (let item of this.cureCostGroups)
                data["cureCostGroups"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析排床明细拖动 - 单元格信息 */
export interface ICureUpdateItemModel {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次标识 */
    shiftId?: string | undefined;
    /** 透析床位标识 */
    deptDialysisBedId?: string | undefined;
    /** 透析排床标识 */
    cureScheduleId?: string | undefined;
    /** `DIC.DIALYSIS.MODE` 透析方式 *字典值* */
    dialysisMode?: string | undefined;
    /** 背景颜色 `DIC.SYS.COLOR` 可自定义字体颜色 */
    color?: string | undefined;
    /** 字体颜色 `DIC.SYS.FONTCOLOR` 可自定义字体颜色 */
    fontColor?: string | undefined;
    /** 图标 `DIC.DIALYSIS.ICON` */
    icon?: string | undefined;
    /** 费用组套 */
    cureCostGroups?: RoomRecordItem[] | undefined;
}

/** 透析区间 */
export class DeptDialysisArea implements IDeptDialysisArea {
    /** 标识 */
    id?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 阳性分区0,1 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysHospitalAreas?: SysHospitalArea;

    constructor(data?: IDeptDialysisArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.positive = _data["positive"];
            this.bedMax = _data["bedMax"];
            this.bedCount = _data["bedCount"];
            this.build = _data["build"];
            this.floor = _data["floor"];
            this.color = _data["color"];
            this.icon = _data["icon"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysHospitalAreas = _data["sysHospitalAreas"] ? SysHospitalArea.fromJS(_data["sysHospitalAreas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisArea {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["positive"] = this.positive;
        data["bedMax"] = this.bedMax;
        data["bedCount"] = this.bedCount;
        data["build"] = this.build;
        data["floor"] = this.floor;
        data["color"] = this.color;
        data["icon"] = this.icon;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysHospitalAreas"] = this.sysHospitalAreas ? this.sysHospitalAreas.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析区间 */
export interface IDeptDialysisArea {
    /** 标识 */
    id?: string | undefined;
    /** [归属透析室标识](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 阳性分区0,1 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysHospitalAreas?: SysHospitalArea;
}

/** 透析区间 - 前端展现增加组织名称 */
export class DeptDialysisAreaView implements IDeptDialysisAreaView {
    /** [院区标识](院区Id) */
    sysHospitalAreaId?: string | undefined;
    /** 组织名称 */
    sysHospitalAreaNameFull?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    typeLabel?: string | undefined;
    /** 类型名称 */
    typeName?: string | undefined;
    /** 阳性分区 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色名称 */
    colorName?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 图标显示值 */
    iconLabel?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptDialysisAreaView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.sysHospitalAreaNameFull = _data["sysHospitalAreaNameFull"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.typeName = _data["typeName"];
            this.positive = _data["positive"];
            this.bedMax = _data["bedMax"];
            this.bedCount = _data["bedCount"];
            this.build = _data["build"];
            this.floor = _data["floor"];
            this.color = _data["color"];
            this.colorName = _data["colorName"];
            this.icon = _data["icon"];
            this.iconLabel = _data["iconLabel"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisAreaView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisAreaView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["sysHospitalAreaNameFull"] = this.sysHospitalAreaNameFull;
        data["name"] = this.name;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["typeName"] = this.typeName;
        data["positive"] = this.positive;
        data["bedMax"] = this.bedMax;
        data["bedCount"] = this.bedCount;
        data["build"] = this.build;
        data["floor"] = this.floor;
        data["color"] = this.color;
        data["colorName"] = this.colorName;
        data["icon"] = this.icon;
        data["iconLabel"] = this.iconLabel;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透析区间 - 前端展现增加组织名称 */
export interface IDeptDialysisAreaView {
    /** [院区标识](院区Id) */
    sysHospitalAreaId?: string | undefined;
    /** 组织名称 */
    sysHospitalAreaNameFull?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type?: string | undefined;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    typeLabel?: string | undefined;
    /** 类型名称 */
    typeName?: string | undefined;
    /** 阳性分区 */
    positive?: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色名称 */
    colorName?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 图标显示值 */
    iconLabel?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 透析区间 (ViewModel) */
export class DeptDialysisAreaViewModel implements IDeptDialysisAreaViewModel {
    /** [归属透析室标识](透析室Id) */
    sysHospitalAreaId!: string;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name!: string;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type!: string;
    /** 阳性分区0,1 */
    positive!: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IDeptDialysisAreaViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.positive = _data["positive"];
            this.bedMax = _data["bedMax"];
            this.bedCount = _data["bedCount"];
            this.build = _data["build"];
            this.floor = _data["floor"];
            this.color = _data["color"];
            this.icon = _data["icon"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): DeptDialysisAreaViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisAreaViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["positive"] = this.positive;
        data["bedMax"] = this.bedMax;
        data["bedCount"] = this.bedCount;
        data["build"] = this.build;
        data["floor"] = this.floor;
        data["color"] = this.color;
        data["icon"] = this.icon;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 透析区间 (ViewModel) */
export interface IDeptDialysisAreaViewModel {
    /** [归属透析室标识](透析室Id) */
    sysHospitalAreaId: string;
    /** 名称 *○同一个`sys_hospital_area_id`下不允许重复* */
    name: string;
    /** 类型 `DIC.DIALYSIS.AREA.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    type: string;
    /** 阳性分区0,1 */
    positive: number;
    /** 最大床位数量 */
    bedMax?: number | undefined;
    /** 已有床位数量 */
    bedCount?: number | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 图标 `DIC.DIALYSIS.AREA.ICON` */
    icon?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** Reponse */
export class DeptDialysisAreaViewResult implements IDeptDialysisAreaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisAreaView[] | undefined;

    constructor(data?: IDeptDialysisAreaViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptDialysisAreaView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptDialysisAreaViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisAreaViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisAreaViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisAreaView[] | undefined;
}

/** Reponse */
export class DeptDialysisAreaViewResultEntry implements IDeptDialysisAreaViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptDialysisAreaView;

    constructor(data?: IDeptDialysisAreaViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptDialysisAreaView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisAreaViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisAreaViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisAreaViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptDialysisAreaView;
}

/** 透析床位 */
export class DeptDialysisBed implements IDeptDialysisBed {
    /** 标识 */
    id?: string | undefined;
    /** [透析区间](透析区间) */
    deptDialysisAreaId?: string | undefined;
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    deptDialysisAreas?: DeptDialysisArea;

    constructor(data?: IDeptDialysisBed) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.name = _data["name"];
            this.serialNo = _data["serialNo"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.deptDialysisAreas = _data["deptDialysisAreas"] ? DeptDialysisArea.fromJS(_data["deptDialysisAreas"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisBed {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBed();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["name"] = this.name;
        data["serialNo"] = this.serialNo;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["deptDialysisAreas"] = this.deptDialysisAreas ? this.deptDialysisAreas.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析床位 */
export interface IDeptDialysisBed {
    /** 标识 */
    id?: string | undefined;
    /** [透析区间](透析区间) */
    deptDialysisAreaId?: string | undefined;
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    deptDialysisAreas?: DeptDialysisArea;
}

/** 透析床位绑定设备记录 */
export class DeptDialysisBedDev implements IDeptDialysisBedDev {
    /** 标识 */
    id?: string | undefined;
    /** [透析床位标识](透析床位) */
    deptDialysisBedId?: string | undefined;
    /** [设备标识](科室设备) */
    devInfoId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    deptDialysisBeds?: DeptDialysisBed;
    devInfos?: DevInfo;

    constructor(data?: IDeptDialysisBedDev) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.devInfoId = _data["devInfoId"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.deptDialysisBeds = _data["deptDialysisBeds"] ? DeptDialysisBed.fromJS(_data["deptDialysisBeds"]) : <any>undefined;
            this.devInfos = _data["devInfos"] ? DevInfo.fromJS(_data["devInfos"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisBedDev {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedDev();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["devInfoId"] = this.devInfoId;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["deptDialysisBeds"] = this.deptDialysisBeds ? this.deptDialysisBeds.toJSON() : <any>undefined;
        data["devInfos"] = this.devInfos ? this.devInfos.toJSON() : <any>undefined;
        return data;
    }
}

/** 透析床位绑定设备记录 */
export interface IDeptDialysisBedDev {
    /** 标识 */
    id?: string | undefined;
    /** [透析床位标识](透析床位) */
    deptDialysisBedId?: string | undefined;
    /** [设备标识](科室设备) */
    devInfoId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    deptDialysisBeds?: DeptDialysisBed;
    devInfos?: DevInfo;
}

/** Reponse */
export class DeptDialysisBedDevResult implements IDeptDialysisBedDevResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBedDev[] | undefined;

    constructor(data?: IDeptDialysisBedDevResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptDialysisBedDev.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptDialysisBedDevResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedDevResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisBedDevResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBedDev[] | undefined;
}

/** Reponse */
export class DeptDialysisBedDevResultEntry implements IDeptDialysisBedDevResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptDialysisBedDev;

    constructor(data?: IDeptDialysisBedDevResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptDialysisBedDev.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisBedDevResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedDevResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisBedDevResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptDialysisBedDev;
}

/** 透析床位绑定设备记录 (ViewModel) */
export class DeptDialysisBedDevViewModel implements IDeptDialysisBedDevViewModel {
    /** [透析床位标识](透析床位Id) */
    deptDialysisBedId!: string;
    /** [设备标识](科室设备Id) */
    devInfoId!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IDeptDialysisBedDevViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisBedId = _data["deptDialysisBedId"];
            this.devInfoId = _data["devInfoId"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): DeptDialysisBedDevViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedDevViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisBedId"] = this.deptDialysisBedId;
        data["devInfoId"] = this.devInfoId;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 透析床位绑定设备记录 (ViewModel) */
export interface IDeptDialysisBedDevViewModel {
    /** [透析床位标识](透析床位Id) */
    deptDialysisBedId: string;
    /** [设备标识](科室设备Id) */
    devInfoId: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 透析床位绑定设备记录 */
export class DeptDialysisBedEditModel implements IDeptDialysisBedEditModel {
    /** [透析区间](#透析区间) */
    deptDialysisAreaId!: string;
    /** [设备标识](科室设备Id) */
    devInfoId?: string | undefined;
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;

    constructor(data?: IDeptDialysisBedEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.devInfoId = _data["devInfoId"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.boxIp = _data["boxIp"];
            this.bluetoothBpId = _data["bluetoothBpId"];
            this.serialNo = _data["serialNo"];
        }
    }

    static fromJS(data: any): DeptDialysisBedEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["devInfoId"] = this.devInfoId;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["boxIp"] = this.boxIp;
        data["bluetoothBpId"] = this.bluetoothBpId;
        data["serialNo"] = this.serialNo;
        return data;
    }
}

/** 透析床位绑定设备记录 */
export interface IDeptDialysisBedEditModel {
    /** [透析区间](#透析区间) */
    deptDialysisAreaId: string;
    /** [设备标识](科室设备Id) */
    devInfoId?: string | undefined;
    /** 名称 *○同一个`dept_dialysis_area_id`下不允许重复* */
    name: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;
}

/** 透析床位-前端展现扩展 */
export class DeptDialysisBedInfoDataView implements IDeptDialysisBedInfoDataView {
    /** 透析床位名称 */
    name?: string | undefined;
    /** 透析床位备注 */
    remark?: string | undefined;
    /** 透析床位启用状态 */
    enabled?: number;
    /** 科室设备Id */
    devInfoId?: string | undefined;
    /** 科室设备编号 */
    devInfoCode?: string | undefined;
    /** 设备状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    devInfoStatus?: string | undefined;
    /** 设备状态显示值 */
    devInfoStatusLabel?: string | undefined;
    /** 透析区间Id */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 阳性分区 */
    deptDialysisAreaPositive?: number | undefined;
    /** 院区标识 */
    sysHospitalAreaId?: string | undefined;
    /** 院区名称 */
    sysHospitalAreaNameFull?: string | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 序列 */
    sequence?: number | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;

    constructor(data?: IDeptDialysisBedInfoDataView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.devInfoId = _data["devInfoId"];
            this.devInfoCode = _data["devInfoCode"];
            this.devInfoStatus = _data["devInfoStatus"];
            this.devInfoStatusLabel = _data["devInfoStatusLabel"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.deptDialysisAreaName = _data["deptDialysisAreaName"];
            this.deptDialysisAreaPositive = _data["deptDialysisAreaPositive"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.sysHospitalAreaNameFull = _data["sysHospitalAreaNameFull"];
            this.build = _data["build"];
            this.floor = _data["floor"];
            this.sequence = _data["sequence"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.boxIp = _data["boxIp"];
            this.bluetoothBpId = _data["bluetoothBpId"];
            this.serialNo = _data["serialNo"];
        }
    }

    static fromJS(data: any): DeptDialysisBedInfoDataView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedInfoDataView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["devInfoId"] = this.devInfoId;
        data["devInfoCode"] = this.devInfoCode;
        data["devInfoStatus"] = this.devInfoStatus;
        data["devInfoStatusLabel"] = this.devInfoStatusLabel;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["deptDialysisAreaName"] = this.deptDialysisAreaName;
        data["deptDialysisAreaPositive"] = this.deptDialysisAreaPositive;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["sysHospitalAreaNameFull"] = this.sysHospitalAreaNameFull;
        data["build"] = this.build;
        data["floor"] = this.floor;
        data["sequence"] = this.sequence;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["boxIp"] = this.boxIp;
        data["bluetoothBpId"] = this.bluetoothBpId;
        data["serialNo"] = this.serialNo;
        return data;
    }
}

/** 透析床位-前端展现扩展 */
export interface IDeptDialysisBedInfoDataView {
    /** 透析床位名称 */
    name?: string | undefined;
    /** 透析床位备注 */
    remark?: string | undefined;
    /** 透析床位启用状态 */
    enabled?: number;
    /** 科室设备Id */
    devInfoId?: string | undefined;
    /** 科室设备编号 */
    devInfoCode?: string | undefined;
    /** 设备状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    devInfoStatus?: string | undefined;
    /** 设备状态显示值 */
    devInfoStatusLabel?: string | undefined;
    /** 透析区间Id */
    deptDialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    deptDialysisAreaName?: string | undefined;
    /** 阳性分区 */
    deptDialysisAreaPositive?: number | undefined;
    /** 院区标识 */
    sysHospitalAreaId?: string | undefined;
    /** 院区名称 */
    sysHospitalAreaNameFull?: string | undefined;
    /** 所在建筑 */
    build?: string | undefined;
    /** 所在楼层 */
    floor?: string | undefined;
    /** 序列 */
    sequence?: number | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 血压计编号 */
    serialNo?: string | undefined;
}

/** Reponse */
export class DeptDialysisBedInfoDataViewResult implements IDeptDialysisBedInfoDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBedInfoDataView[] | undefined;

    constructor(data?: IDeptDialysisBedInfoDataViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptDialysisBedInfoDataView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptDialysisBedInfoDataViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedInfoDataViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisBedInfoDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBedInfoDataView[] | undefined;
}

/** Reponse */
export class DeptDialysisBedResult implements IDeptDialysisBedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBed[] | undefined;

    constructor(data?: IDeptDialysisBedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptDialysisBed.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptDialysisBedResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisBedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptDialysisBed[] | undefined;
}

/** Reponse */
export class DeptDialysisBedResultEntry implements IDeptDialysisBedResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptDialysisBed;

    constructor(data?: IDeptDialysisBedResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptDialysisBed.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptDialysisBedResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptDialysisBedResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptDialysisBedResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptDialysisBed;
}

/** 医护人员信息 */
export class DeptMedicalPersonnel implements IDeptMedicalPersonnel {
    /** 标识 */
    id?: string | undefined;
    /** [绑定系统用户标识](用户信息) */
    sysUserId?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 籍贯 */
    birthplace?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 职务 医生`DIC.MEDICAL.DOCTOR.TITLE` 护士`DIC.MEDICAL.NURSE.TITLE` *主任,副主任,医生,护士长,护士,实习生* */
    title?: string | undefined;
    /** 职称 医生`DIC.MEDICAL.DOCTOR.PROFESSIONALTITLE` 护士`DIC.MEDICAL.NURSE.PROFESSIONALTITLE` */
    professionalTitle?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 参加工作日期 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入职日期 */
    hiredate?: dayjs.Dayjs | undefined;
    /** 资格证书编码 */
    credential?: string | undefined;
    /** 执业证书编码 */
    practice?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
    /** 毕业院校 */
    university?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 政治面貌 `DIC.PEOPLE.POLITICAL` *群众,团员,党员* */
    political?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysUsers?: SysUser;

    constructor(data?: IDeptMedicalPersonnel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sysUserId = _data["sysUserId"];
            this.nationality = _data["nationality"];
            this.birthplace = _data["birthplace"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.title = _data["title"];
            this.professionalTitle = _data["professionalTitle"];
            this.educationalLevel = _data["educationalLevel"];
            this.workdate = _data["workdate"] ? dayjs(_data["workdate"].toString()) : <any>undefined;
            this.hiredate = _data["hiredate"] ? dayjs(_data["hiredate"].toString()) : <any>undefined;
            this.credential = _data["credential"];
            this.practice = _data["practice"];
            this.signature = _data["signature"];
            this.university = _data["university"];
            this.marital = _data["marital"];
            this.political = _data["political"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sysUsers = _data["sysUsers"] ? SysUser.fromJS(_data["sysUsers"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptMedicalPersonnel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sysUserId"] = this.sysUserId;
        data["nationality"] = this.nationality;
        data["birthplace"] = this.birthplace;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toLocaleString() : <any>undefined;
        data["gender"] = this.gender;
        data["title"] = this.title;
        data["professionalTitle"] = this.professionalTitle;
        data["educationalLevel"] = this.educationalLevel;
        data["workdate"] = this.workdate ? this.workdate.toLocaleString() : <any>undefined;
        data["hiredate"] = this.hiredate ? this.hiredate.toLocaleString() : <any>undefined;
        data["credential"] = this.credential;
        data["practice"] = this.practice;
        data["signature"] = this.signature;
        data["university"] = this.university;
        data["marital"] = this.marital;
        data["political"] = this.political;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sysUsers"] = this.sysUsers ? this.sysUsers.toJSON() : <any>undefined;
        return data;
    }
}

/** 医护人员信息 */
export interface IDeptMedicalPersonnel {
    /** 标识 */
    id?: string | undefined;
    /** [绑定系统用户标识](用户信息) */
    sysUserId?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 籍贯 */
    birthplace?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 职务 医生`DIC.MEDICAL.DOCTOR.TITLE` 护士`DIC.MEDICAL.NURSE.TITLE` *主任,副主任,医生,护士长,护士,实习生* */
    title?: string | undefined;
    /** 职称 医生`DIC.MEDICAL.DOCTOR.PROFESSIONALTITLE` 护士`DIC.MEDICAL.NURSE.PROFESSIONALTITLE` */
    professionalTitle?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 参加工作日期 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入职日期 */
    hiredate?: dayjs.Dayjs | undefined;
    /** 资格证书编码 */
    credential?: string | undefined;
    /** 执业证书编码 */
    practice?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
    /** 毕业院校 */
    university?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 政治面貌 `DIC.PEOPLE.POLITICAL` *群众,团员,党员* */
    political?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    sysUsers?: SysUser;
}

/** 医护人员证书 */
export class DeptMedicalPersonnelFile implements IDeptMedicalPersonnelFile {
    /** 标识 */
    id?: string | undefined;
    /** [医护人员信息标识](医护人员信息) */
    deptMedicalPersonnelId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    deptMedicalPersonnels?: DeptMedicalPersonnel;
    hfsFiless?: HfsFiles;

    constructor(data?: IDeptMedicalPersonnelFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deptMedicalPersonnelId = _data["deptMedicalPersonnelId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.deptMedicalPersonnels = _data["deptMedicalPersonnels"] ? DeptMedicalPersonnel.fromJS(_data["deptMedicalPersonnels"]) : <any>undefined;
            this.hfsFiless = _data["hfsFiless"] ? HfsFiles.fromJS(_data["hfsFiless"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelFile {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deptMedicalPersonnelId"] = this.deptMedicalPersonnelId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["deptMedicalPersonnels"] = this.deptMedicalPersonnels ? this.deptMedicalPersonnels.toJSON() : <any>undefined;
        data["hfsFiless"] = this.hfsFiless ? this.hfsFiless.toJSON() : <any>undefined;
        return data;
    }
}

/** 医护人员证书 */
export interface IDeptMedicalPersonnelFile {
    /** 标识 */
    id?: string | undefined;
    /** [医护人员信息标识](医护人员信息) */
    deptMedicalPersonnelId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    deptMedicalPersonnels?: DeptMedicalPersonnel;
    hfsFiless?: HfsFiles;
}

/** Reponse */
export class DeptMedicalPersonnelFileResultEntry implements IDeptMedicalPersonnelFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptMedicalPersonnelFile;

    constructor(data?: IDeptMedicalPersonnelFileResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptMedicalPersonnelFile.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelFileResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelFileResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptMedicalPersonnelFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptMedicalPersonnelFile;
}

export class DeptMedicalPersonnelFileView implements IDeptMedicalPersonnelFileView {
    /** [医护人员信息标识](#医护人员信息) */
    deptMedicalPersonnelId?: string | undefined;
    /** [文件标识](#文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 医护人员全名 */
    deptMedicalPersonnelName?: string | undefined;
    /** 医护人员姓名 */
    deptMedicalPersonnelName1?: string | undefined;
    /** 医护人员别名 */
    deptMedicalPersonnelName2?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 文件名 */
    fileName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptMedicalPersonnelFileView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptMedicalPersonnelId = _data["deptMedicalPersonnelId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
            this.deptMedicalPersonnelName = _data["deptMedicalPersonnelName"];
            this.deptMedicalPersonnelName1 = _data["deptMedicalPersonnelName1"];
            this.deptMedicalPersonnelName2 = _data["deptMedicalPersonnelName2"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.fileName = _data["fileName"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelFileView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelFileView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptMedicalPersonnelId"] = this.deptMedicalPersonnelId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        data["deptMedicalPersonnelName"] = this.deptMedicalPersonnelName;
        data["deptMedicalPersonnelName1"] = this.deptMedicalPersonnelName1;
        data["deptMedicalPersonnelName2"] = this.deptMedicalPersonnelName2;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["fileName"] = this.fileName;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IDeptMedicalPersonnelFileView {
    /** [医护人员信息标识](#医护人员信息) */
    deptMedicalPersonnelId?: string | undefined;
    /** [文件标识](#文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 医护人员全名 */
    deptMedicalPersonnelName?: string | undefined;
    /** 医护人员姓名 */
    deptMedicalPersonnelName1?: string | undefined;
    /** 医护人员别名 */
    deptMedicalPersonnelName2?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 文件名 */
    fileName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
}

/** 医护人员证书 (ViewModel) */
export class DeptMedicalPersonnelFileViewModel implements IDeptMedicalPersonnelFileViewModel {
    /** [医护人员信息标识](医护人员信息Id) */
    deptMedicalPersonnelId!: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptMedicalPersonnelFileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deptMedicalPersonnelId = _data["deptMedicalPersonnelId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelFileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelFileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deptMedicalPersonnelId"] = this.deptMedicalPersonnelId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医护人员证书 (ViewModel) */
export interface IDeptMedicalPersonnelFileViewModel {
    /** [医护人员信息标识](医护人员信息Id) */
    deptMedicalPersonnelId: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId: string;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DeptMedicalPersonnelFileViewResult implements IDeptMedicalPersonnelFileViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptMedicalPersonnelFileView[] | undefined;

    constructor(data?: IDeptMedicalPersonnelFileViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptMedicalPersonnelFileView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelFileViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelFileViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptMedicalPersonnelFileViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptMedicalPersonnelFileView[] | undefined;
}

/** 医护人员签名信息 */
export class DeptMedicalPersonnelSignatureEditModel implements IDeptMedicalPersonnelSignatureEditModel {
    /** 电子签名路径 */
    signature?: string | undefined;

    constructor(data?: IDeptMedicalPersonnelSignatureEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.signature = _data["signature"];
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelSignatureEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelSignatureEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["signature"] = this.signature;
        return data;
    }
}

/** 医护人员签名信息 */
export interface IDeptMedicalPersonnelSignatureEditModel {
    /** 电子签名路径 */
    signature?: string | undefined;
}

export class DeptMedicalPersonnelSignatureView implements IDeptMedicalPersonnelSignatureView {
    /** 标识 */
    id?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;

    constructor(data?: IDeptMedicalPersonnelSignatureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.signature = _data["signature"];
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelSignatureView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelSignatureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["signature"] = this.signature;
        return data;
    }
}

export interface IDeptMedicalPersonnelSignatureView {
    /** 标识 */
    id?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
}

/** Reponse */
export class DeptMedicalPersonnelSignatureViewResultEntry implements IDeptMedicalPersonnelSignatureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptMedicalPersonnelSignatureView;

    constructor(data?: IDeptMedicalPersonnelSignatureViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptMedicalPersonnelSignatureView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelSignatureViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelSignatureViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptMedicalPersonnelSignatureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptMedicalPersonnelSignatureView;
}

/** 医护人员信息-展现医护人员信息 */
export class DeptMedicalPersonnelView implements IDeptMedicalPersonnelView {
    /** 标签(字典值)集合 */
    tagValues?: string[] | undefined;
    /** 标签名称集合 */
    tagNames?: string[] | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 归属用户登录名 *可以与工号同时使用* */
    loginName!: string;
    /** 归属用户电话 */
    tel?: string | undefined;
    /** 归属用户启用0,1 */
    enabled?: number;
    /** 归属用户删除状态0,1 */
    sysUserDeleted?: number;
    /** 归属用户标识 */
    sysUserId?: string | undefined;
    /** 全名称 */
    fullName?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 医护人员别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 民族名称 */
    nationalityName?: string | undefined;
    /** 籍贯 */
    birthplace?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件类型名称 */
    idTypeName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别 */
    genderName?: string | undefined;
    /** 职务 `DIC.PEOPLE.MEDICAL.TITLE` *主任,副主任,医生,护士长,护士* */
    title?: string | undefined;
    /** 行政职务 */
    titleName?: string | undefined;
    /** 职称 `DIC.MEDICAL.PROFESSIONALTITLE` *主任医师,副主任医师,主治医师,住院医师* */
    professionalTitle?: string | undefined;
    /** 技术职称 */
    professionalTitleName?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 文化程度 */
    educationalLevelName?: string | undefined;
    /** 参工时间 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入院时间 */
    hiredate?: dayjs.Dayjs | undefined;
    /** 资格证书编码 */
    credential?: string | undefined;
    /** 执业证书编码名称 */
    practice?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
    /** 毕业院校 */
    university?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 婚否名称 */
    maritalName?: string | undefined;
    /** 政治面貌 `DIC.PEOPLE.POLITICAL` *群众,团员,党员* */
    political?: string | undefined;
    /** 政治面貌名称 */
    politicalName?: string | undefined;
    /** 医护信息备注 */
    remark?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptMedicalPersonnelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["tagValues"])) {
                this.tagValues = [] as any;
                for (let item of _data["tagValues"])
                    this.tagValues!.push(item);
            }
            if (Array.isArray(_data["tagNames"])) {
                this.tagNames = [] as any;
                for (let item of _data["tagNames"])
                    this.tagNames!.push(item);
            }
            this.jobNumber = _data["jobNumber"];
            this.loginName = _data["loginName"];
            this.tel = _data["tel"];
            this.enabled = _data["enabled"];
            this.sysUserDeleted = _data["sysUserDeleted"];
            this.sysUserId = _data["sysUserId"];
            this.fullName = _data["fullName"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.nationality = _data["nationality"];
            this.nationalityName = _data["nationalityName"];
            this.birthplace = _data["birthplace"];
            this.idType = _data["idType"];
            this.idTypeName = _data["idTypeName"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.genderName = _data["genderName"];
            this.title = _data["title"];
            this.titleName = _data["titleName"];
            this.professionalTitle = _data["professionalTitle"];
            this.professionalTitleName = _data["professionalTitleName"];
            this.educationalLevel = _data["educationalLevel"];
            this.educationalLevelName = _data["educationalLevelName"];
            this.workdate = _data["workdate"] ? dayjs(_data["workdate"].toString()) : <any>undefined;
            this.hiredate = _data["hiredate"] ? dayjs(_data["hiredate"].toString()) : <any>undefined;
            this.credential = _data["credential"];
            this.practice = _data["practice"];
            this.signature = _data["signature"];
            this.university = _data["university"];
            this.marital = _data["marital"];
            this.maritalName = _data["maritalName"];
            this.political = _data["political"];
            this.politicalName = _data["politicalName"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.tagValues)) {
            data["tagValues"] = [];
            for (let item of this.tagValues)
                data["tagValues"].push(item);
        }
        if (Array.isArray(this.tagNames)) {
            data["tagNames"] = [];
            for (let item of this.tagNames)
                data["tagNames"].push(item);
        }
        data["jobNumber"] = this.jobNumber;
        data["loginName"] = this.loginName;
        data["tel"] = this.tel;
        data["enabled"] = this.enabled;
        data["sysUserDeleted"] = this.sysUserDeleted;
        data["sysUserId"] = this.sysUserId;
        data["fullName"] = this.fullName;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["nationality"] = this.nationality;
        data["nationalityName"] = this.nationalityName;
        data["birthplace"] = this.birthplace;
        data["idType"] = this.idType;
        data["idTypeName"] = this.idTypeName;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toLocaleString() : <any>undefined;
        data["gender"] = this.gender;
        data["genderName"] = this.genderName;
        data["title"] = this.title;
        data["titleName"] = this.titleName;
        data["professionalTitle"] = this.professionalTitle;
        data["professionalTitleName"] = this.professionalTitleName;
        data["educationalLevel"] = this.educationalLevel;
        data["educationalLevelName"] = this.educationalLevelName;
        data["workdate"] = this.workdate ? this.workdate.toLocaleString() : <any>undefined;
        data["hiredate"] = this.hiredate ? this.hiredate.toLocaleString() : <any>undefined;
        data["credential"] = this.credential;
        data["practice"] = this.practice;
        data["signature"] = this.signature;
        data["university"] = this.university;
        data["marital"] = this.marital;
        data["maritalName"] = this.maritalName;
        data["political"] = this.political;
        data["politicalName"] = this.politicalName;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 医护人员信息-展现医护人员信息 */
export interface IDeptMedicalPersonnelView {
    /** 标签(字典值)集合 */
    tagValues?: string[] | undefined;
    /** 标签名称集合 */
    tagNames?: string[] | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 归属用户登录名 *可以与工号同时使用* */
    loginName: string;
    /** 归属用户电话 */
    tel?: string | undefined;
    /** 归属用户启用0,1 */
    enabled?: number;
    /** 归属用户删除状态0,1 */
    sysUserDeleted?: number;
    /** 归属用户标识 */
    sysUserId?: string | undefined;
    /** 全名称 */
    fullName?: string | undefined;
    /** 姓名 */
    name?: string | undefined;
    /** 医护人员别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 民族名称 */
    nationalityName?: string | undefined;
    /** 籍贯 */
    birthplace?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件类型名称 */
    idTypeName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别 */
    genderName?: string | undefined;
    /** 职务 `DIC.PEOPLE.MEDICAL.TITLE` *主任,副主任,医生,护士长,护士* */
    title?: string | undefined;
    /** 行政职务 */
    titleName?: string | undefined;
    /** 职称 `DIC.MEDICAL.PROFESSIONALTITLE` *主任医师,副主任医师,主治医师,住院医师* */
    professionalTitle?: string | undefined;
    /** 技术职称 */
    professionalTitleName?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 文化程度 */
    educationalLevelName?: string | undefined;
    /** 参工时间 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入院时间 */
    hiredate?: dayjs.Dayjs | undefined;
    /** 资格证书编码 */
    credential?: string | undefined;
    /** 执业证书编码名称 */
    practice?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
    /** 毕业院校 */
    university?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 婚否名称 */
    maritalName?: string | undefined;
    /** 政治面貌 `DIC.PEOPLE.POLITICAL` *群众,团员,党员* */
    political?: string | undefined;
    /** 政治面貌名称 */
    politicalName?: string | undefined;
    /** 医护信息备注 */
    remark?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 医护人员信息 (ViewModel) */
export class DeptMedicalPersonnelViewModel implements IDeptMedicalPersonnelViewModel {
    /** [绑定系统用户标识](用户信息Id) */
    sysUserId!: string;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 籍贯 */
    birthplace?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 职务 医生`DIC.MEDICAL.DOCTOR.TITLE` 护士`DIC.MEDICAL.NURSE.TITLE` *主任,副主任,医生,护士长,护士,实习生* */
    title?: string | undefined;
    /** 职称 医生`DIC.MEDICAL.DOCTOR.PROFESSIONALTITLE` 护士`DIC.MEDICAL.NURSE.PROFESSIONALTITLE` */
    professionalTitle?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 参加工作日期 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入职日期 */
    hiredate?: dayjs.Dayjs | undefined;
    /** 资格证书编码 */
    credential?: string | undefined;
    /** 执业证书编码 */
    practice?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
    /** 毕业院校 */
    university?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 政治面貌 `DIC.PEOPLE.POLITICAL` *群众,团员,党员* */
    political?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptMedicalPersonnelViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysUserId = _data["sysUserId"];
            this.nationality = _data["nationality"];
            this.birthplace = _data["birthplace"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.title = _data["title"];
            this.professionalTitle = _data["professionalTitle"];
            this.educationalLevel = _data["educationalLevel"];
            this.workdate = _data["workdate"] ? dayjs(_data["workdate"].toString()) : <any>undefined;
            this.hiredate = _data["hiredate"] ? dayjs(_data["hiredate"].toString()) : <any>undefined;
            this.credential = _data["credential"];
            this.practice = _data["practice"];
            this.signature = _data["signature"];
            this.university = _data["university"];
            this.marital = _data["marital"];
            this.political = _data["political"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysUserId"] = this.sysUserId;
        data["nationality"] = this.nationality;
        data["birthplace"] = this.birthplace;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toLocaleString() : <any>undefined;
        data["gender"] = this.gender;
        data["title"] = this.title;
        data["professionalTitle"] = this.professionalTitle;
        data["educationalLevel"] = this.educationalLevel;
        data["workdate"] = this.workdate ? this.workdate.toLocaleString() : <any>undefined;
        data["hiredate"] = this.hiredate ? this.hiredate.toLocaleString() : <any>undefined;
        data["credential"] = this.credential;
        data["practice"] = this.practice;
        data["signature"] = this.signature;
        data["university"] = this.university;
        data["marital"] = this.marital;
        data["political"] = this.political;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医护人员信息 (ViewModel) */
export interface IDeptMedicalPersonnelViewModel {
    /** [绑定系统用户标识](用户信息Id) */
    sysUserId: string;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 籍贯 */
    birthplace?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 职务 医生`DIC.MEDICAL.DOCTOR.TITLE` 护士`DIC.MEDICAL.NURSE.TITLE` *主任,副主任,医生,护士长,护士,实习生* */
    title?: string | undefined;
    /** 职称 医生`DIC.MEDICAL.DOCTOR.PROFESSIONALTITLE` 护士`DIC.MEDICAL.NURSE.PROFESSIONALTITLE` */
    professionalTitle?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 参加工作日期 */
    workdate?: dayjs.Dayjs | undefined;
    /** 入职日期 */
    hiredate?: dayjs.Dayjs | undefined;
    /** 资格证书编码 */
    credential?: string | undefined;
    /** 执业证书编码 */
    practice?: string | undefined;
    /** 电子签名路径 */
    signature?: string | undefined;
    /** 毕业院校 */
    university?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 政治面貌 `DIC.PEOPLE.POLITICAL` *群众,团员,党员* */
    political?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DeptMedicalPersonnelViewResult implements IDeptMedicalPersonnelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptMedicalPersonnelView[] | undefined;

    constructor(data?: IDeptMedicalPersonnelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptMedicalPersonnelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptMedicalPersonnelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptMedicalPersonnelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptMedicalPersonnelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptMedicalPersonnelView[] | undefined;
}

/** 医护换班 */
export class DeptScheduleChangeEditModel implements IDeptScheduleChangeEditModel {
    /** 医护人员类型 */
    type!: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId!: string;
    /** [换班医护人员ID](#用户信息) */
    toUserId!: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 换班医护姓名 */
    toUserName?: string | undefined;
    fromCureShiftId!: string;
    /** 排班班次名称 */
    fromCureShiftName?: string | undefined;
    toCureShiftId!: string;
    /** 换班班次名称 */
    toCureShiftName?: string | undefined;
    /** 排班日期 */
    fromTime!: dayjs.Dayjs;
    /** 换班日期 */
    toTime!: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleChangeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.fromUserId = _data["fromUserId"];
            this.toUserId = _data["toUserId"];
            this.fromUserName = _data["fromUserName"];
            this.toUserName = _data["toUserName"];
            this.fromCureShiftId = _data["fromCureShiftId"];
            this.fromCureShiftName = _data["fromCureShiftName"];
            this.toCureShiftId = _data["toCureShiftId"];
            this.toCureShiftName = _data["toCureShiftName"];
            this.fromTime = _data["fromTime"] ? dayjs(_data["fromTime"].toString()) : <any>undefined;
            this.toTime = _data["toTime"] ? dayjs(_data["toTime"].toString()) : <any>undefined;
            this.supplementary = _data["supplementary"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleChangeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleChangeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["fromUserId"] = this.fromUserId;
        data["toUserId"] = this.toUserId;
        data["fromUserName"] = this.fromUserName;
        data["toUserName"] = this.toUserName;
        data["fromCureShiftId"] = this.fromCureShiftId;
        data["fromCureShiftName"] = this.fromCureShiftName;
        data["toCureShiftId"] = this.toCureShiftId;
        data["toCureShiftName"] = this.toCureShiftName;
        data["fromTime"] = this.fromTime ? this.fromTime.toLocaleString() : <any>undefined;
        data["toTime"] = this.toTime ? this.toTime.toLocaleString() : <any>undefined;
        data["supplementary"] = this.supplementary;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医护换班 */
export interface IDeptScheduleChangeEditModel {
    /** 医护人员类型 */
    type: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId: string;
    /** [换班医护人员ID](#用户信息) */
    toUserId: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 换班医护姓名 */
    toUserName?: string | undefined;
    fromCureShiftId: string;
    /** 排班班次名称 */
    fromCureShiftName?: string | undefined;
    toCureShiftId: string;
    /** 换班班次名称 */
    toCureShiftName?: string | undefined;
    /** 排班日期 */
    fromTime: dayjs.Dayjs;
    /** 换班日期 */
    toTime: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 医护换班 */
export class DeptScheduleChangeView implements IDeptScheduleChangeView {
    /** 医护人员类型 */
    type!: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId!: string;
    /** [换班医护人员ID](#用户信息) */
    toUserId!: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 换班医护姓名 */
    toUserName?: string | undefined;
    fromCureShiftId!: string;
    /** 排班班次名称 */
    fromCureShiftName?: string | undefined;
    toCureShiftId!: string;
    /** 换班班次名称 */
    toCureShiftName?: string | undefined;
    /** 排班日期 */
    fromTime!: dayjs.Dayjs;
    /** 换班日期 */
    toTime!: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptScheduleChangeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.fromUserId = _data["fromUserId"];
            this.toUserId = _data["toUserId"];
            this.fromUserName = _data["fromUserName"];
            this.toUserName = _data["toUserName"];
            this.fromCureShiftId = _data["fromCureShiftId"];
            this.fromCureShiftName = _data["fromCureShiftName"];
            this.toCureShiftId = _data["toCureShiftId"];
            this.toCureShiftName = _data["toCureShiftName"];
            this.fromTime = _data["fromTime"] ? dayjs(_data["fromTime"].toString()) : <any>undefined;
            this.toTime = _data["toTime"] ? dayjs(_data["toTime"].toString()) : <any>undefined;
            this.supplementary = _data["supplementary"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleChangeView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleChangeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["fromUserId"] = this.fromUserId;
        data["toUserId"] = this.toUserId;
        data["fromUserName"] = this.fromUserName;
        data["toUserName"] = this.toUserName;
        data["fromCureShiftId"] = this.fromCureShiftId;
        data["fromCureShiftName"] = this.fromCureShiftName;
        data["toCureShiftId"] = this.toCureShiftId;
        data["toCureShiftName"] = this.toCureShiftName;
        data["fromTime"] = this.fromTime ? this.fromTime.toLocaleString() : <any>undefined;
        data["toTime"] = this.toTime ? this.toTime.toLocaleString() : <any>undefined;
        data["supplementary"] = this.supplementary;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 医护换班 */
export interface IDeptScheduleChangeView {
    /** 医护人员类型 */
    type: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId: string;
    /** [换班医护人员ID](#用户信息) */
    toUserId: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 换班医护姓名 */
    toUserName?: string | undefined;
    fromCureShiftId: string;
    /** 排班班次名称 */
    fromCureShiftName?: string | undefined;
    toCureShiftId: string;
    /** 换班班次名称 */
    toCureShiftName?: string | undefined;
    /** 排班日期 */
    fromTime: dayjs.Dayjs;
    /** 换班日期 */
    toTime: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptScheduleChangeViewResult implements IDeptScheduleChangeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleChangeView[] | undefined;

    constructor(data?: IDeptScheduleChangeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleChangeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleChangeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleChangeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleChangeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleChangeView[] | undefined;
}

/** Reponse */
export class DeptScheduleChangeViewResultEntry implements IDeptScheduleChangeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleChangeView;

    constructor(data?: IDeptScheduleChangeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleChangeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleChangeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleChangeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleChangeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleChangeView;
}

/** 医生排班 */
export class DeptScheduleDoctor implements IDeptScheduleDoctor {
    /** 标识 */
    id?: string | undefined;
    /** [医生标识](用户信息) */
    doctorId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    doctors?: SysUser;

    constructor(data?: IDeptScheduleDoctor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.doctorId = _data["doctorId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.doctors = _data["doctors"] ? SysUser.fromJS(_data["doctors"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleDoctor {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleDoctor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["doctorId"] = this.doctorId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["doctors"] = this.doctors ? this.doctors.toJSON() : <any>undefined;
        return data;
    }
}

/** 医生排班 */
export interface IDeptScheduleDoctor {
    /** 标识 */
    id?: string | undefined;
    /** [医生标识](用户信息) */
    doctorId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    doctors?: SysUser;
}

/** Reponse */
export class DeptScheduleDoctorResult implements IDeptScheduleDoctorResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleDoctor[] | undefined;

    constructor(data?: IDeptScheduleDoctorResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleDoctor.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleDoctorResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleDoctorResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleDoctorResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleDoctor[] | undefined;
}

/** Reponse */
export class DeptScheduleDoctorResultEntry implements IDeptScheduleDoctorResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleDoctor;

    constructor(data?: IDeptScheduleDoctorResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleDoctor.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleDoctorResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleDoctorResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleDoctorResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleDoctor;
}

/** 医生排班展现 */
export class DeptScheduleDoctorView implements IDeptScheduleDoctorView {
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 *○如果有重名需要填写别名* */
    doctorName?: string | undefined;
    /** 医生别名 */
    doctorName2?: string | undefined;
    /** 医生全名 */
    doctorNameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;

    constructor(data?: IDeptScheduleDoctorView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.doctorId = _data["doctorId"];
            this.doctorName = _data["doctorName"];
            this.doctorName2 = _data["doctorName2"];
            this.doctorNameFull = _data["doctorNameFull"];
            this.monday = _data["monday"] ? IndexScheduleViewItem.fromJS(_data["monday"]) : <any>undefined;
            this.tuesday = _data["tuesday"] ? IndexScheduleViewItem.fromJS(_data["tuesday"]) : <any>undefined;
            this.wednesday = _data["wednesday"] ? IndexScheduleViewItem.fromJS(_data["wednesday"]) : <any>undefined;
            this.thursday = _data["thursday"] ? IndexScheduleViewItem.fromJS(_data["thursday"]) : <any>undefined;
            this.friday = _data["friday"] ? IndexScheduleViewItem.fromJS(_data["friday"]) : <any>undefined;
            this.saturday = _data["saturday"] ? IndexScheduleViewItem.fromJS(_data["saturday"]) : <any>undefined;
            this.sunday = _data["sunday"] ? IndexScheduleViewItem.fromJS(_data["sunday"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleDoctorView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleDoctorView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["doctorId"] = this.doctorId;
        data["doctorName"] = this.doctorName;
        data["doctorName2"] = this.doctorName2;
        data["doctorNameFull"] = this.doctorNameFull;
        data["monday"] = this.monday ? this.monday.toJSON() : <any>undefined;
        data["tuesday"] = this.tuesday ? this.tuesday.toJSON() : <any>undefined;
        data["wednesday"] = this.wednesday ? this.wednesday.toJSON() : <any>undefined;
        data["thursday"] = this.thursday ? this.thursday.toJSON() : <any>undefined;
        data["friday"] = this.friday ? this.friday.toJSON() : <any>undefined;
        data["saturday"] = this.saturday ? this.saturday.toJSON() : <any>undefined;
        data["sunday"] = this.sunday ? this.sunday.toJSON() : <any>undefined;
        return data;
    }
}

/** 医生排班展现 */
export interface IDeptScheduleDoctorView {
    /** 医生标识 */
    doctorId?: string | undefined;
    /** 医生姓名 *○如果有重名需要填写别名* */
    doctorName?: string | undefined;
    /** 医生别名 */
    doctorName2?: string | undefined;
    /** 医生全名 */
    doctorNameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;
}

/** 医生排班 (ViewModel) */
export class DeptScheduleDoctorViewModel implements IDeptScheduleDoctorViewModel {
    /** [医生标识](用户信息Id) */
    doctorId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 班次 */
    shiftId!: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00Id)* */
    shiftName!: string;
    /** 开始时间 *HH:mm* */
    begin1Time!: string;
    /** 结束时间 *HH:mm* */
    end1Date!: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleDoctorViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.doctorId = _data["doctorId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleDoctorViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleDoctorViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["doctorId"] = this.doctorId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医生排班 (ViewModel) */
export interface IDeptScheduleDoctorViewModel {
    /** [医生标识](用户信息Id) */
    doctorId: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 班次 */
    shiftId: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00Id)* */
    shiftName: string;
    /** 开始时间 *HH:mm* */
    begin1Time: string;
    /** 结束时间 *HH:mm* */
    end1Date: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DeptScheduleDoctorViewResult implements IDeptScheduleDoctorViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleDoctorView[] | undefined;

    constructor(data?: IDeptScheduleDoctorViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleDoctorView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleDoctorViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleDoctorViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleDoctorViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleDoctorView[] | undefined;
}

/** 护士排班 */
export class DeptScheduleNurse implements IDeptScheduleNurse {
    /** 标识 */
    id?: string | undefined;
    /** [护士标识](用户信息) */
    nurseId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    nurses?: SysUser;

    constructor(data?: IDeptScheduleNurse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nurseId = _data["nurseId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.nurses = _data["nurses"] ? SysUser.fromJS(_data["nurses"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleNurse {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleNurse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nurseId"] = this.nurseId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["nurses"] = this.nurses ? this.nurses.toJSON() : <any>undefined;
        return data;
    }
}

/** 护士排班 */
export interface IDeptScheduleNurse {
    /** 标识 */
    id?: string | undefined;
    /** [护士标识](用户信息) */
    nurseId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    nurses?: SysUser;
}

/** Reponse */
export class DeptScheduleNurseResult implements IDeptScheduleNurseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleNurse[] | undefined;

    constructor(data?: IDeptScheduleNurseResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleNurse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleNurseResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleNurseResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleNurseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleNurse[] | undefined;
}

/** Reponse */
export class DeptScheduleNurseResultEntry implements IDeptScheduleNurseResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleNurse;

    constructor(data?: IDeptScheduleNurseResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleNurse.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleNurseResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleNurseResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleNurseResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleNurse;
}

/** 护士排班展现 */
export class DeptScheduleNurseView implements IDeptScheduleNurseView {
    /** 护士标识 */
    nurseId?: string | undefined;
    /** 护士姓名 *○如果有重名需要填写别名* */
    nurseName?: string | undefined;
    /** 护士别名 */
    nurseName2?: string | undefined;
    /** 护士全名 */
    nurseNameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;

    constructor(data?: IDeptScheduleNurseView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nurseId = _data["nurseId"];
            this.nurseName = _data["nurseName"];
            this.nurseName2 = _data["nurseName2"];
            this.nurseNameFull = _data["nurseNameFull"];
            this.monday = _data["monday"] ? IndexScheduleViewItem.fromJS(_data["monday"]) : <any>undefined;
            this.tuesday = _data["tuesday"] ? IndexScheduleViewItem.fromJS(_data["tuesday"]) : <any>undefined;
            this.wednesday = _data["wednesday"] ? IndexScheduleViewItem.fromJS(_data["wednesday"]) : <any>undefined;
            this.thursday = _data["thursday"] ? IndexScheduleViewItem.fromJS(_data["thursday"]) : <any>undefined;
            this.friday = _data["friday"] ? IndexScheduleViewItem.fromJS(_data["friday"]) : <any>undefined;
            this.saturday = _data["saturday"] ? IndexScheduleViewItem.fromJS(_data["saturday"]) : <any>undefined;
            this.sunday = _data["sunday"] ? IndexScheduleViewItem.fromJS(_data["sunday"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleNurseView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleNurseView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nurseId"] = this.nurseId;
        data["nurseName"] = this.nurseName;
        data["nurseName2"] = this.nurseName2;
        data["nurseNameFull"] = this.nurseNameFull;
        data["monday"] = this.monday ? this.monday.toJSON() : <any>undefined;
        data["tuesday"] = this.tuesday ? this.tuesday.toJSON() : <any>undefined;
        data["wednesday"] = this.wednesday ? this.wednesday.toJSON() : <any>undefined;
        data["thursday"] = this.thursday ? this.thursday.toJSON() : <any>undefined;
        data["friday"] = this.friday ? this.friday.toJSON() : <any>undefined;
        data["saturday"] = this.saturday ? this.saturday.toJSON() : <any>undefined;
        data["sunday"] = this.sunday ? this.sunday.toJSON() : <any>undefined;
        return data;
    }
}

/** 护士排班展现 */
export interface IDeptScheduleNurseView {
    /** 护士标识 */
    nurseId?: string | undefined;
    /** 护士姓名 *○如果有重名需要填写别名* */
    nurseName?: string | undefined;
    /** 护士别名 */
    nurseName2?: string | undefined;
    /** 护士全名 */
    nurseNameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;
}

/** 护士排班 (ViewModel) */
export class DeptScheduleNurseViewModel implements IDeptScheduleNurseViewModel {
    /** [护士标识](用户信息Id) */
    nurseId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 班次 */
    shiftId!: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00Id)* */
    shiftName!: string;
    /** 开始时间 *HH:mm:ss* */
    begin1Time!: string;
    /** 结束时间 *HH:mm:ss* */
    end1Date!: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleNurseViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nurseId = _data["nurseId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleNurseViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleNurseViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nurseId"] = this.nurseId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 护士排班 (ViewModel) */
export interface IDeptScheduleNurseViewModel {
    /** [护士标识](用户信息Id) */
    nurseId: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 班次 */
    shiftId: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00Id)* */
    shiftName: string;
    /** 开始时间 *HH:mm:ss* */
    begin1Time: string;
    /** 结束时间 *HH:mm:ss* */
    end1Date: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DeptScheduleNurseViewResult implements IDeptScheduleNurseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleNurseView[] | undefined;

    constructor(data?: IDeptScheduleNurseViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleNurseView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleNurseViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleNurseViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleNurseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleNurseView[] | undefined;
}

/** 其他排班 */
export class DeptScheduleOther implements IDeptScheduleOther {
    /** 标识 */
    id?: string | undefined;
    /** [用户标识](用户信息) */
    userId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    users?: SysUser;

    constructor(data?: IDeptScheduleOther) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.users = _data["users"] ? SysUser.fromJS(_data["users"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleOther {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOther();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["users"] = this.users ? this.users.toJSON() : <any>undefined;
        return data;
    }
}

/** 其他排班 */
export interface IDeptScheduleOther {
    /** 标识 */
    id?: string | undefined;
    /** [用户标识](用户信息) */
    userId?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    users?: SysUser;
}

/** 其他排班 */
export class DeptScheduleOtherEditModel implements IDeptScheduleOtherEditModel {
    /** [用户标识](#用户信息) */
    userId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 班次 */
    shiftId!: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName!: string;
    /** 开始时间 *HH:mm:ss* */
    begin1Time!: string;
    /** 结束时间 *HH:mm:ss* */
    end1Date!: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleOtherEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleOtherEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOtherEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 其他排班 */
export interface IDeptScheduleOtherEditModel {
    /** [用户标识](#用户信息) */
    userId: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 班次 */
    shiftId: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName: string;
    /** 开始时间 *HH:mm:ss* */
    begin1Time: string;
    /** 结束时间 *HH:mm:ss* */
    end1Date: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DeptScheduleOtherResult implements IDeptScheduleOtherResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleOther[] | undefined;

    constructor(data?: IDeptScheduleOtherResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleOther.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleOtherResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOtherResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleOtherResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleOther[] | undefined;
}

/** Reponse */
export class DeptScheduleOtherResultEntry implements IDeptScheduleOtherResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleOther;

    constructor(data?: IDeptScheduleOtherResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleOther.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleOtherResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOtherResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleOtherResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleOther;
}

/** 其他排班 */
export class DeptScheduleOtherView implements IDeptScheduleOtherView {
    /** [用户标识](#用户信息) */
    userId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 班次 */
    shiftId!: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName!: string;
    /** 开始时间 *HH:mm:ss* */
    begin1Time!: string;
    /** 结束时间 *HH:mm:ss* */
    end1Date!: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 用户标识 */
    otherId?: string | undefined;
    /** 用户姓名 *○如果有重名需要填写别名* */
    otherName?: string | undefined;
    /** 用户别名 */
    otherName2?: string | undefined;
    /** 用户全名 */
    otherNameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;

    constructor(data?: IDeptScheduleOtherView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.color = _data["color"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.otherId = _data["otherId"];
            this.otherName = _data["otherName"];
            this.otherName2 = _data["otherName2"];
            this.otherNameFull = _data["otherNameFull"];
            this.monday = _data["monday"] ? IndexScheduleViewItem.fromJS(_data["monday"]) : <any>undefined;
            this.tuesday = _data["tuesday"] ? IndexScheduleViewItem.fromJS(_data["tuesday"]) : <any>undefined;
            this.wednesday = _data["wednesday"] ? IndexScheduleViewItem.fromJS(_data["wednesday"]) : <any>undefined;
            this.thursday = _data["thursday"] ? IndexScheduleViewItem.fromJS(_data["thursday"]) : <any>undefined;
            this.friday = _data["friday"] ? IndexScheduleViewItem.fromJS(_data["friday"]) : <any>undefined;
            this.saturday = _data["saturday"] ? IndexScheduleViewItem.fromJS(_data["saturday"]) : <any>undefined;
            this.sunday = _data["sunday"] ? IndexScheduleViewItem.fromJS(_data["sunday"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleOtherView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOtherView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["color"] = this.color;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["otherId"] = this.otherId;
        data["otherName"] = this.otherName;
        data["otherName2"] = this.otherName2;
        data["otherNameFull"] = this.otherNameFull;
        data["monday"] = this.monday ? this.monday.toJSON() : <any>undefined;
        data["tuesday"] = this.tuesday ? this.tuesday.toJSON() : <any>undefined;
        data["wednesday"] = this.wednesday ? this.wednesday.toJSON() : <any>undefined;
        data["thursday"] = this.thursday ? this.thursday.toJSON() : <any>undefined;
        data["friday"] = this.friday ? this.friday.toJSON() : <any>undefined;
        data["saturday"] = this.saturday ? this.saturday.toJSON() : <any>undefined;
        data["sunday"] = this.sunday ? this.sunday.toJSON() : <any>undefined;
        return data;
    }
}

/** 其他排班 */
export interface IDeptScheduleOtherView {
    /** [用户标识](#用户信息) */
    userId: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 班次 */
    shiftId: string;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName: string;
    /** 开始时间 *HH:mm:ss* */
    begin1Time: string;
    /** 结束时间 *HH:mm:ss* */
    end1Date: string;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 颜色代码 */
    color?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 用户标识 */
    otherId?: string | undefined;
    /** 用户姓名 *○如果有重名需要填写别名* */
    otherName?: string | undefined;
    /** 用户别名 */
    otherName2?: string | undefined;
    /** 用户全名 */
    otherNameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;
}

/** Reponse */
export class DeptScheduleOtherViewResult implements IDeptScheduleOtherViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleOtherView[] | undefined;

    constructor(data?: IDeptScheduleOtherViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleOtherView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleOtherViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOtherViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleOtherViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleOtherView[] | undefined;
}

/** 医护加班 */
export class DeptScheduleOvertimeEditModel implements IDeptScheduleOvertimeEditModel {
    /** 医护人员类型 */
    type!: string;
    /** [加班申请医护人员ID](#用户信息) */
    overtimeUserId!: string;
    /** 加班申请医护姓名 */
    overtimeUserName?: string | undefined;
    /** 开始时间 */
    timeSignin!: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout!: dayjs.Dayjs;
    /** 加班时长 */
    overtimeTimes!: number;
    /** 加班原因 */
    overtimeReason?: string | undefined;
    overtimeCureShiftId!: string;
    /** 加班班次名称 */
    overtimeCureShiftName?: string | undefined;
    /** 审批状态0,1 */
    checked!: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered!: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleOvertimeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.overtimeUserId = _data["overtimeUserId"];
            this.overtimeUserName = _data["overtimeUserName"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.overtimeTimes = _data["overtimeTimes"];
            this.overtimeReason = _data["overtimeReason"];
            this.overtimeCureShiftId = _data["overtimeCureShiftId"];
            this.overtimeCureShiftName = _data["overtimeCureShiftName"];
            this.checked = _data["checked"];
            this.approvered = _data["approvered"];
            this.refuseReason = _data["refuseReason"];
            this.checkedUserId = _data["checkedUserId"];
            this.checkedUserName = _data["checkedUserName"];
            this.checkedTime = _data["checkedTime"] ? dayjs(_data["checkedTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleOvertimeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOvertimeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["overtimeUserId"] = this.overtimeUserId;
        data["overtimeUserName"] = this.overtimeUserName;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toLocaleString() : <any>undefined;
        data["overtimeTimes"] = this.overtimeTimes;
        data["overtimeReason"] = this.overtimeReason;
        data["overtimeCureShiftId"] = this.overtimeCureShiftId;
        data["overtimeCureShiftName"] = this.overtimeCureShiftName;
        data["checked"] = this.checked;
        data["approvered"] = this.approvered;
        data["refuseReason"] = this.refuseReason;
        data["checkedUserId"] = this.checkedUserId;
        data["checkedUserName"] = this.checkedUserName;
        data["checkedTime"] = this.checkedTime ? this.checkedTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医护加班 */
export interface IDeptScheduleOvertimeEditModel {
    /** 医护人员类型 */
    type: string;
    /** [加班申请医护人员ID](#用户信息) */
    overtimeUserId: string;
    /** 加班申请医护姓名 */
    overtimeUserName?: string | undefined;
    /** 开始时间 */
    timeSignin: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout: dayjs.Dayjs;
    /** 加班时长 */
    overtimeTimes: number;
    /** 加班原因 */
    overtimeReason?: string | undefined;
    overtimeCureShiftId: string;
    /** 加班班次名称 */
    overtimeCureShiftName?: string | undefined;
    /** 审批状态0,1 */
    checked: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 医护加班 */
export class DeptScheduleOvertimeView implements IDeptScheduleOvertimeView {
    /** 医护人员类型 */
    type!: string;
    /** [加班申请医护人员ID](#用户信息) */
    overtimeUserId!: string;
    /** 加班申请医护姓名 */
    overtimeUserName?: string | undefined;
    /** 开始时间 */
    timeSignin!: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout!: dayjs.Dayjs;
    /** 加班时长 */
    overtimeTimes!: number;
    /** 加班原因 */
    overtimeReason?: string | undefined;
    overtimeCureShiftId!: string;
    /** 加班班次名称 */
    overtimeCureShiftName?: string | undefined;
    /** 审批状态0,1 */
    checked!: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered!: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptScheduleOvertimeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.overtimeUserId = _data["overtimeUserId"];
            this.overtimeUserName = _data["overtimeUserName"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.overtimeTimes = _data["overtimeTimes"];
            this.overtimeReason = _data["overtimeReason"];
            this.overtimeCureShiftId = _data["overtimeCureShiftId"];
            this.overtimeCureShiftName = _data["overtimeCureShiftName"];
            this.checked = _data["checked"];
            this.approvered = _data["approvered"];
            this.refuseReason = _data["refuseReason"];
            this.checkedUserId = _data["checkedUserId"];
            this.checkedUserName = _data["checkedUserName"];
            this.checkedTime = _data["checkedTime"] ? dayjs(_data["checkedTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleOvertimeView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOvertimeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["overtimeUserId"] = this.overtimeUserId;
        data["overtimeUserName"] = this.overtimeUserName;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toLocaleString() : <any>undefined;
        data["overtimeTimes"] = this.overtimeTimes;
        data["overtimeReason"] = this.overtimeReason;
        data["overtimeCureShiftId"] = this.overtimeCureShiftId;
        data["overtimeCureShiftName"] = this.overtimeCureShiftName;
        data["checked"] = this.checked;
        data["approvered"] = this.approvered;
        data["refuseReason"] = this.refuseReason;
        data["checkedUserId"] = this.checkedUserId;
        data["checkedUserName"] = this.checkedUserName;
        data["checkedTime"] = this.checkedTime ? this.checkedTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 医护加班 */
export interface IDeptScheduleOvertimeView {
    /** 医护人员类型 */
    type: string;
    /** [加班申请医护人员ID](#用户信息) */
    overtimeUserId: string;
    /** 加班申请医护姓名 */
    overtimeUserName?: string | undefined;
    /** 开始时间 */
    timeSignin: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout: dayjs.Dayjs;
    /** 加班时长 */
    overtimeTimes: number;
    /** 加班原因 */
    overtimeReason?: string | undefined;
    overtimeCureShiftId: string;
    /** 加班班次名称 */
    overtimeCureShiftName?: string | undefined;
    /** 审批状态0,1 */
    checked: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptScheduleOvertimeViewResult implements IDeptScheduleOvertimeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleOvertimeView[] | undefined;

    constructor(data?: IDeptScheduleOvertimeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleOvertimeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleOvertimeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOvertimeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleOvertimeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleOvertimeView[] | undefined;
}

/** Reponse */
export class DeptScheduleOvertimeViewResultEntry implements IDeptScheduleOvertimeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleOvertimeView;

    constructor(data?: IDeptScheduleOvertimeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleOvertimeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleOvertimeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleOvertimeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleOvertimeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleOvertimeView;
}

/** 医护顶班 */
export class DeptScheduleSubstituteEditModel implements IDeptScheduleSubstituteEditModel {
    /** 医护人员类型 */
    type!: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId!: string;
    /** [顶班医护人员ID](#用户信息) */
    toUserId!: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 顶班医护姓名 */
    toUserName?: string | undefined;
    cureShiftId!: string;
    /** 排班班次 */
    cureShiftName?: string | undefined;
    /** 顶班日期 */
    time!: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleSubstituteEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.fromUserId = _data["fromUserId"];
            this.toUserId = _data["toUserId"];
            this.fromUserName = _data["fromUserName"];
            this.toUserName = _data["toUserName"];
            this.cureShiftId = _data["cureShiftId"];
            this.cureShiftName = _data["cureShiftName"];
            this.time = _data["time"] ? dayjs(_data["time"].toString()) : <any>undefined;
            this.supplementary = _data["supplementary"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleSubstituteEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleSubstituteEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["fromUserId"] = this.fromUserId;
        data["toUserId"] = this.toUserId;
        data["fromUserName"] = this.fromUserName;
        data["toUserName"] = this.toUserName;
        data["cureShiftId"] = this.cureShiftId;
        data["cureShiftName"] = this.cureShiftName;
        data["time"] = this.time ? this.time.toLocaleString() : <any>undefined;
        data["supplementary"] = this.supplementary;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医护顶班 */
export interface IDeptScheduleSubstituteEditModel {
    /** 医护人员类型 */
    type: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId: string;
    /** [顶班医护人员ID](#用户信息) */
    toUserId: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 顶班医护姓名 */
    toUserName?: string | undefined;
    cureShiftId: string;
    /** 排班班次 */
    cureShiftName?: string | undefined;
    /** 顶班日期 */
    time: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 医护顶班 */
export class DeptScheduleSubstituteView implements IDeptScheduleSubstituteView {
    /** 医护人员类型 */
    type!: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId!: string;
    /** [顶班医护人员ID](#用户信息) */
    toUserId!: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 顶班医护姓名 */
    toUserName?: string | undefined;
    cureShiftId!: string;
    /** 排班班次 */
    cureShiftName?: string | undefined;
    /** 顶班日期 */
    time!: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptScheduleSubstituteView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.fromUserId = _data["fromUserId"];
            this.toUserId = _data["toUserId"];
            this.fromUserName = _data["fromUserName"];
            this.toUserName = _data["toUserName"];
            this.cureShiftId = _data["cureShiftId"];
            this.cureShiftName = _data["cureShiftName"];
            this.time = _data["time"] ? dayjs(_data["time"].toString()) : <any>undefined;
            this.supplementary = _data["supplementary"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleSubstituteView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleSubstituteView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["fromUserId"] = this.fromUserId;
        data["toUserId"] = this.toUserId;
        data["fromUserName"] = this.fromUserName;
        data["toUserName"] = this.toUserName;
        data["cureShiftId"] = this.cureShiftId;
        data["cureShiftName"] = this.cureShiftName;
        data["time"] = this.time ? this.time.toLocaleString() : <any>undefined;
        data["supplementary"] = this.supplementary;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 医护顶班 */
export interface IDeptScheduleSubstituteView {
    /** 医护人员类型 */
    type: string;
    /** [排班医护人员ID](#用户信息) */
    fromUserId: string;
    /** [顶班医护人员ID](#用户信息) */
    toUserId: string;
    /** 排班医护姓名 */
    fromUserName?: string | undefined;
    /** 顶班医护姓名 */
    toUserName?: string | undefined;
    cureShiftId: string;
    /** 排班班次 */
    cureShiftName?: string | undefined;
    /** 顶班日期 */
    time: dayjs.Dayjs;
    /** 是否补充记录0,1 */
    supplementary: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptScheduleSubstituteViewResult implements IDeptScheduleSubstituteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleSubstituteView[] | undefined;

    constructor(data?: IDeptScheduleSubstituteViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleSubstituteView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleSubstituteViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleSubstituteViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleSubstituteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleSubstituteView[] | undefined;
}

/** Reponse */
export class DeptScheduleSubstituteViewResultEntry implements IDeptScheduleSubstituteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleSubstituteView;

    constructor(data?: IDeptScheduleSubstituteViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleSubstituteView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleSubstituteViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleSubstituteViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleSubstituteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleSubstituteView;
}

/** 医护调休 */
export class DeptScheduleTakeOffEditModel implements IDeptScheduleTakeOffEditModel {
    /** 医护人员类型 */
    type!: string;
    /** [调休申请医护人员ID](#用户信息) */
    applyUserId!: string;
    /** 调休申请医护姓名 */
    applyUserName?: string | undefined;
    /** 开始时间 */
    timeSignin!: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout!: dayjs.Dayjs;
    /** 调休原因 */
    applyReason?: string | undefined;
    /** 调休时长 */
    applyTimes!: number;
    /** 审批状态0,1 */
    checked!: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered!: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptScheduleTakeOffEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.applyUserId = _data["applyUserId"];
            this.applyUserName = _data["applyUserName"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.applyReason = _data["applyReason"];
            this.applyTimes = _data["applyTimes"];
            this.checked = _data["checked"];
            this.approvered = _data["approvered"];
            this.refuseReason = _data["refuseReason"];
            this.checkedUserId = _data["checkedUserId"];
            this.checkedUserName = _data["checkedUserName"];
            this.checkedTime = _data["checkedTime"] ? dayjs(_data["checkedTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptScheduleTakeOffEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleTakeOffEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["applyUserId"] = this.applyUserId;
        data["applyUserName"] = this.applyUserName;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toLocaleString() : <any>undefined;
        data["applyReason"] = this.applyReason;
        data["applyTimes"] = this.applyTimes;
        data["checked"] = this.checked;
        data["approvered"] = this.approvered;
        data["refuseReason"] = this.refuseReason;
        data["checkedUserId"] = this.checkedUserId;
        data["checkedUserName"] = this.checkedUserName;
        data["checkedTime"] = this.checkedTime ? this.checkedTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 医护调休 */
export interface IDeptScheduleTakeOffEditModel {
    /** 医护人员类型 */
    type: string;
    /** [调休申请医护人员ID](#用户信息) */
    applyUserId: string;
    /** 调休申请医护姓名 */
    applyUserName?: string | undefined;
    /** 开始时间 */
    timeSignin: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout: dayjs.Dayjs;
    /** 调休原因 */
    applyReason?: string | undefined;
    /** 调休时长 */
    applyTimes: number;
    /** 审批状态0,1 */
    checked: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 医护调休 */
export class DeptScheduleTakeOffView implements IDeptScheduleTakeOffView {
    /** 医护人员类型 */
    type!: string;
    /** [调休申请医护人员ID](#用户信息) */
    applyUserId!: string;
    /** 调休申请医护姓名 */
    applyUserName?: string | undefined;
    /** 开始时间 */
    timeSignin!: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout!: dayjs.Dayjs;
    /** 调休原因 */
    applyReason?: string | undefined;
    /** 调休时长 */
    applyTimes!: number;
    /** 审批状态0,1 */
    checked!: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered!: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptScheduleTakeOffView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.applyUserId = _data["applyUserId"];
            this.applyUserName = _data["applyUserName"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.applyReason = _data["applyReason"];
            this.applyTimes = _data["applyTimes"];
            this.checked = _data["checked"];
            this.approvered = _data["approvered"];
            this.refuseReason = _data["refuseReason"];
            this.checkedUserId = _data["checkedUserId"];
            this.checkedUserName = _data["checkedUserName"];
            this.checkedTime = _data["checkedTime"] ? dayjs(_data["checkedTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleTakeOffView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleTakeOffView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["applyUserId"] = this.applyUserId;
        data["applyUserName"] = this.applyUserName;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toLocaleString() : <any>undefined;
        data["applyReason"] = this.applyReason;
        data["applyTimes"] = this.applyTimes;
        data["checked"] = this.checked;
        data["approvered"] = this.approvered;
        data["refuseReason"] = this.refuseReason;
        data["checkedUserId"] = this.checkedUserId;
        data["checkedUserName"] = this.checkedUserName;
        data["checkedTime"] = this.checkedTime ? this.checkedTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 医护调休 */
export interface IDeptScheduleTakeOffView {
    /** 医护人员类型 */
    type: string;
    /** [调休申请医护人员ID](#用户信息) */
    applyUserId: string;
    /** 调休申请医护姓名 */
    applyUserName?: string | undefined;
    /** 开始时间 */
    timeSignin: dayjs.Dayjs;
    /** 结束时间 */
    timeSignout: dayjs.Dayjs;
    /** 调休原因 */
    applyReason?: string | undefined;
    /** 调休时长 */
    applyTimes: number;
    /** 审批状态0,1 */
    checked: number;
    /** 审批意见0,1 *拒绝 同意* */
    approvered: number;
    /** *审批意见为拒绝时候的拒绝原因* */
    refuseReason?: string | undefined;
    /** [审批人员ID](#用户信息) */
    checkedUserId?: string | undefined;
    /** 审批人员姓名 */
    checkedUserName?: string | undefined;
    /** 审批时间 */
    checkedTime?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptScheduleTakeOffViewResult implements IDeptScheduleTakeOffViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleTakeOffView[] | undefined;

    constructor(data?: IDeptScheduleTakeOffViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptScheduleTakeOffView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptScheduleTakeOffViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleTakeOffViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleTakeOffViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptScheduleTakeOffView[] | undefined;
}

/** Reponse */
export class DeptScheduleTakeOffViewResultEntry implements IDeptScheduleTakeOffViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleTakeOffView;

    constructor(data?: IDeptScheduleTakeOffViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptScheduleTakeOffView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptScheduleTakeOffViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptScheduleTakeOffViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptScheduleTakeOffViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptScheduleTakeOffView;
}

/** 医生班次 */
export class DeptShiftDoctor implements IDeptShiftDoctor {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end1Date?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin2Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end2Date?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptShiftDoctor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.begin2Time = _data["begin2Time"];
            this.end2Date = _data["end2Date"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShiftDoctor {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftDoctor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["begin2Time"] = this.begin2Time;
        data["end2Date"] = this.end2Date;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 医生班次 */
export interface IDeptShiftDoctor {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end1Date?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin2Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end2Date?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptShiftDoctorResult implements IDeptShiftDoctorResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShiftDoctor[] | undefined;

    constructor(data?: IDeptShiftDoctorResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptShiftDoctor.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptShiftDoctorResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftDoctorResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptShiftDoctorResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShiftDoctor[] | undefined;
}

/** Reponse */
export class DeptShiftDoctorResultEntry implements IDeptShiftDoctorResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShiftDoctor;

    constructor(data?: IDeptShiftDoctorResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptShiftDoctor.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShiftDoctorResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftDoctorResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptShiftDoctorResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShiftDoctor;
}

/** 医生班次 (ViewModel) */
export class DeptShiftDoctorViewModel implements IDeptShiftDoctorViewModel {
    /** 名称 *○不允许重复* */
    name!: string;
    /** 简称 */
    shortName!: string;
    /** 开始时间 *HH:mm* */
    begin1Time!: string;
    /** 结束时间 *HH:mm* */
    end1Date!: string;
    /** 开始时间 *HH:mm* */
    begin2Time!: string;
    /** 结束时间 *HH:mm* */
    end2Date!: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IDeptShiftDoctorViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.begin2Time = _data["begin2Time"];
            this.end2Date = _data["end2Date"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): DeptShiftDoctorViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftDoctorViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["begin2Time"] = this.begin2Time;
        data["end2Date"] = this.end2Date;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 医生班次 (ViewModel) */
export interface IDeptShiftDoctorViewModel {
    /** 名称 *○不允许重复* */
    name: string;
    /** 简称 */
    shortName: string;
    /** 开始时间 *HH:mm* */
    begin1Time: string;
    /** 结束时间 *HH:mm* */
    end1Date: string;
    /** 开始时间 *HH:mm* */
    begin2Time: string;
    /** 结束时间 *HH:mm* */
    end2Date: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 护士班次 */
export class DeptShiftNurse implements IDeptShiftNurse {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end1Date?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin2Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end2Date?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptShiftNurse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.begin2Time = _data["begin2Time"];
            this.end2Date = _data["end2Date"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.sequence = _data["sequence"];
            this.enabled = _data["enabled"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShiftNurse {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftNurse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["begin2Time"] = this.begin2Time;
        data["end2Date"] = this.end2Date;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["sequence"] = this.sequence;
        data["enabled"] = this.enabled;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 护士班次 */
export interface IDeptShiftNurse {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○不允许重复* */
    name?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end1Date?: string | undefined;
    /** 开始时间 *HH:mm* */
    begin2Time?: string | undefined;
    /** 结束时间 *HH:mm* */
    end2Date?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptShiftNurseResult implements IDeptShiftNurseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShiftNurse[] | undefined;

    constructor(data?: IDeptShiftNurseResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptShiftNurse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptShiftNurseResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftNurseResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptShiftNurseResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShiftNurse[] | undefined;
}

/** Reponse */
export class DeptShiftNurseResultEntry implements IDeptShiftNurseResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShiftNurse;

    constructor(data?: IDeptShiftNurseResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptShiftNurse.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShiftNurseResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftNurseResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptShiftNurseResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShiftNurse;
}

/** 护士班次 (ViewModel) */
export class DeptShiftNurseViewModel implements IDeptShiftNurseViewModel {
    /** 名称 *○不允许重复* */
    name!: string;
    /** 简称 */
    shortName!: string;
    /** 开始时间 *HH:mm* */
    begin1Time!: string;
    /** 结束时间 *HH:mm* */
    end1Date!: string;
    /** 开始时间 *HH:mm* */
    begin2Time!: string;
    /** 结束时间 *HH:mm* */
    end2Date!: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IDeptShiftNurseViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.shortName = _data["shortName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.begin2Time = _data["begin2Time"];
            this.end2Date = _data["end2Date"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): DeptShiftNurseViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftNurseViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["shortName"] = this.shortName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["begin2Time"] = this.begin2Time;
        data["end2Date"] = this.end2Date;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 护士班次 (ViewModel) */
export interface IDeptShiftNurseViewModel {
    /** 名称 *○不允许重复* */
    name: string;
    /** 简称 */
    shortName: string;
    /** 开始时间 *HH:mm* */
    begin1Time: string;
    /** 结束时间 *HH:mm* */
    end1Date: string;
    /** 开始时间 *HH:mm* */
    begin2Time: string;
    /** 结束时间 *HH:mm* */
    end2Date: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 其他班次 */
export class DeptShiftOtherEditModel implements IDeptShiftOtherEditModel {
    /** 名称 *○不允许重复* */
    name!: string;
    /** 班次类型 */
    type!: string;
    /** 简称 */
    shortName!: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 开始时间 *HH:mm* */
    begin1Time!: string;
    /** 结束时间 *HH:mm* */
    end1Time!: string;
    /** 开始时间 *HH:mm* */
    begin2Time!: string;
    /** 结束时间 *HH:mm* */
    end2Time!: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IDeptShiftOtherEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.shortName = _data["shortName"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.begin1Time = _data["begin1Time"];
            this.end1Time = _data["end1Time"];
            this.begin2Time = _data["begin2Time"];
            this.end2Time = _data["end2Time"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): DeptShiftOtherEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftOtherEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["shortName"] = this.shortName;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["begin1Time"] = this.begin1Time;
        data["end1Time"] = this.end1Time;
        data["begin2Time"] = this.begin2Time;
        data["end2Time"] = this.end2Time;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 其他班次 */
export interface IDeptShiftOtherEditModel {
    /** 名称 *○不允许重复* */
    name: string;
    /** 班次类型 */
    type: string;
    /** 简称 */
    shortName: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 开始时间 *HH:mm* */
    begin1Time: string;
    /** 结束时间 *HH:mm* */
    end1Time: string;
    /** 开始时间 *HH:mm* */
    begin2Time: string;
    /** 结束时间 *HH:mm* */
    end2Time: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
}

/** 其他班次 */
export class DeptShiftOtherView implements IDeptShiftOtherView {
    /** 名称 *○不允许重复* */
    name!: string;
    /** 班次类型 */
    type!: string;
    /** 简称 */
    shortName!: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 开始时间 *HH:mm* */
    begin1Time!: string;
    /** 结束时间 *HH:mm* */
    end1Time!: string;
    /** 开始时间 *HH:mm* */
    begin2Time!: string;
    /** 结束时间 *HH:mm* */
    end2Time!: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDeptShiftOtherView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.shortName = _data["shortName"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.begin1Time = _data["begin1Time"];
            this.end1Time = _data["end1Time"];
            this.begin2Time = _data["begin2Time"];
            this.end2Time = _data["end2Time"];
            this.color = _data["color"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShiftOtherView {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftOtherView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["shortName"] = this.shortName;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["begin1Time"] = this.begin1Time;
        data["end1Time"] = this.end1Time;
        data["begin2Time"] = this.begin2Time;
        data["end2Time"] = this.end2Time;
        data["color"] = this.color;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 其他班次 */
export interface IDeptShiftOtherView {
    /** 名称 *○不允许重复* */
    name: string;
    /** 班次类型 */
    type: string;
    /** 简称 */
    shortName: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 开始时间 *HH:mm* */
    begin1Time: string;
    /** 结束时间 *HH:mm* */
    end1Time: string;
    /** 开始时间 *HH:mm* */
    begin2Time: string;
    /** 结束时间 *HH:mm* */
    end2Time: string;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DeptShiftOtherViewResult implements IDeptShiftOtherViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShiftOtherView[] | undefined;

    constructor(data?: IDeptShiftOtherViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptShiftOtherView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptShiftOtherViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftOtherViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptShiftOtherViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShiftOtherView[] | undefined;
}

/** Reponse */
export class DeptShiftOtherViewResultEntry implements IDeptShiftOtherViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShiftOtherView;

    constructor(data?: IDeptShiftOtherViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptShiftOtherView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShiftOtherViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShiftOtherViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptShiftOtherViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShiftOtherView;
}

/** 交班记录 */
export class DeptShr implements IDeptShr {
    /** 标识 */
    id?: string | undefined;
    /** [交班用户标识](用户信息) */
    handoverUserId?: string | undefined;
    /** 类型 `DIC.DEPT.SHTYPE` */
    type?: string | undefined;
    /** [透析区间](透析区间) */
    deptDialysisAreaId?: string | undefined;
    /** [透析班次](透析班次) */
    cureShiftId?: string | undefined;
    /** 交班时间 */
    time?: dayjs.Dayjs;
    /** [提及到的患者标识](患者信息) *不填则是整个透析区间* */
    patientId?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士* *数据库存* `sysuserid,sysuserid` */
    mentionUser?: string | undefined;
    /** 级别 *一般,重要* */
    level?: string | undefined;
    /** 交班内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    handoverUsers?: SysUser;
    deptDialysisAreas?: DeptDialysisArea;
    cureShifts?: CureShift;
    patients?: Patient;

    constructor(data?: IDeptShr) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.handoverUserId = _data["handoverUserId"];
            this.type = _data["type"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.cureShiftId = _data["cureShiftId"];
            this.time = _data["time"] ? dayjs(_data["time"].toString()) : <any>undefined;
            this.patientId = _data["patientId"];
            this.mentionUser = _data["mentionUser"];
            this.level = _data["level"];
            this.content = _data["content"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.handoverUsers = _data["handoverUsers"] ? SysUser.fromJS(_data["handoverUsers"]) : <any>undefined;
            this.deptDialysisAreas = _data["deptDialysisAreas"] ? DeptDialysisArea.fromJS(_data["deptDialysisAreas"]) : <any>undefined;
            this.cureShifts = _data["cureShifts"] ? CureShift.fromJS(_data["cureShifts"]) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShr {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShr();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["handoverUserId"] = this.handoverUserId;
        data["type"] = this.type;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["cureShiftId"] = this.cureShiftId;
        data["time"] = this.time ? this.time.toLocaleString() : <any>undefined;
        data["patientId"] = this.patientId;
        data["mentionUser"] = this.mentionUser;
        data["level"] = this.level;
        data["content"] = this.content;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["handoverUsers"] = this.handoverUsers ? this.handoverUsers.toJSON() : <any>undefined;
        data["deptDialysisAreas"] = this.deptDialysisAreas ? this.deptDialysisAreas.toJSON() : <any>undefined;
        data["cureShifts"] = this.cureShifts ? this.cureShifts.toJSON() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 交班记录 */
export interface IDeptShr {
    /** 标识 */
    id?: string | undefined;
    /** [交班用户标识](用户信息) */
    handoverUserId?: string | undefined;
    /** 类型 `DIC.DEPT.SHTYPE` */
    type?: string | undefined;
    /** [透析区间](透析区间) */
    deptDialysisAreaId?: string | undefined;
    /** [透析班次](透析班次) */
    cureShiftId?: string | undefined;
    /** 交班时间 */
    time?: dayjs.Dayjs;
    /** [提及到的患者标识](患者信息) *不填则是整个透析区间* */
    patientId?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士* *数据库存* `sysuserid,sysuserid` */
    mentionUser?: string | undefined;
    /** 级别 *一般,重要* */
    level?: string | undefined;
    /** 交班内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    handoverUsers?: SysUser;
    deptDialysisAreas?: DeptDialysisArea;
    cureShifts?: CureShift;
    patients?: Patient;
}

/** Reponse */
export class DeptShrResult implements IDeptShrResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShr[] | undefined;

    constructor(data?: IDeptShrResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DeptShr.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DeptShrResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShrResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDeptShrResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DeptShr[] | undefined;
}

/** Reponse */
export class DeptShrResultEntry implements IDeptShrResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShr;

    constructor(data?: IDeptShrResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DeptShr.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeptShrResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShrResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDeptShrResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DeptShr;
}

/** 交班记录 (ViewModel) */
export class DeptShrViewModel implements IDeptShrViewModel {
    /** [交班用户标识](用户信息Id) */
    handoverUserId!: string;
    /** 类型 `DIC.DEPT.SHTYPE` */
    type?: string | undefined;
    /** [透析区间](透析区间Id) */
    deptDialysisAreaId!: string;
    /** [透析班次](透析班次Id) */
    cureShiftId!: string;
    /** 交班时间 */
    time!: dayjs.Dayjs;
    /** [提及到的患者标识](患者信息Id) *不填则是整个透析区间* */
    patientId?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士* *数据库存* `sysuserid,sysuserid` */
    mentionUser?: string | undefined;
    /** 级别 *一般,重要* */
    level!: string;
    /** 交班内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDeptShrViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.handoverUserId = _data["handoverUserId"];
            this.type = _data["type"];
            this.deptDialysisAreaId = _data["deptDialysisAreaId"];
            this.cureShiftId = _data["cureShiftId"];
            this.time = _data["time"] ? dayjs(_data["time"].toString()) : <any>undefined;
            this.patientId = _data["patientId"];
            this.mentionUser = _data["mentionUser"];
            this.level = _data["level"];
            this.content = _data["content"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DeptShrViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeptShrViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["handoverUserId"] = this.handoverUserId;
        data["type"] = this.type;
        data["deptDialysisAreaId"] = this.deptDialysisAreaId;
        data["cureShiftId"] = this.cureShiftId;
        data["time"] = this.time ? this.time.toLocaleString() : <any>undefined;
        data["patientId"] = this.patientId;
        data["mentionUser"] = this.mentionUser;
        data["level"] = this.level;
        data["content"] = this.content;
        data["remark"] = this.remark;
        return data;
    }
}

/** 交班记录 (ViewModel) */
export interface IDeptShrViewModel {
    /** [交班用户标识](用户信息Id) */
    handoverUserId: string;
    /** 类型 `DIC.DEPT.SHTYPE` */
    type?: string | undefined;
    /** [透析区间](透析区间Id) */
    deptDialysisAreaId: string;
    /** [透析班次](透析班次Id) */
    cureShiftId: string;
    /** 交班时间 */
    time: dayjs.Dayjs;
    /** [提及到的患者标识](患者信息Id) *不填则是整个透析区间* */
    patientId?: string | undefined;
    /** 提及到的用户 *@张医生 @李护士* *数据库存* `sysuserid,sysuserid` */
    mentionUser?: string | undefined;
    /** 级别 *一般,重要* */
    level: string;
    /** 交班内容 */
    content?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 细菌过滤器更换记录 */
export class DevBacterialfilterchangeLogEditModel implements IDevBacterialfilterchangeLogEditModel {
    /** [设备编号id](#科室设备) */
    devInfoId?: string | undefined;
    /** [更换人](#用户信息) */
    operatorId?: string | undefined;
    /** 更换日期 */
    changeTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** [细菌过滤器型号](#项目清单) */
    roomItemListId?: string | undefined;

    constructor(data?: IDevBacterialfilterchangeLogEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.operatorId = _data["operatorId"];
            this.changeTime = _data["changeTime"] ? dayjs(_data["changeTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.roomItemListId = _data["roomItemListId"];
        }
    }

    static fromJS(data: any): DevBacterialfilterchangeLogEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevBacterialfilterchangeLogEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["operatorId"] = this.operatorId;
        data["changeTime"] = this.changeTime ? this.changeTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["roomItemListId"] = this.roomItemListId;
        return data;
    }
}

/** 细菌过滤器更换记录 */
export interface IDevBacterialfilterchangeLogEditModel {
    /** [设备编号id](#科室设备) */
    devInfoId?: string | undefined;
    /** [更换人](#用户信息) */
    operatorId?: string | undefined;
    /** 更换日期 */
    changeTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** [细菌过滤器型号](#项目清单) */
    roomItemListId?: string | undefined;
}

/** 细菌过滤器excel转换 */
export class DevBacterialfilterchangeLogExcelView implements IDevBacterialfilterchangeLogExcelView {
    /** 更换人 */
    creater?: string | undefined;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 细菌过滤器名称 */
    bacterialfilterName?: string | undefined;
    /** 细菌过滤器型号 */
    bacterialfilterType?: string | undefined;
    /** 设备型号 */
    devType?: string | undefined;
    /** 更换日期 */
    changeTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevBacterialfilterchangeLogExcelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.creater = _data["creater"];
            this.devCode = _data["devCode"];
            this.bacterialfilterName = _data["bacterialfilterName"];
            this.bacterialfilterType = _data["bacterialfilterType"];
            this.devType = _data["devType"];
            this.changeTime = _data["changeTime"] ? dayjs(_data["changeTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevBacterialfilterchangeLogExcelView {
        data = typeof data === 'object' ? data : {};
        let result = new DevBacterialfilterchangeLogExcelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["creater"] = this.creater;
        data["devCode"] = this.devCode;
        data["bacterialfilterName"] = this.bacterialfilterName;
        data["bacterialfilterType"] = this.bacterialfilterType;
        data["devType"] = this.devType;
        data["changeTime"] = this.changeTime ? this.changeTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        return data;
    }
}

/** 细菌过滤器excel转换 */
export interface IDevBacterialfilterchangeLogExcelView {
    /** 更换人 */
    creater?: string | undefined;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 细菌过滤器名称 */
    bacterialfilterName?: string | undefined;
    /** 细菌过滤器型号 */
    bacterialfilterType?: string | undefined;
    /** 设备型号 */
    devType?: string | undefined;
    /** 更换日期 */
    changeTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DevBacterialfilterchangeLogExcelViewResult implements IDevBacterialfilterchangeLogExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevBacterialfilterchangeLogExcelView[] | undefined;

    constructor(data?: IDevBacterialfilterchangeLogExcelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevBacterialfilterchangeLogExcelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevBacterialfilterchangeLogExcelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevBacterialfilterchangeLogExcelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevBacterialfilterchangeLogExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevBacterialfilterchangeLogExcelView[] | undefined;
}

/** 细菌过滤器更换记录 */
export class DevBacterialfilterchangeLogView implements IDevBacterialfilterchangeLogView {
    /** [设备编号id](#科室设备) */
    devInfoId?: string | undefined;
    /** [更换人](#用户信息) */
    operatorId?: string | undefined;
    /** 更换日期 */
    changeTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** [细菌过滤器型号](#项目清单) */
    roomItemListId?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 设备型号 */
    devType?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** 细菌过滤器型号 */
    bacterialfilterType?: string | undefined;
    /** 细菌过滤器名称 */
    bacterialfilterName?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDevBacterialfilterchangeLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.operatorId = _data["operatorId"];
            this.changeTime = _data["changeTime"] ? dayjs(_data["changeTime"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.roomItemListId = _data["roomItemListId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.devCode = _data["devCode"];
            this.devType = _data["devType"];
            this.sn = _data["sn"];
            this.bacterialfilterType = _data["bacterialfilterType"];
            this.bacterialfilterName = _data["bacterialfilterName"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DevBacterialfilterchangeLogView {
        data = typeof data === 'object' ? data : {};
        let result = new DevBacterialfilterchangeLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["operatorId"] = this.operatorId;
        data["changeTime"] = this.changeTime ? this.changeTime.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["roomItemListId"] = this.roomItemListId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["devCode"] = this.devCode;
        data["devType"] = this.devType;
        data["sn"] = this.sn;
        data["bacterialfilterType"] = this.bacterialfilterType;
        data["bacterialfilterName"] = this.bacterialfilterName;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 细菌过滤器更换记录 */
export interface IDevBacterialfilterchangeLogView {
    /** [设备编号id](#科室设备) */
    devInfoId?: string | undefined;
    /** [更换人](#用户信息) */
    operatorId?: string | undefined;
    /** 更换日期 */
    changeTime?: dayjs.Dayjs;
    /** 备注 */
    remark?: string | undefined;
    /** [细菌过滤器型号](#项目清单) */
    roomItemListId?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 设备编号 */
    devCode?: string | undefined;
    /** 设备型号 */
    devType?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** 细菌过滤器型号 */
    bacterialfilterType?: string | undefined;
    /** 细菌过滤器名称 */
    bacterialfilterName?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DevBacterialfilterchangeLogViewResult implements IDevBacterialfilterchangeLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevBacterialfilterchangeLogView[] | undefined;

    constructor(data?: IDevBacterialfilterchangeLogViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevBacterialfilterchangeLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevBacterialfilterchangeLogViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevBacterialfilterchangeLogViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevBacterialfilterchangeLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevBacterialfilterchangeLogView[] | undefined;
}

/** Reponse */
export class DevBacterialfilterchangeLogViewResultEntry implements IDevBacterialfilterchangeLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevBacterialfilterchangeLogView;

    constructor(data?: IDevBacterialfilterchangeLogViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevBacterialfilterchangeLogView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevBacterialfilterchangeLogViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevBacterialfilterchangeLogViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevBacterialfilterchangeLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevBacterialfilterchangeLogView;
}

/** 消毒 */
export class DevDisinfectLogView implements IDevDisinfectLogView {
    /** 标识 */
    id?: string | undefined;
    /** 设备标识 */
    devInfoId?: string | undefined;
    /** 设备编号 */
    devInfoCode?: string | undefined;
    /** 设备号 */
    devInfoSn?: string | undefined;
    /** 消毒日期 */
    date?: dayjs.Dayjs;
    /** 班次标识 */
    cureShiftId?: string | undefined;
    /** 班次 */
    cureShiftName?: string | undefined;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 */
    endDate?: dayjs.Dayjs;
    /** 消毒时长 *分钟* */
    disinfectTime?: number;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` */
    programSphygmomanometerCuff?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` - 显示值 */
    programSphygmomanometerCuffLabel?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) - 标识 */
    sphygmomanometerCuffOperatorId?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) - 名称 */
    sphygmomanometerCuffOperatorName?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 柠檬酸消毒温度 */
    citricAcidTemp?: string | undefined;

    constructor(data?: IDevDisinfectLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.devInfoId = _data["devInfoId"];
            this.devInfoCode = _data["devInfoCode"];
            this.devInfoSn = _data["devInfoSn"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.cureShiftId = _data["cureShiftId"];
            this.cureShiftName = _data["cureShiftName"];
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.disinfectTime = _data["disinfectTime"];
            this.programInternal = _data["programInternal"];
            this.programInternalLabel = _data["programInternalLabel"];
            this.internalOperatorId = _data["internalOperatorId"];
            this.internalOperatorName = _data["internalOperatorName"];
            this.programExterior = _data["programExterior"];
            this.programExteriorLabel = _data["programExteriorLabel"];
            this.externalOperatorId = _data["externalOperatorId"];
            this.externalOperatorName = _data["externalOperatorName"];
            this.programSphygmomanometerCuff = _data["programSphygmomanometerCuff"];
            this.programSphygmomanometerCuffLabel = _data["programSphygmomanometerCuffLabel"];
            this.sphygmomanometerCuffOperatorId = _data["sphygmomanometerCuffOperatorId"];
            this.sphygmomanometerCuffOperatorName = _data["sphygmomanometerCuffOperatorName"];
            this.bedUnitCleaning = _data["bedUnitCleaning"];
            this.filterScreenChanging = _data["filterScreenChanging"];
            this.disinfectTemp = _data["disinfectTemp"];
            this.disinfectInstructions = _data["disinfectInstructions"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.citricAcidTemp = _data["citricAcidTemp"];
        }
    }

    static fromJS(data: any): DevDisinfectLogView {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["devInfoId"] = this.devInfoId;
        data["devInfoCode"] = this.devInfoCode;
        data["devInfoSn"] = this.devInfoSn;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["cureShiftId"] = this.cureShiftId;
        data["cureShiftName"] = this.cureShiftName;
        data["beginDate"] = this.beginDate ? this.beginDate.toLocaleString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toLocaleString() : <any>undefined;
        data["disinfectTime"] = this.disinfectTime;
        data["programInternal"] = this.programInternal;
        data["programInternalLabel"] = this.programInternalLabel;
        data["internalOperatorId"] = this.internalOperatorId;
        data["internalOperatorName"] = this.internalOperatorName;
        data["programExterior"] = this.programExterior;
        data["programExteriorLabel"] = this.programExteriorLabel;
        data["externalOperatorId"] = this.externalOperatorId;
        data["externalOperatorName"] = this.externalOperatorName;
        data["programSphygmomanometerCuff"] = this.programSphygmomanometerCuff;
        data["programSphygmomanometerCuffLabel"] = this.programSphygmomanometerCuffLabel;
        data["sphygmomanometerCuffOperatorId"] = this.sphygmomanometerCuffOperatorId;
        data["sphygmomanometerCuffOperatorName"] = this.sphygmomanometerCuffOperatorName;
        data["bedUnitCleaning"] = this.bedUnitCleaning;
        data["filterScreenChanging"] = this.filterScreenChanging;
        data["disinfectTemp"] = this.disinfectTemp;
        data["disinfectInstructions"] = this.disinfectInstructions;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["citricAcidTemp"] = this.citricAcidTemp;
        return data;
    }
}

/** 消毒 */
export interface IDevDisinfectLogView {
    /** 标识 */
    id?: string | undefined;
    /** 设备标识 */
    devInfoId?: string | undefined;
    /** 设备编号 */
    devInfoCode?: string | undefined;
    /** 设备号 */
    devInfoSn?: string | undefined;
    /** 消毒日期 */
    date?: dayjs.Dayjs;
    /** 班次标识 */
    cureShiftId?: string | undefined;
    /** 班次 */
    cureShiftName?: string | undefined;
    /** 开始时间 */
    beginDate?: dayjs.Dayjs;
    /** 停止时间 */
    endDate?: dayjs.Dayjs;
    /** 消毒时长 *分钟* */
    disinfectTime?: number;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 机内消毒人标识 */
    internalOperatorId?: string | undefined;
    /** 机内消毒人名称 */
    internalOperatorName?: string | undefined;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机外消毒人标识 */
    externalOperatorId?: string | undefined;
    /** 机外消毒人名称 */
    externalOperatorName?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` */
    programSphygmomanometerCuff?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` - 显示值 */
    programSphygmomanometerCuffLabel?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) - 标识 */
    sphygmomanometerCuffOperatorId?: string | undefined;
    /** [血压计袖带消毒人](#用户信息) - 名称 */
    sphygmomanometerCuffOperatorName?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 柠檬酸消毒温度 */
    citricAcidTemp?: string | undefined;
}

/** 消毒记录 (ViewModel) */
export class DevDisinfectLogViewModel implements IDevDisinfectLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId!: string;
    /** 班次 */
    cureShiftId?: string | undefined;
    /** 班次 */
    cureShiftName?: string | undefined;
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** 开始时间 */
    beginDate!: dayjs.Dayjs;
    /** 停止时间 */
    endDate!: dayjs.Dayjs;
    /** 消毒时长 *分钟* */
    disinfectTime!: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** [机外消毒人](用户信息Id) */
    externalOperatorId?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** [机内消毒人](用户信息Id) */
    internalOperatorId?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` */
    programSphygmomanometerCuff?: string | undefined;
    /** [血压计袖带消毒人](用户信息Id) */
    sphygmomanometerCuffOperatorId?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 柠檬酸消毒温度 */
    citricAcidTemp?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevDisinfectLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.cureShiftId = _data["cureShiftId"];
            this.cureShiftName = _data["cureShiftName"];
            this.cureRecordId = _data["cureRecordId"];
            this.beginDate = _data["beginDate"] ? dayjs(_data["beginDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? dayjs(_data["endDate"].toString()) : <any>undefined;
            this.disinfectTime = _data["disinfectTime"];
            this.programExterior = _data["programExterior"];
            this.externalOperatorId = _data["externalOperatorId"];
            this.programInternal = _data["programInternal"];
            this.internalOperatorId = _data["internalOperatorId"];
            this.programSphygmomanometerCuff = _data["programSphygmomanometerCuff"];
            this.sphygmomanometerCuffOperatorId = _data["sphygmomanometerCuffOperatorId"];
            this.bedUnitCleaning = _data["bedUnitCleaning"];
            this.filterScreenChanging = _data["filterScreenChanging"];
            this.disinfectTemp = _data["disinfectTemp"];
            this.disinfectInstructions = _data["disinfectInstructions"];
            this.citricAcidTemp = _data["citricAcidTemp"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevDisinfectLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["cureShiftId"] = this.cureShiftId;
        data["cureShiftName"] = this.cureShiftName;
        data["cureRecordId"] = this.cureRecordId;
        data["beginDate"] = this.beginDate ? this.beginDate.toLocaleString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toLocaleString() : <any>undefined;
        data["disinfectTime"] = this.disinfectTime;
        data["programExterior"] = this.programExterior;
        data["externalOperatorId"] = this.externalOperatorId;
        data["programInternal"] = this.programInternal;
        data["internalOperatorId"] = this.internalOperatorId;
        data["programSphygmomanometerCuff"] = this.programSphygmomanometerCuff;
        data["sphygmomanometerCuffOperatorId"] = this.sphygmomanometerCuffOperatorId;
        data["bedUnitCleaning"] = this.bedUnitCleaning;
        data["filterScreenChanging"] = this.filterScreenChanging;
        data["disinfectTemp"] = this.disinfectTemp;
        data["disinfectInstructions"] = this.disinfectInstructions;
        data["citricAcidTemp"] = this.citricAcidTemp;
        data["remark"] = this.remark;
        return data;
    }
}

/** 消毒记录 (ViewModel) */
export interface IDevDisinfectLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId: string;
    /** 班次 */
    cureShiftId?: string | undefined;
    /** 班次 */
    cureShiftName?: string | undefined;
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** 开始时间 */
    beginDate: dayjs.Dayjs;
    /** 停止时间 */
    endDate: dayjs.Dayjs;
    /** 消毒时长 *分钟* */
    disinfectTime: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** [机外消毒人](用户信息Id) */
    externalOperatorId?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** [机内消毒人](用户信息Id) */
    internalOperatorId?: string | undefined;
    /** 血压计袖带消毒方式 `DIC.DEV.DIS.PROGRAM.SPHYGMOMANOMETERCUFF` */
    programSphygmomanometerCuff?: string | undefined;
    /** [血压计袖带消毒人](用户信息Id) */
    sphygmomanometerCuffOperatorId?: string | undefined;
    /** 床单元清洁 */
    bedUnitCleaning?: string | undefined;
    /** 过滤网更换 */
    filterScreenChanging?: string | undefined;
    /** 消毒温度 *℃* */
    disinfectTemp?: string | undefined;
    /** 消毒说明 */
    disinfectInstructions?: string | undefined;
    /** 柠檬酸消毒温度 */
    citricAcidTemp?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DevDisinfectLogViewResult implements IDevDisinfectLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDisinfectLogView[] | undefined;

    constructor(data?: IDevDisinfectLogViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevDisinfectLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevDisinfectLogViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectLogViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevDisinfectLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDisinfectLogView[] | undefined;
}

/** Reponse */
export class DevDisinfectLogViewResultEntry implements IDevDisinfectLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevDisinfectLogView;

    constructor(data?: IDevDisinfectLogViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevDisinfectLogView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevDisinfectLogViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectLogViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevDisinfectLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevDisinfectLogView;
}

/** 设备消毒配置 */
export class DevDisinfectSetting implements IDevDisinfectSetting {
    /** 标识 */
    id?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` */
    devType?: string | undefined;
    /** 设备型号 */
    devModel?: string | undefined;
    /** [班次](透析班次) *不填则是通用的* */
    cureShiftId?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime?: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒温度 */
    internalTemp?: string | undefined;
    /** 柠檬酸消毒温度 */
    citricAcidTemp?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureShifts?: CureShift;

    constructor(data?: IDevDisinfectSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.devType = _data["devType"];
            this.devModel = _data["devModel"];
            this.cureShiftId = _data["cureShiftId"];
            this.disinfectTime = _data["disinfectTime"];
            this.programExterior = _data["programExterior"];
            this.programInternal = _data["programInternal"];
            this.internalTemp = _data["internalTemp"];
            this.citricAcidTemp = _data["citricAcidTemp"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.cureShifts = _data["cureShifts"] ? CureShift.fromJS(_data["cureShifts"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevDisinfectSetting {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["devType"] = this.devType;
        data["devModel"] = this.devModel;
        data["cureShiftId"] = this.cureShiftId;
        data["disinfectTime"] = this.disinfectTime;
        data["programExterior"] = this.programExterior;
        data["programInternal"] = this.programInternal;
        data["internalTemp"] = this.internalTemp;
        data["citricAcidTemp"] = this.citricAcidTemp;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["cureShifts"] = this.cureShifts ? this.cureShifts.toJSON() : <any>undefined;
        return data;
    }
}

/** 设备消毒配置 */
export interface IDevDisinfectSetting {
    /** 标识 */
    id?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` */
    devType?: string | undefined;
    /** 设备型号 */
    devModel?: string | undefined;
    /** [班次](透析班次) *不填则是通用的* */
    cureShiftId?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime?: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 机内消毒温度 */
    internalTemp?: string | undefined;
    /** 柠檬酸消毒温度 */
    citricAcidTemp?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    cureShifts?: CureShift;
}

/** 设备消毒配置 */
export class DevDisinfectSettingEditModel implements IDevDisinfectSettingEditModel {
    /** 设备类型 `DIC.DEV.TYPE` */
    devType!: string;
    /** 设备型号 */
    devModel!: string;
    /** [班次](#透析班次) *不填则是通用的* */
    cureShiftId?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime!: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 机内消毒温度 */
    internalTemp?: string | undefined;
    /** 柠檬酸消毒温度 */
    citricAcidTemp?: string | undefined;

    constructor(data?: IDevDisinfectSettingEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devType = _data["devType"];
            this.devModel = _data["devModel"];
            this.cureShiftId = _data["cureShiftId"];
            this.disinfectTime = _data["disinfectTime"];
            this.programExterior = _data["programExterior"];
            this.programInternal = _data["programInternal"];
            this.remark = _data["remark"];
            this.internalTemp = _data["internalTemp"];
            this.citricAcidTemp = _data["citricAcidTemp"];
        }
    }

    static fromJS(data: any): DevDisinfectSettingEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectSettingEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devType"] = this.devType;
        data["devModel"] = this.devModel;
        data["cureShiftId"] = this.cureShiftId;
        data["disinfectTime"] = this.disinfectTime;
        data["programExterior"] = this.programExterior;
        data["programInternal"] = this.programInternal;
        data["remark"] = this.remark;
        data["internalTemp"] = this.internalTemp;
        data["citricAcidTemp"] = this.citricAcidTemp;
        return data;
    }
}

/** 设备消毒配置 */
export interface IDevDisinfectSettingEditModel {
    /** 设备类型 `DIC.DEV.TYPE` */
    devType: string;
    /** 设备型号 */
    devModel: string;
    /** [班次](#透析班次) *不填则是通用的* */
    cureShiftId?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 机内消毒温度 */
    internalTemp?: string | undefined;
    /** 柠檬酸消毒温度 */
    citricAcidTemp?: string | undefined;
}

/** Reponse */
export class DevDisinfectSettingResultEntry implements IDevDisinfectSettingResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevDisinfectSetting;

    constructor(data?: IDevDisinfectSettingResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevDisinfectSetting.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevDisinfectSettingResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectSettingResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevDisinfectSettingResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevDisinfectSetting;
}

/** 设备消毒配置 */
export class DevDisinfectSettingView implements IDevDisinfectSettingView {
    /** 设备类型 `DIC.DEV.TYPE` */
    devType!: string;
    /** 设备型号 */
    devModel!: string;
    /** [班次](#透析班次) *不填则是通用的* */
    cureShiftId?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime!: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 机内消毒温度 */
    internalTemp?: string | undefined;
    /** 柠檬酸消毒温度 */
    citricAcidTemp?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` */
    devTypeLabel?: string | undefined;
    /** 班次 *不填则是通用的* */
    cureShiftName?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDevDisinfectSettingView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devType = _data["devType"];
            this.devModel = _data["devModel"];
            this.cureShiftId = _data["cureShiftId"];
            this.disinfectTime = _data["disinfectTime"];
            this.programExterior = _data["programExterior"];
            this.programInternal = _data["programInternal"];
            this.remark = _data["remark"];
            this.internalTemp = _data["internalTemp"];
            this.citricAcidTemp = _data["citricAcidTemp"];
            this.devTypeLabel = _data["devTypeLabel"];
            this.cureShiftName = _data["cureShiftName"];
            this.programExteriorLabel = _data["programExteriorLabel"];
            this.programInternalLabel = _data["programInternalLabel"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DevDisinfectSettingView {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectSettingView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devType"] = this.devType;
        data["devModel"] = this.devModel;
        data["cureShiftId"] = this.cureShiftId;
        data["disinfectTime"] = this.disinfectTime;
        data["programExterior"] = this.programExterior;
        data["programInternal"] = this.programInternal;
        data["remark"] = this.remark;
        data["internalTemp"] = this.internalTemp;
        data["citricAcidTemp"] = this.citricAcidTemp;
        data["devTypeLabel"] = this.devTypeLabel;
        data["cureShiftName"] = this.cureShiftName;
        data["programExteriorLabel"] = this.programExteriorLabel;
        data["programInternalLabel"] = this.programInternalLabel;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 设备消毒配置 */
export interface IDevDisinfectSettingView {
    /** 设备类型 `DIC.DEV.TYPE` */
    devType: string;
    /** 设备型号 */
    devModel: string;
    /** [班次](#透析班次) *不填则是通用的* */
    cureShiftId?: string | undefined;
    /** 消毒时长 *分钟* */
    disinfectTime: number;
    /** 机外消毒方式 `DIC.DEV.DIS.PROGRAM.EXTERIOR` */
    programExterior?: string | undefined;
    /** 机内消毒方式 `DIC.DEV.DIS.PROGRAM.INTERNAL` */
    programInternal?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 机内消毒温度 */
    internalTemp?: string | undefined;
    /** 柠檬酸消毒温度 */
    citricAcidTemp?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` */
    devTypeLabel?: string | undefined;
    /** 班次 *不填则是通用的* */
    cureShiftName?: string | undefined;
    /** 机外消毒方式显示值 */
    programExteriorLabel?: string | undefined;
    /** 机内消毒方式显示值 */
    programInternalLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DevDisinfectSettingViewResult implements IDevDisinfectSettingViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDisinfectSettingView[] | undefined;

    constructor(data?: IDevDisinfectSettingViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevDisinfectSettingView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevDisinfectSettingViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevDisinfectSettingViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevDisinfectSettingViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevDisinfectSettingView[] | undefined;
}

/** 科室设备 */
export class DevInfo implements IDevInfo {
    /** 标识 */
    id?: string | undefined;
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** [操作者](用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive?: number;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;
    sysHospitalAreas?: SysHospitalArea;
    sysUsers?: SysUser;

    constructor(data?: IDevInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.sn = _data["sn"];
            this.ip = _data["ip"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.dealer = _data["dealer"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.sysUserId = _data["sysUserId"];
            this.dateUsed = _data["dateUsed"] ? dayjs(_data["dateUsed"].toString()) : <any>undefined;
            this.dateWarranty = _data["dateWarranty"] ? dayjs(_data["dateWarranty"].toString()) : <any>undefined;
            this.positive = _data["positive"];
            this.sphygmomanometerCuff = _data["sphygmomanometerCuff"];
            this.diseaseType = _data["diseaseType"];
            this.location = _data["location"];
            this.remark = _data["remark"];
            this.status = _data["status"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.isNew = _data["isNew"];
            this.sequence = _data["sequence"];
            this.sysHospitalAreas = _data["sysHospitalAreas"] ? SysHospitalArea.fromJS(_data["sysHospitalAreas"]) : <any>undefined;
            this.sysUsers = _data["sysUsers"] ? SysUser.fromJS(_data["sysUsers"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["sn"] = this.sn;
        data["ip"] = this.ip;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toLocaleString() : <any>undefined;
        data["dealer"] = this.dealer;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["sysUserId"] = this.sysUserId;
        data["dateUsed"] = this.dateUsed ? this.dateUsed.toLocaleString() : <any>undefined;
        data["dateWarranty"] = this.dateWarranty ? this.dateWarranty.toLocaleString() : <any>undefined;
        data["positive"] = this.positive;
        data["sphygmomanometerCuff"] = this.sphygmomanometerCuff;
        data["diseaseType"] = this.diseaseType;
        data["location"] = this.location;
        data["remark"] = this.remark;
        data["status"] = this.status;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["isNew"] = this.isNew;
        data["sequence"] = this.sequence;
        data["sysHospitalAreas"] = this.sysHospitalAreas ? this.sysHospitalAreas.toJSON() : <any>undefined;
        data["sysUsers"] = this.sysUsers ? this.sysUsers.toJSON() : <any>undefined;
        return data;
    }
}

/** 科室设备 */
export interface IDevInfo {
    /** 标识 */
    id?: string | undefined;
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](透析室) */
    sysHospitalAreaId?: string | undefined;
    /** [操作者](用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive?: number;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;
    sysHospitalAreas?: SysHospitalArea;
    sysUsers?: SysUser;
}

export class DevInfoEditModel implements IDevInfoEditModel {
    /** 设备编号 *○不允许重复* */
    code!: string;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type!: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model!: string;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** [操作者](#用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive!: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status!: string;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;

    constructor(data?: IDevInfoEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.sn = _data["sn"];
            this.ip = _data["ip"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.dealer = _data["dealer"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.sysUserId = _data["sysUserId"];
            this.dateUsed = _data["dateUsed"] ? dayjs(_data["dateUsed"].toString()) : <any>undefined;
            this.dateWarranty = _data["dateWarranty"] ? dayjs(_data["dateWarranty"].toString()) : <any>undefined;
            this.positive = _data["positive"];
            this.diseaseType = _data["diseaseType"];
            this.location = _data["location"];
            this.remark = _data["remark"];
            this.status = _data["status"];
            this.boxIp = _data["boxIp"];
            this.bluetoothBpId = _data["bluetoothBpId"];
            this.sphygmomanometerCuff = _data["sphygmomanometerCuff"];
            this.isNew = _data["isNew"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): DevInfoEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["sn"] = this.sn;
        data["ip"] = this.ip;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toLocaleString() : <any>undefined;
        data["dealer"] = this.dealer;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["sysUserId"] = this.sysUserId;
        data["dateUsed"] = this.dateUsed ? this.dateUsed.toLocaleString() : <any>undefined;
        data["dateWarranty"] = this.dateWarranty ? this.dateWarranty.toLocaleString() : <any>undefined;
        data["positive"] = this.positive;
        data["diseaseType"] = this.diseaseType;
        data["location"] = this.location;
        data["remark"] = this.remark;
        data["status"] = this.status;
        data["boxIp"] = this.boxIp;
        data["bluetoothBpId"] = this.bluetoothBpId;
        data["sphygmomanometerCuff"] = this.sphygmomanometerCuff;
        data["isNew"] = this.isNew;
        data["sequence"] = this.sequence;
        return data;
    }
}

export interface IDevInfoEditModel {
    /** 设备编号 *○不允许重复* */
    code: string;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model: string;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** [操作者](#用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status: string;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;
}

/** 从 Excel 导入 设备信息 表所需的视图类 */
export class DevInfoExcelView implements IDevInfoExcelView {
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备类型 - 显示值 */
    typeLabel?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positiveStr?: string | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    readonly positive?: number;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 病情类型 - 显示值 */
    diseaseTypeLabel?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 设备状态 - 显示值 */
    statusLabel?: string | undefined;
    /** 使用科室 */
    department?: string | undefined;

    constructor(data?: IDevInfoExcelView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.model = _data["model"];
            this.sn = _data["sn"];
            this.ip = _data["ip"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.dealer = _data["dealer"];
            this.dateUsed = _data["dateUsed"] ? dayjs(_data["dateUsed"].toString()) : <any>undefined;
            this.dateWarranty = _data["dateWarranty"] ? dayjs(_data["dateWarranty"].toString()) : <any>undefined;
            this.positiveStr = _data["positiveStr"];
            (<any>this).positive = _data["positive"];
            this.sphygmomanometerCuff = _data["sphygmomanometerCuff"];
            this.diseaseType = _data["diseaseType"];
            this.diseaseTypeLabel = _data["diseaseTypeLabel"];
            this.location = _data["location"];
            this.remark = _data["remark"];
            this.status = _data["status"];
            this.statusLabel = _data["statusLabel"];
            this.department = _data["department"];
        }
    }

    static fromJS(data: any): DevInfoExcelView {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoExcelView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["model"] = this.model;
        data["sn"] = this.sn;
        data["ip"] = this.ip;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toLocaleString() : <any>undefined;
        data["dealer"] = this.dealer;
        data["dateUsed"] = this.dateUsed ? this.dateUsed.toLocaleString() : <any>undefined;
        data["dateWarranty"] = this.dateWarranty ? this.dateWarranty.toLocaleString() : <any>undefined;
        data["positiveStr"] = this.positiveStr;
        data["positive"] = this.positive;
        data["sphygmomanometerCuff"] = this.sphygmomanometerCuff;
        data["diseaseType"] = this.diseaseType;
        data["diseaseTypeLabel"] = this.diseaseTypeLabel;
        data["location"] = this.location;
        data["remark"] = this.remark;
        data["status"] = this.status;
        data["statusLabel"] = this.statusLabel;
        data["department"] = this.department;
        return data;
    }
}

/** 从 Excel 导入 设备信息 表所需的视图类 */
export interface IDevInfoExcelView {
    /** 设备编号 *○不允许重复* */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备类型 - 显示值 */
    typeLabel?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positiveStr?: string | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive?: number;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 病情类型 - 显示值 */
    diseaseTypeLabel?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status?: string | undefined;
    /** 设备状态 - 显示值 */
    statusLabel?: string | undefined;
    /** 使用科室 */
    department?: string | undefined;
}

/** Reponse */
export class DevInfoExcelViewResult implements IDevInfoExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevInfoExcelView[] | undefined;

    constructor(data?: IDevInfoExcelViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevInfoExcelView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevInfoExcelViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoExcelViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevInfoExcelViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevInfoExcelView[] | undefined;
}

/** 设备汇总 */
export class DevInfoSummaryView implements IDevInfoSummaryView {
    /** 正常 */
    enabledCount?: number;
    /** 故障 */
    faultCount?: number;
    /** 维修 */
    maintainCount?: number;
    /** 总量 （停用与报废不统计） */
    sumCount?: number;
    /** 水消毒状态 (0-异常 1-正常) */
    watertreatmentNormal?: number;

    constructor(data?: IDevInfoSummaryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enabledCount = _data["enabledCount"];
            this.faultCount = _data["faultCount"];
            this.maintainCount = _data["maintainCount"];
            this.sumCount = _data["sumCount"];
            this.watertreatmentNormal = _data["watertreatmentNormal"];
        }
    }

    static fromJS(data: any): DevInfoSummaryView {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoSummaryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enabledCount"] = this.enabledCount;
        data["faultCount"] = this.faultCount;
        data["maintainCount"] = this.maintainCount;
        data["sumCount"] = this.sumCount;
        data["watertreatmentNormal"] = this.watertreatmentNormal;
        return data;
    }
}

/** 设备汇总 */
export interface IDevInfoSummaryView {
    /** 正常 */
    enabledCount?: number;
    /** 故障 */
    faultCount?: number;
    /** 维修 */
    maintainCount?: number;
    /** 总量 （停用与报废不统计） */
    sumCount?: number;
    /** 水消毒状态 (0-异常 1-正常) */
    watertreatmentNormal?: number;
}

/** Reponse */
export class DevInfoSummaryViewResultEntry implements IDevInfoSummaryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevInfoSummaryView;

    constructor(data?: IDevInfoSummaryViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevInfoSummaryView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevInfoSummaryViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoSummaryViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevInfoSummaryViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevInfoSummaryView;
}

/** 设备信息 */
export class DevInfoView implements IDevInfoView {
    /** 设备编号 *○不允许重复* */
    code!: string;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type!: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model!: string;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** [操作者](#用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive!: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status!: string;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 床位编号 */
    bedName?: string | undefined;
    /** 设备类型名称 */
    typeName?: string | undefined;
    /** [使用科室](院区) */
    sysHospitalAreaName?: string | undefined;
    /** [使用科室](院区) */
    sysHospitalAreaNameFull?: string | undefined;
    /** 负责人名称 */
    sysUserName?: string | undefined;
    /** 病情类型名称 */
    diseaseTypeName?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    statusName?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDevInfoView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.sn = _data["sn"];
            this.ip = _data["ip"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.dealer = _data["dealer"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.sysUserId = _data["sysUserId"];
            this.dateUsed = _data["dateUsed"] ? dayjs(_data["dateUsed"].toString()) : <any>undefined;
            this.dateWarranty = _data["dateWarranty"] ? dayjs(_data["dateWarranty"].toString()) : <any>undefined;
            this.positive = _data["positive"];
            this.diseaseType = _data["diseaseType"];
            this.location = _data["location"];
            this.remark = _data["remark"];
            this.status = _data["status"];
            this.boxIp = _data["boxIp"];
            this.bluetoothBpId = _data["bluetoothBpId"];
            this.sphygmomanometerCuff = _data["sphygmomanometerCuff"];
            this.isNew = _data["isNew"];
            this.sequence = _data["sequence"];
            this.bedName = _data["bedName"];
            this.typeName = _data["typeName"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
            this.sysHospitalAreaNameFull = _data["sysHospitalAreaNameFull"];
            this.sysUserName = _data["sysUserName"];
            this.diseaseTypeName = _data["diseaseTypeName"];
            this.statusName = _data["statusName"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DevInfoView {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["type"] = this.type;
        data["model"] = this.model;
        data["sn"] = this.sn;
        data["ip"] = this.ip;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toLocaleString() : <any>undefined;
        data["dealer"] = this.dealer;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["sysUserId"] = this.sysUserId;
        data["dateUsed"] = this.dateUsed ? this.dateUsed.toLocaleString() : <any>undefined;
        data["dateWarranty"] = this.dateWarranty ? this.dateWarranty.toLocaleString() : <any>undefined;
        data["positive"] = this.positive;
        data["diseaseType"] = this.diseaseType;
        data["location"] = this.location;
        data["remark"] = this.remark;
        data["status"] = this.status;
        data["boxIp"] = this.boxIp;
        data["bluetoothBpId"] = this.bluetoothBpId;
        data["sphygmomanometerCuff"] = this.sphygmomanometerCuff;
        data["isNew"] = this.isNew;
        data["sequence"] = this.sequence;
        data["bedName"] = this.bedName;
        data["typeName"] = this.typeName;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        data["sysHospitalAreaNameFull"] = this.sysHospitalAreaNameFull;
        data["sysUserName"] = this.sysUserName;
        data["diseaseTypeName"] = this.diseaseTypeName;
        data["statusName"] = this.statusName;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 设备信息 */
export interface IDevInfoView {
    /** 设备编号 *○不允许重复* */
    code: string;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model: string;
    /** 设备号 */
    sn?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** [操作者](#用户信息) */
    sysUserId?: string | undefined;
    /** 使用日期 */
    dateUsed?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    dateWarranty?: dayjs.Dayjs | undefined;
    /** 是否阳性0,1 *如阳性不可改为阴性* */
    positive: number;
    /** 病情类型 `DIC.DEV.DISEASE.TYPE` *普通,甲肝,乙肝,丙肝,梅毒等* */
    diseaseType?: string | undefined;
    /** 存放地点 */
    location?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status: string;
    /** 联机盒地址 */
    boxIp?: string | undefined;
    /** 蓝牙血压计地址 */
    bluetoothBpId?: string | undefined;
    /** 是否有血压计袖带0,1 */
    sphygmomanometerCuff?: number | undefined;
    /** 是否使用新联机 */
    isNew?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 床位编号 */
    bedName?: string | undefined;
    /** 设备类型名称 */
    typeName?: string | undefined;
    /** [使用科室](院区) */
    sysHospitalAreaName?: string | undefined;
    /** [使用科室](院区) */
    sysHospitalAreaNameFull?: string | undefined;
    /** 负责人名称 */
    sysUserName?: string | undefined;
    /** 病情类型名称 */
    diseaseTypeName?: string | undefined;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    statusName?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DevInfoViewResult implements IDevInfoViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevInfoView[] | undefined;

    constructor(data?: IDevInfoViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevInfoView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevInfoViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevInfoViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevInfoView[] | undefined;
}

/** Reponse */
export class DevInfoViewResultEntry implements IDevInfoViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevInfoView;

    constructor(data?: IDevInfoViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevInfoView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevInfoViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevInfoViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevInfoViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevInfoView;
}

/** 维护记录 */
export class DevMaintenanceLogView implements IDevMaintenanceLogView {
    /** 标识 */
    id?: string | undefined;
    /** 设备标识 */
    devInfoId?: string | undefined;
    /** 设备编号 *○不允许重复* */
    devInfoCode?: string | undefined;
    /** 设备号 */
    devInfoSn?: string | undefined;
    /** 维护日期 */
    date?: dayjs.Dayjs;
    /** 维护类型 *维修,保养* */
    type?: string | undefined;
    /** 费用 */
    cost?: number;
    /** 科室工程师 */
    engineer?: string | undefined;
    /** 维护工程师 */
    serviceEngineer?: string | undefined;
    /** 内容 *更换零件内容* */
    content?: string | undefined;
    /** 维修部位 */
    repairPosition?: string | undefined;
    /** 维修部位显示值 */
    repairPositionLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** [操作者标识](#用户信息) */
    operatorId?: string | undefined;
    /** 操作者标识 */
    operator?: string | undefined;

    constructor(data?: IDevMaintenanceLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.devInfoId = _data["devInfoId"];
            this.devInfoCode = _data["devInfoCode"];
            this.devInfoSn = _data["devInfoSn"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.cost = _data["cost"];
            this.engineer = _data["engineer"];
            this.serviceEngineer = _data["serviceEngineer"];
            this.content = _data["content"];
            this.repairPosition = _data["repairPosition"];
            this.repairPositionLabel = _data["repairPositionLabel"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operator = _data["operator"];
        }
    }

    static fromJS(data: any): DevMaintenanceLogView {
        data = typeof data === 'object' ? data : {};
        let result = new DevMaintenanceLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["devInfoId"] = this.devInfoId;
        data["devInfoCode"] = this.devInfoCode;
        data["devInfoSn"] = this.devInfoSn;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["cost"] = this.cost;
        data["engineer"] = this.engineer;
        data["serviceEngineer"] = this.serviceEngineer;
        data["content"] = this.content;
        data["repairPosition"] = this.repairPosition;
        data["repairPositionLabel"] = this.repairPositionLabel;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operator"] = this.operator;
        return data;
    }
}

/** 维护记录 */
export interface IDevMaintenanceLogView {
    /** 标识 */
    id?: string | undefined;
    /** 设备标识 */
    devInfoId?: string | undefined;
    /** 设备编号 *○不允许重复* */
    devInfoCode?: string | undefined;
    /** 设备号 */
    devInfoSn?: string | undefined;
    /** 维护日期 */
    date?: dayjs.Dayjs;
    /** 维护类型 *维修,保养* */
    type?: string | undefined;
    /** 费用 */
    cost?: number;
    /** 科室工程师 */
    engineer?: string | undefined;
    /** 维护工程师 */
    serviceEngineer?: string | undefined;
    /** 内容 *更换零件内容* */
    content?: string | undefined;
    /** 维修部位 */
    repairPosition?: string | undefined;
    /** 维修部位显示值 */
    repairPositionLabel?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** [操作者标识](#用户信息) */
    operatorId?: string | undefined;
    /** 操作者标识 */
    operator?: string | undefined;
}

/** 维护记录 (ViewModel) */
export class DevMaintenanceLogViewModel implements IDevMaintenanceLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId!: string;
    /** 维护日期 */
    date!: dayjs.Dayjs;
    /** 维护类型 *维修,保养* */
    type!: string;
    /** 费用 */
    cost!: number;
    /** 科室工程师 */
    engineer?: string | undefined;
    /** 维护工程师 */
    serviceEngineer?: string | undefined;
    /** 内容 *更换零件内容* */
    content?: string | undefined;
    /** 维修部位 */
    repairPosition?: string | undefined;
    /** [操作者标识](用户信息Id) */
    operatorId?: string | undefined;
    /** 操作者标识 */
    operator?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevMaintenanceLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.cost = _data["cost"];
            this.engineer = _data["engineer"];
            this.serviceEngineer = _data["serviceEngineer"];
            this.content = _data["content"];
            this.repairPosition = _data["repairPosition"];
            this.operatorId = _data["operatorId"];
            this.operator = _data["operator"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevMaintenanceLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevMaintenanceLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["cost"] = this.cost;
        data["engineer"] = this.engineer;
        data["serviceEngineer"] = this.serviceEngineer;
        data["content"] = this.content;
        data["repairPosition"] = this.repairPosition;
        data["operatorId"] = this.operatorId;
        data["operator"] = this.operator;
        data["remark"] = this.remark;
        return data;
    }
}

/** 维护记录 (ViewModel) */
export interface IDevMaintenanceLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId: string;
    /** 维护日期 */
    date: dayjs.Dayjs;
    /** 维护类型 *维修,保养* */
    type: string;
    /** 费用 */
    cost: number;
    /** 科室工程师 */
    engineer?: string | undefined;
    /** 维护工程师 */
    serviceEngineer?: string | undefined;
    /** 内容 *更换零件内容* */
    content?: string | undefined;
    /** 维修部位 */
    repairPosition?: string | undefined;
    /** [操作者标识](用户信息Id) */
    operatorId?: string | undefined;
    /** 操作者标识 */
    operator?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DevMaintenanceLogViewResult implements IDevMaintenanceLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevMaintenanceLogView[] | undefined;

    constructor(data?: IDevMaintenanceLogViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevMaintenanceLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevMaintenanceLogViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevMaintenanceLogViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevMaintenanceLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevMaintenanceLogView[] | undefined;
}

/** Reponse */
export class DevMaintenanceLogViewResultEntry implements IDevMaintenanceLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevMaintenanceLogView;

    constructor(data?: IDevMaintenanceLogViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevMaintenanceLogView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevMaintenanceLogViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevMaintenanceLogViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevMaintenanceLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevMaintenanceLogView;
}

/** 科室设备生产厂家信息 */
export class DevManufacturerEditModel implements IDevManufacturerEditModel {
    /** 公司法定名称 *○不允许重复* */
    name!: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 传真 */
    fax?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevManufacturerEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.address = _data["address"];
            this.fax = _data["fax"];
            this.linkman = _data["linkman"];
            this.positionContact = _data["positionContact"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevManufacturerEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevManufacturerEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["fax"] = this.fax;
        data["linkman"] = this.linkman;
        data["positionContact"] = this.positionContact;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        return data;
    }
}

/** 科室设备生产厂家信息 */
export interface IDevManufacturerEditModel {
    /** 公司法定名称 *○不允许重复* */
    name: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 传真 */
    fax?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 科室设备生产厂家信息 */
export class DevManufacturerView implements IDevManufacturerView {
    /** 公司法定名称 *○不允许重复* */
    name!: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 传真 */
    fax?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 序列 */
    sequence!: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDevManufacturerView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.address = _data["address"];
            this.fax = _data["fax"];
            this.linkman = _data["linkman"];
            this.positionContact = _data["positionContact"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DevManufacturerView {
        data = typeof data === 'object' ? data : {};
        let result = new DevManufacturerView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["fax"] = this.fax;
        data["linkman"] = this.linkman;
        data["positionContact"] = this.positionContact;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 科室设备生产厂家信息 */
export interface IDevManufacturerView {
    /** 公司法定名称 *○不允许重复* */
    name: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 传真 */
    fax?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 序列 */
    sequence: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class DevManufacturerViewResult implements IDevManufacturerViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevManufacturerView[] | undefined;

    constructor(data?: IDevManufacturerViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevManufacturerView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevManufacturerViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevManufacturerViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevManufacturerViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevManufacturerView[] | undefined;
}

/** Reponse */
export class DevManufacturerViewResultEntry implements IDevManufacturerViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevManufacturerView;

    constructor(data?: IDevManufacturerViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevManufacturerView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevManufacturerViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevManufacturerViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevManufacturerViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevManufacturerView;
}

/** 设备保修记录 */
export class DevRepairsLogEditModel implements IDevRepairsLogEditModel {
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** 故障描述 */
    faultDescription!: string;

    constructor(data?: IDevRepairsLogEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.faultDescription = _data["faultDescription"];
        }
    }

    static fromJS(data: any): DevRepairsLogEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevRepairsLogEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["faultDescription"] = this.faultDescription;
        return data;
    }
}

/** 设备保修记录 */
export interface IDevRepairsLogEditModel {
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** 故障描述 */
    faultDescription: string;
}

/** 设备报修记录 */
export class DevRepairsLogView implements IDevRepairsLogView {
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** 故障描述 */
    faultDescription!: string;
    /** 标识 */
    id?: string | undefined;
    /** 处理时间 */
    disposeTime?: dayjs.Dayjs | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备类型显示值 */
    typeLabel?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](透析室名称) */
    sysHospitalAreaName?: string | undefined;

    constructor(data?: IDevRepairsLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.faultDescription = _data["faultDescription"];
            this.id = _data["id"];
            this.disposeTime = _data["disposeTime"] ? dayjs(_data["disposeTime"].toString()) : <any>undefined;
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.sn = _data["sn"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.model = _data["model"];
            this.ip = _data["ip"];
            this.origin = _data["origin"];
            this.manufacturer = _data["manufacturer"];
            this.dateProduced = _data["dateProduced"] ? dayjs(_data["dateProduced"].toString()) : <any>undefined;
            this.dealer = _data["dealer"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
        }
    }

    static fromJS(data: any): DevRepairsLogView {
        data = typeof data === 'object' ? data : {};
        let result = new DevRepairsLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["faultDescription"] = this.faultDescription;
        data["id"] = this.id;
        data["disposeTime"] = this.disposeTime ? this.disposeTime.toLocaleString() : <any>undefined;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["sn"] = this.sn;
        data["code"] = this.code;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["model"] = this.model;
        data["ip"] = this.ip;
        data["origin"] = this.origin;
        data["manufacturer"] = this.manufacturer;
        data["dateProduced"] = this.dateProduced ? this.dateProduced.toLocaleString() : <any>undefined;
        data["dealer"] = this.dealer;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        return data;
    }
}

/** 设备报修记录 */
export interface IDevRepairsLogView {
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** 故障描述 */
    faultDescription: string;
    /** 标识 */
    id?: string | undefined;
    /** 处理时间 */
    disposeTime?: dayjs.Dayjs | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 设备号 */
    sn?: string | undefined;
    /** 设备编号 */
    code?: string | undefined;
    /** 设备类型 `DIC.DEV.TYPE` *血透机,血滤机,水机,血压计,体重秤* */
    type?: string | undefined;
    /** 设备类型显示值 */
    typeLabel?: string | undefined;
    /** 设备型号 */
    model?: string | undefined;
    /** IP地址 */
    ip?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产日期 */
    dateProduced?: dayjs.Dayjs | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** [使用科室](透析室名称) */
    sysHospitalAreaName?: string | undefined;
}

/** Reponse */
export class DevRepairsLogViewResult implements IDevRepairsLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevRepairsLogView[] | undefined;

    constructor(data?: IDevRepairsLogViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevRepairsLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevRepairsLogViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevRepairsLogViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevRepairsLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevRepairsLogView[] | undefined;
}

/** Reponse */
export class DevRepairsLogViewResultEntry implements IDevRepairsLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevRepairsLogView;

    constructor(data?: IDevRepairsLogViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevRepairsLogView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevRepairsLogViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevRepairsLogViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevRepairsLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevRepairsLogView;
}

/** 报废记录 */
export class DevScrapLog implements IDevScrapLog {
    /** 标识 */
    id?: string | undefined;
    /** [设备标识](科室设备) */
    devInfoId?: string | undefined;
    /** 报废日期 */
    date?: dayjs.Dayjs;
    /** 报废原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    devInfos?: DevInfo;

    constructor(data?: IDevScrapLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.devInfoId = _data["devInfoId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.cause = _data["cause"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.devInfos = _data["devInfos"] ? DevInfo.fromJS(_data["devInfos"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevScrapLog {
        data = typeof data === 'object' ? data : {};
        let result = new DevScrapLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["devInfoId"] = this.devInfoId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["devInfos"] = this.devInfos ? this.devInfos.toJSON() : <any>undefined;
        return data;
    }
}

/** 报废记录 */
export interface IDevScrapLog {
    /** 标识 */
    id?: string | undefined;
    /** [设备标识](科室设备) */
    devInfoId?: string | undefined;
    /** 报废日期 */
    date?: dayjs.Dayjs;
    /** 报废原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    devInfos?: DevInfo;
}

/** Reponse */
export class DevScrapLogResult implements IDevScrapLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevScrapLog[] | undefined;

    constructor(data?: IDevScrapLogResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevScrapLog.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevScrapLogResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevScrapLogResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevScrapLogResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevScrapLog[] | undefined;
}

/** Reponse */
export class DevScrapLogResultEntry implements IDevScrapLogResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevScrapLog;

    constructor(data?: IDevScrapLogResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevScrapLog.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevScrapLogResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevScrapLogResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevScrapLogResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevScrapLog;
}

/** 报废记录 (ViewModel) */
export class DevScrapLogViewModel implements IDevScrapLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId!: string;
    /** 报废日期 */
    date!: dayjs.Dayjs;
    /** 报废原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevScrapLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.cause = _data["cause"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevScrapLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevScrapLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["cause"] = this.cause;
        data["remark"] = this.remark;
        return data;
    }
}

/** 报废记录 (ViewModel) */
export interface IDevScrapLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId: string;
    /** 报废日期 */
    date: dayjs.Dayjs;
    /** 报废原因 */
    cause?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 设备使用记录 */
export class DevUsageLogView implements IDevUsageLogView {
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** 使用日期 */
    date!: dayjs.Dayjs;
    /** 透析时长 */
    timeDialysis?: number | undefined;
    /** 消毒时长 */
    timeDisinfect?: number | undefined;
    /** 开机时长 */
    timeStart?: number | undefined;
    /** 透析时长 */
    timeWork?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 设备状态 */
    equipmentStatus?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 设备编号 *○不允许重复* */
    devInfoCode?: string | undefined;
    /** 设备号 */
    devInfoSn?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDevUsageLogView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.timeDialysis = _data["timeDialysis"];
            this.timeDisinfect = _data["timeDisinfect"];
            this.timeStart = _data["timeStart"];
            this.timeWork = _data["timeWork"];
            this.remark = _data["remark"];
            this.patientId = _data["patientId"];
            this.equipmentStatus = _data["equipmentStatus"];
            this.patientName = _data["patientName"];
            this.id = _data["id"];
            this.devInfoCode = _data["devInfoCode"];
            this.devInfoSn = _data["devInfoSn"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DevUsageLogView {
        data = typeof data === 'object' ? data : {};
        let result = new DevUsageLogView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["timeDialysis"] = this.timeDialysis;
        data["timeDisinfect"] = this.timeDisinfect;
        data["timeStart"] = this.timeStart;
        data["timeWork"] = this.timeWork;
        data["remark"] = this.remark;
        data["patientId"] = this.patientId;
        data["equipmentStatus"] = this.equipmentStatus;
        data["patientName"] = this.patientName;
        data["id"] = this.id;
        data["devInfoCode"] = this.devInfoCode;
        data["devInfoSn"] = this.devInfoSn;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 设备使用记录 */
export interface IDevUsageLogView {
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** 使用日期 */
    date: dayjs.Dayjs;
    /** 透析时长 */
    timeDialysis?: number | undefined;
    /** 消毒时长 */
    timeDisinfect?: number | undefined;
    /** 开机时长 */
    timeStart?: number | undefined;
    /** 透析时长 */
    timeWork?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [患者标识](#患者信息) */
    patientId?: string | undefined;
    /** 设备状态 */
    equipmentStatus?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 设备编号 *○不允许重复* */
    devInfoCode?: string | undefined;
    /** 设备号 */
    devInfoSn?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 设备使用记录 (ViewModel) */
export class DevUsageLogViewModel implements IDevUsageLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId!: string;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 使用日期 */
    date!: dayjs.Dayjs;
    /** 透析时长 */
    timeDialysis?: number | undefined;
    /** 消毒时长 */
    timeDisinfect?: number | undefined;
    /** 开机时长 */
    timeStart?: number | undefined;
    /** 透析时长 */
    timeWork?: number | undefined;
    /** 设备状态 */
    equipmentStatus?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevUsageLogViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devInfoId = _data["devInfoId"];
            this.patientId = _data["patientId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.timeDialysis = _data["timeDialysis"];
            this.timeDisinfect = _data["timeDisinfect"];
            this.timeStart = _data["timeStart"];
            this.timeWork = _data["timeWork"];
            this.equipmentStatus = _data["equipmentStatus"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevUsageLogViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevUsageLogViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devInfoId"] = this.devInfoId;
        data["patientId"] = this.patientId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["timeDialysis"] = this.timeDialysis;
        data["timeDisinfect"] = this.timeDisinfect;
        data["timeStart"] = this.timeStart;
        data["timeWork"] = this.timeWork;
        data["equipmentStatus"] = this.equipmentStatus;
        data["remark"] = this.remark;
        return data;
    }
}

/** 设备使用记录 (ViewModel) */
export interface IDevUsageLogViewModel {
    /** [设备标识](科室设备Id) */
    devInfoId: string;
    /** [患者标识](患者信息Id) */
    patientId?: string | undefined;
    /** 使用日期 */
    date: dayjs.Dayjs;
    /** 透析时长 */
    timeDialysis?: number | undefined;
    /** 消毒时长 */
    timeDisinfect?: number | undefined;
    /** 开机时长 */
    timeStart?: number | undefined;
    /** 透析时长 */
    timeWork?: number | undefined;
    /** 设备状态 */
    equipmentStatus?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** Reponse */
export class DevUsageLogViewResult implements IDevUsageLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevUsageLogView[] | undefined;

    constructor(data?: IDevUsageLogViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevUsageLogView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevUsageLogViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevUsageLogViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevUsageLogViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevUsageLogView[] | undefined;
}

/** Reponse */
export class DevUsageLogViewResultEntry implements IDevUsageLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevUsageLogView;

    constructor(data?: IDevUsageLogViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevUsageLogView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevUsageLogViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevUsageLogViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevUsageLogViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevUsageLogView;
}

/** 水处理设备 */
export class DevWaterProcessInfoEditModel implements IDevWaterProcessInfoEditModel {
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 编号 */
    code!: string;
    /** 设备号 */
    deviceNo?: string | undefined;
    /** 设备类型 `DIC.WATER.DEV.TYPE` *污水处理设备,原水处理设备,净水设备,过滤设备* */
    type!: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model!: string;
    /** 品牌 */
    brand?: string | undefined;
    /** 规格 */
    specification?: string | undefined;
    /** 产地 `DIC.DEV.ORIGIN` */
    productionPlace?: string | undefined;
    /** 生产厂家 `DIC.DEV.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 产水量 */
    produceWaterMount?: string | undefined;
    /** 水温 */
    temperature?: string | undefined;
    /** 水压 */
    hydraulic?: string | undefined;
    /** 电导率 */
    conductivity?: string | undefined;
    /** 使用水源 */
    waterSource?: string | undefined;
    /** 过滤器型号 */
    filterModel?: string | undefined;
    /** 水质 */
    waterQuality?: string | undefined;
    /** 供水模式  来源 `DIC.WATER.SUPPLY.MODEL` *直供水,水箱供水* */
    waterSupplyMode?: string | undefined;
    /** 生产时间 */
    produceDate?: dayjs.Dayjs | undefined;
    /** 启用日期 */
    usedDate?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    guaranteeDate?: dayjs.Dayjs | undefined;
    /** [负责人标识](#用户信息) */
    principalId!: string;
    /** 负责人名称 */
    principalName!: string;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status!: string;
    /** 存放地点 */
    savePosition?: string | undefined;
    /** 销售许可证 */
    saleLicense?: string | undefined;
    /** 合格证 */
    certificate?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDevWaterProcessInfoEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.code = _data["code"];
            this.deviceNo = _data["deviceNo"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.brand = _data["brand"];
            this.specification = _data["specification"];
            this.productionPlace = _data["productionPlace"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.produceWaterMount = _data["produceWaterMount"];
            this.temperature = _data["temperature"];
            this.hydraulic = _data["hydraulic"];
            this.conductivity = _data["conductivity"];
            this.waterSource = _data["waterSource"];
            this.filterModel = _data["filterModel"];
            this.waterQuality = _data["waterQuality"];
            this.waterSupplyMode = _data["waterSupplyMode"];
            this.produceDate = _data["produceDate"] ? dayjs(_data["produceDate"].toString()) : <any>undefined;
            this.usedDate = _data["usedDate"] ? dayjs(_data["usedDate"].toString()) : <any>undefined;
            this.guaranteeDate = _data["guaranteeDate"] ? dayjs(_data["guaranteeDate"].toString()) : <any>undefined;
            this.principalId = _data["principalId"];
            this.principalName = _data["principalName"];
            this.status = _data["status"];
            this.savePosition = _data["savePosition"];
            this.saleLicense = _data["saleLicense"];
            this.certificate = _data["certificate"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DevWaterProcessInfoEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessInfoEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["code"] = this.code;
        data["deviceNo"] = this.deviceNo;
        data["type"] = this.type;
        data["model"] = this.model;
        data["brand"] = this.brand;
        data["specification"] = this.specification;
        data["productionPlace"] = this.productionPlace;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["produceWaterMount"] = this.produceWaterMount;
        data["temperature"] = this.temperature;
        data["hydraulic"] = this.hydraulic;
        data["conductivity"] = this.conductivity;
        data["waterSource"] = this.waterSource;
        data["filterModel"] = this.filterModel;
        data["waterQuality"] = this.waterQuality;
        data["waterSupplyMode"] = this.waterSupplyMode;
        data["produceDate"] = this.produceDate ? this.produceDate.toLocaleString() : <any>undefined;
        data["usedDate"] = this.usedDate ? this.usedDate.toLocaleString() : <any>undefined;
        data["guaranteeDate"] = this.guaranteeDate ? this.guaranteeDate.toLocaleString() : <any>undefined;
        data["principalId"] = this.principalId;
        data["principalName"] = this.principalName;
        data["status"] = this.status;
        data["savePosition"] = this.savePosition;
        data["saleLicense"] = this.saleLicense;
        data["certificate"] = this.certificate;
        data["remark"] = this.remark;
        return data;
    }
}

/** 水处理设备 */
export interface IDevWaterProcessInfoEditModel {
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 编号 */
    code: string;
    /** 设备号 */
    deviceNo?: string | undefined;
    /** 设备类型 `DIC.WATER.DEV.TYPE` *污水处理设备,原水处理设备,净水设备,过滤设备* */
    type: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model: string;
    /** 品牌 */
    brand?: string | undefined;
    /** 规格 */
    specification?: string | undefined;
    /** 产地 `DIC.DEV.ORIGIN` */
    productionPlace?: string | undefined;
    /** 生产厂家 `DIC.DEV.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 产水量 */
    produceWaterMount?: string | undefined;
    /** 水温 */
    temperature?: string | undefined;
    /** 水压 */
    hydraulic?: string | undefined;
    /** 电导率 */
    conductivity?: string | undefined;
    /** 使用水源 */
    waterSource?: string | undefined;
    /** 过滤器型号 */
    filterModel?: string | undefined;
    /** 水质 */
    waterQuality?: string | undefined;
    /** 供水模式  来源 `DIC.WATER.SUPPLY.MODEL` *直供水,水箱供水* */
    waterSupplyMode?: string | undefined;
    /** 生产时间 */
    produceDate?: dayjs.Dayjs | undefined;
    /** 启用日期 */
    usedDate?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    guaranteeDate?: dayjs.Dayjs | undefined;
    /** [负责人标识](#用户信息) */
    principalId: string;
    /** 负责人名称 */
    principalName: string;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status: string;
    /** 存放地点 */
    savePosition?: string | undefined;
    /** 销售许可证 */
    saleLicense?: string | undefined;
    /** 合格证 */
    certificate?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 水处理设备 */
export class DevWaterProcessInfoView implements IDevWaterProcessInfoView {
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 编号 */
    code!: string;
    /** 设备号 */
    deviceNo?: string | undefined;
    /** 设备类型 `DIC.WATER.DEV.TYPE` *污水处理设备,原水处理设备,净水设备,过滤设备* */
    type!: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model!: string;
    /** 品牌 */
    brand?: string | undefined;
    /** 规格 */
    specification?: string | undefined;
    /** 产地 `DIC.DEV.ORIGIN` */
    productionPlace?: string | undefined;
    /** 生产厂家 `DIC.DEV.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 产水量 */
    produceWaterMount?: string | undefined;
    /** 水温 */
    temperature?: string | undefined;
    /** 水压 */
    hydraulic?: string | undefined;
    /** 电导率 */
    conductivity?: string | undefined;
    /** 使用水源 */
    waterSource?: string | undefined;
    /** 过滤器型号 */
    filterModel?: string | undefined;
    /** 水质 */
    waterQuality?: string | undefined;
    /** 供水模式  来源 `DIC.WATER.SUPPLY.MODEL` *直供水,水箱供水* */
    waterSupplyMode?: string | undefined;
    /** 生产时间 */
    produceDate?: dayjs.Dayjs | undefined;
    /** 启用日期 */
    usedDate?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    guaranteeDate?: dayjs.Dayjs | undefined;
    /** [负责人标识](#用户信息) */
    principalId!: string;
    /** 负责人名称 */
    principalName!: string;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status!: string;
    /** 存放地点 */
    savePosition?: string | undefined;
    /** 销售许可证 */
    saleLicense?: string | undefined;
    /** 合格证 */
    certificate?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 设备类型 字典标签 */
    typeName?: string | undefined;
    /** 设备型号 字典标签 */
    modelLabel?: string | undefined;
    /** 生产厂家 字典标签 */
    manufacturerLabel?: string | undefined;
    /** 供应商 字典标签 */
    supplerLabel?: string | undefined;
    /** 供水模式 字典标签 */
    waterSupplyModeLabel?: string | undefined;
    /** 状态 字典标签 */
    statusName?: string | undefined;
    /** 销售许可证 */
    saleLicenseUrl?: string | undefined;
    /** 合格证 */
    certificateUrl?: string | undefined;

    constructor(data?: IDevWaterProcessInfoView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.code = _data["code"];
            this.deviceNo = _data["deviceNo"];
            this.type = _data["type"];
            this.model = _data["model"];
            this.brand = _data["brand"];
            this.specification = _data["specification"];
            this.productionPlace = _data["productionPlace"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.produceWaterMount = _data["produceWaterMount"];
            this.temperature = _data["temperature"];
            this.hydraulic = _data["hydraulic"];
            this.conductivity = _data["conductivity"];
            this.waterSource = _data["waterSource"];
            this.filterModel = _data["filterModel"];
            this.waterQuality = _data["waterQuality"];
            this.waterSupplyMode = _data["waterSupplyMode"];
            this.produceDate = _data["produceDate"] ? dayjs(_data["produceDate"].toString()) : <any>undefined;
            this.usedDate = _data["usedDate"] ? dayjs(_data["usedDate"].toString()) : <any>undefined;
            this.guaranteeDate = _data["guaranteeDate"] ? dayjs(_data["guaranteeDate"].toString()) : <any>undefined;
            this.principalId = _data["principalId"];
            this.principalName = _data["principalName"];
            this.status = _data["status"];
            this.savePosition = _data["savePosition"];
            this.saleLicense = _data["saleLicense"];
            this.certificate = _data["certificate"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.typeName = _data["typeName"];
            this.modelLabel = _data["modelLabel"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.supplerLabel = _data["supplerLabel"];
            this.waterSupplyModeLabel = _data["waterSupplyModeLabel"];
            this.statusName = _data["statusName"];
            this.saleLicenseUrl = _data["saleLicenseUrl"];
            this.certificateUrl = _data["certificateUrl"];
        }
    }

    static fromJS(data: any): DevWaterProcessInfoView {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessInfoView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["code"] = this.code;
        data["deviceNo"] = this.deviceNo;
        data["type"] = this.type;
        data["model"] = this.model;
        data["brand"] = this.brand;
        data["specification"] = this.specification;
        data["productionPlace"] = this.productionPlace;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["produceWaterMount"] = this.produceWaterMount;
        data["temperature"] = this.temperature;
        data["hydraulic"] = this.hydraulic;
        data["conductivity"] = this.conductivity;
        data["waterSource"] = this.waterSource;
        data["filterModel"] = this.filterModel;
        data["waterQuality"] = this.waterQuality;
        data["waterSupplyMode"] = this.waterSupplyMode;
        data["produceDate"] = this.produceDate ? this.produceDate.toLocaleString() : <any>undefined;
        data["usedDate"] = this.usedDate ? this.usedDate.toLocaleString() : <any>undefined;
        data["guaranteeDate"] = this.guaranteeDate ? this.guaranteeDate.toLocaleString() : <any>undefined;
        data["principalId"] = this.principalId;
        data["principalName"] = this.principalName;
        data["status"] = this.status;
        data["savePosition"] = this.savePosition;
        data["saleLicense"] = this.saleLicense;
        data["certificate"] = this.certificate;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["typeName"] = this.typeName;
        data["modelLabel"] = this.modelLabel;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["supplerLabel"] = this.supplerLabel;
        data["waterSupplyModeLabel"] = this.waterSupplyModeLabel;
        data["statusName"] = this.statusName;
        data["saleLicenseUrl"] = this.saleLicenseUrl;
        data["certificateUrl"] = this.certificateUrl;
        return data;
    }
}

/** 水处理设备 */
export interface IDevWaterProcessInfoView {
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 编号 */
    code: string;
    /** 设备号 */
    deviceNo?: string | undefined;
    /** 设备类型 `DIC.WATER.DEV.TYPE` *污水处理设备,原水处理设备,净水设备,过滤设备* */
    type: string;
    /** 设备型号 *设备类型为血透机/血滤机时使用字典* `DIC.DEV.DIALYSIS.MODEL` */
    model: string;
    /** 品牌 */
    brand?: string | undefined;
    /** 规格 */
    specification?: string | undefined;
    /** 产地 `DIC.DEV.ORIGIN` */
    productionPlace?: string | undefined;
    /** 生产厂家 `DIC.DEV.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 产水量 */
    produceWaterMount?: string | undefined;
    /** 水温 */
    temperature?: string | undefined;
    /** 水压 */
    hydraulic?: string | undefined;
    /** 电导率 */
    conductivity?: string | undefined;
    /** 使用水源 */
    waterSource?: string | undefined;
    /** 过滤器型号 */
    filterModel?: string | undefined;
    /** 水质 */
    waterQuality?: string | undefined;
    /** 供水模式  来源 `DIC.WATER.SUPPLY.MODEL` *直供水,水箱供水* */
    waterSupplyMode?: string | undefined;
    /** 生产时间 */
    produceDate?: dayjs.Dayjs | undefined;
    /** 启用日期 */
    usedDate?: dayjs.Dayjs | undefined;
    /** 保修日期 */
    guaranteeDate?: dayjs.Dayjs | undefined;
    /** [负责人标识](#用户信息) */
    principalId: string;
    /** 负责人名称 */
    principalName: string;
    /** 状态 `DIC.DEV.STATUS` *启用,故障,维修,停用,报废* */
    status: string;
    /** 存放地点 */
    savePosition?: string | undefined;
    /** 销售许可证 */
    saleLicense?: string | undefined;
    /** 合格证 */
    certificate?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 设备类型 字典标签 */
    typeName?: string | undefined;
    /** 设备型号 字典标签 */
    modelLabel?: string | undefined;
    /** 生产厂家 字典标签 */
    manufacturerLabel?: string | undefined;
    /** 供应商 字典标签 */
    supplerLabel?: string | undefined;
    /** 供水模式 字典标签 */
    waterSupplyModeLabel?: string | undefined;
    /** 状态 字典标签 */
    statusName?: string | undefined;
    /** 销售许可证 */
    saleLicenseUrl?: string | undefined;
    /** 合格证 */
    certificateUrl?: string | undefined;
}

/** Reponse */
export class DevWaterProcessInfoViewResult implements IDevWaterProcessInfoViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevWaterProcessInfoView[] | undefined;

    constructor(data?: IDevWaterProcessInfoViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevWaterProcessInfoView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevWaterProcessInfoViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessInfoViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevWaterProcessInfoViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevWaterProcessInfoView[] | undefined;
}

/** Reponse */
export class DevWaterProcessInfoViewResultEntry implements IDevWaterProcessInfoViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevWaterProcessInfoView;

    constructor(data?: IDevWaterProcessInfoViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevWaterProcessInfoView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevWaterProcessInfoViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessInfoViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevWaterProcessInfoViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevWaterProcessInfoView;
}

/** 水处理记录 */
export class DevWaterProcessRecordEditModel implements IDevWaterProcessRecordEditModel {
    /** [水处理设备标识](#水处理设备) */
    devWaterProcessInfoId?: string | undefined;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 记录类型 `DIC.WATER.DEVICE.RECORD.TYPE` *检测记录,维护记录,消毒记录，运行记录* */
    type!: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** [表单模板标识](#表单模板) */
    tmplFormId!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;

    constructor(data?: IDevWaterProcessRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devWaterProcessInfoId = _data["devWaterProcessInfoId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.tmplFormId = _data["tmplFormId"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DevWaterProcessRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devWaterProcessInfoId"] = this.devWaterProcessInfoId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["tmplFormId"] = this.tmplFormId;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 水处理记录 */
export interface IDevWaterProcessRecordEditModel {
    /** [水处理设备标识](#水处理设备) */
    devWaterProcessInfoId?: string | undefined;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 记录类型 `DIC.WATER.DEVICE.RECORD.TYPE` *检测记录,维护记录,消毒记录，运行记录* */
    type: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** [表单模板标识](#表单模板) */
    tmplFormId: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
}

/** 水处理记录 */
export class DevWaterProcessRecordView implements IDevWaterProcessRecordView {
    /** [水处理设备标识](#水处理设备) */
    devWaterProcessInfoId?: string | undefined;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 记录类型 `DIC.WATER.DEVICE.RECORD.TYPE` *检测记录,维护记录,消毒记录，运行记录* */
    type!: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** [表单模板标识](#表单模板) */
    tmplFormId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 自定义模板 */
    data?: { [key: string]: string; } | undefined;
    /** 记录类型 字典标签 */
    typeLabel?: string | undefined;
    /** 水处理机名称 */
    waterDeviceNo?: string | undefined;
    /** 水处理机编码 */
    waterDeviceCode?: string | undefined;
    /** 水处理机类型 */
    waterDeviceType?: string | undefined;
    /** 水处理机类型展示值 */
    waterDeviceTypeLabel?: string | undefined;
    /** 水处理机型号 */
    waterDeviceModel?: string | undefined;
    /** 水处理机型号 - 展示值 */
    waterDeviceModelLabel?: string | undefined;

    constructor(data?: IDevWaterProcessRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.devWaterProcessInfoId = _data["devWaterProcessInfoId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.tmplFormId = _data["tmplFormId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
            this.typeLabel = _data["typeLabel"];
            this.waterDeviceNo = _data["waterDeviceNo"];
            this.waterDeviceCode = _data["waterDeviceCode"];
            this.waterDeviceType = _data["waterDeviceType"];
            this.waterDeviceTypeLabel = _data["waterDeviceTypeLabel"];
            this.waterDeviceModel = _data["waterDeviceModel"];
            this.waterDeviceModelLabel = _data["waterDeviceModelLabel"];
        }
    }

    static fromJS(data: any): DevWaterProcessRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["devWaterProcessInfoId"] = this.devWaterProcessInfoId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["tmplFormId"] = this.tmplFormId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        data["typeLabel"] = this.typeLabel;
        data["waterDeviceNo"] = this.waterDeviceNo;
        data["waterDeviceCode"] = this.waterDeviceCode;
        data["waterDeviceType"] = this.waterDeviceType;
        data["waterDeviceTypeLabel"] = this.waterDeviceTypeLabel;
        data["waterDeviceModel"] = this.waterDeviceModel;
        data["waterDeviceModelLabel"] = this.waterDeviceModelLabel;
        return data;
    }
}

/** 水处理记录 */
export interface IDevWaterProcessRecordView {
    /** [水处理设备标识](#水处理设备) */
    devWaterProcessInfoId?: string | undefined;
    /** 日期 */
    date: dayjs.Dayjs;
    /** 记录类型 `DIC.WATER.DEVICE.RECORD.TYPE` *检测记录,维护记录,消毒记录，运行记录* */
    type: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** [表单模板标识](#表单模板) */
    tmplFormId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 自定义模板 */
    data?: { [key: string]: string; } | undefined;
    /** 记录类型 字典标签 */
    typeLabel?: string | undefined;
    /** 水处理机名称 */
    waterDeviceNo?: string | undefined;
    /** 水处理机编码 */
    waterDeviceCode?: string | undefined;
    /** 水处理机类型 */
    waterDeviceType?: string | undefined;
    /** 水处理机类型展示值 */
    waterDeviceTypeLabel?: string | undefined;
    /** 水处理机型号 */
    waterDeviceModel?: string | undefined;
    /** 水处理机型号 - 展示值 */
    waterDeviceModelLabel?: string | undefined;
}

/** Reponse */
export class DevWaterProcessRecordViewResult implements IDevWaterProcessRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevWaterProcessRecordView[] | undefined;

    constructor(data?: IDevWaterProcessRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DevWaterProcessRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DevWaterProcessRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDevWaterProcessRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DevWaterProcessRecordView[] | undefined;
}

/** Reponse */
export class DevWaterProcessRecordViewResultEntry implements IDevWaterProcessRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevWaterProcessRecordView;

    constructor(data?: IDevWaterProcessRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? DevWaterProcessRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DevWaterProcessRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new DevWaterProcessRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IDevWaterProcessRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: DevWaterProcessRecordView;
}

/** 级联查询展现 */
export class DialysisTreeView implements IDialysisTreeView {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 是否阳性分区0,1 */
    positive?: number;

    constructor(data?: IDialysisTreeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.sequence = _data["sequence"];
            this.positive = _data["positive"];
        }
    }

    static fromJS(data: any): DialysisTreeView {
        data = typeof data === 'object' ? data : {};
        let result = new DialysisTreeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["sequence"] = this.sequence;
        data["positive"] = this.positive;
        return data;
    }
}

/** 级联查询展现 */
export interface IDialysisTreeView {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 是否阳性分区0,1 */
    positive?: number;
}

/** Reponse */
export class DialysisTreeViewResult implements IDialysisTreeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DialysisTreeView[] | undefined;

    constructor(data?: IDialysisTreeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DialysisTreeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DialysisTreeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DialysisTreeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDialysisTreeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DialysisTreeView[] | undefined;
}

/** 个人药库借药 */
export class DrugStorageArrearageEditModel implements IDrugStorageArrearageEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 欠药时间 */
    date!: dayjs.Dayjs;
    /** 数量 */
    count!: number;
    /** 入库数量 */
    backCount!: number;
    /** 是否完成入库0,1 */
    status!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDrugStorageArrearageEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.count = _data["count"];
            this.backCount = _data["backCount"];
            this.status = _data["status"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DrugStorageArrearageEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageArrearageEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["count"] = this.count;
        data["backCount"] = this.backCount;
        data["status"] = this.status;
        data["remark"] = this.remark;
        return data;
    }
}

/** 个人药库借药 */
export interface IDrugStorageArrearageEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 欠药时间 */
    date: dayjs.Dayjs;
    /** 数量 */
    count: number;
    /** 入库数量 */
    backCount: number;
    /** 是否完成入库0,1 */
    status: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 个人药库借药 */
export class DrugStorageArrearageView implements IDrugStorageArrearageView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 欠药时间 */
    date!: dayjs.Dayjs;
    /** 数量 */
    count!: number;
    /** 入库数量 */
    backCount!: number;
    /** 是否完成入库0,1 */
    status!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` */
    unitBase!: string;

    constructor(data?: IDrugStorageArrearageView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.count = _data["count"];
            this.backCount = _data["backCount"];
            this.status = _data["status"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.sourceLabel = _data["sourceLabel"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
            this.unitBase = _data["unitBase"];
        }
    }

    static fromJS(data: any): DrugStorageArrearageView {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageArrearageView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["count"] = this.count;
        data["backCount"] = this.backCount;
        data["status"] = this.status;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["sourceLabel"] = this.sourceLabel;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        data["unitBase"] = this.unitBase;
        return data;
    }
}

/** 个人药库借药 */
export interface IDrugStorageArrearageView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 欠药时间 */
    date: dayjs.Dayjs;
    /** 数量 */
    count: number;
    /** 入库数量 */
    backCount: number;
    /** 是否完成入库0,1 */
    status: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` */
    unitBase: string;
}

/** Reponse */
export class DrugStorageArrearageViewResult implements IDrugStorageArrearageViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageArrearageView[] | undefined;

    constructor(data?: IDrugStorageArrearageViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugStorageArrearageView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugStorageArrearageViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageArrearageViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugStorageArrearageViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageArrearageView[] | undefined;
}

/** 个人药库明细 */
export class DrugStorageDetailView implements IDrugStorageDetailView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 类型 (入库 出库 借药) */
    storageType?: string | undefined;
    /** 数量 */
    count?: number;
    /** 剩余数量 */
    surplusCount?: number;
    /** 项目名称 */
    roomItemListId?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;

    constructor(data?: IDrugStorageDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.patientName = _data["patientName"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.storageType = _data["storageType"];
            this.count = _data["count"];
            this.surplusCount = _data["surplusCount"];
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
        }
    }

    static fromJS(data: any): DrugStorageDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["patientName"] = this.patientName;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["storageType"] = this.storageType;
        data["count"] = this.count;
        data["surplusCount"] = this.surplusCount;
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        return data;
    }
}

/** 个人药库明细 */
export interface IDrugStorageDetailView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 类型 (入库 出库 借药) */
    storageType?: string | undefined;
    /** 数量 */
    count?: number;
    /** 剩余数量 */
    surplusCount?: number;
    /** 项目名称 */
    roomItemListId?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
}

/** Reponse */
export class DrugStorageDetailViewResult implements IDrugStorageDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageDetailView[] | undefined;

    constructor(data?: IDrugStorageDetailViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugStorageDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugStorageDetailViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageDetailViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugStorageDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageDetailView[] | undefined;
}

/** 个人药库入库 */
export class DrugStorageInEditModel implements IDrugStorageInEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [个人药库库存](#个人药库库存) */
    drugStorageInventoryId?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 入库时间 */
    date!: dayjs.Dayjs;
    /** 入库数量 */
    inCount!: number;
    /** 剩余数量 */
    surplusCount!: number;
    /** 入库单号(发票号码) */
    inNumber?: string | undefined;
    /** 住院号 */
    hospitalNumber?: string | undefined;
    /** 住院序号 */
    hospitalSeq?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDrugStorageInEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.drugStorageInventoryId = _data["drugStorageInventoryId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.inCount = _data["inCount"];
            this.surplusCount = _data["surplusCount"];
            this.inNumber = _data["inNumber"];
            this.hospitalNumber = _data["hospitalNumber"];
            this.hospitalSeq = _data["hospitalSeq"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DrugStorageInEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageInEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["drugStorageInventoryId"] = this.drugStorageInventoryId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["inCount"] = this.inCount;
        data["surplusCount"] = this.surplusCount;
        data["inNumber"] = this.inNumber;
        data["hospitalNumber"] = this.hospitalNumber;
        data["hospitalSeq"] = this.hospitalSeq;
        data["remark"] = this.remark;
        return data;
    }
}

/** 个人药库入库 */
export interface IDrugStorageInEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [个人药库库存](#个人药库库存) */
    drugStorageInventoryId?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 入库时间 */
    date: dayjs.Dayjs;
    /** 入库数量 */
    inCount: number;
    /** 剩余数量 */
    surplusCount: number;
    /** 入库单号(发票号码) */
    inNumber?: string | undefined;
    /** 住院号 */
    hospitalNumber?: string | undefined;
    /** 住院序号 */
    hospitalSeq?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 个人药库入库 */
export class DrugStorageInView implements IDrugStorageInView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [个人药库库存](#个人药库库存) */
    drugStorageInventoryId?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 入库时间 */
    date!: dayjs.Dayjs;
    /** 入库数量 */
    inCount!: number;
    /** 剩余数量 */
    surplusCount!: number;
    /** 入库单号(发票号码) */
    inNumber?: string | undefined;
    /** 住院号 */
    hospitalNumber?: string | undefined;
    /** 住院序号 */
    hospitalSeq?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 上次出库时间 */
    lastOutTime?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;

    constructor(data?: IDrugStorageInView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.drugStorageInventoryId = _data["drugStorageInventoryId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.inCount = _data["inCount"];
            this.surplusCount = _data["surplusCount"];
            this.inNumber = _data["inNumber"];
            this.hospitalNumber = _data["hospitalNumber"];
            this.hospitalSeq = _data["hospitalSeq"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.lastOutTime = _data["lastOutTime"];
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.sourceLabel = _data["sourceLabel"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBase = _data["unitBase"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
        }
    }

    static fromJS(data: any): DrugStorageInView {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageInView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["drugStorageInventoryId"] = this.drugStorageInventoryId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["inCount"] = this.inCount;
        data["surplusCount"] = this.surplusCount;
        data["inNumber"] = this.inNumber;
        data["hospitalNumber"] = this.hospitalNumber;
        data["hospitalSeq"] = this.hospitalSeq;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["lastOutTime"] = this.lastOutTime;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["sourceLabel"] = this.sourceLabel;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBase"] = this.unitBase;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        return data;
    }
}

/** 个人药库入库 */
export interface IDrugStorageInView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [个人药库库存](#个人药库库存) */
    drugStorageInventoryId?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 入库时间 */
    date: dayjs.Dayjs;
    /** 入库数量 */
    inCount: number;
    /** 剩余数量 */
    surplusCount: number;
    /** 入库单号(发票号码) */
    inNumber?: string | undefined;
    /** 住院号 */
    hospitalNumber?: string | undefined;
    /** 住院序号 */
    hospitalSeq?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 上次出库时间 */
    lastOutTime?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
}

/** Reponse */
export class DrugStorageInViewResult implements IDrugStorageInViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageInView[] | undefined;

    constructor(data?: IDrugStorageInViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugStorageInView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugStorageInViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageInViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugStorageInViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageInView[] | undefined;
}

/** 个人药库库存 */
export class DrugStorageInventoryView implements IDrugStorageInventoryView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 库存数量 */
    inventoryCount!: number;
    /** 主键标识 */
    id?: string | undefined;
    /** 上次入库时间 */
    lastInTime?: dayjs.Dayjs | undefined;
    /** 上次出库时间 */
    lastOutTime?: dayjs.Dayjs | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者来源显示值 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;

    constructor(data?: IDrugStorageInventoryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.lastInTime = _data["lastInTime"] ? dayjs(_data["lastInTime"].toString()) : <any>undefined;
            this.lastOutTime = _data["lastOutTime"] ? dayjs(_data["lastOutTime"].toString()) : <any>undefined;
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.sourceLabel = _data["sourceLabel"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBase = _data["unitBase"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
        }
    }

    static fromJS(data: any): DrugStorageInventoryView {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageInventoryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["lastInTime"] = this.lastInTime ? this.lastInTime.toLocaleString() : <any>undefined;
        data["lastOutTime"] = this.lastOutTime ? this.lastOutTime.toLocaleString() : <any>undefined;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["sourceLabel"] = this.sourceLabel;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBase"] = this.unitBase;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        return data;
    }
}

/** 个人药库库存 */
export interface IDrugStorageInventoryView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 库存数量 */
    inventoryCount: number;
    /** 主键标识 */
    id?: string | undefined;
    /** 上次入库时间 */
    lastInTime?: dayjs.Dayjs | undefined;
    /** 上次出库时间 */
    lastOutTime?: dayjs.Dayjs | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者来源显示值 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
}

/** Reponse */
export class DrugStorageInventoryViewResult implements IDrugStorageInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageInventoryView[] | undefined;

    constructor(data?: IDrugStorageInventoryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugStorageInventoryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugStorageInventoryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageInventoryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugStorageInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageInventoryView[] | undefined;
}

/** 个人药库出库 */
export class DrugStorageOutEditModel implements IDrugStorageOutEditModel {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 出库时间 */
    date!: dayjs.Dayjs;
    /** 数量 */
    count!: number;
    /** 入库记录标识 */
    drugStorageInId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IDrugStorageOutEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.count = _data["count"];
            this.drugStorageInId = _data["drugStorageInId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): DrugStorageOutEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageOutEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["count"] = this.count;
        data["drugStorageInId"] = this.drugStorageInId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 个人药库出库 */
export interface IDrugStorageOutEditModel {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 出库时间 */
    date: dayjs.Dayjs;
    /** 数量 */
    count: number;
    /** 入库记录标识 */
    drugStorageInId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 个人药库出库 */
export class DrugStorageOutView implements IDrugStorageOutView {
    /** [患者标识](#患者信息) */
    patientId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source!: string;
    /** 出库时间 */
    date!: dayjs.Dayjs;
    /** 数量 */
    count!: number;
    /** 入库记录标识 */
    drugStorageInId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 入库单号 */
    inNumber?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;

    constructor(data?: IDrugStorageOutView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientId = _data["patientId"];
            this.roomItemListId = _data["roomItemListId"];
            this.source = _data["source"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.count = _data["count"];
            this.drugStorageInId = _data["drugStorageInId"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.inNumber = _data["inNumber"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patientName = _data["patientName"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.surnameCode = _data["surnameCode"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.sourceLabel = _data["sourceLabel"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemListNameGoods = _data["roomItemListNameGoods"];
            this.roomItemListShortName = _data["roomItemListShortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBase = _data["unitBase"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.roomItemListPinyinCode = _data["roomItemListPinyinCode"];
            this.roomItemListWubiCode = _data["roomItemListWubiCode"];
        }
    }

    static fromJS(data: any): DrugStorageOutView {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageOutView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientId"] = this.patientId;
        data["roomItemListId"] = this.roomItemListId;
        data["source"] = this.source;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["count"] = this.count;
        data["drugStorageInId"] = this.drugStorageInId;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["inNumber"] = this.inNumber;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patientName"] = this.patientName;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["surnameCode"] = this.surnameCode;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["sourceLabel"] = this.sourceLabel;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemListNameGoods"] = this.roomItemListNameGoods;
        data["roomItemListShortName"] = this.roomItemListShortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBase"] = this.unitBase;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["roomItemListPinyinCode"] = this.roomItemListPinyinCode;
        data["roomItemListWubiCode"] = this.roomItemListWubiCode;
        return data;
    }
}

/** 个人药库出库 */
export interface IDrugStorageOutView {
    /** [患者标识](#患者信息) */
    patientId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source: string;
    /** 出库时间 */
    date: dayjs.Dayjs;
    /** 数量 */
    count: number;
    /** 入库记录标识 */
    drugStorageInId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 入库单号 */
    inNumber?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者首字母 */
    surnameCode?: string | undefined;
    /** 患者姓名拼音码 *首字母* */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 *首字母* */
    patientWubiCode?: string | undefined;
    /** 来源 门诊/住院/急症 */
    sourceLabel?: string | undefined;
    /** 项目分类名称 */
    roomItemTypeName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 商品名 */
    roomItemListNameGoods?: string | undefined;
    /** 简称 */
    roomItemListShortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    roomItemListPinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    roomItemListWubiCode?: string | undefined;
}

/** Reponse */
export class DrugStorageOutViewResult implements IDrugStorageOutViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageOutView[] | undefined;

    constructor(data?: IDrugStorageOutViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(DrugStorageOutView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DrugStorageOutViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new DrugStorageOutViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IDrugStorageOutViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: DrugStorageOutView[] | undefined;
}

export enum Edition {
    _0 = 0,
    _1 = 1,
}

/** 文件列表 */
export class HfsFiles implements IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHfsFiles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.status = _data["status"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HfsFiles {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["status"] = this.status;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 文件列表 */
export interface IHfsFiles {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 状态0,1 *0：临时 1：正式* */
    status?: number;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HfsFilesResult implements IHfsFilesResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HfsFiles[] | undefined;

    constructor(data?: IHfsFilesResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HfsFiles.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HfsFilesResult {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFilesResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHfsFilesResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HfsFiles[] | undefined;
}

/** Reponse */
export class HfsFilesResultEntry implements IHfsFilesResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HfsFiles;

    constructor(data?: IHfsFilesResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HfsFiles.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HfsFilesResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFilesResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHfsFilesResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HfsFiles;
}

/** 文件列表 (ViewModel) */
export class HfsFilesViewModel implements IHfsFilesViewModel {
    /** 原文件名 */
    name!: string;
    /** 扩展名 */
    extension!: string;
    /** 文件大小 *字节* */
    length!: number;
    /** 文件路径 */
    path!: string;
    /** url */
    url!: string;
    /** 状态0,1 *0：临时 1：正式* */
    status!: number;

    constructor(data?: IHfsFilesViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): HfsFilesViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new HfsFilesViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["status"] = this.status;
        return data;
    }
}

/** 文件列表 (ViewModel) */
export interface IHfsFilesViewModel {
    /** 原文件名 */
    name: string;
    /** 扩展名 */
    extension: string;
    /** 文件大小 *字节* */
    length: number;
    /** 文件路径 */
    path: string;
    /** url */
    url: string;
    /** 状态0,1 *0：临时 1：正式* */
    status: number;
}

/** 治疗室环境监测采样 */
export class HospitalEnvMoniterRecordEditModel implements IHospitalEnvMoniterRecordEditModel {
    /** 检测年份 */
    year!: number;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 采样结果 */
    result?: string | undefined;

    constructor(data?: IHospitalEnvMoniterRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.operatorId = _data["operatorId"];
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): HospitalEnvMoniterRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalEnvMoniterRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["operatorId"] = this.operatorId;
        data["result"] = this.result;
        return data;
    }
}

/** 治疗室环境监测采样 */
export interface IHospitalEnvMoniterRecordEditModel {
    /** 检测年份 */
    year: number;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 采样结果 */
    result?: string | undefined;
}

/** 治疗室环境监测采样 */
export class HospitalEnvMoniterRecordView implements IHospitalEnvMoniterRecordView {
    /** 检测年份 */
    year!: number;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 采样结果 */
    result?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalEnvMoniterRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.operatorId = _data["operatorId"];
            this.result = _data["result"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalEnvMoniterRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalEnvMoniterRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["operatorId"] = this.operatorId;
        data["result"] = this.result;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 治疗室环境监测采样 */
export interface IHospitalEnvMoniterRecordView {
    /** 检测年份 */
    year: number;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 采样结果 */
    result?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalEnvMoniterRecordViewResult implements IHospitalEnvMoniterRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalEnvMoniterRecordView[] | undefined;

    constructor(data?: IHospitalEnvMoniterRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalEnvMoniterRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalEnvMoniterRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalEnvMoniterRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalEnvMoniterRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalEnvMoniterRecordView[] | undefined;
}

/** Reponse */
export class HospitalEnvMoniterRecordViewResultEntry implements IHospitalEnvMoniterRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalEnvMoniterRecordView;

    constructor(data?: IHospitalEnvMoniterRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalEnvMoniterRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalEnvMoniterRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalEnvMoniterRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalEnvMoniterRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalEnvMoniterRecordView;
}

/** 院感培训制定 */
export class HospitalInfectionCultivateFormulateEditModel implements IHospitalInfectionCultivateFormulateEditModel {
    /** 标题 */
    title!: string;
    /** 培训日期 */
    date!: dayjs.Dayjs;
    /** [制定人标识](#用户信息) */
    makerId?: string | undefined;
    /** 培训地点 */
    place?: string | undefined;
    /** 培训方式 */
    mode!: string;
    /** [主讲人](#用户信息) */
    speakerId?: string | undefined;
    /** 培训文件 */
    files?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [培训科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 参与人 */
    participantIds?: string[] | undefined;

    constructor(data?: IHospitalInfectionCultivateFormulateEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.makerId = _data["makerId"];
            this.place = _data["place"];
            this.mode = _data["mode"];
            this.speakerId = _data["speakerId"];
            this.files = _data["files"];
            this.dataValue = _data["dataValue"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            if (Array.isArray(_data["participantIds"])) {
                this.participantIds = [] as any;
                for (let item of _data["participantIds"])
                    this.participantIds!.push(item);
            }
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateFormulateEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateFormulateEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["makerId"] = this.makerId;
        data["place"] = this.place;
        data["mode"] = this.mode;
        data["speakerId"] = this.speakerId;
        data["files"] = this.files;
        data["dataValue"] = this.dataValue;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        if (Array.isArray(this.participantIds)) {
            data["participantIds"] = [];
            for (let item of this.participantIds)
                data["participantIds"].push(item);
        }
        return data;
    }
}

/** 院感培训制定 */
export interface IHospitalInfectionCultivateFormulateEditModel {
    /** 标题 */
    title: string;
    /** 培训日期 */
    date: dayjs.Dayjs;
    /** [制定人标识](#用户信息) */
    makerId?: string | undefined;
    /** 培训地点 */
    place?: string | undefined;
    /** 培训方式 */
    mode: string;
    /** [主讲人](#用户信息) */
    speakerId?: string | undefined;
    /** 培训文件 */
    files?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [培训科室](#透析室) */
    sysHospitalAreaId: string;
    /** 参与人 */
    participantIds?: string[] | undefined;
}

/** 院感培训制定 统计 */
export class HospitalInfectionCultivateFormulateStatistics implements IHospitalInfectionCultivateFormulateStatistics {
    /** 月份 */
    month?: number;
    /** 方案数量 */
    count?: number;
    /** 参人数 */
    participants?: number;

    constructor(data?: IHospitalInfectionCultivateFormulateStatistics) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.month = _data["month"];
            this.count = _data["count"];
            this.participants = _data["participants"];
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateFormulateStatistics {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateFormulateStatistics();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["month"] = this.month;
        data["count"] = this.count;
        data["participants"] = this.participants;
        return data;
    }
}

/** 院感培训制定 统计 */
export interface IHospitalInfectionCultivateFormulateStatistics {
    /** 月份 */
    month?: number;
    /** 方案数量 */
    count?: number;
    /** 参人数 */
    participants?: number;
}

/** Reponse */
export class HospitalInfectionCultivateFormulateStatisticsResult implements IHospitalInfectionCultivateFormulateStatisticsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionCultivateFormulateStatistics[] | undefined;

    constructor(data?: IHospitalInfectionCultivateFormulateStatisticsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionCultivateFormulateStatistics.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateFormulateStatisticsResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateFormulateStatisticsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionCultivateFormulateStatisticsResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionCultivateFormulateStatistics[] | undefined;
}

/** 院感培训学习 todo */
export class HospitalInfectionCultivateFormulateStudyDetail implements IHospitalInfectionCultivateFormulateStudyDetail {
    /** 标题 */
    title!: string;
    /** 培训日期 */
    date!: dayjs.Dayjs;
    /** [制定人标识](#用户信息) */
    makerId?: string | undefined;
    /** 培训地点 */
    place?: string | undefined;
    /** 培训方式 */
    mode!: string;
    /** [主讲人](#用户信息) */
    speakerId?: string | undefined;
    /** 培训文件 */
    files?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [培训科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 文件 */
    fileDes?: string[] | undefined;

    constructor(data?: IHospitalInfectionCultivateFormulateStudyDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.makerId = _data["makerId"];
            this.place = _data["place"];
            this.mode = _data["mode"];
            this.speakerId = _data["speakerId"];
            this.files = _data["files"];
            this.dataValue = _data["dataValue"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            if (Array.isArray(_data["fileDes"])) {
                this.fileDes = [] as any;
                for (let item of _data["fileDes"])
                    this.fileDes!.push(item);
            }
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateFormulateStudyDetail {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateFormulateStudyDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["makerId"] = this.makerId;
        data["place"] = this.place;
        data["mode"] = this.mode;
        data["speakerId"] = this.speakerId;
        data["files"] = this.files;
        data["dataValue"] = this.dataValue;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        if (Array.isArray(this.fileDes)) {
            data["fileDes"] = [];
            for (let item of this.fileDes)
                data["fileDes"].push(item);
        }
        return data;
    }
}

/** 院感培训学习 todo */
export interface IHospitalInfectionCultivateFormulateStudyDetail {
    /** 标题 */
    title: string;
    /** 培训日期 */
    date: dayjs.Dayjs;
    /** [制定人标识](#用户信息) */
    makerId?: string | undefined;
    /** 培训地点 */
    place?: string | undefined;
    /** 培训方式 */
    mode: string;
    /** [主讲人](#用户信息) */
    speakerId?: string | undefined;
    /** 培训文件 */
    files?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [培训科室](#透析室) */
    sysHospitalAreaId: string;
    /** 标识 */
    id?: string | undefined;
    /** 文件 */
    fileDes?: string[] | undefined;
}

/** Reponse */
export class HospitalInfectionCultivateFormulateStudyDetailResultEntry implements IHospitalInfectionCultivateFormulateStudyDetailResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionCultivateFormulateStudyDetail;

    constructor(data?: IHospitalInfectionCultivateFormulateStudyDetailResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionCultivateFormulateStudyDetail.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateFormulateStudyDetailResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateFormulateStudyDetailResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionCultivateFormulateStudyDetailResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionCultivateFormulateStudyDetail;
}

/** 院感培训学习 */
export class HospitalInfectionCultivateFormulateStudyView implements IHospitalInfectionCultivateFormulateStudyView {
    /** 标题 */
    title!: string;
    /** 培训日期 */
    date!: dayjs.Dayjs;
    /** [制定人标识](#用户信息) */
    makerId?: string | undefined;
    /** 培训地点 */
    place?: string | undefined;
    /** 培训方式 */
    mode!: string;
    /** [主讲人](#用户信息) */
    speakerId?: string | undefined;
    /** 培训文件 */
    files?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [培训科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 制单人 */
    makerName?: string | undefined;
    /** 主讲人 */
    speakerName?: string | undefined;
    /** 科室 */
    sysHospitalAreaName?: string | undefined;
    /** 文件 */
    fileDes?: string[] | undefined;
    /** 参与人 */
    participantIds?: string[] | undefined;
    /** 学习状态 */
    status?: number;

    constructor(data?: IHospitalInfectionCultivateFormulateStudyView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.makerId = _data["makerId"];
            this.place = _data["place"];
            this.mode = _data["mode"];
            this.speakerId = _data["speakerId"];
            this.files = _data["files"];
            this.dataValue = _data["dataValue"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.makerName = _data["makerName"];
            this.speakerName = _data["speakerName"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
            if (Array.isArray(_data["fileDes"])) {
                this.fileDes = [] as any;
                for (let item of _data["fileDes"])
                    this.fileDes!.push(item);
            }
            if (Array.isArray(_data["participantIds"])) {
                this.participantIds = [] as any;
                for (let item of _data["participantIds"])
                    this.participantIds!.push(item);
            }
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateFormulateStudyView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateFormulateStudyView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["makerId"] = this.makerId;
        data["place"] = this.place;
        data["mode"] = this.mode;
        data["speakerId"] = this.speakerId;
        data["files"] = this.files;
        data["dataValue"] = this.dataValue;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["makerName"] = this.makerName;
        data["speakerName"] = this.speakerName;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        if (Array.isArray(this.fileDes)) {
            data["fileDes"] = [];
            for (let item of this.fileDes)
                data["fileDes"].push(item);
        }
        if (Array.isArray(this.participantIds)) {
            data["participantIds"] = [];
            for (let item of this.participantIds)
                data["participantIds"].push(item);
        }
        data["status"] = this.status;
        return data;
    }
}

/** 院感培训学习 */
export interface IHospitalInfectionCultivateFormulateStudyView {
    /** 标题 */
    title: string;
    /** 培训日期 */
    date: dayjs.Dayjs;
    /** [制定人标识](#用户信息) */
    makerId?: string | undefined;
    /** 培训地点 */
    place?: string | undefined;
    /** 培训方式 */
    mode: string;
    /** [主讲人](#用户信息) */
    speakerId?: string | undefined;
    /** 培训文件 */
    files?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [培训科室](#透析室) */
    sysHospitalAreaId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 制单人 */
    makerName?: string | undefined;
    /** 主讲人 */
    speakerName?: string | undefined;
    /** 科室 */
    sysHospitalAreaName?: string | undefined;
    /** 文件 */
    fileDes?: string[] | undefined;
    /** 参与人 */
    participantIds?: string[] | undefined;
    /** 学习状态 */
    status?: number;
}

/** Reponse */
export class HospitalInfectionCultivateFormulateStudyViewResult implements IHospitalInfectionCultivateFormulateStudyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionCultivateFormulateStudyView[] | undefined;

    constructor(data?: IHospitalInfectionCultivateFormulateStudyViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionCultivateFormulateStudyView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateFormulateStudyViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateFormulateStudyViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionCultivateFormulateStudyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionCultivateFormulateStudyView[] | undefined;
}

/** 院感培训制定 */
export class HospitalInfectionCultivateFormulateView implements IHospitalInfectionCultivateFormulateView {
    /** 标题 */
    title!: string;
    /** 培训日期 */
    date!: dayjs.Dayjs;
    /** [制定人标识](#用户信息) */
    makerId?: string | undefined;
    /** 培训地点 */
    place?: string | undefined;
    /** 培训方式 */
    mode!: string;
    /** [主讲人](#用户信息) */
    speakerId?: string | undefined;
    /** 培训文件 */
    files?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [培训科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 制单人 */
    makerName?: string | undefined;
    /** 主讲人 */
    speakerName?: string | undefined;
    /** 科室 */
    sysHospitalAreaName?: string | undefined;
    /** 文件 */
    fileDes?: string[] | undefined;
    /** 参与人 */
    participantIds?: string[] | undefined;

    constructor(data?: IHospitalInfectionCultivateFormulateView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.makerId = _data["makerId"];
            this.place = _data["place"];
            this.mode = _data["mode"];
            this.speakerId = _data["speakerId"];
            this.files = _data["files"];
            this.dataValue = _data["dataValue"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.makerName = _data["makerName"];
            this.speakerName = _data["speakerName"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
            if (Array.isArray(_data["fileDes"])) {
                this.fileDes = [] as any;
                for (let item of _data["fileDes"])
                    this.fileDes!.push(item);
            }
            if (Array.isArray(_data["participantIds"])) {
                this.participantIds = [] as any;
                for (let item of _data["participantIds"])
                    this.participantIds!.push(item);
            }
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateFormulateView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateFormulateView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["makerId"] = this.makerId;
        data["place"] = this.place;
        data["mode"] = this.mode;
        data["speakerId"] = this.speakerId;
        data["files"] = this.files;
        data["dataValue"] = this.dataValue;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["makerName"] = this.makerName;
        data["speakerName"] = this.speakerName;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        if (Array.isArray(this.fileDes)) {
            data["fileDes"] = [];
            for (let item of this.fileDes)
                data["fileDes"].push(item);
        }
        if (Array.isArray(this.participantIds)) {
            data["participantIds"] = [];
            for (let item of this.participantIds)
                data["participantIds"].push(item);
        }
        return data;
    }
}

/** 院感培训制定 */
export interface IHospitalInfectionCultivateFormulateView {
    /** 标题 */
    title: string;
    /** 培训日期 */
    date: dayjs.Dayjs;
    /** [制定人标识](#用户信息) */
    makerId?: string | undefined;
    /** 培训地点 */
    place?: string | undefined;
    /** 培训方式 */
    mode: string;
    /** [主讲人](#用户信息) */
    speakerId?: string | undefined;
    /** 培训文件 */
    files?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [培训科室](#透析室) */
    sysHospitalAreaId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 制单人 */
    makerName?: string | undefined;
    /** 主讲人 */
    speakerName?: string | undefined;
    /** 科室 */
    sysHospitalAreaName?: string | undefined;
    /** 文件 */
    fileDes?: string[] | undefined;
    /** 参与人 */
    participantIds?: string[] | undefined;
}

/** Reponse */
export class HospitalInfectionCultivateFormulateViewResult implements IHospitalInfectionCultivateFormulateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionCultivateFormulateView[] | undefined;

    constructor(data?: IHospitalInfectionCultivateFormulateViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionCultivateFormulateView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateFormulateViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateFormulateViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionCultivateFormulateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionCultivateFormulateView[] | undefined;
}

/** Reponse */
export class HospitalInfectionCultivateFormulateViewResultEntry implements IHospitalInfectionCultivateFormulateViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionCultivateFormulateView;

    constructor(data?: IHospitalInfectionCultivateFormulateViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionCultivateFormulateView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateFormulateViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateFormulateViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionCultivateFormulateViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionCultivateFormulateView;
}

/** 培训记录 */
export class HospitalInfectionCultivateRecord implements IHospitalInfectionCultivateRecord {
    /** 标题 */
    title!: string;
    /** 培训日期 */
    date!: dayjs.Dayjs;
    /** [制定人标识](#用户信息) */
    makerId?: string | undefined;
    /** 培训地点 */
    place?: string | undefined;
    /** 培训方式 */
    mode!: string;
    /** [主讲人](#用户信息) */
    speakerId?: string | undefined;
    /** 培训文件 */
    files?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [培训科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 制单人 */
    makerName?: string | undefined;
    /** 主讲人 */
    speakerName?: string | undefined;
    /** 科室 */
    sysHospitalAreaName?: string | undefined;
    /** 文件 */
    fileDes?: string[] | undefined;
    /** 参与人 */
    participantIds?: string[] | undefined;
    /** 参加人数 */
    participants?: number;
    /** 参加人员明细 */
    participantStr?: string | undefined;
    /** 签到明细 */
    participantSign?: string | undefined;

    constructor(data?: IHospitalInfectionCultivateRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.makerId = _data["makerId"];
            this.place = _data["place"];
            this.mode = _data["mode"];
            this.speakerId = _data["speakerId"];
            this.files = _data["files"];
            this.dataValue = _data["dataValue"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.makerName = _data["makerName"];
            this.speakerName = _data["speakerName"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
            if (Array.isArray(_data["fileDes"])) {
                this.fileDes = [] as any;
                for (let item of _data["fileDes"])
                    this.fileDes!.push(item);
            }
            if (Array.isArray(_data["participantIds"])) {
                this.participantIds = [] as any;
                for (let item of _data["participantIds"])
                    this.participantIds!.push(item);
            }
            this.participants = _data["participants"];
            this.participantStr = _data["participantStr"];
            this.participantSign = _data["participantSign"];
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateRecord {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["makerId"] = this.makerId;
        data["place"] = this.place;
        data["mode"] = this.mode;
        data["speakerId"] = this.speakerId;
        data["files"] = this.files;
        data["dataValue"] = this.dataValue;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["makerName"] = this.makerName;
        data["speakerName"] = this.speakerName;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        if (Array.isArray(this.fileDes)) {
            data["fileDes"] = [];
            for (let item of this.fileDes)
                data["fileDes"].push(item);
        }
        if (Array.isArray(this.participantIds)) {
            data["participantIds"] = [];
            for (let item of this.participantIds)
                data["participantIds"].push(item);
        }
        data["participants"] = this.participants;
        data["participantStr"] = this.participantStr;
        data["participantSign"] = this.participantSign;
        return data;
    }
}

/** 培训记录 */
export interface IHospitalInfectionCultivateRecord {
    /** 标题 */
    title: string;
    /** 培训日期 */
    date: dayjs.Dayjs;
    /** [制定人标识](#用户信息) */
    makerId?: string | undefined;
    /** 培训地点 */
    place?: string | undefined;
    /** 培训方式 */
    mode: string;
    /** [主讲人](#用户信息) */
    speakerId?: string | undefined;
    /** 培训文件 */
    files?: string | undefined;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** [培训科室](#透析室) */
    sysHospitalAreaId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 制单人 */
    makerName?: string | undefined;
    /** 主讲人 */
    speakerName?: string | undefined;
    /** 科室 */
    sysHospitalAreaName?: string | undefined;
    /** 文件 */
    fileDes?: string[] | undefined;
    /** 参与人 */
    participantIds?: string[] | undefined;
    /** 参加人数 */
    participants?: number;
    /** 参加人员明细 */
    participantStr?: string | undefined;
    /** 签到明细 */
    participantSign?: string | undefined;
}

/** Reponse */
export class HospitalInfectionCultivateRecordResultEntry implements IHospitalInfectionCultivateRecordResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionCultivateRecord;

    constructor(data?: IHospitalInfectionCultivateRecordResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionCultivateRecord.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateRecordResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateRecordResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionCultivateRecordResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionCultivateRecord;
}

/** 院感培训学习 */
export class HospitalInfectionCultivateStudyEditModel implements IHospitalInfectionCultivateStudyEditModel {
    /** [参与人标识](#用户信息) */
    participantId!: string;
    /** 是否已学习 */
    status!: number;
    /** 学习时长 */
    duration?: number | undefined;
    /** [培训方案标识](#院感培训制定) */
    hospitalInfectionCultivateFormulateId!: string;

    constructor(data?: IHospitalInfectionCultivateStudyEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.participantId = _data["participantId"];
            this.status = _data["status"];
            this.duration = _data["duration"];
            this.hospitalInfectionCultivateFormulateId = _data["hospitalInfectionCultivateFormulateId"];
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateStudyEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateStudyEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["participantId"] = this.participantId;
        data["status"] = this.status;
        data["duration"] = this.duration;
        data["hospitalInfectionCultivateFormulateId"] = this.hospitalInfectionCultivateFormulateId;
        return data;
    }
}

/** 院感培训学习 */
export interface IHospitalInfectionCultivateStudyEditModel {
    /** [参与人标识](#用户信息) */
    participantId: string;
    /** 是否已学习 */
    status: number;
    /** 学习时长 */
    duration?: number | undefined;
    /** [培训方案标识](#院感培训制定) */
    hospitalInfectionCultivateFormulateId: string;
}

/** 院感培训学习 */
export class HospitalInfectionCultivateStudyView implements IHospitalInfectionCultivateStudyView {
    /** [参与人标识](#用户信息) */
    participantId!: string;
    /** 是否已学习 */
    status!: number;
    /** 学习时长 */
    duration?: number | undefined;
    /** [培训方案标识](#院感培训制定) */
    hospitalInfectionCultivateFormulateId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionCultivateStudyView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.participantId = _data["participantId"];
            this.status = _data["status"];
            this.duration = _data["duration"];
            this.hospitalInfectionCultivateFormulateId = _data["hospitalInfectionCultivateFormulateId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateStudyView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateStudyView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["participantId"] = this.participantId;
        data["status"] = this.status;
        data["duration"] = this.duration;
        data["hospitalInfectionCultivateFormulateId"] = this.hospitalInfectionCultivateFormulateId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 院感培训学习 */
export interface IHospitalInfectionCultivateStudyView {
    /** [参与人标识](#用户信息) */
    participantId: string;
    /** 是否已学习 */
    status: number;
    /** 学习时长 */
    duration?: number | undefined;
    /** [培训方案标识](#院感培训制定) */
    hospitalInfectionCultivateFormulateId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionCultivateStudyViewResult implements IHospitalInfectionCultivateStudyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionCultivateStudyView[] | undefined;

    constructor(data?: IHospitalInfectionCultivateStudyViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionCultivateStudyView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateStudyViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateStudyViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionCultivateStudyViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionCultivateStudyView[] | undefined;
}

/** Reponse */
export class HospitalInfectionCultivateStudyViewResultEntry implements IHospitalInfectionCultivateStudyViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionCultivateStudyView;

    constructor(data?: IHospitalInfectionCultivateStudyViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionCultivateStudyView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionCultivateStudyViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionCultivateStudyViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionCultivateStudyViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionCultivateStudyView;
}

export class HospitalInfectionDialysateDetailView implements IHospitalInfectionDialysateDetailView {
    id?: string | undefined;
    date?: dayjs.Dayjs;
    operatorId?: string | undefined;
    operatorName?: string | undefined;
    sysHospitalAreaId?: string | undefined;
    data?: HospitalInfectionDialysateItems[] | undefined;

    constructor(data?: IHospitalInfectionDialysateDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionDialysateItems.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IHospitalInfectionDialysateDetailView {
    id?: string | undefined;
    date?: dayjs.Dayjs;
    operatorId?: string | undefined;
    operatorName?: string | undefined;
    sysHospitalAreaId?: string | undefined;
    data?: HospitalInfectionDialysateItems[] | undefined;
}

/** Reponse */
export class HospitalInfectionDialysateDetailViewResultEntry implements IHospitalInfectionDialysateDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionDialysateDetailView;

    constructor(data?: IHospitalInfectionDialysateDetailViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionDialysateDetailView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateDetailViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateDetailViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionDialysateDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionDialysateDetailView;
}

export class HospitalInfectionDialysateDetails implements IHospitalInfectionDialysateDetails {
    deviceId?: string | undefined;
    deviceName?: string | undefined;
    germ?: number | undefined;
    endotoxin?: number | undefined;
    sequence?: number;
    isGerm?: boolean;
    isEndotoxin?: boolean;

    constructor(data?: IHospitalInfectionDialysateDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"];
            this.deviceName = _data["deviceName"];
            this.germ = _data["germ"];
            this.endotoxin = _data["endotoxin"];
            this.sequence = _data["sequence"];
            this.isGerm = _data["isGerm"];
            this.isEndotoxin = _data["isEndotoxin"];
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateDetails {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId;
        data["deviceName"] = this.deviceName;
        data["germ"] = this.germ;
        data["endotoxin"] = this.endotoxin;
        data["sequence"] = this.sequence;
        data["isGerm"] = this.isGerm;
        data["isEndotoxin"] = this.isEndotoxin;
        return data;
    }
}

export interface IHospitalInfectionDialysateDetails {
    deviceId?: string | undefined;
    deviceName?: string | undefined;
    germ?: number | undefined;
    endotoxin?: number | undefined;
    sequence?: number;
    isGerm?: boolean;
    isEndotoxin?: boolean;
}

/** 透析液检测 */
export class HospitalInfectionDialysateEdit implements IHospitalInfectionDialysateEdit {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 检测年份 */
    year!: number;

    constructor(data?: IHospitalInfectionDialysateEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.operatorId = _data["operatorId"];
            this.result = _data["result"];
            this.remark = _data["remark"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.year = _data["year"];
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateEdit {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["result"] = this.result;
        data["remark"] = this.remark;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["year"] = this.year;
        return data;
    }
}

/** 透析液检测 */
export interface IHospitalInfectionDialysateEdit {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 检测年份 */
    year: number;
}

export class HospitalInfectionDialysateItems implements IHospitalInfectionDialysateItems {
    id?: string | undefined;
    date?: dayjs.Dayjs | undefined;
    details?: HospitalInfectionDialysateDetails[] | undefined;

    constructor(data?: IHospitalInfectionDialysateItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(HospitalInfectionDialysateDetails.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateItems {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        return data;
    }
}

export interface IHospitalInfectionDialysateItems {
    id?: string | undefined;
    date?: dayjs.Dayjs | undefined;
    details?: HospitalInfectionDialysateDetails[] | undefined;
}

/** 透析液检测 */
export class HospitalInfectionDialysateView implements IHospitalInfectionDialysateView {
    /** 年份 */
    year?: number;
    /** 创建人标识 */
    operatorId?: string | undefined;
    /** 创建人 */
    operatorName?: string | undefined;
    /** 检测次数 */
    count?: number;
    /** 检测次数 */
    lastDate?: dayjs.Dayjs;
    /** 明细 */
    infectionDialysateItems?: HospitalInfectionDialysateItems[] | undefined;

    constructor(data?: IHospitalInfectionDialysateView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.operatorId = _data["operatorId"];
            this.operatorName = _data["operatorName"];
            this.count = _data["count"];
            this.lastDate = _data["lastDate"] ? dayjs(_data["lastDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["infectionDialysateItems"])) {
                this.infectionDialysateItems = [] as any;
                for (let item of _data["infectionDialysateItems"])
                    this.infectionDialysateItems!.push(HospitalInfectionDialysateItems.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["count"] = this.count;
        data["lastDate"] = this.lastDate ? this.lastDate.toLocaleString() : <any>undefined;
        if (Array.isArray(this.infectionDialysateItems)) {
            data["infectionDialysateItems"] = [];
            for (let item of this.infectionDialysateItems)
                data["infectionDialysateItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 透析液检测 */
export interface IHospitalInfectionDialysateView {
    /** 年份 */
    year?: number;
    /** 创建人标识 */
    operatorId?: string | undefined;
    /** 创建人 */
    operatorName?: string | undefined;
    /** 检测次数 */
    count?: number;
    /** 检测次数 */
    lastDate?: dayjs.Dayjs;
    /** 明细 */
    infectionDialysateItems?: HospitalInfectionDialysateItems[] | undefined;
}

/** Reponse */
export class HospitalInfectionDialysateViewResult implements IHospitalInfectionDialysateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionDialysateView[] | undefined;

    constructor(data?: IHospitalInfectionDialysateViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionDialysateView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionDialysateViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDialysateViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionDialysateViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionDialysateView[] | undefined;
}

/** 消毒液残留量检测 */
export class HospitalInfectionDisinfectantResidueDetectionEditModel implements IHospitalInfectionDisinfectantResidueDetectionEditModel {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 出水采样口检测结果 */
    outwaterSamplingResult?: string | undefined;
    /** 出水采样口检测时间 */
    outwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 回水采样口检测结果 */
    inwaterSamplingResult?: string | undefined;
    /** 回水采样口检测时间 */
    inwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 配水箱检测结果 */
    distributionwaterTankResult?: string | undefined;
    /** 配水箱检测时间 */
    distributionwaterTankTime?: dayjs.Dayjs | undefined;
    /** 操作人 */
    operator!: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;

    constructor(data?: IHospitalInfectionDisinfectantResidueDetectionEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.outwaterSamplingResult = _data["outwaterSamplingResult"];
            this.outwaterSamplingTime = _data["outwaterSamplingTime"] ? dayjs(_data["outwaterSamplingTime"].toString()) : <any>undefined;
            this.inwaterSamplingResult = _data["inwaterSamplingResult"];
            this.inwaterSamplingTime = _data["inwaterSamplingTime"] ? dayjs(_data["inwaterSamplingTime"].toString()) : <any>undefined;
            this.distributionwaterTankResult = _data["distributionwaterTankResult"];
            this.distributionwaterTankTime = _data["distributionwaterTankTime"] ? dayjs(_data["distributionwaterTankTime"].toString()) : <any>undefined;
            this.operator = _data["operator"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
        }
    }

    static fromJS(data: any): HospitalInfectionDisinfectantResidueDetectionEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDisinfectantResidueDetectionEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["outwaterSamplingResult"] = this.outwaterSamplingResult;
        data["outwaterSamplingTime"] = this.outwaterSamplingTime ? this.outwaterSamplingTime.toLocaleString() : <any>undefined;
        data["inwaterSamplingResult"] = this.inwaterSamplingResult;
        data["inwaterSamplingTime"] = this.inwaterSamplingTime ? this.inwaterSamplingTime.toLocaleString() : <any>undefined;
        data["distributionwaterTankResult"] = this.distributionwaterTankResult;
        data["distributionwaterTankTime"] = this.distributionwaterTankTime ? this.distributionwaterTankTime.toLocaleString() : <any>undefined;
        data["operator"] = this.operator;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        return data;
    }
}

/** 消毒液残留量检测 */
export interface IHospitalInfectionDisinfectantResidueDetectionEditModel {
    /** 日期 */
    date: dayjs.Dayjs;
    /** 出水采样口检测结果 */
    outwaterSamplingResult?: string | undefined;
    /** 出水采样口检测时间 */
    outwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 回水采样口检测结果 */
    inwaterSamplingResult?: string | undefined;
    /** 回水采样口检测时间 */
    inwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 配水箱检测结果 */
    distributionwaterTankResult?: string | undefined;
    /** 配水箱检测时间 */
    distributionwaterTankTime?: dayjs.Dayjs | undefined;
    /** 操作人 */
    operator: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
}

/** 消毒液残留量检测 */
export class HospitalInfectionDisinfectantResidueDetectionView implements IHospitalInfectionDisinfectantResidueDetectionView {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 出水采样口检测结果 */
    outwaterSamplingResult?: string | undefined;
    /** 出水采样口检测时间 */
    outwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 回水采样口检测结果 */
    inwaterSamplingResult?: string | undefined;
    /** 回水采样口检测时间 */
    inwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 配水箱检测结果 */
    distributionwaterTankResult?: string | undefined;
    /** 配水箱检测时间 */
    distributionwaterTankTime?: dayjs.Dayjs | undefined;
    /** 操作人 */
    operator!: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionDisinfectantResidueDetectionView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.outwaterSamplingResult = _data["outwaterSamplingResult"];
            this.outwaterSamplingTime = _data["outwaterSamplingTime"] ? dayjs(_data["outwaterSamplingTime"].toString()) : <any>undefined;
            this.inwaterSamplingResult = _data["inwaterSamplingResult"];
            this.inwaterSamplingTime = _data["inwaterSamplingTime"] ? dayjs(_data["inwaterSamplingTime"].toString()) : <any>undefined;
            this.distributionwaterTankResult = _data["distributionwaterTankResult"];
            this.distributionwaterTankTime = _data["distributionwaterTankTime"] ? dayjs(_data["distributionwaterTankTime"].toString()) : <any>undefined;
            this.operator = _data["operator"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionDisinfectantResidueDetectionView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDisinfectantResidueDetectionView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["outwaterSamplingResult"] = this.outwaterSamplingResult;
        data["outwaterSamplingTime"] = this.outwaterSamplingTime ? this.outwaterSamplingTime.toLocaleString() : <any>undefined;
        data["inwaterSamplingResult"] = this.inwaterSamplingResult;
        data["inwaterSamplingTime"] = this.inwaterSamplingTime ? this.inwaterSamplingTime.toLocaleString() : <any>undefined;
        data["distributionwaterTankResult"] = this.distributionwaterTankResult;
        data["distributionwaterTankTime"] = this.distributionwaterTankTime ? this.distributionwaterTankTime.toLocaleString() : <any>undefined;
        data["operator"] = this.operator;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 消毒液残留量检测 */
export interface IHospitalInfectionDisinfectantResidueDetectionView {
    /** 日期 */
    date: dayjs.Dayjs;
    /** 出水采样口检测结果 */
    outwaterSamplingResult?: string | undefined;
    /** 出水采样口检测时间 */
    outwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 回水采样口检测结果 */
    inwaterSamplingResult?: string | undefined;
    /** 回水采样口检测时间 */
    inwaterSamplingTime?: dayjs.Dayjs | undefined;
    /** 配水箱检测结果 */
    distributionwaterTankResult?: string | undefined;
    /** 配水箱检测时间 */
    distributionwaterTankTime?: dayjs.Dayjs | undefined;
    /** 操作人 */
    operator: string;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionDisinfectantResidueDetectionViewResult implements IHospitalInfectionDisinfectantResidueDetectionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionDisinfectantResidueDetectionView[] | undefined;

    constructor(data?: IHospitalInfectionDisinfectantResidueDetectionViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionDisinfectantResidueDetectionView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionDisinfectantResidueDetectionViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDisinfectantResidueDetectionViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionDisinfectantResidueDetectionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionDisinfectantResidueDetectionView[] | undefined;
}

/** Reponse */
export class HospitalInfectionDisinfectantResidueDetectionViewResultEntry implements IHospitalInfectionDisinfectantResidueDetectionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionDisinfectantResidueDetectionView;

    constructor(data?: IHospitalInfectionDisinfectantResidueDetectionViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionDisinfectantResidueDetectionView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionDisinfectantResidueDetectionViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionDisinfectantResidueDetectionViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionDisinfectantResidueDetectionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionDisinfectantResidueDetectionView;
}

/** 电解质检测 */
export class HospitalInfectionElectrolyteEdit implements IHospitalInfectionElectrolyteEdit {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** [监测人员标识](#用户信息) */
    operatorId!: string;
    /** 钠 *mmol/L* */
    na?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 氯 *mmol/L* */
    cl?: number | undefined;
    /** 透析液批号 */
    lotNumber?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IHospitalInfectionElectrolyteEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devInfoId = _data["devInfoId"];
            this.operatorId = _data["operatorId"];
            this.na = _data["na"];
            this.k = _data["k"];
            this.cl = _data["cl"];
            this.lotNumber = _data["lotNumber"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): HospitalInfectionElectrolyteEdit {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionElectrolyteEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["devInfoId"] = this.devInfoId;
        data["operatorId"] = this.operatorId;
        data["na"] = this.na;
        data["k"] = this.k;
        data["cl"] = this.cl;
        data["lotNumber"] = this.lotNumber;
        data["remark"] = this.remark;
        return data;
    }
}

/** 电解质检测 */
export interface IHospitalInfectionElectrolyteEdit {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** [监测人员标识](#用户信息) */
    operatorId: string;
    /** 钠 *mmol/L* */
    na?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 氯 *mmol/L* */
    cl?: number | undefined;
    /** 透析液批号 */
    lotNumber?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 电解质检测 */
export class HospitalInfectionElectrolyteView implements IHospitalInfectionElectrolyteView {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** [监测人员标识](#用户信息) */
    operatorId!: string;
    /** 钠 *mmol/L* */
    na?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 氯 *mmol/L* */
    cl?: number | undefined;
    /** 透析液批号 */
    lotNumber?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设备名称 */
    devInfoName?: string | undefined;
    /** 操作者 */
    operatorName?: string | undefined;
    /** 操作者别名 */
    operatorName2?: string | undefined;
    /** 操作者全名 */
    operatorNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionElectrolyteView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devInfoId = _data["devInfoId"];
            this.operatorId = _data["operatorId"];
            this.na = _data["na"];
            this.k = _data["k"];
            this.cl = _data["cl"];
            this.lotNumber = _data["lotNumber"];
            this.remark = _data["remark"];
            this.devInfoName = _data["devInfoName"];
            this.operatorName = _data["operatorName"];
            this.operatorName2 = _data["operatorName2"];
            this.operatorNameFull = _data["operatorNameFull"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionElectrolyteView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionElectrolyteView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["devInfoId"] = this.devInfoId;
        data["operatorId"] = this.operatorId;
        data["na"] = this.na;
        data["k"] = this.k;
        data["cl"] = this.cl;
        data["lotNumber"] = this.lotNumber;
        data["remark"] = this.remark;
        data["devInfoName"] = this.devInfoName;
        data["operatorName"] = this.operatorName;
        data["operatorName2"] = this.operatorName2;
        data["operatorNameFull"] = this.operatorNameFull;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 电解质检测 */
export interface IHospitalInfectionElectrolyteView {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** [监测人员标识](#用户信息) */
    operatorId: string;
    /** 钠 *mmol/L* */
    na?: number | undefined;
    /** 钾 *mmol/L* */
    k?: number | undefined;
    /** 氯 *mmol/L* */
    cl?: number | undefined;
    /** 透析液批号 */
    lotNumber?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设备名称 */
    devInfoName?: string | undefined;
    /** 操作者 */
    operatorName?: string | undefined;
    /** 操作者别名 */
    operatorName2?: string | undefined;
    /** 操作者全名 */
    operatorNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionElectrolyteViewResult implements IHospitalInfectionElectrolyteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionElectrolyteView[] | undefined;

    constructor(data?: IHospitalInfectionElectrolyteViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionElectrolyteView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionElectrolyteViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionElectrolyteViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionElectrolyteViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionElectrolyteView[] | undefined;
}

/** Reponse */
export class HospitalInfectionElectrolyteViewResultEntry implements IHospitalInfectionElectrolyteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionElectrolyteView;

    constructor(data?: IHospitalInfectionElectrolyteViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionElectrolyteView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionElectrolyteViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionElectrolyteViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionElectrolyteViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionElectrolyteView;
}

/** 细菌培养 */
export class HospitalInfectionGermicultureEdit implements IHospitalInfectionGermicultureEdit {
    /** 送检日期 */
    submittedDate!: dayjs.Dayjs;
    /** 培养类型 *细菌培养,空气细菌,消毒剂培养* */
    type!: string;
    /** 培养项目 *细菌培养,空气细菌,员工培养,消毒剂培养* */
    cultivateProject?: string | undefined;
    /** 送检单位 */
    submittedDepartment?: string | undefined;
    /** 临床印象 */
    clinicalImpression?: string | undefined;
    /** 送检材料 */
    submittedMaterials?: string | undefined;
    /** 检验项目 */
    submittedProject?: string | undefined;
    /** 送检医师 */
    submitteDphysician?: string | undefined;
    /** 检验结果 */
    result?: string | undefined;
    /** 报告日期 */
    reportDate!: dayjs.Dayjs;
    /** 检查员 */
    inspector!: string;
    /** 检验者 */
    checker!: string;
    /** 备注 */
    remark?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;

    constructor(data?: IHospitalInfectionGermicultureEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.submittedDate = _data["submittedDate"] ? dayjs(_data["submittedDate"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.cultivateProject = _data["cultivateProject"];
            this.submittedDepartment = _data["submittedDepartment"];
            this.clinicalImpression = _data["clinicalImpression"];
            this.submittedMaterials = _data["submittedMaterials"];
            this.submittedProject = _data["submittedProject"];
            this.submitteDphysician = _data["submitteDphysician"];
            this.result = _data["result"];
            this.reportDate = _data["reportDate"] ? dayjs(_data["reportDate"].toString()) : <any>undefined;
            this.inspector = _data["inspector"];
            this.checker = _data["checker"];
            this.remark = _data["remark"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureEdit {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["submittedDate"] = this.submittedDate ? this.submittedDate.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["cultivateProject"] = this.cultivateProject;
        data["submittedDepartment"] = this.submittedDepartment;
        data["clinicalImpression"] = this.clinicalImpression;
        data["submittedMaterials"] = this.submittedMaterials;
        data["submittedProject"] = this.submittedProject;
        data["submitteDphysician"] = this.submitteDphysician;
        data["result"] = this.result;
        data["reportDate"] = this.reportDate ? this.reportDate.toLocaleString() : <any>undefined;
        data["inspector"] = this.inspector;
        data["checker"] = this.checker;
        data["remark"] = this.remark;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        return data;
    }
}

/** 细菌培养 */
export interface IHospitalInfectionGermicultureEdit {
    /** 送检日期 */
    submittedDate: dayjs.Dayjs;
    /** 培养类型 *细菌培养,空气细菌,消毒剂培养* */
    type: string;
    /** 培养项目 *细菌培养,空气细菌,员工培养,消毒剂培养* */
    cultivateProject?: string | undefined;
    /** 送检单位 */
    submittedDepartment?: string | undefined;
    /** 临床印象 */
    clinicalImpression?: string | undefined;
    /** 送检材料 */
    submittedMaterials?: string | undefined;
    /** 检验项目 */
    submittedProject?: string | undefined;
    /** 送检医师 */
    submitteDphysician?: string | undefined;
    /** 检验结果 */
    result?: string | undefined;
    /** 报告日期 */
    reportDate: dayjs.Dayjs;
    /** 检查员 */
    inspector: string;
    /** 检验者 */
    checker: string;
    /** 备注 */
    remark?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
}

export class HospitalInfectionGermicultureSurfaceEditModel implements IHospitalInfectionGermicultureSurfaceEditModel {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 碘伏 */
    iodophor?: number | undefined;
    /** 生理盐水 */
    saline?: number | undefined;
    /** 机器表面 */
    machineSurface?: number | undefined;
    /** 棉签 */
    cottonSwab?: number | undefined;
    /** 手指 */
    finger?: number | undefined;
    /** 冰箱 */
    fridge?: number | undefined;
    /** 浓缩液A */
    concentrateSolutionA?: number | undefined;
    /** 浓缩液B */
    concentrateSolutionB?: number | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;

    constructor(data?: IHospitalInfectionGermicultureSurfaceEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.iodophor = _data["iodophor"];
            this.saline = _data["saline"];
            this.machineSurface = _data["machineSurface"];
            this.cottonSwab = _data["cottonSwab"];
            this.finger = _data["finger"];
            this.fridge = _data["fridge"];
            this.concentrateSolutionA = _data["concentrateSolutionA"];
            this.concentrateSolutionB = _data["concentrateSolutionB"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureSurfaceEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureSurfaceEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["iodophor"] = this.iodophor;
        data["saline"] = this.saline;
        data["machineSurface"] = this.machineSurface;
        data["cottonSwab"] = this.cottonSwab;
        data["finger"] = this.finger;
        data["fridge"] = this.fridge;
        data["concentrateSolutionA"] = this.concentrateSolutionA;
        data["concentrateSolutionB"] = this.concentrateSolutionB;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        return data;
    }
}

export interface IHospitalInfectionGermicultureSurfaceEditModel {
    /** 日期 */
    date: dayjs.Dayjs;
    /** 碘伏 */
    iodophor?: number | undefined;
    /** 生理盐水 */
    saline?: number | undefined;
    /** 机器表面 */
    machineSurface?: number | undefined;
    /** 棉签 */
    cottonSwab?: number | undefined;
    /** 手指 */
    finger?: number | undefined;
    /** 冰箱 */
    fridge?: number | undefined;
    /** 浓缩液A */
    concentrateSolutionA?: number | undefined;
    /** 浓缩液B */
    concentrateSolutionB?: number | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
}

export class HospitalInfectionGermicultureSurfaceSummaryView implements IHospitalInfectionGermicultureSurfaceSummaryView {
    /** 季度 */
    quarter?: string | undefined;
    /** 日期 */
    date?: string | undefined;
    /** 碘伏 */
    iodophor?: number | undefined;
    /** 生理盐水 */
    saline?: number | undefined;
    /** 机器表面 */
    machineSurface?: number | undefined;
    /** 棉签 */
    cottonSwab?: number | undefined;
    /** 手指 */
    finger?: number | undefined;
    /** 冰箱 */
    fridge?: number | undefined;
    /** 浓缩液A */
    concentrateSolutionA?: number | undefined;
    /** 浓缩液B */
    concentrateSolutionB?: number | undefined;

    constructor(data?: IHospitalInfectionGermicultureSurfaceSummaryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.quarter = _data["quarter"];
            this.date = _data["date"];
            this.iodophor = _data["iodophor"];
            this.saline = _data["saline"];
            this.machineSurface = _data["machineSurface"];
            this.cottonSwab = _data["cottonSwab"];
            this.finger = _data["finger"];
            this.fridge = _data["fridge"];
            this.concentrateSolutionA = _data["concentrateSolutionA"];
            this.concentrateSolutionB = _data["concentrateSolutionB"];
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureSurfaceSummaryView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureSurfaceSummaryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quarter"] = this.quarter;
        data["date"] = this.date;
        data["iodophor"] = this.iodophor;
        data["saline"] = this.saline;
        data["machineSurface"] = this.machineSurface;
        data["cottonSwab"] = this.cottonSwab;
        data["finger"] = this.finger;
        data["fridge"] = this.fridge;
        data["concentrateSolutionA"] = this.concentrateSolutionA;
        data["concentrateSolutionB"] = this.concentrateSolutionB;
        return data;
    }
}

export interface IHospitalInfectionGermicultureSurfaceSummaryView {
    /** 季度 */
    quarter?: string | undefined;
    /** 日期 */
    date?: string | undefined;
    /** 碘伏 */
    iodophor?: number | undefined;
    /** 生理盐水 */
    saline?: number | undefined;
    /** 机器表面 */
    machineSurface?: number | undefined;
    /** 棉签 */
    cottonSwab?: number | undefined;
    /** 手指 */
    finger?: number | undefined;
    /** 冰箱 */
    fridge?: number | undefined;
    /** 浓缩液A */
    concentrateSolutionA?: number | undefined;
    /** 浓缩液B */
    concentrateSolutionB?: number | undefined;
}

/** Reponse */
export class HospitalInfectionGermicultureSurfaceSummaryViewResult implements IHospitalInfectionGermicultureSurfaceSummaryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionGermicultureSurfaceSummaryView[] | undefined;

    constructor(data?: IHospitalInfectionGermicultureSurfaceSummaryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionGermicultureSurfaceSummaryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureSurfaceSummaryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureSurfaceSummaryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionGermicultureSurfaceSummaryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionGermicultureSurfaceSummaryView[] | undefined;
}

export class HospitalInfectionGermicultureSurfaceView implements IHospitalInfectionGermicultureSurfaceView {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 碘伏 */
    iodophor?: number | undefined;
    /** 生理盐水 */
    saline?: number | undefined;
    /** 机器表面 */
    machineSurface?: number | undefined;
    /** 棉签 */
    cottonSwab?: number | undefined;
    /** 手指 */
    finger?: number | undefined;
    /** 冰箱 */
    fridge?: number | undefined;
    /** 浓缩液A */
    concentrateSolutionA?: number | undefined;
    /** 浓缩液B */
    concentrateSolutionB?: number | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionGermicultureSurfaceView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.iodophor = _data["iodophor"];
            this.saline = _data["saline"];
            this.machineSurface = _data["machineSurface"];
            this.cottonSwab = _data["cottonSwab"];
            this.finger = _data["finger"];
            this.fridge = _data["fridge"];
            this.concentrateSolutionA = _data["concentrateSolutionA"];
            this.concentrateSolutionB = _data["concentrateSolutionB"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureSurfaceView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureSurfaceView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["iodophor"] = this.iodophor;
        data["saline"] = this.saline;
        data["machineSurface"] = this.machineSurface;
        data["cottonSwab"] = this.cottonSwab;
        data["finger"] = this.finger;
        data["fridge"] = this.fridge;
        data["concentrateSolutionA"] = this.concentrateSolutionA;
        data["concentrateSolutionB"] = this.concentrateSolutionB;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IHospitalInfectionGermicultureSurfaceView {
    /** 日期 */
    date: dayjs.Dayjs;
    /** 碘伏 */
    iodophor?: number | undefined;
    /** 生理盐水 */
    saline?: number | undefined;
    /** 机器表面 */
    machineSurface?: number | undefined;
    /** 棉签 */
    cottonSwab?: number | undefined;
    /** 手指 */
    finger?: number | undefined;
    /** 冰箱 */
    fridge?: number | undefined;
    /** 浓缩液A */
    concentrateSolutionA?: number | undefined;
    /** 浓缩液B */
    concentrateSolutionB?: number | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionGermicultureSurfaceViewResult implements IHospitalInfectionGermicultureSurfaceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionGermicultureSurfaceView[] | undefined;

    constructor(data?: IHospitalInfectionGermicultureSurfaceViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionGermicultureSurfaceView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureSurfaceViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureSurfaceViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionGermicultureSurfaceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionGermicultureSurfaceView[] | undefined;
}

/** Reponse */
export class HospitalInfectionGermicultureSurfaceViewResultEntry implements IHospitalInfectionGermicultureSurfaceViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionGermicultureSurfaceView;

    constructor(data?: IHospitalInfectionGermicultureSurfaceViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionGermicultureSurfaceView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureSurfaceViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureSurfaceViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionGermicultureSurfaceViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionGermicultureSurfaceView;
}

/** 细菌培养 */
export class HospitalInfectionGermicultureView implements IHospitalInfectionGermicultureView {
    /** 送检日期 */
    submittedDate!: dayjs.Dayjs;
    /** 培养类型 *细菌培养,空气细菌,消毒剂培养* */
    type!: string;
    /** 培养项目 *细菌培养,空气细菌,员工培养,消毒剂培养* */
    cultivateProject?: string | undefined;
    /** 送检单位 */
    submittedDepartment?: string | undefined;
    /** 临床印象 */
    clinicalImpression?: string | undefined;
    /** 送检材料 */
    submittedMaterials?: string | undefined;
    /** 检验项目 */
    submittedProject?: string | undefined;
    /** 送检医师 */
    submitteDphysician?: string | undefined;
    /** 检验结果 */
    result?: string | undefined;
    /** 报告日期 */
    reportDate!: dayjs.Dayjs;
    /** 检查员 */
    inspector!: string;
    /** 检验者 */
    checker!: string;
    /** 备注 */
    remark?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 培养类型 */
    typeLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionGermicultureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.submittedDate = _data["submittedDate"] ? dayjs(_data["submittedDate"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.cultivateProject = _data["cultivateProject"];
            this.submittedDepartment = _data["submittedDepartment"];
            this.clinicalImpression = _data["clinicalImpression"];
            this.submittedMaterials = _data["submittedMaterials"];
            this.submittedProject = _data["submittedProject"];
            this.submitteDphysician = _data["submitteDphysician"];
            this.result = _data["result"];
            this.reportDate = _data["reportDate"] ? dayjs(_data["reportDate"].toString()) : <any>undefined;
            this.inspector = _data["inspector"];
            this.checker = _data["checker"];
            this.remark = _data["remark"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.typeLabel = _data["typeLabel"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["submittedDate"] = this.submittedDate ? this.submittedDate.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["cultivateProject"] = this.cultivateProject;
        data["submittedDepartment"] = this.submittedDepartment;
        data["clinicalImpression"] = this.clinicalImpression;
        data["submittedMaterials"] = this.submittedMaterials;
        data["submittedProject"] = this.submittedProject;
        data["submitteDphysician"] = this.submitteDphysician;
        data["result"] = this.result;
        data["reportDate"] = this.reportDate ? this.reportDate.toLocaleString() : <any>undefined;
        data["inspector"] = this.inspector;
        data["checker"] = this.checker;
        data["remark"] = this.remark;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["typeLabel"] = this.typeLabel;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 细菌培养 */
export interface IHospitalInfectionGermicultureView {
    /** 送检日期 */
    submittedDate: dayjs.Dayjs;
    /** 培养类型 *细菌培养,空气细菌,消毒剂培养* */
    type: string;
    /** 培养项目 *细菌培养,空气细菌,员工培养,消毒剂培养* */
    cultivateProject?: string | undefined;
    /** 送检单位 */
    submittedDepartment?: string | undefined;
    /** 临床印象 */
    clinicalImpression?: string | undefined;
    /** 送检材料 */
    submittedMaterials?: string | undefined;
    /** 检验项目 */
    submittedProject?: string | undefined;
    /** 送检医师 */
    submitteDphysician?: string | undefined;
    /** 检验结果 */
    result?: string | undefined;
    /** 报告日期 */
    reportDate: dayjs.Dayjs;
    /** 检查员 */
    inspector: string;
    /** 检验者 */
    checker: string;
    /** 备注 */
    remark?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 培养类型 */
    typeLabel?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionGermicultureViewResult implements IHospitalInfectionGermicultureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionGermicultureView[] | undefined;

    constructor(data?: IHospitalInfectionGermicultureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionGermicultureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionGermicultureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionGermicultureView[] | undefined;
}

/** Reponse */
export class HospitalInfectionGermicultureViewResultEntry implements IHospitalInfectionGermicultureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionGermicultureView;

    constructor(data?: IHospitalInfectionGermicultureViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionGermicultureView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionGermicultureViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionGermicultureViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionGermicultureViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionGermicultureView;
}

/** 内毒素检测 */
export class HospitalInfectionKreotoxinEdit implements IHospitalInfectionKreotoxinEdit {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** [监测人员标识](#用户信息) */
    operatorId!: string;
    /** 取样口位置 */
    position?: string | undefined;
    /** 检测项目 */
    checkProject?: string | undefined;
    /** 检测方法 */
    method?: string | undefined;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IHospitalInfectionKreotoxinEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devInfoId = _data["devInfoId"];
            this.operatorId = _data["operatorId"];
            this.position = _data["position"];
            this.checkProject = _data["checkProject"];
            this.method = _data["method"];
            this.result = _data["result"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): HospitalInfectionKreotoxinEdit {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionKreotoxinEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["devInfoId"] = this.devInfoId;
        data["operatorId"] = this.operatorId;
        data["position"] = this.position;
        data["checkProject"] = this.checkProject;
        data["method"] = this.method;
        data["result"] = this.result;
        data["remark"] = this.remark;
        return data;
    }
}

/** 内毒素检测 */
export interface IHospitalInfectionKreotoxinEdit {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** [监测人员标识](#用户信息) */
    operatorId: string;
    /** 取样口位置 */
    position?: string | undefined;
    /** 检测项目 */
    checkProject?: string | undefined;
    /** 检测方法 */
    method?: string | undefined;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 内毒素检测 */
export class HospitalInfectionKreotoxinView implements IHospitalInfectionKreotoxinView {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** [监测人员标识](#用户信息) */
    operatorId!: string;
    /** 取样口位置 */
    position?: string | undefined;
    /** 检测项目 */
    checkProject?: string | undefined;
    /** 检测方法 */
    method?: string | undefined;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设备名称 */
    devInfoName?: string | undefined;
    /** 监测人员 */
    operatorName?: string | undefined;
    /** 监测人员别名 */
    operatorName2?: string | undefined;
    /** 监测人员全名 */
    operatorNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionKreotoxinView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devInfoId = _data["devInfoId"];
            this.operatorId = _data["operatorId"];
            this.position = _data["position"];
            this.checkProject = _data["checkProject"];
            this.method = _data["method"];
            this.result = _data["result"];
            this.remark = _data["remark"];
            this.devInfoName = _data["devInfoName"];
            this.operatorName = _data["operatorName"];
            this.operatorName2 = _data["operatorName2"];
            this.operatorNameFull = _data["operatorNameFull"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionKreotoxinView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionKreotoxinView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["devInfoId"] = this.devInfoId;
        data["operatorId"] = this.operatorId;
        data["position"] = this.position;
        data["checkProject"] = this.checkProject;
        data["method"] = this.method;
        data["result"] = this.result;
        data["remark"] = this.remark;
        data["devInfoName"] = this.devInfoName;
        data["operatorName"] = this.operatorName;
        data["operatorName2"] = this.operatorName2;
        data["operatorNameFull"] = this.operatorNameFull;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 内毒素检测 */
export interface IHospitalInfectionKreotoxinView {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** [监测人员标识](#用户信息) */
    operatorId: string;
    /** 取样口位置 */
    position?: string | undefined;
    /** 检测项目 */
    checkProject?: string | undefined;
    /** 检测方法 */
    method?: string | undefined;
    /** 结果 */
    result?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 设备名称 */
    devInfoName?: string | undefined;
    /** 监测人员 */
    operatorName?: string | undefined;
    /** 监测人员别名 */
    operatorName2?: string | undefined;
    /** 监测人员全名 */
    operatorNameFull?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionKreotoxinViewResult implements IHospitalInfectionKreotoxinViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionKreotoxinView[] | undefined;

    constructor(data?: IHospitalInfectionKreotoxinViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionKreotoxinView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionKreotoxinViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionKreotoxinViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionKreotoxinViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionKreotoxinView[] | undefined;
}

/** Reponse */
export class HospitalInfectionKreotoxinViewResultEntry implements IHospitalInfectionKreotoxinViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionKreotoxinView;

    constructor(data?: IHospitalInfectionKreotoxinViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionKreotoxinView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionKreotoxinViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionKreotoxinViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionKreotoxinViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionKreotoxinView;
}

/** 院感评估记录 */
export class HospitalInfectionRecordEditModel implements IHospitalInfectionRecordEditModel {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** 评估类型 `DIC.INFECTION.TYPE` *透析液检测,内毒素检测,电解质检测* */
    type!: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId!: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devInfoId = _data["devInfoId"];
            this.type = _data["type"];
            this.tmplFormId = _data["tmplFormId"];
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["devInfoId"] = this.devInfoId;
        data["type"] = this.type;
        data["tmplFormId"] = this.tmplFormId;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 院感评估记录 */
export interface IHospitalInfectionRecordEditModel {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** 评估类型 `DIC.INFECTION.TYPE` *透析液检测,内毒素检测,电解质检测* */
    type: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
}

/** 院感评估记录 */
export class HospitalInfectionRecordView implements IHospitalInfectionRecordView {
    /** 检测日期 */
    date!: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId!: string;
    /** 评估类型 `DIC.INFECTION.TYPE` *透析液检测,内毒素检测,电解质检测* */
    type!: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId!: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 设备名称 */
    devCode?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 模板内容 */
    tmplFormData?: { [key: string]: string; } | undefined;

    constructor(data?: IHospitalInfectionRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.devInfoId = _data["devInfoId"];
            this.type = _data["type"];
            this.tmplFormId = _data["tmplFormId"];
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.id = _data["id"];
            this.devCode = _data["devCode"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            if (_data["tmplFormData"]) {
                this.tmplFormData = {} as any;
                for (let key in _data["tmplFormData"]) {
                    if (_data["tmplFormData"].hasOwnProperty(key))
                        (<any>this.tmplFormData)![key] = _data["tmplFormData"][key];
                }
            }
        }
    }

    static fromJS(data: any): HospitalInfectionRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["devInfoId"] = this.devInfoId;
        data["type"] = this.type;
        data["tmplFormId"] = this.tmplFormId;
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["id"] = this.id;
        data["devCode"] = this.devCode;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        if (this.tmplFormData) {
            data["tmplFormData"] = {};
            for (let key in this.tmplFormData) {
                if (this.tmplFormData.hasOwnProperty(key))
                    (<any>data["tmplFormData"])[key] = (<any>this.tmplFormData)[key];
            }
        }
        return data;
    }
}

/** 院感评估记录 */
export interface IHospitalInfectionRecordView {
    /** 检测日期 */
    date: dayjs.Dayjs;
    /** [设备标识](#科室设备) */
    devInfoId: string;
    /** 评估类型 `DIC.INFECTION.TYPE` *透析液检测,内毒素检测,电解质检测* */
    type: string;
    /** [表单模板标识](#表单模板) */
    tmplFormId: string;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 设备名称 */
    devCode?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 模板内容 */
    tmplFormData?: { [key: string]: string; } | undefined;
}

/** Reponse */
export class HospitalInfectionRecordViewResult implements IHospitalInfectionRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionRecordView[] | undefined;

    constructor(data?: IHospitalInfectionRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionRecordView[] | undefined;
}

/** Reponse */
export class HospitalInfectionRecordViewResultEntry implements IHospitalInfectionRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionRecordView;

    constructor(data?: IHospitalInfectionRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionRecordView;
}

/** 院感制度 */
export class HospitalInfectionRegimeEditModel implements IHospitalInfectionRegimeEditModel {
    /** 标题 */
    title!: string;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 表单vaule */
    dataValue?: string | undefined;

    constructor(data?: IHospitalInfectionRegimeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.operatorId = _data["operatorId"];
            this.dataValue = _data["dataValue"];
        }
    }

    static fromJS(data: any): HospitalInfectionRegimeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionRegimeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["operatorId"] = this.operatorId;
        data["dataValue"] = this.dataValue;
        return data;
    }
}

/** 院感制度 */
export interface IHospitalInfectionRegimeEditModel {
    /** 标题 */
    title: string;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 表单vaule */
    dataValue?: string | undefined;
}

/** 院感制度 */
export class HospitalInfectionRegimeView implements IHospitalInfectionRegimeView {
    /** 标题 */
    title!: string;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionRegimeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.operatorId = _data["operatorId"];
            this.dataValue = _data["dataValue"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionRegimeView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionRegimeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["operatorId"] = this.operatorId;
        data["dataValue"] = this.dataValue;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 院感制度 */
export interface IHospitalInfectionRegimeView {
    /** 标题 */
    title: string;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 表单vaule */
    dataValue?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionRegimeViewResult implements IHospitalInfectionRegimeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionRegimeView[] | undefined;

    constructor(data?: IHospitalInfectionRegimeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionRegimeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionRegimeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionRegimeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionRegimeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionRegimeView[] | undefined;
}

/** Reponse */
export class HospitalInfectionRegimeViewResultEntry implements IHospitalInfectionRegimeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionRegimeView;

    constructor(data?: IHospitalInfectionRegimeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionRegimeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionRegimeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionRegimeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionRegimeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionRegimeView;
}

/** 水处理消毒 */
export class HospitalInfectionWatertreatmentDisinfectionBase implements IHospitalInfectionWatertreatmentDisinfectionBase {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 消毒剂名称 */
    disinfectantName!: string;
    /** 消毒剂配置时间 */
    disinfectantTime!: dayjs.Dayjs;
    /** 消毒剂原液浓度 */
    yuanyeConcentration?: number | undefined;
    /** 消毒剂应用浓度 */
    applicationConcentration?: number | undefined;
    /** 消毒剂有效浓度 */
    disinfectantEc?: number | undefined;
    /** 消毒剂配置者 */
    disinfectantConfigurator?: string | undefined;
    /** 消毒剂核对者 */
    disinfectantChecker?: string | undefined;
    /** 消毒开始时间 */
    startTime?: dayjs.Dayjs | undefined;
    /** 消毒循环保留时间 */
    retentionTime?: number | undefined;
    /** 消毒残余浓度 */
    residualConcentration?: number | undefined;
    /** 消毒者 */
    disinfector?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;

    constructor(data?: IHospitalInfectionWatertreatmentDisinfectionBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.disinfectantName = _data["disinfectantName"];
            this.disinfectantTime = _data["disinfectantTime"] ? dayjs(_data["disinfectantTime"].toString()) : <any>undefined;
            this.yuanyeConcentration = _data["yuanyeConcentration"];
            this.applicationConcentration = _data["applicationConcentration"];
            this.disinfectantEc = _data["disinfectantEc"];
            this.disinfectantConfigurator = _data["disinfectantConfigurator"];
            this.disinfectantChecker = _data["disinfectantChecker"];
            this.startTime = _data["startTime"] ? dayjs(_data["startTime"].toString()) : <any>undefined;
            this.retentionTime = _data["retentionTime"];
            this.residualConcentration = _data["residualConcentration"];
            this.disinfector = _data["disinfector"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentDisinfectionBase {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentDisinfectionBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["disinfectantName"] = this.disinfectantName;
        data["disinfectantTime"] = this.disinfectantTime ? this.disinfectantTime.toLocaleString() : <any>undefined;
        data["yuanyeConcentration"] = this.yuanyeConcentration;
        data["applicationConcentration"] = this.applicationConcentration;
        data["disinfectantEc"] = this.disinfectantEc;
        data["disinfectantConfigurator"] = this.disinfectantConfigurator;
        data["disinfectantChecker"] = this.disinfectantChecker;
        data["startTime"] = this.startTime ? this.startTime.toLocaleString() : <any>undefined;
        data["retentionTime"] = this.retentionTime;
        data["residualConcentration"] = this.residualConcentration;
        data["disinfector"] = this.disinfector;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        return data;
    }
}

/** 水处理消毒 */
export interface IHospitalInfectionWatertreatmentDisinfectionBase {
    /** 日期 */
    date: dayjs.Dayjs;
    /** 消毒剂名称 */
    disinfectantName: string;
    /** 消毒剂配置时间 */
    disinfectantTime: dayjs.Dayjs;
    /** 消毒剂原液浓度 */
    yuanyeConcentration?: number | undefined;
    /** 消毒剂应用浓度 */
    applicationConcentration?: number | undefined;
    /** 消毒剂有效浓度 */
    disinfectantEc?: number | undefined;
    /** 消毒剂配置者 */
    disinfectantConfigurator?: string | undefined;
    /** 消毒剂核对者 */
    disinfectantChecker?: string | undefined;
    /** 消毒开始时间 */
    startTime?: dayjs.Dayjs | undefined;
    /** 消毒循环保留时间 */
    retentionTime?: number | undefined;
    /** 消毒残余浓度 */
    residualConcentration?: number | undefined;
    /** 消毒者 */
    disinfector?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
}

/** 水处理消毒 */
export class HospitalInfectionWatertreatmentDisinfectionView implements IHospitalInfectionWatertreatmentDisinfectionView {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** 消毒剂名称 */
    disinfectantName!: string;
    /** 消毒剂配置时间 */
    disinfectantTime!: dayjs.Dayjs;
    /** 消毒剂原液浓度 */
    yuanyeConcentration?: number | undefined;
    /** 消毒剂应用浓度 */
    applicationConcentration?: number | undefined;
    /** 消毒剂有效浓度 */
    disinfectantEc?: number | undefined;
    /** 消毒剂配置者 */
    disinfectantConfigurator?: string | undefined;
    /** 消毒剂核对者 */
    disinfectantChecker?: string | undefined;
    /** 消毒开始时间 */
    startTime?: dayjs.Dayjs | undefined;
    /** 消毒循环保留时间 */
    retentionTime?: number | undefined;
    /** 消毒残余浓度 */
    residualConcentration?: number | undefined;
    /** 消毒者 */
    disinfector?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionWatertreatmentDisinfectionView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.disinfectantName = _data["disinfectantName"];
            this.disinfectantTime = _data["disinfectantTime"] ? dayjs(_data["disinfectantTime"].toString()) : <any>undefined;
            this.yuanyeConcentration = _data["yuanyeConcentration"];
            this.applicationConcentration = _data["applicationConcentration"];
            this.disinfectantEc = _data["disinfectantEc"];
            this.disinfectantConfigurator = _data["disinfectantConfigurator"];
            this.disinfectantChecker = _data["disinfectantChecker"];
            this.startTime = _data["startTime"] ? dayjs(_data["startTime"].toString()) : <any>undefined;
            this.retentionTime = _data["retentionTime"];
            this.residualConcentration = _data["residualConcentration"];
            this.disinfector = _data["disinfector"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentDisinfectionView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentDisinfectionView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["disinfectantName"] = this.disinfectantName;
        data["disinfectantTime"] = this.disinfectantTime ? this.disinfectantTime.toLocaleString() : <any>undefined;
        data["yuanyeConcentration"] = this.yuanyeConcentration;
        data["applicationConcentration"] = this.applicationConcentration;
        data["disinfectantEc"] = this.disinfectantEc;
        data["disinfectantConfigurator"] = this.disinfectantConfigurator;
        data["disinfectantChecker"] = this.disinfectantChecker;
        data["startTime"] = this.startTime ? this.startTime.toLocaleString() : <any>undefined;
        data["retentionTime"] = this.retentionTime;
        data["residualConcentration"] = this.residualConcentration;
        data["disinfector"] = this.disinfector;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 水处理消毒 */
export interface IHospitalInfectionWatertreatmentDisinfectionView {
    /** 日期 */
    date: dayjs.Dayjs;
    /** 消毒剂名称 */
    disinfectantName: string;
    /** 消毒剂配置时间 */
    disinfectantTime: dayjs.Dayjs;
    /** 消毒剂原液浓度 */
    yuanyeConcentration?: number | undefined;
    /** 消毒剂应用浓度 */
    applicationConcentration?: number | undefined;
    /** 消毒剂有效浓度 */
    disinfectantEc?: number | undefined;
    /** 消毒剂配置者 */
    disinfectantConfigurator?: string | undefined;
    /** 消毒剂核对者 */
    disinfectantChecker?: string | undefined;
    /** 消毒开始时间 */
    startTime?: dayjs.Dayjs | undefined;
    /** 消毒循环保留时间 */
    retentionTime?: number | undefined;
    /** 消毒残余浓度 */
    residualConcentration?: number | undefined;
    /** 消毒者 */
    disinfector?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalInfectionWatertreatmentDisinfectionViewResult implements IHospitalInfectionWatertreatmentDisinfectionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionWatertreatmentDisinfectionView[] | undefined;

    constructor(data?: IHospitalInfectionWatertreatmentDisinfectionViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionWatertreatmentDisinfectionView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentDisinfectionViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentDisinfectionViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionWatertreatmentDisinfectionViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionWatertreatmentDisinfectionView[] | undefined;
}

/** Reponse */
export class HospitalInfectionWatertreatmentDisinfectionViewResultEntry implements IHospitalInfectionWatertreatmentDisinfectionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionWatertreatmentDisinfectionView;

    constructor(data?: IHospitalInfectionWatertreatmentDisinfectionViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionWatertreatmentDisinfectionView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentDisinfectionViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentDisinfectionViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionWatertreatmentDisinfectionViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionWatertreatmentDisinfectionView;
}

/** 水处理维护 */
export class HospitalInfectionWatertreatmentMaintenanceView implements IHospitalInfectionWatertreatmentMaintenanceView {
    /** 日期 */
    date!: dayjs.Dayjs;
    /** PH */
    ph?: string | undefined;
    /** 游离氯 */
    cl?: string | undefined;
    /** 硬度 */
    hardness?: string | undefined;
    /** 纯水电导度 */
    waterconductivity?: string | undefined;
    /** 进水压 */
    intakepressure?: string | undefined;
    /** 一级压力 */
    primaryStress?: string | undefined;
    /** 二级压力 */
    secondaryStress?: string | undefined;
    /** 纯水流量 */
    waterflow?: string | undefined;
    /** 系统运行正常0,1 */
    normal!: number;
    /** 加盐超饱和0,1 */
    saltingoversaturate!: number;
    /** 加臭氧消毒0,1 */
    ozonedisinfection!: number;
    /** 砂罐0,1 */
    sandtank!: number;
    /** 碳罐0,1 */
    carbontank!: number;
    /** 树脂罐0,1 */
    resintank!: number;
    /** 纯水软化测试0,1 */
    softeningtest!: number;
    /** 内毒素监测0,1 */
    endotoxinmonitoring!: number;
    /** 二级纯水流量 */
    secondaryWaterflow?: string | undefined;
    /** 更换滤芯0,1 */
    filter?: number | undefined;
    /** 更换反射膜0,1 */
    reflectance?: number | undefined;
    /** [操作者标识](#用户信息) */
    operatorId!: string;
    /** 操作者标识 */
    operator?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId!: string;
    /** 系统运行正常0,1 */
    normalLabel?: string | undefined;
    /** 加盐超饱和0,1 */
    saltingoversaturateLabel?: string | undefined;
    /** 加臭氧消毒0,1 */
    ozonedisinfectionLabel?: string | undefined;
    /** 砂罐0,1 */
    sandtankLabel?: string | undefined;
    /** 碳罐0,1 */
    carbontankLabel?: string | undefined;
    /** 树脂罐0,1 */
    resintankLabel?: string | undefined;
    /** 纯水软化测试0,1 */
    softeningtestLabel?: string | undefined;
    /** 内毒素监测0,1 */
    endotoxinmonitoringLabel?: string | undefined;
    /** 更换滤芯0,1 */
    filterLabel?: string | undefined;
    /** 更换反射膜0,1 */
    reflectanceLabel?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalInfectionWatertreatmentMaintenanceView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.ph = _data["ph"];
            this.cl = _data["cl"];
            this.hardness = _data["hardness"];
            this.waterconductivity = _data["waterconductivity"];
            this.intakepressure = _data["intakepressure"];
            this.primaryStress = _data["primaryStress"];
            this.secondaryStress = _data["secondaryStress"];
            this.waterflow = _data["waterflow"];
            this.normal = _data["normal"];
            this.saltingoversaturate = _data["saltingoversaturate"];
            this.ozonedisinfection = _data["ozonedisinfection"];
            this.sandtank = _data["sandtank"];
            this.carbontank = _data["carbontank"];
            this.resintank = _data["resintank"];
            this.softeningtest = _data["softeningtest"];
            this.endotoxinmonitoring = _data["endotoxinmonitoring"];
            this.secondaryWaterflow = _data["secondaryWaterflow"];
            this.filter = _data["filter"];
            this.reflectance = _data["reflectance"];
            this.operatorId = _data["operatorId"];
            this.operator = _data["operator"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.normalLabel = _data["normalLabel"];
            this.saltingoversaturateLabel = _data["saltingoversaturateLabel"];
            this.ozonedisinfectionLabel = _data["ozonedisinfectionLabel"];
            this.sandtankLabel = _data["sandtankLabel"];
            this.carbontankLabel = _data["carbontankLabel"];
            this.resintankLabel = _data["resintankLabel"];
            this.softeningtestLabel = _data["softeningtestLabel"];
            this.endotoxinmonitoringLabel = _data["endotoxinmonitoringLabel"];
            this.filterLabel = _data["filterLabel"];
            this.reflectanceLabel = _data["reflectanceLabel"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentMaintenanceView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentMaintenanceView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["ph"] = this.ph;
        data["cl"] = this.cl;
        data["hardness"] = this.hardness;
        data["waterconductivity"] = this.waterconductivity;
        data["intakepressure"] = this.intakepressure;
        data["primaryStress"] = this.primaryStress;
        data["secondaryStress"] = this.secondaryStress;
        data["waterflow"] = this.waterflow;
        data["normal"] = this.normal;
        data["saltingoversaturate"] = this.saltingoversaturate;
        data["ozonedisinfection"] = this.ozonedisinfection;
        data["sandtank"] = this.sandtank;
        data["carbontank"] = this.carbontank;
        data["resintank"] = this.resintank;
        data["softeningtest"] = this.softeningtest;
        data["endotoxinmonitoring"] = this.endotoxinmonitoring;
        data["secondaryWaterflow"] = this.secondaryWaterflow;
        data["filter"] = this.filter;
        data["reflectance"] = this.reflectance;
        data["operatorId"] = this.operatorId;
        data["operator"] = this.operator;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["normalLabel"] = this.normalLabel;
        data["saltingoversaturateLabel"] = this.saltingoversaturateLabel;
        data["ozonedisinfectionLabel"] = this.ozonedisinfectionLabel;
        data["sandtankLabel"] = this.sandtankLabel;
        data["carbontankLabel"] = this.carbontankLabel;
        data["resintankLabel"] = this.resintankLabel;
        data["softeningtestLabel"] = this.softeningtestLabel;
        data["endotoxinmonitoringLabel"] = this.endotoxinmonitoringLabel;
        data["filterLabel"] = this.filterLabel;
        data["reflectanceLabel"] = this.reflectanceLabel;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 水处理维护 */
export interface IHospitalInfectionWatertreatmentMaintenanceView {
    /** 日期 */
    date: dayjs.Dayjs;
    /** PH */
    ph?: string | undefined;
    /** 游离氯 */
    cl?: string | undefined;
    /** 硬度 */
    hardness?: string | undefined;
    /** 纯水电导度 */
    waterconductivity?: string | undefined;
    /** 进水压 */
    intakepressure?: string | undefined;
    /** 一级压力 */
    primaryStress?: string | undefined;
    /** 二级压力 */
    secondaryStress?: string | undefined;
    /** 纯水流量 */
    waterflow?: string | undefined;
    /** 系统运行正常0,1 */
    normal: number;
    /** 加盐超饱和0,1 */
    saltingoversaturate: number;
    /** 加臭氧消毒0,1 */
    ozonedisinfection: number;
    /** 砂罐0,1 */
    sandtank: number;
    /** 碳罐0,1 */
    carbontank: number;
    /** 树脂罐0,1 */
    resintank: number;
    /** 纯水软化测试0,1 */
    softeningtest: number;
    /** 内毒素监测0,1 */
    endotoxinmonitoring: number;
    /** 二级纯水流量 */
    secondaryWaterflow?: string | undefined;
    /** 更换滤芯0,1 */
    filter?: number | undefined;
    /** 更换反射膜0,1 */
    reflectance?: number | undefined;
    /** [操作者标识](#用户信息) */
    operatorId: string;
    /** 操作者标识 */
    operator?: string | undefined;
    /** [归属透析室标识](#透析室) */
    sysHospitalAreaId: string;
    /** 系统运行正常0,1 */
    normalLabel?: string | undefined;
    /** 加盐超饱和0,1 */
    saltingoversaturateLabel?: string | undefined;
    /** 加臭氧消毒0,1 */
    ozonedisinfectionLabel?: string | undefined;
    /** 砂罐0,1 */
    sandtankLabel?: string | undefined;
    /** 碳罐0,1 */
    carbontankLabel?: string | undefined;
    /** 树脂罐0,1 */
    resintankLabel?: string | undefined;
    /** 纯水软化测试0,1 */
    softeningtestLabel?: string | undefined;
    /** 内毒素监测0,1 */
    endotoxinmonitoringLabel?: string | undefined;
    /** 更换滤芯0,1 */
    filterLabel?: string | undefined;
    /** 更换反射膜0,1 */
    reflectanceLabel?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 水处理维护 (ViewModel) */
export class HospitalInfectionWatertreatmentMaintenanceViewModel implements IHospitalInfectionWatertreatmentMaintenanceViewModel {
    /** [归属透析室标识](透析室Id) */
    sysHospitalAreaId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;
    /** PH */
    ph?: string | undefined;
    /** 游离氯 */
    cl?: string | undefined;
    /** 硬度 */
    hardness?: string | undefined;
    /** 纯水电导度 */
    waterconductivity?: string | undefined;
    /** 进水压 */
    intakepressure?: string | undefined;
    /** 一级压力 */
    primaryStress?: string | undefined;
    /** 二级压力 */
    secondaryStress?: string | undefined;
    /** 纯水流量 */
    waterflow?: string | undefined;
    /** 二级纯水流量 */
    secondaryWaterflow?: string | undefined;
    /** 系统运行正常0,1 */
    normal!: number;
    /** 加盐超饱和0,1 */
    saltingoversaturate!: number;
    /** 加臭氧消毒0,1 */
    ozonedisinfection!: number;
    /** 砂罐0,1 */
    sandtank!: number;
    /** 碳罐0,1 */
    carbontank!: number;
    /** 树脂罐0,1 */
    resintank!: number;
    /** 纯水软化测试0,1 */
    softeningtest!: number;
    /** 内毒素监测0,1 */
    endotoxinmonitoring!: number;
    /** 更换滤芯0,1 */
    filter?: number | undefined;
    /** 更换反射膜0,1 */
    reflectance?: number | undefined;
    /** [操作者标识](用户信息Id) */
    operatorId?: string | undefined;
    /** 操作者标识 */
    operator?: string | undefined;

    constructor(data?: IHospitalInfectionWatertreatmentMaintenanceViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.ph = _data["ph"];
            this.cl = _data["cl"];
            this.hardness = _data["hardness"];
            this.waterconductivity = _data["waterconductivity"];
            this.intakepressure = _data["intakepressure"];
            this.primaryStress = _data["primaryStress"];
            this.secondaryStress = _data["secondaryStress"];
            this.waterflow = _data["waterflow"];
            this.secondaryWaterflow = _data["secondaryWaterflow"];
            this.normal = _data["normal"];
            this.saltingoversaturate = _data["saltingoversaturate"];
            this.ozonedisinfection = _data["ozonedisinfection"];
            this.sandtank = _data["sandtank"];
            this.carbontank = _data["carbontank"];
            this.resintank = _data["resintank"];
            this.softeningtest = _data["softeningtest"];
            this.endotoxinmonitoring = _data["endotoxinmonitoring"];
            this.filter = _data["filter"];
            this.reflectance = _data["reflectance"];
            this.operatorId = _data["operatorId"];
            this.operator = _data["operator"];
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentMaintenanceViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentMaintenanceViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["ph"] = this.ph;
        data["cl"] = this.cl;
        data["hardness"] = this.hardness;
        data["waterconductivity"] = this.waterconductivity;
        data["intakepressure"] = this.intakepressure;
        data["primaryStress"] = this.primaryStress;
        data["secondaryStress"] = this.secondaryStress;
        data["waterflow"] = this.waterflow;
        data["secondaryWaterflow"] = this.secondaryWaterflow;
        data["normal"] = this.normal;
        data["saltingoversaturate"] = this.saltingoversaturate;
        data["ozonedisinfection"] = this.ozonedisinfection;
        data["sandtank"] = this.sandtank;
        data["carbontank"] = this.carbontank;
        data["resintank"] = this.resintank;
        data["softeningtest"] = this.softeningtest;
        data["endotoxinmonitoring"] = this.endotoxinmonitoring;
        data["filter"] = this.filter;
        data["reflectance"] = this.reflectance;
        data["operatorId"] = this.operatorId;
        data["operator"] = this.operator;
        return data;
    }
}

/** 水处理维护 (ViewModel) */
export interface IHospitalInfectionWatertreatmentMaintenanceViewModel {
    /** [归属透析室标识](透析室Id) */
    sysHospitalAreaId: string;
    /** 日期 */
    date: dayjs.Dayjs;
    /** PH */
    ph?: string | undefined;
    /** 游离氯 */
    cl?: string | undefined;
    /** 硬度 */
    hardness?: string | undefined;
    /** 纯水电导度 */
    waterconductivity?: string | undefined;
    /** 进水压 */
    intakepressure?: string | undefined;
    /** 一级压力 */
    primaryStress?: string | undefined;
    /** 二级压力 */
    secondaryStress?: string | undefined;
    /** 纯水流量 */
    waterflow?: string | undefined;
    /** 二级纯水流量 */
    secondaryWaterflow?: string | undefined;
    /** 系统运行正常0,1 */
    normal: number;
    /** 加盐超饱和0,1 */
    saltingoversaturate: number;
    /** 加臭氧消毒0,1 */
    ozonedisinfection: number;
    /** 砂罐0,1 */
    sandtank: number;
    /** 碳罐0,1 */
    carbontank: number;
    /** 树脂罐0,1 */
    resintank: number;
    /** 纯水软化测试0,1 */
    softeningtest: number;
    /** 内毒素监测0,1 */
    endotoxinmonitoring: number;
    /** 更换滤芯0,1 */
    filter?: number | undefined;
    /** 更换反射膜0,1 */
    reflectance?: number | undefined;
    /** [操作者标识](用户信息Id) */
    operatorId?: string | undefined;
    /** 操作者标识 */
    operator?: string | undefined;
}

/** Reponse */
export class HospitalInfectionWatertreatmentMaintenanceViewResult implements IHospitalInfectionWatertreatmentMaintenanceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionWatertreatmentMaintenanceView[] | undefined;

    constructor(data?: IHospitalInfectionWatertreatmentMaintenanceViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalInfectionWatertreatmentMaintenanceView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentMaintenanceViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentMaintenanceViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionWatertreatmentMaintenanceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalInfectionWatertreatmentMaintenanceView[] | undefined;
}

/** Reponse */
export class HospitalInfectionWatertreatmentMaintenanceViewResultEntry implements IHospitalInfectionWatertreatmentMaintenanceViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionWatertreatmentMaintenanceView;

    constructor(data?: IHospitalInfectionWatertreatmentMaintenanceViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? HospitalInfectionWatertreatmentMaintenanceView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalInfectionWatertreatmentMaintenanceViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalInfectionWatertreatmentMaintenanceViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IHospitalInfectionWatertreatmentMaintenanceViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: HospitalInfectionWatertreatmentMaintenanceView;
}

/** 院感科血透接口(血液病人透析记录) */
export class HospitalSenseCureView implements IHospitalSenseCureView {
    /** 唯一主键 -- 出入院信息表中的唯一标识，与住院号可取同一个值 -- 门诊号 */
    id?: string | undefined;
    /** 病例号 -- 患者在医院信息系统中（门诊+住院）的唯一身份标识。无论患者在门诊还是住院，该标识都应指向同一患者 -- 门诊号 */
    patienT_ID?: string | undefined;
    /** 病人来源 -- 病人此次血透的来源：门诊病人填“MZ”,住院病人填“ZY” */
    patienttype?: string | undefined;
    /** 患者姓名 -- 患者名字 */
    patienT_NAME?: string | undefined;
    /** 性别 -- 患者性别，男、女 */
    sex?: string | undefined;
    /** 年龄 -- 患者年龄 */
    age?: number;
    /** 年龄单位 -- 患者年龄单位 */
    agE_UNIT?: string | undefined;
    /** 透析日期 -- 患者透析的时间 */
    txdate?: string | undefined;
    /** 透析机器号 -- 透析仪器的编号 */
    txmachineno?: string | undefined;
    /** 血管通路类型 -- 血管通路类型：1、内瘘。2、人工血管。3、隧道式中心静脉导管。4、非隧道式中心静脉导管。5、其他通路（如输液港） */
    xgaccesstype?: string | undefined;
    /** 中心静脉置管部位 -- 导管穿刺部位：如股静脉、左颈静脉、右颈静脉等 */
    txzxjmzgbw?: string | undefined;
    /** 累计透析次数 -- 在本医院累计透析的次数 */
    tX_COUNT?: number;

    constructor(data?: IHospitalSenseCureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patienT_ID = _data["patienT_ID"];
            this.patienttype = _data["patienttype"];
            this.patienT_NAME = _data["patienT_NAME"];
            this.sex = _data["sex"];
            this.age = _data["age"];
            this.agE_UNIT = _data["agE_UNIT"];
            this.txdate = _data["txdate"];
            this.txmachineno = _data["txmachineno"];
            this.xgaccesstype = _data["xgaccesstype"];
            this.txzxjmzgbw = _data["txzxjmzgbw"];
            this.tX_COUNT = _data["tX_COUNT"];
        }
    }

    static fromJS(data: any): HospitalSenseCureView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalSenseCureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patienT_ID"] = this.patienT_ID;
        data["patienttype"] = this.patienttype;
        data["patienT_NAME"] = this.patienT_NAME;
        data["sex"] = this.sex;
        data["age"] = this.age;
        data["agE_UNIT"] = this.agE_UNIT;
        data["txdate"] = this.txdate;
        data["txmachineno"] = this.txmachineno;
        data["xgaccesstype"] = this.xgaccesstype;
        data["txzxjmzgbw"] = this.txzxjmzgbw;
        data["tX_COUNT"] = this.tX_COUNT;
        return data;
    }
}

/** 院感科血透接口(血液病人透析记录) */
export interface IHospitalSenseCureView {
    /** 唯一主键 -- 出入院信息表中的唯一标识，与住院号可取同一个值 -- 门诊号 */
    id?: string | undefined;
    /** 病例号 -- 患者在医院信息系统中（门诊+住院）的唯一身份标识。无论患者在门诊还是住院，该标识都应指向同一患者 -- 门诊号 */
    patienT_ID?: string | undefined;
    /** 病人来源 -- 病人此次血透的来源：门诊病人填“MZ”,住院病人填“ZY” */
    patienttype?: string | undefined;
    /** 患者姓名 -- 患者名字 */
    patienT_NAME?: string | undefined;
    /** 性别 -- 患者性别，男、女 */
    sex?: string | undefined;
    /** 年龄 -- 患者年龄 */
    age?: number;
    /** 年龄单位 -- 患者年龄单位 */
    agE_UNIT?: string | undefined;
    /** 透析日期 -- 患者透析的时间 */
    txdate?: string | undefined;
    /** 透析机器号 -- 透析仪器的编号 */
    txmachineno?: string | undefined;
    /** 血管通路类型 -- 血管通路类型：1、内瘘。2、人工血管。3、隧道式中心静脉导管。4、非隧道式中心静脉导管。5、其他通路（如输液港） */
    xgaccesstype?: string | undefined;
    /** 中心静脉置管部位 -- 导管穿刺部位：如股静脉、左颈静脉、右颈静脉等 */
    txzxjmzgbw?: string | undefined;
    /** 累计透析次数 -- 在本医院累计透析的次数 */
    tX_COUNT?: number;
}

/** Reponse */
export class HospitalSenseCureViewResult implements IHospitalSenseCureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalSenseCureView[] | undefined;

    constructor(data?: IHospitalSenseCureViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalSenseCureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalSenseCureViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalSenseCureViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalSenseCureViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalSenseCureView[] | undefined;
}

/** 院感科血透接口(血液病人登记表) */
export class HospitalSensePatientView implements IHospitalSensePatientView {
    /** 唯一主键 -- 出入院信息表中的唯一标识，与住院号可取同一个值 -- 门诊号 */
    id?: string | undefined;
    /** 病例号 -- 患者在医院信息系统中（门诊+住院）的唯一身份标识。无论患者在门诊还是住院，该标识都应指向同一患者 -- 门诊号 */
    patienT_ID?: string | undefined;
    /** 病人来源 -- 病人此次血透的来源：门诊病人填“MZ”,住院病人填“ZY” */
    patienttype?: string | undefined;
    /** 患者姓名 -- 患者名字 */
    patienT_NAME?: string | undefined;
    /** 性别 -- 患者性别，男、女 */
    sex?: string | undefined;
    /** 身份证号码 -- 患者身份证号 */
    iD_CARD_ID?: string | undefined;
    /** 年龄 -- 患者年龄 */
    age?: number;
    /** 年龄单位 -- 患者年龄单位 */
    agE_UNIT?: string | undefined;
    /** 诊断编号 -- 诊断编号 */
    infecT_DIAGN_ID?: string | undefined;
    /** 诊断名称 -- 诊断名称 */
    infecT_DIAGN_NAME?: string | undefined;
    /** 血透场所 -- 曾在几所血透场所接受过血透治疗 */
    countcure?: string | undefined;
    /** 透析频率 -- 如：一周一次、一周二次等 */
    tX_FREQUENCY?: string | undefined;
    /** 累计透析次数 -- 在本医院累计透析的次数 */
    tX_COUNT?: number;
    /** 首次登记时间 -- 第一次在医院登记血透的时间 */
    dj_time?: dayjs.Dayjs | undefined;

    constructor(data?: IHospitalSensePatientView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patienT_ID = _data["patienT_ID"];
            this.patienttype = _data["patienttype"];
            this.patienT_NAME = _data["patienT_NAME"];
            this.sex = _data["sex"];
            this.iD_CARD_ID = _data["iD_CARD_ID"];
            this.age = _data["age"];
            this.agE_UNIT = _data["agE_UNIT"];
            this.infecT_DIAGN_ID = _data["infecT_DIAGN_ID"];
            this.infecT_DIAGN_NAME = _data["infecT_DIAGN_NAME"];
            this.countcure = _data["countcure"];
            this.tX_FREQUENCY = _data["tX_FREQUENCY"];
            this.tX_COUNT = _data["tX_COUNT"];
            this.dj_time = _data["dj_time"] ? dayjs(_data["dj_time"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): HospitalSensePatientView {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalSensePatientView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patienT_ID"] = this.patienT_ID;
        data["patienttype"] = this.patienttype;
        data["patienT_NAME"] = this.patienT_NAME;
        data["sex"] = this.sex;
        data["iD_CARD_ID"] = this.iD_CARD_ID;
        data["age"] = this.age;
        data["agE_UNIT"] = this.agE_UNIT;
        data["infecT_DIAGN_ID"] = this.infecT_DIAGN_ID;
        data["infecT_DIAGN_NAME"] = this.infecT_DIAGN_NAME;
        data["countcure"] = this.countcure;
        data["tX_FREQUENCY"] = this.tX_FREQUENCY;
        data["tX_COUNT"] = this.tX_COUNT;
        data["dj_time"] = this.dj_time ? this.dj_time.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 院感科血透接口(血液病人登记表) */
export interface IHospitalSensePatientView {
    /** 唯一主键 -- 出入院信息表中的唯一标识，与住院号可取同一个值 -- 门诊号 */
    id?: string | undefined;
    /** 病例号 -- 患者在医院信息系统中（门诊+住院）的唯一身份标识。无论患者在门诊还是住院，该标识都应指向同一患者 -- 门诊号 */
    patienT_ID?: string | undefined;
    /** 病人来源 -- 病人此次血透的来源：门诊病人填“MZ”,住院病人填“ZY” */
    patienttype?: string | undefined;
    /** 患者姓名 -- 患者名字 */
    patienT_NAME?: string | undefined;
    /** 性别 -- 患者性别，男、女 */
    sex?: string | undefined;
    /** 身份证号码 -- 患者身份证号 */
    iD_CARD_ID?: string | undefined;
    /** 年龄 -- 患者年龄 */
    age?: number;
    /** 年龄单位 -- 患者年龄单位 */
    agE_UNIT?: string | undefined;
    /** 诊断编号 -- 诊断编号 */
    infecT_DIAGN_ID?: string | undefined;
    /** 诊断名称 -- 诊断名称 */
    infecT_DIAGN_NAME?: string | undefined;
    /** 血透场所 -- 曾在几所血透场所接受过血透治疗 */
    countcure?: string | undefined;
    /** 透析频率 -- 如：一周一次、一周二次等 */
    tX_FREQUENCY?: string | undefined;
    /** 累计透析次数 -- 在本医院累计透析的次数 */
    tX_COUNT?: number;
    /** 首次登记时间 -- 第一次在医院登记血透的时间 */
    dj_time?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class HospitalSensePatientViewResult implements IHospitalSensePatientViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalSensePatientView[] | undefined;

    constructor(data?: IHospitalSensePatientViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(HospitalSensePatientView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HospitalSensePatientViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new HospitalSensePatientViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IHospitalSensePatientViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: HospitalSensePatientView[] | undefined;
}

export class IndexDoctorView implements IIndexDoctorView {
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 全名 */
    nameFull?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 归属用户登录名 *可以与工号同时使用* */
    loginName?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 职务 医生`DIC.MEDICAL.DOCTOR.TITLE` 护士`DIC.MEDICAL.NURSE.TITLE` *主任,副主任,医生,护士长,护士,实习生* */
    title?: string | undefined;
    /** 职称 `DIC.MEDICAL.PROFESSIONALTITLE` *主任医师,副主任医师,主治医师,住院医师* */
    professionalTitle?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 职务显示值 */
    titleLabel?: string | undefined;
    /** 职称显示值 */
    professionalTitleLabel?: string | undefined;
    /** 当日患者数量 */
    patientCount?: number;
    /** 当日已签到患者数量 */
    patientCountSignin?: number;
    /** 当日透析医嘱数量(不包含已废弃的医嘱) */
    medicalAdviceCount?: number;
    /** 当日待执行医嘱数量 */
    medicalAdviceCountUnexecuted?: number;
    /** 当日交班数量(我@和@我的总量) */
    deptShrCount?: number;
    /** 当日排班数量 */
    deptScheduleCount?: number;

    constructor(data?: IIndexDoctorView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.nameFull = _data["nameFull"];
            this.jobNumber = _data["jobNumber"];
            this.loginName = _data["loginName"];
            this.gender = _data["gender"];
            this.title = _data["title"];
            this.professionalTitle = _data["professionalTitle"];
            this.genderLabel = _data["genderLabel"];
            this.titleLabel = _data["titleLabel"];
            this.professionalTitleLabel = _data["professionalTitleLabel"];
            this.patientCount = _data["patientCount"];
            this.patientCountSignin = _data["patientCountSignin"];
            this.medicalAdviceCount = _data["medicalAdviceCount"];
            this.medicalAdviceCountUnexecuted = _data["medicalAdviceCountUnexecuted"];
            this.deptShrCount = _data["deptShrCount"];
            this.deptScheduleCount = _data["deptScheduleCount"];
        }
    }

    static fromJS(data: any): IndexDoctorView {
        data = typeof data === 'object' ? data : {};
        let result = new IndexDoctorView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["nameFull"] = this.nameFull;
        data["jobNumber"] = this.jobNumber;
        data["loginName"] = this.loginName;
        data["gender"] = this.gender;
        data["title"] = this.title;
        data["professionalTitle"] = this.professionalTitle;
        data["genderLabel"] = this.genderLabel;
        data["titleLabel"] = this.titleLabel;
        data["professionalTitleLabel"] = this.professionalTitleLabel;
        data["patientCount"] = this.patientCount;
        data["patientCountSignin"] = this.patientCountSignin;
        data["medicalAdviceCount"] = this.medicalAdviceCount;
        data["medicalAdviceCountUnexecuted"] = this.medicalAdviceCountUnexecuted;
        data["deptShrCount"] = this.deptShrCount;
        data["deptScheduleCount"] = this.deptScheduleCount;
        return data;
    }
}

export interface IIndexDoctorView {
    /** 姓名 */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 全名 */
    nameFull?: string | undefined;
    /** 工号 */
    jobNumber?: string | undefined;
    /** 归属用户登录名 *可以与工号同时使用* */
    loginName?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 职务 医生`DIC.MEDICAL.DOCTOR.TITLE` 护士`DIC.MEDICAL.NURSE.TITLE` *主任,副主任,医生,护士长,护士,实习生* */
    title?: string | undefined;
    /** 职称 `DIC.MEDICAL.PROFESSIONALTITLE` *主任医师,副主任医师,主治医师,住院医师* */
    professionalTitle?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 职务显示值 */
    titleLabel?: string | undefined;
    /** 职称显示值 */
    professionalTitleLabel?: string | undefined;
    /** 当日患者数量 */
    patientCount?: number;
    /** 当日已签到患者数量 */
    patientCountSignin?: number;
    /** 当日透析医嘱数量(不包含已废弃的医嘱) */
    medicalAdviceCount?: number;
    /** 当日待执行医嘱数量 */
    medicalAdviceCountUnexecuted?: number;
    /** 当日交班数量(我@和@我的总量) */
    deptShrCount?: number;
    /** 当日排班数量 */
    deptScheduleCount?: number;
}

/** Reponse */
export class IndexDoctorViewResultEntry implements IIndexDoctorViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IndexDoctorView;

    constructor(data?: IIndexDoctorViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? IndexDoctorView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IndexDoctorViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new IndexDoctorViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IIndexDoctorViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IndexDoctorView;
}

/** 首页排班展现 */
export class IndexScheduleView implements IIndexScheduleView {
    /** 用户标识 */
    id?: string | undefined;
    /** 用户姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 用户别名 */
    name2?: string | undefined;
    /** 用户全名 */
    nameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;

    constructor(data?: IIndexScheduleView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.nameFull = _data["nameFull"];
            this.monday = _data["monday"] ? IndexScheduleViewItem.fromJS(_data["monday"]) : <any>undefined;
            this.tuesday = _data["tuesday"] ? IndexScheduleViewItem.fromJS(_data["tuesday"]) : <any>undefined;
            this.wednesday = _data["wednesday"] ? IndexScheduleViewItem.fromJS(_data["wednesday"]) : <any>undefined;
            this.thursday = _data["thursday"] ? IndexScheduleViewItem.fromJS(_data["thursday"]) : <any>undefined;
            this.friday = _data["friday"] ? IndexScheduleViewItem.fromJS(_data["friday"]) : <any>undefined;
            this.saturday = _data["saturday"] ? IndexScheduleViewItem.fromJS(_data["saturday"]) : <any>undefined;
            this.sunday = _data["sunday"] ? IndexScheduleViewItem.fromJS(_data["sunday"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IndexScheduleView {
        data = typeof data === 'object' ? data : {};
        let result = new IndexScheduleView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["nameFull"] = this.nameFull;
        data["monday"] = this.monday ? this.monday.toJSON() : <any>undefined;
        data["tuesday"] = this.tuesday ? this.tuesday.toJSON() : <any>undefined;
        data["wednesday"] = this.wednesday ? this.wednesday.toJSON() : <any>undefined;
        data["thursday"] = this.thursday ? this.thursday.toJSON() : <any>undefined;
        data["friday"] = this.friday ? this.friday.toJSON() : <any>undefined;
        data["saturday"] = this.saturday ? this.saturday.toJSON() : <any>undefined;
        data["sunday"] = this.sunday ? this.sunday.toJSON() : <any>undefined;
        return data;
    }
}

/** 首页排班展现 */
export interface IIndexScheduleView {
    /** 用户标识 */
    id?: string | undefined;
    /** 用户姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 用户别名 */
    name2?: string | undefined;
    /** 用户全名 */
    nameFull?: string | undefined;
    monday?: IndexScheduleViewItem;
    tuesday?: IndexScheduleViewItem;
    wednesday?: IndexScheduleViewItem;
    thursday?: IndexScheduleViewItem;
    friday?: IndexScheduleViewItem;
    saturday?: IndexScheduleViewItem;
    sunday?: IndexScheduleViewItem;
}

/** 医生排班详细信息 */
export class IndexScheduleViewItem implements IIndexScheduleViewItem {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 周日 */
    shifts?: IndexScheduleViewItems[] | undefined;

    constructor(data?: IIndexScheduleViewItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            if (Array.isArray(_data["shifts"])) {
                this.shifts = [] as any;
                for (let item of _data["shifts"])
                    this.shifts!.push(IndexScheduleViewItems.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IndexScheduleViewItem {
        data = typeof data === 'object' ? data : {};
        let result = new IndexScheduleViewItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        if (Array.isArray(this.shifts)) {
            data["shifts"] = [];
            for (let item of this.shifts)
                data["shifts"].push(item.toJSON());
        }
        return data;
    }
}

/** 医生排班详细信息 */
export interface IIndexScheduleViewItem {
    /** 日期 */
    date?: dayjs.Dayjs;
    /** 周日 */
    shifts?: IndexScheduleViewItems[] | undefined;
}

/** 医生排班详细信息 */
export class IndexScheduleViewItems implements IIndexScheduleViewItems {
    /** 标识 */
    id?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次简称 */
    shiftShortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 加班时长 - 如果有加班的 */
    overTimes?: number | undefined;
    /** 调休时长 */
    takeOffTimes?: number | undefined;
    /** 医护排班状态颜色 */
    contentColor?: string | undefined;
    /** 医护排班状态展示值 */
    contentLabel?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IIndexScheduleViewItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.shiftShortName = _data["shiftShortName"];
            this.begin1Time = _data["begin1Time"];
            this.end1Date = _data["end1Date"];
            this.content = _data["content"];
            this.overTimes = _data["overTimes"];
            this.takeOffTimes = _data["takeOffTimes"];
            this.contentColor = _data["contentColor"];
            this.contentLabel = _data["contentLabel"];
            this.color = _data["color"];
            this.colorName = _data["colorName"];
            this.timeSignin = _data["timeSignin"] ? dayjs(_data["timeSignin"].toString()) : <any>undefined;
            this.timeSignout = _data["timeSignout"] ? dayjs(_data["timeSignout"].toString()) : <any>undefined;
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): IndexScheduleViewItems {
        data = typeof data === 'object' ? data : {};
        let result = new IndexScheduleViewItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["shiftShortName"] = this.shiftShortName;
        data["begin1Time"] = this.begin1Time;
        data["end1Date"] = this.end1Date;
        data["content"] = this.content;
        data["overTimes"] = this.overTimes;
        data["takeOffTimes"] = this.takeOffTimes;
        data["contentColor"] = this.contentColor;
        data["contentLabel"] = this.contentLabel;
        data["color"] = this.color;
        data["colorName"] = this.colorName;
        data["timeSignin"] = this.timeSignin ? this.timeSignin.toLocaleString() : <any>undefined;
        data["timeSignout"] = this.timeSignout ? this.timeSignout.toLocaleString() : <any>undefined;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 医生排班详细信息 */
export interface IIndexScheduleViewItems {
    /** 标识 */
    id?: string | undefined;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次 *早班,中班,晚班  显示内容:早班(07:00-11:00)* */
    shiftName?: string | undefined;
    /** 班次简称 */
    shiftShortName?: string | undefined;
    /** 开始时间 *HH:mm:ss* */
    begin1Time?: string | undefined;
    /** 结束时间 *HH:mm:ss* */
    end1Date?: string | undefined;
    /** 自定义内容 *休假,加班* */
    content?: string | undefined;
    /** 加班时长 - 如果有加班的 */
    overTimes?: number | undefined;
    /** 调休时长 */
    takeOffTimes?: number | undefined;
    /** 医护排班状态颜色 */
    contentColor?: string | undefined;
    /** 医护排班状态展示值 */
    contentLabel?: string | undefined;
    /** 颜色代码 `DIC.SYS.COLOR` 可自定义颜色 */
    color?: string | undefined;
    /** 颜色代码名称 */
    colorName?: string | undefined;
    /** 签到时间 */
    timeSignin?: dayjs.Dayjs | undefined;
    /** 签退时间 */
    timeSignout?: dayjs.Dayjs | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class IndexScheduleViewResultEntry implements IIndexScheduleViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IndexScheduleView;

    constructor(data?: IIndexScheduleViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? IndexScheduleView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IndexScheduleViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new IndexScheduleViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IIndexScheduleViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IndexScheduleView;
}

/** 库存统计 */
export class InventoryStatisticsView implements IInventoryStatisticsView {
    /** 项目标识 */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目分类 */
    roomItemTypeName?: string | undefined;
    /** 初始库存 */
    initialCount?: number;
    /** 入库 */
    inCount?: number;
    /** 出库 */
    outCount?: number;
    /** 退库 */
    restoreCount?: number;
    /** 报损 */
    faultyCount?: number;
    /** 结余库存 */
    inventoryCount?: number;

    constructor(data?: IInventoryStatisticsView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.initialCount = _data["initialCount"];
            this.inCount = _data["inCount"];
            this.outCount = _data["outCount"];
            this.restoreCount = _data["restoreCount"];
            this.faultyCount = _data["faultyCount"];
            this.inventoryCount = _data["inventoryCount"];
        }
    }

    static fromJS(data: any): InventoryStatisticsView {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryStatisticsView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["initialCount"] = this.initialCount;
        data["inCount"] = this.inCount;
        data["outCount"] = this.outCount;
        data["restoreCount"] = this.restoreCount;
        data["faultyCount"] = this.faultyCount;
        data["inventoryCount"] = this.inventoryCount;
        return data;
    }
}

/** 库存统计 */
export interface IInventoryStatisticsView {
    /** 项目标识 */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目分类 */
    roomItemTypeName?: string | undefined;
    /** 初始库存 */
    initialCount?: number;
    /** 入库 */
    inCount?: number;
    /** 出库 */
    outCount?: number;
    /** 退库 */
    restoreCount?: number;
    /** 报损 */
    faultyCount?: number;
    /** 结余库存 */
    inventoryCount?: number;
}

/** Reponse */
export class InventoryStatisticsViewResult implements IInventoryStatisticsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InventoryStatisticsView[] | undefined;

    constructor(data?: IInventoryStatisticsViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(InventoryStatisticsView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InventoryStatisticsViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryStatisticsViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IInventoryStatisticsViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InventoryStatisticsView[] | undefined;
}

/** 项目清单/账套管理/库存记录/期初库存(以项目清单为主表) 入库记录/出库记录(以库存为主表) */
export class InventoryView implements IInventoryView {
    /** 项目清单-标识 */
    roomItemListId?: string | undefined;
    /** 项目清单-项目名称 */
    roomItemListName?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    roomItemTypeName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天)  *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 一级单位名称 */
    unitLevel1Name?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 基本单位名称 */
    unitBaseName?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式名称 */
    usageModeName?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 期初库存 *基本单位的库存* */
    inventoryBegin?: number | undefined;
    /** 库存扣减 */
    inventory?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 使用说明 */
    remark?: string | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否编码管理 *0:否,1:是* */
    codeManage?: number | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 项目类型Code */
    typeCode?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 完整规格 */
    fullSpecLabel?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 一级单位、基本单位、规格单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 一级单位与基本单位集合 */
    unitListBase?: LabelModel[] | undefined;
    /** 项目类型:1-药品 2-耗材 0-其他 */
    type?: number;
    /** 扣减来源 0：科室扣减  1：个人库存 */
    deductionSource?: number;
    /** 费用类型 */
    costType?: string | undefined;
    /** 账套分组标识 */
    roomAccountGroupId?: string | undefined;
    /** 账套分组名称 */
    roomAccountGroupName?: string | undefined;
    /** 账套分组全称 */
    roomAccountGroupNameFull?: string | undefined;

    constructor(data?: IInventoryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.roomItemTypeNameFull = _data["roomItemTypeNameFull"];
            this.name = _data["name"];
            this.nameGoods = _data["nameGoods"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.shortName = _data["shortName"];
            this.model = _data["model"];
            this.spec = _data["spec"];
            this.origin = _data["origin"];
            this.dealer = _data["dealer"];
            this.warningDay = _data["warningDay"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitLevel1Name = _data["unitLevel1Name"];
            this.unitBase = _data["unitBase"];
            this.unitBaseName = _data["unitBaseName"];
            this.conversionRate = _data["conversionRate"];
            this.sellingPrice = _data["sellingPrice"];
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
            this.usageMode = _data["usageMode"];
            this.usageModeName = _data["usageModeName"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.inventoryBegin = _data["inventoryBegin"];
            this.inventory = _data["inventory"];
            this.inventoryCount = _data["inventoryCount"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.afterCharge = _data["afterCharge"];
            this.inCharge = _data["inCharge"];
            this.codeManage = _data["codeManage"];
            this.batchManage = _data["batchManage"];
            this.batchNo = _data["batchNo"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.typeCode = _data["typeCode"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.specLabel = _data["specLabel"];
            this.fullSpecLabel = _data["fullSpecLabel"];
            this.unitLabel = _data["unitLabel"];
            if (Array.isArray(_data["unitList"])) {
                this.unitList = [] as any;
                for (let item of _data["unitList"])
                    this.unitList!.push(LabelModel.fromJS(item));
            }
            if (Array.isArray(_data["unitListBase"])) {
                this.unitListBase = [] as any;
                for (let item of _data["unitListBase"])
                    this.unitListBase!.push(LabelModel.fromJS(item));
            }
            this.type = _data["type"];
            this.deductionSource = _data["deductionSource"];
            this.costType = _data["costType"];
            this.roomAccountGroupId = _data["roomAccountGroupId"];
            this.roomAccountGroupName = _data["roomAccountGroupName"];
            this.roomAccountGroupNameFull = _data["roomAccountGroupNameFull"];
        }
    }

    static fromJS(data: any): InventoryView {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["roomItemTypeNameFull"] = this.roomItemTypeNameFull;
        data["name"] = this.name;
        data["nameGoods"] = this.nameGoods;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["shortName"] = this.shortName;
        data["model"] = this.model;
        data["spec"] = this.spec;
        data["origin"] = this.origin;
        data["dealer"] = this.dealer;
        data["warningDay"] = this.warningDay;
        data["unitLevel1"] = this.unitLevel1;
        data["unitLevel1Name"] = this.unitLevel1Name;
        data["unitBase"] = this.unitBase;
        data["unitBaseName"] = this.unitBaseName;
        data["conversionRate"] = this.conversionRate;
        data["sellingPrice"] = this.sellingPrice;
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        data["usageMode"] = this.usageMode;
        data["usageModeName"] = this.usageModeName;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["inventoryBegin"] = this.inventoryBegin;
        data["inventory"] = this.inventory;
        data["inventoryCount"] = this.inventoryCount;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["afterCharge"] = this.afterCharge;
        data["inCharge"] = this.inCharge;
        data["codeManage"] = this.codeManage;
        data["batchManage"] = this.batchManage;
        data["batchNo"] = this.batchNo;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["typeCode"] = this.typeCode;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["specLabel"] = this.specLabel;
        data["fullSpecLabel"] = this.fullSpecLabel;
        data["unitLabel"] = this.unitLabel;
        if (Array.isArray(this.unitList)) {
            data["unitList"] = [];
            for (let item of this.unitList)
                data["unitList"].push(item.toJSON());
        }
        if (Array.isArray(this.unitListBase)) {
            data["unitListBase"] = [];
            for (let item of this.unitListBase)
                data["unitListBase"].push(item.toJSON());
        }
        data["type"] = this.type;
        data["deductionSource"] = this.deductionSource;
        data["costType"] = this.costType;
        data["roomAccountGroupId"] = this.roomAccountGroupId;
        data["roomAccountGroupName"] = this.roomAccountGroupName;
        data["roomAccountGroupNameFull"] = this.roomAccountGroupNameFull;
        return data;
    }
}

/** 项目清单/账套管理/库存记录/期初库存(以项目清单为主表) 入库记录/出库记录(以库存为主表) */
export interface IInventoryView {
    /** 项目清单-标识 */
    roomItemListId?: string | undefined;
    /** 项目清单-项目名称 */
    roomItemListName?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 种类名称 *[项目分类标识](项目分类)* */
    roomItemTypeName?: string | undefined;
    /** 种类名称全称 */
    roomItemTypeNameFull?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天)  *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 一级单位名称 */
    unitLevel1Name?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 基本单位名称 */
    unitBaseName?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式名称 */
    usageModeName?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 期初库存 *基本单位的库存* */
    inventoryBegin?: number | undefined;
    /** 库存扣减 */
    inventory?: number;
    /** 库存 *基本单位的库存* */
    inventoryCount?: number | undefined;
    /** 启用状态 */
    enabled?: number;
    /** 使用说明 */
    remark?: string | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 是否编码管理 *0:否,1:是* */
    codeManage?: number | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 项目类型Code */
    typeCode?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 规格 */
    specLabel?: string | undefined;
    /** 完整规格 */
    fullSpecLabel?: string | undefined;
    /** 单位显示值 */
    unitLabel?: string | undefined;
    /** 一级单位、基本单位、规格单位集合 */
    unitList?: LabelModel[] | undefined;
    /** 一级单位与基本单位集合 */
    unitListBase?: LabelModel[] | undefined;
    /** 项目类型:1-药品 2-耗材 0-其他 */
    type?: number;
    /** 扣减来源 0：科室扣减  1：个人库存 */
    deductionSource?: number;
    /** 费用类型 */
    costType?: string | undefined;
    /** 账套分组标识 */
    roomAccountGroupId?: string | undefined;
    /** 账套分组名称 */
    roomAccountGroupName?: string | undefined;
    /** 账套分组全称 */
    roomAccountGroupNameFull?: string | undefined;
}

/** Reponse */
export class InventoryViewResult implements IInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InventoryView[] | undefined;

    constructor(data?: IInventoryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(InventoryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InventoryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: InventoryView[] | undefined;
}

/** 治疗数据 */
export class IotTreatmentData implements IIotTreatmentData {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 设备IP */
    deviceIp?: string | undefined;
    /** 治疗时间 *min* */
    therapyTime?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 跨膜压 *mmHg* */
    tmp?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 平均动脉压 *mmHg* */
    meanArterialPressure?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 透析液流量 *ml/h* */
    dialysateFlowRate?: number | undefined;
    /** 透析液电导度 *mS/cm* */
    dialysateCond?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 超滤率 *ml/h* */
    ufr?: number | undefined;
    /** 超滤量 *ml* */
    ufv?: number | undefined;
    /** 血流量 *ml/h* */
    bloodFlowRate?: number | undefined;
    /** 血流量 *l* */
    bloodFlowVolume?: number | undefined;
    /** 肝素量 *ml* */
    heparinVolume?: number | undefined;
    /** 设定治疗时间 *min* */
    therapyTimeSet?: number | undefined;
    /** 设定超滤量 *ml* */
    ufvSet?: number | undefined;
    /** 设定血流量 *ml/h* */
    bloodFlowRateSet?: number | undefined;
    /** 设定肝素速率 *ml/h* */
    heparinRateSet?: number | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    cureRecords?: CureRecord;

    constructor(data?: IIotTreatmentData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.cureRecordId = _data["cureRecordId"];
            this.deviceIp = _data["deviceIp"];
            this.therapyTime = _data["therapyTime"];
            this.arterialPressure = _data["arterialPressure"];
            this.venousPressure = _data["venousPressure"];
            this.tmp = _data["tmp"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.meanArterialPressure = _data["meanArterialPressure"];
            this.pulse = _data["pulse"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.dialysateCond = _data["dialysateCond"];
            this.dialysateTemp = _data["dialysateTemp"];
            this.ufr = _data["ufr"];
            this.ufv = _data["ufv"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.bloodFlowVolume = _data["bloodFlowVolume"];
            this.heparinVolume = _data["heparinVolume"];
            this.therapyTimeSet = _data["therapyTimeSet"];
            this.ufvSet = _data["ufvSet"];
            this.bloodFlowRateSet = _data["bloodFlowRateSet"];
            this.heparinRateSet = _data["heparinRateSet"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.rfv = _data["rfv"];
            this.cumulativeHeparinVolume = _data["cumulativeHeparinVolume"];
            this.cureRecords = _data["cureRecords"] ? CureRecord.fromJS(_data["cureRecords"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IotTreatmentData {
        data = typeof data === 'object' ? data : {};
        let result = new IotTreatmentData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cureRecordId"] = this.cureRecordId;
        data["deviceIp"] = this.deviceIp;
        data["therapyTime"] = this.therapyTime;
        data["arterialPressure"] = this.arterialPressure;
        data["venousPressure"] = this.venousPressure;
        data["tmp"] = this.tmp;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["meanArterialPressure"] = this.meanArterialPressure;
        data["pulse"] = this.pulse;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["dialysateCond"] = this.dialysateCond;
        data["dialysateTemp"] = this.dialysateTemp;
        data["ufr"] = this.ufr;
        data["ufv"] = this.ufv;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["bloodFlowVolume"] = this.bloodFlowVolume;
        data["heparinVolume"] = this.heparinVolume;
        data["therapyTimeSet"] = this.therapyTimeSet;
        data["ufvSet"] = this.ufvSet;
        data["bloodFlowRateSet"] = this.bloodFlowRateSet;
        data["heparinRateSet"] = this.heparinRateSet;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["rfv"] = this.rfv;
        data["cumulativeHeparinVolume"] = this.cumulativeHeparinVolume;
        data["cureRecords"] = this.cureRecords ? this.cureRecords.toJSON() : <any>undefined;
        return data;
    }
}

/** 治疗数据 */
export interface IIotTreatmentData {
    /** 标识 */
    id?: string | undefined;
    /** [透析记录标识](透析记录) */
    cureRecordId?: string | undefined;
    /** 设备IP */
    deviceIp?: string | undefined;
    /** 治疗时间 *min* */
    therapyTime?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 跨膜压 *mmHg* */
    tmp?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 平均动脉压 *mmHg* */
    meanArterialPressure?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 透析液流量 *ml/h* */
    dialysateFlowRate?: number | undefined;
    /** 透析液电导度 *mS/cm* */
    dialysateCond?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 超滤率 *ml/h* */
    ufr?: number | undefined;
    /** 超滤量 *ml* */
    ufv?: number | undefined;
    /** 血流量 *ml/h* */
    bloodFlowRate?: number | undefined;
    /** 血流量 *l* */
    bloodFlowVolume?: number | undefined;
    /** 肝素量 *ml* */
    heparinVolume?: number | undefined;
    /** 设定治疗时间 *min* */
    therapyTimeSet?: number | undefined;
    /** 设定超滤量 *ml* */
    ufvSet?: number | undefined;
    /** 设定血流量 *ml/h* */
    bloodFlowRateSet?: number | undefined;
    /** 设定肝素速率 *ml/h* */
    heparinRateSet?: number | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
    cureRecords?: CureRecord;
}

/** Reponse */
export class IotTreatmentDataResult implements IIotTreatmentDataResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: IotTreatmentData[] | undefined;

    constructor(data?: IIotTreatmentDataResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(IotTreatmentData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IotTreatmentDataResult {
        data = typeof data === 'object' ? data : {};
        let result = new IotTreatmentDataResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IIotTreatmentDataResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: IotTreatmentData[] | undefined;
}

/** Reponse */
export class IotTreatmentDataResultEntry implements IIotTreatmentDataResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IotTreatmentData;

    constructor(data?: IIotTreatmentDataResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? IotTreatmentData.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IotTreatmentDataResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new IotTreatmentDataResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IIotTreatmentDataResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: IotTreatmentData;
}

/** 治疗数据 (ViewModel) */
export class IotTreatmentDataViewModel implements IIotTreatmentDataViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** 设备IP */
    deviceIp!: string;
    /** 治疗时间 *min* */
    therapyTime?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 跨膜压 *mmHg* */
    tmp?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 平均动脉压 *mmHg* */
    meanArterialPressure?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 透析液流量 *ml/h* */
    dialysateFlowRate?: number | undefined;
    /** 透析液电导度 *mS/cm* */
    dialysateCond?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 超滤率 *ml/h* */
    ufr?: number | undefined;
    /** 超滤量 *ml* */
    ufv?: number | undefined;
    /** 血流量 *ml/h* */
    bloodFlowRate?: number | undefined;
    /** 血流量 *l* */
    bloodFlowVolume?: number | undefined;
    /** 肝素量 *ml* */
    heparinVolume?: number | undefined;
    /** 设定治疗时间 *min* */
    therapyTimeSet?: number | undefined;
    /** 设定超滤量 *ml* */
    ufvSet?: number | undefined;
    /** 设定血流量 *ml/h* */
    bloodFlowRateSet?: number | undefined;
    /** 设定肝素速率 *ml/h* */
    heparinRateSet?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;

    constructor(data?: IIotTreatmentDataViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cureRecordId = _data["cureRecordId"];
            this.deviceIp = _data["deviceIp"];
            this.therapyTime = _data["therapyTime"];
            this.arterialPressure = _data["arterialPressure"];
            this.venousPressure = _data["venousPressure"];
            this.tmp = _data["tmp"];
            this.sbp = _data["sbp"];
            this.dbp = _data["dbp"];
            this.meanArterialPressure = _data["meanArterialPressure"];
            this.pulse = _data["pulse"];
            this.dialysateFlowRate = _data["dialysateFlowRate"];
            this.dialysateCond = _data["dialysateCond"];
            this.dialysateTemp = _data["dialysateTemp"];
            this.ufr = _data["ufr"];
            this.ufv = _data["ufv"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.bloodFlowVolume = _data["bloodFlowVolume"];
            this.heparinVolume = _data["heparinVolume"];
            this.therapyTimeSet = _data["therapyTimeSet"];
            this.ufvSet = _data["ufvSet"];
            this.bloodFlowRateSet = _data["bloodFlowRateSet"];
            this.heparinRateSet = _data["heparinRateSet"];
            this.rfv = _data["rfv"];
            this.cumulativeHeparinVolume = _data["cumulativeHeparinVolume"];
        }
    }

    static fromJS(data: any): IotTreatmentDataViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new IotTreatmentDataViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cureRecordId"] = this.cureRecordId;
        data["deviceIp"] = this.deviceIp;
        data["therapyTime"] = this.therapyTime;
        data["arterialPressure"] = this.arterialPressure;
        data["venousPressure"] = this.venousPressure;
        data["tmp"] = this.tmp;
        data["sbp"] = this.sbp;
        data["dbp"] = this.dbp;
        data["meanArterialPressure"] = this.meanArterialPressure;
        data["pulse"] = this.pulse;
        data["dialysateFlowRate"] = this.dialysateFlowRate;
        data["dialysateCond"] = this.dialysateCond;
        data["dialysateTemp"] = this.dialysateTemp;
        data["ufr"] = this.ufr;
        data["ufv"] = this.ufv;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["bloodFlowVolume"] = this.bloodFlowVolume;
        data["heparinVolume"] = this.heparinVolume;
        data["therapyTimeSet"] = this.therapyTimeSet;
        data["ufvSet"] = this.ufvSet;
        data["bloodFlowRateSet"] = this.bloodFlowRateSet;
        data["heparinRateSet"] = this.heparinRateSet;
        data["rfv"] = this.rfv;
        data["cumulativeHeparinVolume"] = this.cumulativeHeparinVolume;
        return data;
    }
}

/** 治疗数据 (ViewModel) */
export interface IIotTreatmentDataViewModel {
    /** [透析记录标识](透析记录Id) */
    cureRecordId?: string | undefined;
    /** 设备IP */
    deviceIp: string;
    /** 治疗时间 *min* */
    therapyTime?: number | undefined;
    /** 动脉压 *mmHg* */
    arterialPressure?: number | undefined;
    /** 静脉压 *mmHg* */
    venousPressure?: number | undefined;
    /** 跨膜压 *mmHg* */
    tmp?: number | undefined;
    /** 收缩压 *mmHg* */
    sbp?: number | undefined;
    /** 舒张压 *mmHg* */
    dbp?: number | undefined;
    /** 平均动脉压 *mmHg* */
    meanArterialPressure?: number | undefined;
    /** 脉搏 *次/分* */
    pulse?: number | undefined;
    /** 透析液流量 *ml/h* */
    dialysateFlowRate?: number | undefined;
    /** 透析液电导度 *mS/cm* */
    dialysateCond?: number | undefined;
    /** 透析液温度 *℃* */
    dialysateTemp?: number | undefined;
    /** 超滤率 *ml/h* */
    ufr?: number | undefined;
    /** 超滤量 *ml* */
    ufv?: number | undefined;
    /** 血流量 *ml/h* */
    bloodFlowRate?: number | undefined;
    /** 血流量 *l* */
    bloodFlowVolume?: number | undefined;
    /** 肝素量 *ml* */
    heparinVolume?: number | undefined;
    /** 设定治疗时间 *min* */
    therapyTimeSet?: number | undefined;
    /** 设定超滤量 *ml* */
    ufvSet?: number | undefined;
    /** 设定血流量 *ml/h* */
    bloodFlowRateSet?: number | undefined;
    /** 设定肝素速率 *ml/h* */
    heparinRateSet?: number | undefined;
    /** 置换液量 *L Replacement Fluid Volume* */
    rfv?: number | undefined;
    /** 累计肝素量 */
    cumulativeHeparinVolume?: number | undefined;
}

/** Reponse */
export class JObjectResultEntry implements IJObjectResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: { [key: string]: string; } | undefined;

    constructor(data?: IJObjectResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
        }
    }

    static fromJS(data: any): JObjectResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new JObjectResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        return data;
    }
}

/** Reponse */
export interface IJObjectResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: { [key: string]: string; } | undefined;
}

export class LabelModel implements ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;

    constructor(data?: ILabelModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): LabelModel {
        data = typeof data === 'object' ? data : {};
        let result = new LabelModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["value"] = this.value;
        return data;
    }
}

export interface ILabelModel {
    /** 显示值 */
    label?: string | undefined;
    /** 值 */
    value?: string | undefined;
}

/** 检验统计配置 */
export class LisStatConfigEditModel implements ILisStatConfigEditModel {
    /** 名称 */
    name!: string;
    /** 编码 */
    code!: string;
    /** 透前透后 */
    isAfter?: boolean;
    /** 自定义计算 */
    isCalculate?: boolean;
    /** 计算公式 */
    calculateFormula?: string | undefined;
    /** 是否显示 */
    isDisplay?: boolean;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ILisStatConfigEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.isAfter = _data["isAfter"];
            this.isCalculate = _data["isCalculate"];
            this.calculateFormula = _data["calculateFormula"];
            this.isDisplay = _data["isDisplay"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): LisStatConfigEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new LisStatConfigEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["isAfter"] = this.isAfter;
        data["isCalculate"] = this.isCalculate;
        data["calculateFormula"] = this.calculateFormula;
        data["isDisplay"] = this.isDisplay;
        data["remark"] = this.remark;
        return data;
    }
}

/** 检验统计配置 */
export interface ILisStatConfigEditModel {
    /** 名称 */
    name: string;
    /** 编码 */
    code: string;
    /** 透前透后 */
    isAfter?: boolean;
    /** 自定义计算 */
    isCalculate?: boolean;
    /** 计算公式 */
    calculateFormula?: string | undefined;
    /** 是否显示 */
    isDisplay?: boolean;
    /** 备注 */
    remark?: string | undefined;
}

/** 检验统计配置 */
export class LisStatConfigView implements ILisStatConfigView {
    /** 名称 */
    name!: string;
    /** 编码 */
    code!: string;
    /** 透前透后 */
    isAfter?: boolean;
    /** 自定义计算 */
    isCalculate?: boolean;
    /** 计算公式 */
    calculateFormula?: string | undefined;
    /** 是否显示 */
    isDisplay?: boolean;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ILisStatConfigView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.isAfter = _data["isAfter"];
            this.isCalculate = _data["isCalculate"];
            this.calculateFormula = _data["calculateFormula"];
            this.isDisplay = _data["isDisplay"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LisStatConfigView {
        data = typeof data === 'object' ? data : {};
        let result = new LisStatConfigView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["isAfter"] = this.isAfter;
        data["isCalculate"] = this.isCalculate;
        data["calculateFormula"] = this.calculateFormula;
        data["isDisplay"] = this.isDisplay;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 检验统计配置 */
export interface ILisStatConfigView {
    /** 名称 */
    name: string;
    /** 编码 */
    code: string;
    /** 透前透后 */
    isAfter?: boolean;
    /** 自定义计算 */
    isCalculate?: boolean;
    /** 计算公式 */
    calculateFormula?: string | undefined;
    /** 是否显示 */
    isDisplay?: boolean;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class LisStatConfigViewResult implements ILisStatConfigViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: LisStatConfigView[] | undefined;

    constructor(data?: ILisStatConfigViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(LisStatConfigView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LisStatConfigViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new LisStatConfigViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ILisStatConfigViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: LisStatConfigView[] | undefined;
}

/** Reponse */
export class LisStatConfigViewResultEntry implements ILisStatConfigViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: LisStatConfigView;

    constructor(data?: ILisStatConfigViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? LisStatConfigView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LisStatConfigViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new LisStatConfigViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ILisStatConfigViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: LisStatConfigView;
}

/** LoginViewModel */
export class LoginViewModel implements ILoginViewModel {
    /** 用户名(工号或者登录名) */
    userName!: string;
    /** 密码 */
    password!: string;
    /** 院区 */
    hospitalAreaId?: string | undefined;
    /** 是否强制 */
    force?: boolean;

    constructor(data?: ILoginViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.hospitalAreaId = _data["hospitalAreaId"];
            this.force = _data["force"];
        }
    }

    static fromJS(data: any): LoginViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["hospitalAreaId"] = this.hospitalAreaId;
        data["force"] = this.force;
        return data;
    }
}

/** LoginViewModel */
export interface ILoginViewModel {
    /** 用户名(工号或者登录名) */
    userName: string;
    /** 密码 */
    password: string;
    /** 院区 */
    hospitalAreaId?: string | undefined;
    /** 是否强制 */
    force?: boolean;
}

/** 自定义表单字段映射 */
export class MapForm implements IMapForm {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 字段key */
    key?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IMapForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.key = _data["key"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): MapForm {
        data = typeof data === 'object' ? data : {};
        let result = new MapForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["key"] = this.key;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 自定义表单字段映射 */
export interface IMapForm {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 字段key */
    key?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class MapFormResult implements IMapFormResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapForm[] | undefined;

    constructor(data?: IMapFormResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapForm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapFormResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapFormResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapFormResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapForm[] | undefined;
}

/** Reponse */
export class MapFormResultEntry implements IMapFormResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapForm;

    constructor(data?: IMapFormResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? MapForm.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MapFormResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new MapFormResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IMapFormResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapForm;
}

/** 自定义表单字段映射 (ViewModel) */
export class MapFormViewModel implements IMapFormViewModel {
    /** 名称 */
    name!: string;
    /** 字段key */
    key!: string;

    constructor(data?: IMapFormViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.key = _data["key"];
        }
    }

    static fromJS(data: any): MapFormViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new MapFormViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["key"] = this.key;
        return data;
    }
}

/** 自定义表单字段映射 (ViewModel) */
export interface IMapFormViewModel {
    /** 名称 */
    name: string;
    /** 字段key */
    key: string;
}

/** 检验报告项配置 */
export class MapLisItemDeployEditModel implements IMapLisItemDeployEditModel {
    /** 名称 */
    name!: string;
    /** LIS编码，唯一 */
    codeLis!: string;
    /** 单位 */
    unit?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 匹配编码 */
    codeI?: string | undefined;

    constructor(data?: IMapLisItemDeployEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.codeLis = _data["codeLis"];
            this.unit = _data["unit"];
            this.referenceRange = _data["referenceRange"];
            this.remark = _data["remark"];
            this.codeI = _data["codeI"];
        }
    }

    static fromJS(data: any): MapLisItemDeployEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemDeployEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["codeLis"] = this.codeLis;
        data["unit"] = this.unit;
        data["referenceRange"] = this.referenceRange;
        data["remark"] = this.remark;
        data["codeI"] = this.codeI;
        return data;
    }
}

/** 检验报告项配置 */
export interface IMapLisItemDeployEditModel {
    /** 名称 */
    name: string;
    /** LIS编码，唯一 */
    codeLis: string;
    /** 单位 */
    unit?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 匹配编码 */
    codeI?: string | undefined;
}

/** 检验报告项配置 */
export class MapLisItemDeployView implements IMapLisItemDeployView {
    /** 名称 */
    name!: string;
    /** LIS编码，唯一 */
    codeLis!: string;
    /** 单位 */
    unit?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 匹配编码 */
    codeI?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 标识 */
    id!: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 分类名称 */
    typeName?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;

    constructor(data?: IMapLisItemDeployView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.codeLis = _data["codeLis"];
            this.unit = _data["unit"];
            this.referenceRange = _data["referenceRange"];
            this.remark = _data["remark"];
            this.codeI = _data["codeI"];
            this.complianceRateRange = _data["complianceRateRange"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.must = _data["must"];
            this.typeName = _data["typeName"];
            this.commonTerms = _data["commonTerms"];
            this.abnormaRemind = _data["abnormaRemind"];
        }
    }

    static fromJS(data: any): MapLisItemDeployView {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemDeployView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["codeLis"] = this.codeLis;
        data["unit"] = this.unit;
        data["referenceRange"] = this.referenceRange;
        data["remark"] = this.remark;
        data["codeI"] = this.codeI;
        data["complianceRateRange"] = this.complianceRateRange;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["must"] = this.must;
        data["typeName"] = this.typeName;
        data["commonTerms"] = this.commonTerms;
        data["abnormaRemind"] = this.abnormaRemind;
        return data;
    }
}

/** 检验报告项配置 */
export interface IMapLisItemDeployView {
    /** 名称 */
    name: string;
    /** LIS编码，唯一 */
    codeLis: string;
    /** 单位 */
    unit?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 匹配编码 */
    codeI?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 标识 */
    id: string;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 分类名称 */
    typeName?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
}

/** Reponse */
export class MapLisItemDeployViewResult implements IMapLisItemDeployViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemDeployView[] | undefined;

    constructor(data?: IMapLisItemDeployViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapLisItemDeployView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapLisItemDeployViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemDeployViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapLisItemDeployViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemDeployView[] | undefined;
}

/** Reponse */
export class MapLisItemDeployViewResultEntry implements IMapLisItemDeployViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisItemDeployView;

    constructor(data?: IMapLisItemDeployViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? MapLisItemDeployView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisItemDeployViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemDeployViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IMapLisItemDeployViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisItemDeployView;
}

export class MapLisItemEditModel implements IMapLisItemEditModel {
    /** 名称 */
    name!: string;
    /** [检验报告分类标识](#检验报告分类) */
    mapLisTypeId!: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [iHDIS检验项配置标识](#iHDIS检验项配置) */
    mapLisItemIhdisId?: string | undefined;

    constructor(data?: IMapLisItemEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.mapLisTypeId = _data["mapLisTypeId"];
            this.codeLis = _data["codeLis"];
            this.remark = _data["remark"];
            this.mapLisItemIhdisId = _data["mapLisItemIhdisId"];
        }
    }

    static fromJS(data: any): MapLisItemEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["mapLisTypeId"] = this.mapLisTypeId;
        data["codeLis"] = this.codeLis;
        data["remark"] = this.remark;
        data["mapLisItemIhdisId"] = this.mapLisItemIhdisId;
        return data;
    }
}

export interface IMapLisItemEditModel {
    /** 名称 */
    name: string;
    /** [检验报告分类标识](#检验报告分类) */
    mapLisTypeId: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [iHDIS检验项配置标识](#iHDIS检验项配置) */
    mapLisItemIhdisId?: string | undefined;
}

/** iHDIS检验项明细 */
export class MapLisItemIhdisEditModel implements IMapLisItemIhdisEditModel {
    /** 名称 */
    name!: string;
    /** [关联的检验报告分类标识](#检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI!: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 是否进行质控报表统计 */
    report?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IMapLisItemIhdisEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.mapLisTypeId = _data["mapLisTypeId"];
            this.codeI = _data["codeI"];
            this.codeLis = _data["codeLis"];
            this.unit = _data["unit"];
            this.complianceRateRange = _data["complianceRateRange"];
            this.referenceRange = _data["referenceRange"];
            this.referenceRangeMinMan = _data["referenceRangeMinMan"];
            this.referenceRangeMaxMan = _data["referenceRangeMaxMan"];
            this.referenceRangeMinWoman = _data["referenceRangeMinWoman"];
            this.referenceRangeMaxWoman = _data["referenceRangeMaxWoman"];
            this.commonTerms = _data["commonTerms"];
            this.abnormaRemind = _data["abnormaRemind"];
            this.must = _data["must"];
            this.report = _data["report"];
            this.checkInterval = _data["checkInterval"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): MapLisItemIhdisEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemIhdisEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["mapLisTypeId"] = this.mapLisTypeId;
        data["codeI"] = this.codeI;
        data["codeLis"] = this.codeLis;
        data["unit"] = this.unit;
        data["complianceRateRange"] = this.complianceRateRange;
        data["referenceRange"] = this.referenceRange;
        data["referenceRangeMinMan"] = this.referenceRangeMinMan;
        data["referenceRangeMaxMan"] = this.referenceRangeMaxMan;
        data["referenceRangeMinWoman"] = this.referenceRangeMinWoman;
        data["referenceRangeMaxWoman"] = this.referenceRangeMaxWoman;
        data["commonTerms"] = this.commonTerms;
        data["abnormaRemind"] = this.abnormaRemind;
        data["must"] = this.must;
        data["report"] = this.report;
        data["checkInterval"] = this.checkInterval;
        data["remark"] = this.remark;
        return data;
    }
}

/** iHDIS检验项明细 */
export interface IMapLisItemIhdisEditModel {
    /** 名称 */
    name: string;
    /** [关联的检验报告分类标识](#检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 是否进行质控报表统计 */
    report?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** iHDIS检验项明细 */
export class MapLisItemIhdisView implements IMapLisItemIhdisView {
    /** 名称 */
    name!: string;
    /** [关联的检验报告分类标识](#检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI!: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 是否进行质控报表统计 */
    report?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 关联的检验报告分类名称 */
    mapLisTypeName?: string | undefined;

    constructor(data?: IMapLisItemIhdisView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.mapLisTypeId = _data["mapLisTypeId"];
            this.codeI = _data["codeI"];
            this.codeLis = _data["codeLis"];
            this.unit = _data["unit"];
            this.complianceRateRange = _data["complianceRateRange"];
            this.referenceRange = _data["referenceRange"];
            this.referenceRangeMinMan = _data["referenceRangeMinMan"];
            this.referenceRangeMaxMan = _data["referenceRangeMaxMan"];
            this.referenceRangeMinWoman = _data["referenceRangeMinWoman"];
            this.referenceRangeMaxWoman = _data["referenceRangeMaxWoman"];
            this.commonTerms = _data["commonTerms"];
            this.abnormaRemind = _data["abnormaRemind"];
            this.must = _data["must"];
            this.report = _data["report"];
            this.checkInterval = _data["checkInterval"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.mapLisTypeName = _data["mapLisTypeName"];
        }
    }

    static fromJS(data: any): MapLisItemIhdisView {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemIhdisView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["mapLisTypeId"] = this.mapLisTypeId;
        data["codeI"] = this.codeI;
        data["codeLis"] = this.codeLis;
        data["unit"] = this.unit;
        data["complianceRateRange"] = this.complianceRateRange;
        data["referenceRange"] = this.referenceRange;
        data["referenceRangeMinMan"] = this.referenceRangeMinMan;
        data["referenceRangeMaxMan"] = this.referenceRangeMaxMan;
        data["referenceRangeMinWoman"] = this.referenceRangeMinWoman;
        data["referenceRangeMaxWoman"] = this.referenceRangeMaxWoman;
        data["commonTerms"] = this.commonTerms;
        data["abnormaRemind"] = this.abnormaRemind;
        data["must"] = this.must;
        data["report"] = this.report;
        data["checkInterval"] = this.checkInterval;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["mapLisTypeName"] = this.mapLisTypeName;
        return data;
    }
}

/** iHDIS检验项明细 */
export interface IMapLisItemIhdisView {
    /** 名称 */
    name: string;
    /** [关联的检验报告分类标识](#检验报告分类) */
    mapLisTypeId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 是否进行质控报表统计 */
    report?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 关联的检验报告分类名称 */
    mapLisTypeName?: string | undefined;
}

/** Reponse */
export class MapLisItemIhdisViewResult implements IMapLisItemIhdisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemIhdisView[] | undefined;

    constructor(data?: IMapLisItemIhdisViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapLisItemIhdisView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapLisItemIhdisViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemIhdisViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapLisItemIhdisViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemIhdisView[] | undefined;
}

/** Reponse */
export class MapLisItemIhdisViewResultEntry implements IMapLisItemIhdisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisItemIhdisView;

    constructor(data?: IMapLisItemIhdisViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? MapLisItemIhdisView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisItemIhdisViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemIhdisViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IMapLisItemIhdisViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisItemIhdisView;
}

export class MapLisItemView implements IMapLisItemView {
    /** 名称 */
    name!: string;
    /** [检验报告分类标识](#检验报告分类) */
    mapLisTypeId!: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [iHDIS检验项配置标识](#iHDIS检验项配置) */
    mapLisItemIhdisId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 分类名称 */
    typeName?: string | undefined;
    /** 分类名称 */
    typeCodeName?: string | undefined;
    /** 检验周期显示值 */
    checkIntervalLabel?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IMapLisItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.mapLisTypeId = _data["mapLisTypeId"];
            this.codeLis = _data["codeLis"];
            this.remark = _data["remark"];
            this.mapLisItemIhdisId = _data["mapLisItemIhdisId"];
            this.codeI = _data["codeI"];
            this.unit = _data["unit"];
            this.complianceRateRange = _data["complianceRateRange"];
            this.referenceRange = _data["referenceRange"];
            this.referenceRangeMinMan = _data["referenceRangeMinMan"];
            this.referenceRangeMaxMan = _data["referenceRangeMaxMan"];
            this.referenceRangeMinWoman = _data["referenceRangeMinWoman"];
            this.referenceRangeMaxWoman = _data["referenceRangeMaxWoman"];
            this.commonTerms = _data["commonTerms"];
            this.abnormaRemind = _data["abnormaRemind"];
            this.must = _data["must"];
            this.checkInterval = _data["checkInterval"];
            this.typeName = _data["typeName"];
            this.typeCodeName = _data["typeCodeName"];
            this.checkIntervalLabel = _data["checkIntervalLabel"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisItemView {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["mapLisTypeId"] = this.mapLisTypeId;
        data["codeLis"] = this.codeLis;
        data["remark"] = this.remark;
        data["mapLisItemIhdisId"] = this.mapLisItemIhdisId;
        data["codeI"] = this.codeI;
        data["unit"] = this.unit;
        data["complianceRateRange"] = this.complianceRateRange;
        data["referenceRange"] = this.referenceRange;
        data["referenceRangeMinMan"] = this.referenceRangeMinMan;
        data["referenceRangeMaxMan"] = this.referenceRangeMaxMan;
        data["referenceRangeMinWoman"] = this.referenceRangeMinWoman;
        data["referenceRangeMaxWoman"] = this.referenceRangeMaxWoman;
        data["commonTerms"] = this.commonTerms;
        data["abnormaRemind"] = this.abnormaRemind;
        data["must"] = this.must;
        data["checkInterval"] = this.checkInterval;
        data["typeName"] = this.typeName;
        data["typeCodeName"] = this.typeCodeName;
        data["checkIntervalLabel"] = this.checkIntervalLabel;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IMapLisItemView {
    /** 名称 */
    name: string;
    /** [检验报告分类标识](#检验报告分类) */
    mapLisTypeId: string;
    /** LIS编码 */
    codeLis?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** [iHDIS检验项配置标识](#iHDIS检验项配置) */
    mapLisItemIhdisId?: string | undefined;
    /** 本系统编码，唯一 */
    codeI?: string | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 达标率范围范围 */
    complianceRateRange?: string | undefined;
    /** 参考范围 */
    referenceRange?: string | undefined;
    /** 参考范围最小值-男性 */
    referenceRangeMinMan?: string | undefined;
    /** 参考范围最大值-男性 */
    referenceRangeMaxMan?: string | undefined;
    /** 参考范围最小值-女性 */
    referenceRangeMinWoman?: string | undefined;
    /** 参考范围最大值-女性 */
    referenceRangeMaxWoman?: string | undefined;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 是否异常提醒 */
    abnormaRemind?: number | undefined;
    /** 是否必查项目 */
    must?: number | undefined;
    /** 为必查时的检验周期 `DIC.LISPACS.CHECK.INTERVAL` *日/次* */
    checkInterval?: number | undefined;
    /** 分类名称 */
    typeName?: string | undefined;
    /** 分类名称 */
    typeCodeName?: string | undefined;
    /** 检验周期显示值 */
    checkIntervalLabel?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class MapLisItemViewResult implements IMapLisItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemView[] | undefined;

    constructor(data?: IMapLisItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapLisItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapLisItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapLisItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisItemView[] | undefined;
}

/** Reponse */
export class MapLisItemViewResultEntry implements IMapLisItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisItemView;

    constructor(data?: IMapLisItemViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? MapLisItemView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisItemViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisItemViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IMapLisItemViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisItemView;
}

/** 检验报告分类 */
export class MapLisType implements IMapLisType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IMapLisType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisType {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 检验报告分类 */
export interface IMapLisType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class MapLisTypeResult implements IMapLisTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisType[] | undefined;

    constructor(data?: IMapLisTypeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapLisType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapLisTypeResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisTypeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapLisTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapLisType[] | undefined;
}

/** Reponse */
export class MapLisTypeResultEntry implements IMapLisTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisType;

    constructor(data?: IMapLisTypeResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? MapLisType.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MapLisTypeResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisTypeResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IMapLisTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: MapLisType;
}

/** 检验报告分类 (ViewModel) */
export class MapLisTypeViewModel implements IMapLisTypeViewModel {
    /** 名称 */
    name!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IMapLisTypeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): MapLisTypeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new MapLisTypeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["remark"] = this.remark;
        return data;
    }
}

/** 检验报告分类 (ViewModel) */
export interface IMapLisTypeViewModel {
    /** 名称 */
    name: string;
    /** 备注 */
    remark?: string | undefined;
}

/** 已经匹配列表视图 */
export class MapListMatched implements IMapListMatched {
    /** 血透系统Id */
    idIhdis?: string | undefined;
    /** 血透系统Code */
    codeI?: string | undefined;
    /** 血透系统Id */
    idLis?: string | undefined;
    /** Lis系统Code */
    codeLis?: string | undefined;
    /** Lis系统化验名称 */
    nameLis?: string | undefined;
    /** 血透系统化验名称 */
    nameI?: string | undefined;

    constructor(data?: IMapListMatched) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idIhdis = _data["idIhdis"];
            this.codeI = _data["codeI"];
            this.idLis = _data["idLis"];
            this.codeLis = _data["codeLis"];
            this.nameLis = _data["nameLis"];
            this.nameI = _data["nameI"];
        }
    }

    static fromJS(data: any): MapListMatched {
        data = typeof data === 'object' ? data : {};
        let result = new MapListMatched();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idIhdis"] = this.idIhdis;
        data["codeI"] = this.codeI;
        data["idLis"] = this.idLis;
        data["codeLis"] = this.codeLis;
        data["nameLis"] = this.nameLis;
        data["nameI"] = this.nameI;
        return data;
    }
}

/** 已经匹配列表视图 */
export interface IMapListMatched {
    /** 血透系统Id */
    idIhdis?: string | undefined;
    /** 血透系统Code */
    codeI?: string | undefined;
    /** 血透系统Id */
    idLis?: string | undefined;
    /** Lis系统Code */
    codeLis?: string | undefined;
    /** Lis系统化验名称 */
    nameLis?: string | undefined;
    /** 血透系统化验名称 */
    nameI?: string | undefined;
}

/** Reponse */
export class MapListMatchedResult implements IMapListMatchedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapListMatched[] | undefined;

    constructor(data?: IMapListMatchedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MapListMatched.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MapListMatchedResult {
        data = typeof data === 'object' ? data : {};
        let result = new MapListMatchedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IMapListMatchedResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: MapListMatched[] | undefined;
}

/** 菜单权限 */
export class MenuRightView implements IMenuRightView {
    /** 权限标识 */
    id?: string | undefined;
    /** 权限名称 */
    name?: string | undefined;
    /** 权限代码 */
    code?: string | undefined;
    /** 权限类型 */
    type?: number;

    constructor(data?: IMenuRightView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): MenuRightView {
        data = typeof data === 'object' ? data : {};
        let result = new MenuRightView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["type"] = this.type;
        return data;
    }
}

/** 菜单权限 */
export interface IMenuRightView {
    /** 权限标识 */
    id?: string | undefined;
    /** 权限名称 */
    name?: string | undefined;
    /** 权限代码 */
    code?: string | undefined;
    /** 权限类型 */
    type?: number;
}

/** 标签对应的描述 */
export class ModelTagView implements IModelTagView {
    /** 分类名称 */
    name?: string | undefined;
    /** 标签 */
    tags?: string[] | undefined;

    constructor(data?: IModelTagView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
        }
    }

    static fromJS(data: any): ModelTagView {
        data = typeof data === 'object' ? data : {};
        let result = new ModelTagView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        return data;
    }
}

/** 标签对应的描述 */
export interface IModelTagView {
    /** 分类名称 */
    name?: string | undefined;
    /** 标签 */
    tags?: string[] | undefined;
}

/** Reponse */
export class ModelTagViewResult implements IModelTagViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ModelTagView[] | undefined;

    constructor(data?: IModelTagViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ModelTagView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModelTagViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new ModelTagViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IModelTagViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: ModelTagView[] | undefined;
}

/** Reponse */
export class ObjectResult implements IObjectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: any[] | undefined;

    constructor(data?: IObjectResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
        }
    }

    static fromJS(data: any): ObjectResult {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        return data;
    }
}

/** Reponse */
export interface IObjectResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: any[] | undefined;
}

/** 患者透析信息 */
export class PatBloodInforBloodView implements IPatBloodInforBloodView {
    /** 血透患者ID唯一号 */
    reqno?: string | undefined;
    /** 本次血透的唯一号（同一病人每2-4天透析一次， 每次的唯一号） */
    samreqno?: string | undefined;
    /** 开始时间 */
    begtime?: string | undefined;
    /** 结束时间 */
    endtime?: string | undefined;
    /** 是否感染 */
    isgr?: string | undefined;
    /** 透析机号 */
    txjh?: string | undefined;
    /** 透析次数 */
    txcs?: number;
    /** 导管类型（长期，临时，内漏） */
    gglx?: string | undefined;
    /** 病人类型 */
    brlx?: string | undefined;

    constructor(data?: IPatBloodInforBloodView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reqno = _data["reqno"];
            this.samreqno = _data["samreqno"];
            this.begtime = _data["begtime"];
            this.endtime = _data["endtime"];
            this.isgr = _data["isgr"];
            this.txjh = _data["txjh"];
            this.txcs = _data["txcs"];
            this.gglx = _data["gglx"];
            this.brlx = _data["brlx"];
        }
    }

    static fromJS(data: any): PatBloodInforBloodView {
        data = typeof data === 'object' ? data : {};
        let result = new PatBloodInforBloodView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reqno"] = this.reqno;
        data["samreqno"] = this.samreqno;
        data["begtime"] = this.begtime;
        data["endtime"] = this.endtime;
        data["isgr"] = this.isgr;
        data["txjh"] = this.txjh;
        data["txcs"] = this.txcs;
        data["gglx"] = this.gglx;
        data["brlx"] = this.brlx;
        return data;
    }
}

/** 患者透析信息 */
export interface IPatBloodInforBloodView {
    /** 血透患者ID唯一号 */
    reqno?: string | undefined;
    /** 本次血透的唯一号（同一病人每2-4天透析一次， 每次的唯一号） */
    samreqno?: string | undefined;
    /** 开始时间 */
    begtime?: string | undefined;
    /** 结束时间 */
    endtime?: string | undefined;
    /** 是否感染 */
    isgr?: string | undefined;
    /** 透析机号 */
    txjh?: string | undefined;
    /** 透析次数 */
    txcs?: number;
    /** 导管类型（长期，临时，内漏） */
    gglx?: string | undefined;
    /** 病人类型 */
    brlx?: string | undefined;
}

/** Reponse */
export class PatBloodInforBloodViewResult implements IPatBloodInforBloodViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatBloodInforBloodView[] | undefined;

    constructor(data?: IPatBloodInforBloodViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatBloodInforBloodView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatBloodInforBloodViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatBloodInforBloodViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatBloodInforBloodViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatBloodInforBloodView[] | undefined;
}

/** 血透患者记录 */
export class PatInforBloodView implements IPatInforBloodView {
    /** 血透患者ID 唯一号 */
    reqno?: string | undefined;
    /** 姓名 */
    patname?: string | undefined;
    /** 性别 -- 患者性别，男、女 */
    sex?: string | undefined;
    /** 年龄 -- 患者年龄 */
    age?: number;
    /** 身份证号 */
    idNo?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 出生日期 */
    birthday?: string | undefined;
    /** 电话 */
    phones?: string | undefined;
    /** 状态 */
    state?: string | undefined;
    /** 删除标志 */
    del?: string | undefined;

    constructor(data?: IPatInforBloodView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reqno = _data["reqno"];
            this.patname = _data["patname"];
            this.sex = _data["sex"];
            this.age = _data["age"];
            this.idNo = _data["idNo"];
            this.address = _data["address"];
            this.birthday = _data["birthday"];
            this.phones = _data["phones"];
            this.state = _data["state"];
            this.del = _data["del"];
        }
    }

    static fromJS(data: any): PatInforBloodView {
        data = typeof data === 'object' ? data : {};
        let result = new PatInforBloodView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reqno"] = this.reqno;
        data["patname"] = this.patname;
        data["sex"] = this.sex;
        data["age"] = this.age;
        data["idNo"] = this.idNo;
        data["address"] = this.address;
        data["birthday"] = this.birthday;
        data["phones"] = this.phones;
        data["state"] = this.state;
        data["del"] = this.del;
        return data;
    }
}

/** 血透患者记录 */
export interface IPatInforBloodView {
    /** 血透患者ID 唯一号 */
    reqno?: string | undefined;
    /** 姓名 */
    patname?: string | undefined;
    /** 性别 -- 患者性别，男、女 */
    sex?: string | undefined;
    /** 年龄 -- 患者年龄 */
    age?: number;
    /** 身份证号 */
    idNo?: string | undefined;
    /** 地址 */
    address?: string | undefined;
    /** 出生日期 */
    birthday?: string | undefined;
    /** 电话 */
    phones?: string | undefined;
    /** 状态 */
    state?: string | undefined;
    /** 删除标志 */
    del?: string | undefined;
}

/** Reponse */
export class PatInforBloodViewResult implements IPatInforBloodViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatInforBloodView[] | undefined;

    constructor(data?: IPatInforBloodViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatInforBloodView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatInforBloodViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatInforBloodViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatInforBloodViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatInforBloodView[] | undefined;
}

/** 患者信息 */
export class Patient implements IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
    /** 附加照片路径 */
    photoAuxiliary?: string | undefined;

    constructor(data?: IPatient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.surnameCode = _data["surnameCode"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.photo = _data["photo"];
            this.face = _data["face"];
            this.gender = _data["gender"];
            this.source = _data["source"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.department = _data["department"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.archiveNumber = _data["archiveNumber"];
            this.medicareType = _data["medicareType"];
            this.medicareNumber = _data["medicareNumber"];
            this.medicalNumber = _data["medicalNumber"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.nationality = _data["nationality"];
            this.idType = _data["idType"];
            this.idNumber = _data["idNumber"];
            this.birthdate = _data["birthdate"] ? dayjs(_data["birthdate"].toString()) : <any>undefined;
            this.bloodType = _data["bloodType"];
            this.rh = _data["rh"];
            this.height = _data["height"];
            this.telephone = _data["telephone"];
            this.marital = _data["marital"];
            this.educationalLevel = _data["educationalLevel"];
            this.profession = _data["profession"];
            this.province = _data["province"];
            this.city = _data["city"];
            this.area = _data["area"];
            this.address = _data["address"];
            this.workUnit = _data["workUnit"];
            this.receiptDate = _data["receiptDate"] ? dayjs(_data["receiptDate"].toString()) : <any>undefined;
            this.dialysisState = _data["dialysisState"];
            this.dialysisStateTransition = _data["dialysisStateTransition"];
            this.dialysisDateFirst = _data["dialysisDateFirst"] ? dayjs(_data["dialysisDateFirst"].toString()) : <any>undefined;
            this.dialysisCountInit = _data["dialysisCountInit"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.prognosisState = _data["prognosisState"];
            this.positive = _data["positive"];
            this.complication = _data["complication"];
            this.doctor = _data["doctor"];
            this.nurse = _data["nurse"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisPathological = _data["diagnosisPathological"];
            this.diagnosisComplication = _data["diagnosisComplication"];
            this.diagnosisInfectiousDiseases = _data["diagnosisInfectiousDiseases"];
            this.diagnosisTumor = _data["diagnosisTumor"];
            this.diagnosisAllergy = _data["diagnosisAllergy"];
            this.remark = _data["remark"];
            this.initialSource = _data["initialSource"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.finger = _data["finger"];
            this.dossierNumber = _data["dossierNumber"];
            this.medicareCondition = _data["medicareCondition"];
            this.nextDate = _data["nextDate"] ? dayjs(_data["nextDate"].toString()) : <any>undefined;
            this.firstDialysisVascularAccess = _data["firstDialysisVascularAccess"];
            this.firstDialysisMode = _data["firstDialysisMode"];
            this.firstGfr = _data["firstGfr"];
            this.firstScr = _data["firstScr"];
            this.photoAuxiliary = _data["photoAuxiliary"];
        }
    }

    static fromJS(data: any): Patient {
        data = typeof data === 'object' ? data : {};
        let result = new Patient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["surnameCode"] = this.surnameCode;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["photo"] = this.photo;
        data["face"] = this.face;
        data["gender"] = this.gender;
        data["source"] = this.source;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["department"] = this.department;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["archiveNumber"] = this.archiveNumber;
        data["medicareType"] = this.medicareType;
        data["medicareNumber"] = this.medicareNumber;
        data["medicalNumber"] = this.medicalNumber;
        data["dialysisNumber"] = this.dialysisNumber;
        data["nationality"] = this.nationality;
        data["idType"] = this.idType;
        data["idNumber"] = this.idNumber;
        data["birthdate"] = this.birthdate ? this.birthdate.toLocaleString() : <any>undefined;
        data["bloodType"] = this.bloodType;
        data["rh"] = this.rh;
        data["height"] = this.height;
        data["telephone"] = this.telephone;
        data["marital"] = this.marital;
        data["educationalLevel"] = this.educationalLevel;
        data["profession"] = this.profession;
        data["province"] = this.province;
        data["city"] = this.city;
        data["area"] = this.area;
        data["address"] = this.address;
        data["workUnit"] = this.workUnit;
        data["receiptDate"] = this.receiptDate ? this.receiptDate.toLocaleString() : <any>undefined;
        data["dialysisState"] = this.dialysisState;
        data["dialysisStateTransition"] = this.dialysisStateTransition;
        data["dialysisDateFirst"] = this.dialysisDateFirst ? this.dialysisDateFirst.toLocaleString() : <any>undefined;
        data["dialysisCountInit"] = this.dialysisCountInit;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["prognosisState"] = this.prognosisState;
        data["positive"] = this.positive;
        data["complication"] = this.complication;
        data["doctor"] = this.doctor;
        data["nurse"] = this.nurse;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisPathological"] = this.diagnosisPathological;
        data["diagnosisComplication"] = this.diagnosisComplication;
        data["diagnosisInfectiousDiseases"] = this.diagnosisInfectiousDiseases;
        data["diagnosisTumor"] = this.diagnosisTumor;
        data["diagnosisAllergy"] = this.diagnosisAllergy;
        data["remark"] = this.remark;
        data["initialSource"] = this.initialSource;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["finger"] = this.finger;
        data["dossierNumber"] = this.dossierNumber;
        data["medicareCondition"] = this.medicareCondition;
        data["nextDate"] = this.nextDate ? this.nextDate.toLocaleString() : <any>undefined;
        data["firstDialysisVascularAccess"] = this.firstDialysisVascularAccess;
        data["firstDialysisMode"] = this.firstDialysisMode;
        data["firstGfr"] = this.firstGfr;
        data["firstScr"] = this.firstScr;
        data["photoAuxiliary"] = this.photoAuxiliary;
        return data;
    }
}

/** 患者信息 */
export interface IPatient {
    /** 标识 */
    id?: string | undefined;
    /** 姓名拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 姓名五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 姓首字母 */
    surnameCode?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 *用于患者重名,默认填姓名,系统内默认显示别名,打印单据使用姓名* */
    name2?: string | undefined;
    /** 照片路径 */
    photo?: string | undefined;
    /** 人脸识别图像 */
    face?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` *门诊,住院* */
    source?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 科室 */
    department?: string | undefined;
    /** 病区 */
    ward?: string | undefined;
    /** 床位 */
    bed?: string | undefined;
    /** 档案号 *XT{Year}{Month}{Sequence}* */
    archiveNumber?: string | undefined;
    /** 医保类型 `DIC.PEOPLE.MEDICARETYPE` *城镇职工,城镇居民* */
    medicareType?: string | undefined;
    /** 医保号 */
    medicareNumber?: string | undefined;
    /** 就诊卡号 */
    medicalNumber?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 民族 `DIC.PEOPLE.NATIONALITY` */
    nationality?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 出生日期 */
    birthdate?: dayjs.Dayjs | undefined;
    /** 血型 `DIC.PEOPLE.BLOODTYPE` *字典:A,B,O,未知* */
    bloodType?: string | undefined;
    /** RH `DIC.PEOPLE.RH` */
    rh?: string | undefined;
    /** 身高 *cm* */
    height?: number | undefined;
    /** 本人电话 */
    telephone?: string | undefined;
    /** 婚否 `DIC.PEOPLE.MARITAL` *未婚,已婚,离异,丧偶* */
    marital?: string | undefined;
    /** 文化程度 `DIC.PEOPLE.EDUCATIONALLEVEL` *博士,硕士,本科,大专,中专* */
    educationalLevel?: string | undefined;
    /** 职业 `DIC.PEOPLE.PROFESSION` *个体,工人,农民,学生* */
    profession?: string | undefined;
    /** 省级 */
    province?: string | undefined;
    /** 城市 */
    city?: string | undefined;
    /** 区县 */
    area?: string | undefined;
    /** 家庭住址 */
    address?: string | undefined;
    /** 工作单位 */
    workUnit?: string | undefined;
    /** 接收日期 *建档日期* */
    receiptDate?: dayjs.Dayjs | undefined;
    /** 透析状态 `DIC.PATIENT.DIALYSIS.STATE` *长期,临时* */
    dialysisState?: string | undefined;
    /** 透析状态是否转换 `DIC.PATIENT.DIALYSIS.STATE.TRANSITION` *0:未转换,1:已转换 编辑诊断-状态自动转换时管理这个状态* */
    dialysisStateTransition?: number;
    /** 首次透析日期 */
    dialysisDateFirst?: dayjs.Dayjs | undefined;
    /** 初始透析次数 */
    dialysisCountInit?: number | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 转归状态 `DIC.PROGNOSIS.TYPE` *患者编辑界面不做维护,自动管理* */
    prognosisState?: string | undefined;
    /** 传染病 `DIC.PATIENT.POSITIVE` *0:阴性,1:阳性 编辑诊断-传染病时管理这个状态* */
    positive?: number;
    /** 并发症 `DIC.PATIENT.COMPLICATION` *多选* */
    complication?: string | undefined;
    /** 主治医生 */
    doctor?: string | undefined;
    /** 主管护士 */
    nurse?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 病理诊断 *0:无,1:有* */
    diagnosisPathological?: number | undefined;
    /** 并发症诊断 *0:无,1:有* */
    diagnosisComplication?: number | undefined;
    /** 传染病诊断 *0:无,1:有* */
    diagnosisInfectiousDiseases?: number | undefined;
    /** 肿瘤诊断 *0:无,1:有* */
    diagnosisTumor?: number | undefined;
    /** 过敏诊断 *0:无,1:有* */
    diagnosisAllergy?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者数据初始化来源 *ihdis,his* */
    initialSource?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 指纹 */
    finger?: string | undefined;
    /** 病历夹号 */
    dossierNumber?: string | undefined;
    /** 病历夹号 `DIC.PATIENT.CONDITION` *一般,病重,病危* */
    medicareCondition?: string | undefined;
    /** 下次感筛检验日期 */
    nextDate?: dayjs.Dayjs | undefined;
    /** 首次透析时采用的通路类型 */
    firstDialysisVascularAccess?: string | undefined;
    /** 首次透析时采取的方式 */
    firstDialysisMode?: string | undefined;
    /** 首次肾脏代替治疗时肾功能 */
    firstGfr?: string | undefined;
    /** 首次肾脏代替治疗时血肌酐水平 */
    firstScr?: string | undefined;
    /** 附加照片路径 */
    photoAuxiliary?: string | undefined;
}

/** 透析评估 */
export class PatientAssementView implements IPatientAssementView {
    /** 标识 */
    id?: string | undefined;
    /** 评估时间 */
    date?: dayjs.Dayjs;
    /** 评估类型 */
    type?: string | undefined;
    /** 评估类型显示值 */
    typeLabel?: string | undefined;
    /** 表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 填表人 */
    preparer?: string | undefined;
    /** 创建人 */
    creater?: string | undefined;

    constructor(data?: IPatientAssementView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.preparer = _data["preparer"];
            this.creater = _data["creater"];
        }
    }

    static fromJS(data: any): PatientAssementView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAssementView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["preparer"] = this.preparer;
        data["creater"] = this.creater;
        return data;
    }
}

/** 透析评估 */
export interface IPatientAssementView {
    /** 标识 */
    id?: string | undefined;
    /** 评估时间 */
    date?: dayjs.Dayjs;
    /** 评估类型 */
    type?: string | undefined;
    /** 评估类型显示值 */
    typeLabel?: string | undefined;
    /** 表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 填表人 */
    preparer?: string | undefined;
    /** 创建人 */
    creater?: string | undefined;
}

/** Reponse */
export class PatientAssementViewResultEntry implements IPatientAssementViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientAssementView;

    constructor(data?: IPatientAssementViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PatientAssementView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientAssementViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PatientAssementViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPatientAssementViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PatientAssementView;
}

/** 患者信息批量查询/导出/打印 - 评估信息 */
export class PatientBatchAssementView implements IPatientBatchAssementView {
    /** 标识 */
    id?: string | undefined;
    /** 评估时间 */
    date?: dayjs.Dayjs;
    /** 评估类型 */
    type?: string | undefined;
    /** 评估类型显示值 */
    typeLabel?: string | undefined;
    /** 表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 填表人 */
    preparer?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别 */
    genderLabel?: string | undefined;
    /** 出生日期 */
    birthDate?: dayjs.Dayjs | undefined;
    /** 年龄 */
    age?: string | undefined;
    cureRecordId?: string | undefined;

    constructor(data?: IPatientBatchAssementView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
            if (_data["dataValue"]) {
                this.dataValue = {} as any;
                for (let key in _data["dataValue"]) {
                    if (_data["dataValue"].hasOwnProperty(key))
                        (<any>this.dataValue)![key] = _data["dataValue"][key];
                }
            }
            this.preparer = _data["preparer"];
            this.patientName = _data["patientName"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.birthDate = _data["birthDate"] ? dayjs(_data["birthDate"].toString()) : <any>undefined;
            this.age = _data["age"];
            this.cureRecordId = _data["cureRecordId"];
        }
    }

    static fromJS(data: any): PatientBatchAssementView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchAssementView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        if (this.dataValue) {
            data["dataValue"] = {};
            for (let key in this.dataValue) {
                if (this.dataValue.hasOwnProperty(key))
                    (<any>data["dataValue"])[key] = (<any>this.dataValue)[key];
            }
        }
        data["preparer"] = this.preparer;
        data["patientName"] = this.patientName;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["birthDate"] = this.birthDate ? this.birthDate.toLocaleString() : <any>undefined;
        data["age"] = this.age;
        data["cureRecordId"] = this.cureRecordId;
        return data;
    }
}

/** 患者信息批量查询/导出/打印 - 评估信息 */
export interface IPatientBatchAssementView {
    /** 标识 */
    id?: string | undefined;
    /** 评估时间 */
    date?: dayjs.Dayjs;
    /** 评估类型 */
    type?: string | undefined;
    /** 评估类型显示值 */
    typeLabel?: string | undefined;
    /** 表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 表单vaule */
    dataValue?: { [key: string]: string; } | undefined;
    /** 填表人 */
    preparer?: string | undefined;
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 性别 */
    gender?: string | undefined;
    /** 性别 */
    genderLabel?: string | undefined;
    /** 出生日期 */
    birthDate?: dayjs.Dayjs | undefined;
    /** 年龄 */
    age?: string | undefined;
    cureRecordId?: string | undefined;
}

/** Reponse */
export class PatientBatchAssementViewResult implements IPatientBatchAssementViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchAssementView[] | undefined;

    constructor(data?: IPatientBatchAssementViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBatchAssementView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBatchAssementViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchAssementViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBatchAssementViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchAssementView[] | undefined;
}

/** 患者信息批量查询/导出/打印 - 透析记录单 */
export class PatientBatchCureRecordView implements IPatientBatchCureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路)标识 */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    patientVascularAccessType?: string | undefined;
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 治疗状态 */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 治疗状态 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析器;灌流器 */
    txqNames?: string | undefined;
    /** 抗凝剂(抗凝剂+剂量) */
    knjNames?: string | undefined;
    /** 抗凝剂(剂量) */
    knjTotal?: string | undefined;
    /** ;
            血压 (透前,透后) */
    blutdruck?: string | undefined;
    /** ;
            血压 (透前,透后) */
    afterBlood?: string | undefined;
    /** 取消原因 */
    cancelReason?: string | undefined;
    /** ;
            透中事件 (时间:名称,处理内容) */
    tzEvents?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;

    constructor(data?: IPatientBatchCureRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sn = _data["sn"];
            this.patientId = _data["patientId"];
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftId = _data["shiftId"];
            this.shiftName = _data["shiftName"];
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedId = _data["bedId"];
            this.bedName = _data["bedName"];
            this.dialysisMode = _data["dialysisMode"];
            this.dialysisModeLabel = _data["dialysisModeLabel"];
            this.dialysisDurationSet = _data["dialysisDurationSet"];
            this.bestWeight = _data["bestWeight"];
            this.bloodFlowRate = _data["bloodFlowRate"];
            this.patientVascularAccessId = _data["patientVascularAccessId"];
            this.patientVascularAccessName = _data["patientVascularAccessName"];
            this.patientVascularAccessType = _data["patientVascularAccessType"];
            this.patientOtherVascularAccessId = _data["patientOtherVascularAccessId"];
            this.patientOtherVascularAccessName = _data["patientOtherVascularAccessName"];
            this.patientOtherVascularAccessType = _data["patientOtherVascularAccessType"];
            this.status = _data["status"];
            this.beforeWeight = _data["beforeWeight"];
            this.beforeWeightMode = _data["beforeWeightMode"];
            this.beforeWeightModeLabel = _data["beforeWeightModeLabel"];
            this.deductionWeight = _data["deductionWeight"];
            this.ufg = _data["ufg"];
            this.afterWeight = _data["afterWeight"];
            this.afterWeightMode = _data["afterWeightMode"];
            this.afterWeightModeLabel = _data["afterWeightModeLabel"];
            this.ufv = _data["ufv"];
            this.ufvWeight = _data["ufvWeight"];
            this.dialysisDurationFact = _data["dialysisDurationFact"];
            this.age = _data["age"];
            this.source = _data["source"];
            this.sourceLabel = _data["sourceLabel"];
            this.hospitalNumberOut = _data["hospitalNumberOut"];
            this.hospitalNumberIn = _data["hospitalNumberIn"];
            this.diagnosis = _data["diagnosis"];
            this.diagnosisLabel = _data["diagnosisLabel"];
            this.ward = _data["ward"];
            this.bed = _data["bed"];
            this.dialysisNumber = _data["dialysisNumber"];
            this.dialysisCountTotal = _data["dialysisCountTotal"];
            this.remark = _data["remark"];
            this.patientName = _data["patientName"];
            this.idNumber = _data["idNumber"];
            this.idType = _data["idType"];
            this.patientName2 = _data["patientName2"];
            this.patientNameFull = _data["patientNameFull"];
            this.patientPinyinCode = _data["patientPinyinCode"];
            this.patientWubiCode = _data["patientWubiCode"];
            this.gender = _data["gender"];
            this.genderLabel = _data["genderLabel"];
            this.statusLabel = _data["statusLabel"];
            this.dialysisAge = _data["dialysisAge"];
            this.txqNames = _data["txqNames"];
            this.knjNames = _data["knjNames"];
            this.knjTotal = _data["knjTotal"];
            this.blutdruck = _data["blutdruck"];
            this.afterBlood = _data["afterBlood"];
            this.cancelReason = _data["cancelReason"];
            this.tzEvents = _data["tzEvents"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.lastId = _data["lastId"];
            this.nextId = _data["nextId"];
        }
    }

    static fromJS(data: any): PatientBatchCureRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchCureRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sn"] = this.sn;
        data["patientId"] = this.patientId;
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["shiftId"] = this.shiftId;
        data["shiftName"] = this.shiftName;
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedId"] = this.bedId;
        data["bedName"] = this.bedName;
        data["dialysisMode"] = this.dialysisMode;
        data["dialysisModeLabel"] = this.dialysisModeLabel;
        data["dialysisDurationSet"] = this.dialysisDurationSet;
        data["bestWeight"] = this.bestWeight;
        data["bloodFlowRate"] = this.bloodFlowRate;
        data["patientVascularAccessId"] = this.patientVascularAccessId;
        data["patientVascularAccessName"] = this.patientVascularAccessName;
        data["patientVascularAccessType"] = this.patientVascularAccessType;
        data["patientOtherVascularAccessId"] = this.patientOtherVascularAccessId;
        data["patientOtherVascularAccessName"] = this.patientOtherVascularAccessName;
        data["patientOtherVascularAccessType"] = this.patientOtherVascularAccessType;
        data["status"] = this.status;
        data["beforeWeight"] = this.beforeWeight;
        data["beforeWeightMode"] = this.beforeWeightMode;
        data["beforeWeightModeLabel"] = this.beforeWeightModeLabel;
        data["deductionWeight"] = this.deductionWeight;
        data["ufg"] = this.ufg;
        data["afterWeight"] = this.afterWeight;
        data["afterWeightMode"] = this.afterWeightMode;
        data["afterWeightModeLabel"] = this.afterWeightModeLabel;
        data["ufv"] = this.ufv;
        data["ufvWeight"] = this.ufvWeight;
        data["dialysisDurationFact"] = this.dialysisDurationFact;
        data["age"] = this.age;
        data["source"] = this.source;
        data["sourceLabel"] = this.sourceLabel;
        data["hospitalNumberOut"] = this.hospitalNumberOut;
        data["hospitalNumberIn"] = this.hospitalNumberIn;
        data["diagnosis"] = this.diagnosis;
        data["diagnosisLabel"] = this.diagnosisLabel;
        data["ward"] = this.ward;
        data["bed"] = this.bed;
        data["dialysisNumber"] = this.dialysisNumber;
        data["dialysisCountTotal"] = this.dialysisCountTotal;
        data["remark"] = this.remark;
        data["patientName"] = this.patientName;
        data["idNumber"] = this.idNumber;
        data["idType"] = this.idType;
        data["patientName2"] = this.patientName2;
        data["patientNameFull"] = this.patientNameFull;
        data["patientPinyinCode"] = this.patientPinyinCode;
        data["patientWubiCode"] = this.patientWubiCode;
        data["gender"] = this.gender;
        data["genderLabel"] = this.genderLabel;
        data["statusLabel"] = this.statusLabel;
        data["dialysisAge"] = this.dialysisAge;
        data["txqNames"] = this.txqNames;
        data["knjNames"] = this.knjNames;
        data["knjTotal"] = this.knjTotal;
        data["blutdruck"] = this.blutdruck;
        data["afterBlood"] = this.afterBlood;
        data["cancelReason"] = this.cancelReason;
        data["tzEvents"] = this.tzEvents;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["lastId"] = this.lastId;
        data["nextId"] = this.nextId;
        return data;
    }
}

/** 患者信息批量查询/导出/打印 - 透析记录单 */
export interface IPatientBatchCureRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 透析编号 *20180101001 根据签到顺序生成* */
    sn?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftId?: string | undefined;
    /** 班次名称 */
    shiftName?: string | undefined;
    /** 透析区间 */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 床位 */
    bedId?: string | undefined;
    /** 床位名称 */
    bedName?: string | undefined;
    /** 透析方式 `DIC.DIALYSIS.MODE` *字典值* */
    dialysisMode?: string | undefined;
    /** 透析方式显示值 */
    dialysisModeLabel?: string | undefined;
    /** 设定的透析时长 *分钟* *默认240分钟* */
    dialysisDurationSet?: number;
    /** 干体重 *kg 从患者表读取,可以反写* */
    bestWeight?: number | undefined;
    /** 血流量 *ml/min* */
    bloodFlowRate?: number | undefined;
    /** [血管通路](患者血管通路)标识 */
    patientVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientVascularAccessName?: string | undefined;
    patientVascularAccessType?: string | undefined;
    patientOtherVascularAccessId?: string | undefined;
    /** 血管通路 */
    patientOtherVascularAccessName?: string | undefined;
    patientOtherVascularAccessType?: string | undefined;
    /** 治疗状态 */
    status?: string | undefined;
    /** 透前体重 *kg* */
    beforeWeight?: number | undefined;
    /** 透前体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    beforeWeightMode?: string | undefined;
    /** 透前体重方式显示值 */
    beforeWeightModeLabel?: string | undefined;
    /** 偏移量调整 *ml 透前-偏移-干体重=目标脱水量* */
    deductionWeight?: number | undefined;
    /** 目标脱水量 *ml Ultrafiltration Goal* */
    ufg?: number | undefined;
    /** 透后体重 *kg* */
    afterWeight?: number | undefined;
    /** 透后体重方式 `DIC.PATIENT.MEASURE.WEIGHT.MODE` *正常,轮椅,卧床* */
    afterWeightMode?: string | undefined;
    /** 透后体重方式显示值 */
    afterWeightModeLabel?: string | undefined;
    /** 实际脱水量 *ml Ultrafiltration Volume* */
    ufv?: number | undefined;
    /** 称重脱水量 *ml* */
    ufvWeight?: number | undefined;
    /** 实际透析时长 *分钟* */
    dialysisDurationFact?: number | undefined;
    /** 年龄 *根据出入日期生成* */
    age?: number | undefined;
    /** 来源 `DIC.PATIENT.SOURCE` */
    source?: string | undefined;
    /** 来源显示值 */
    sourceLabel?: string | undefined;
    /** 门诊号 */
    hospitalNumberOut?: string | undefined;
    /** 住院号 */
    hospitalNumberIn?: string | undefined;
    /** 诊断 `DIC.PATIENT.DIAGNOSIS` *多选* */
    diagnosis?: string | undefined;
    /** 诊断显示值 */
    diagnosisLabel?: string | undefined;
    /** 病区 *住院的* */
    ward?: string | undefined;
    /** 床位 *住院的* */
    bed?: string | undefined;
    /** 透析号 *透析病案号* */
    dialysisNumber?: string | undefined;
    /** 透析总次数 */
    dialysisCountTotal?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 患者名称 */
    patientName?: string | undefined;
    /** 证件号码 */
    idNumber?: string | undefined;
    /** 证件类型 `DIC.PEOPLE.IDTYPE` *身份证,居住证,签证,护照,军人证,团员证,党员证,港澳通行证,其他* */
    idType?: string | undefined;
    /** 患者别名 */
    patientName2?: string | undefined;
    /** 患者全名 */
    patientNameFull?: string | undefined;
    /** 患者姓名拼音码 */
    patientPinyinCode?: string | undefined;
    /** 患者姓名五笔码 */
    patientWubiCode?: string | undefined;
    /** 性别 `DIC.PEOPLE.GENDER` *1.男 2.女* */
    gender?: string | undefined;
    /** 性别显示值 */
    genderLabel?: string | undefined;
    /** 治疗状态 */
    statusLabel?: string | undefined;
    /** 透析龄 */
    dialysisAge?: string | undefined;
    /** 透析器;灌流器 */
    txqNames?: string | undefined;
    /** 抗凝剂(抗凝剂+剂量) */
    knjNames?: string | undefined;
    /** 抗凝剂(剂量) */
    knjTotal?: string | undefined;
    /** ;
            血压 (透前,透后) */
    blutdruck?: string | undefined;
    /** ;
            血压 (透前,透后) */
    afterBlood?: string | undefined;
    /** 取消原因 */
    cancelReason?: string | undefined;
    /** ;
            透中事件 (时间:名称,处理内容) */
    tzEvents?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 上一次透析标识 */
    lastId?: string | undefined;
    /** 下一次透析标识 */
    nextId?: string | undefined;
}

/** Reponse */
export class PatientBatchCureRecordViewResult implements IPatientBatchCureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchCureRecordView[] | undefined;

    constructor(data?: IPatientBatchCureRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientBatchCureRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientBatchCureRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientBatchCureRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientBatchCureRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientBatchCureRecordView[] | undefined;
}

/** 患者出库 */
export class PatientOutItemView implements IPatientOutItemView {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;

    constructor(data?: IPatientOutItemView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisDate = _data["dialysisDate"] ? dayjs(_data["dialysisDate"].toString()) : <any>undefined;
            this.shiftName = _data["shiftName"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.spec = _data["spec"];
            this.unitLevel1 = _data["unitLevel1"];
            this.conversionRate = _data["conversionRate"];
            this.count = _data["count"];
            this.unit = _data["unit"];
        }
    }

    static fromJS(data: any): PatientOutItemView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOutItemView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisDate"] = this.dialysisDate ? this.dialysisDate.toLocaleString() : <any>undefined;
        data["shiftName"] = this.shiftName;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["spec"] = this.spec;
        data["unitLevel1"] = this.unitLevel1;
        data["conversionRate"] = this.conversionRate;
        data["count"] = this.count;
        data["unit"] = this.unit;
        return data;
    }
}

/** 患者出库 */
export interface IPatientOutItemView {
    /** 透析日期 */
    dialysisDate?: dayjs.Dayjs;
    /** 班次 */
    shiftName?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 数量 */
    count?: number;
    /** 单位 */
    unit?: string | undefined;
}

/** Reponse */
export class PatientOutItemViewResult implements IPatientOutItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientOutItemView[] | undefined;

    constructor(data?: IPatientOutItemViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientOutItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientOutItemViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOutItemViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientOutItemViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientOutItemView[] | undefined;
}

/** 患者出库 */
export class PatientOutView implements IPatientOutView {
    /** 项目标识 */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 数量 */
    count?: number;

    constructor(data?: IPatientOutView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.spec = _data["spec"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PatientOutView {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOutView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["spec"] = this.spec;
        data["count"] = this.count;
        return data;
    }
}

/** 患者出库 */
export interface IPatientOutView {
    /** 项目标识 */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 数量 */
    count?: number;
}

/** Reponse */
export class PatientOutViewResult implements IPatientOutViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientOutView[] | undefined;

    constructor(data?: IPatientOutViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PatientOutView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PatientOutViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PatientOutViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPatientOutViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PatientOutView[] | undefined;
}

/** 患者血管通路 */
export class PatientVascularAccess implements IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;

    constructor(data?: IPatientVascularAccess) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.patientId = _data["patientId"];
            this.createDate = _data["createDate"] ? dayjs(_data["createDate"].toString()) : <any>undefined;
            this.change = _data["change"];
            this.changeDate = _data["changeDate"] ? dayjs(_data["changeDate"].toString()) : <any>undefined;
            this.changeCause = _data["changeCause"];
            this.changeCauseOther = _data["changeCauseOther"];
            this.location = _data["location"];
            this.type = _data["type"];
            this.position = _data["position"];
            this.way = _data["way"];
            this.remarkOther = _data["remarkOther"];
            this.firstDate = _data["firstDate"] ? dayjs(_data["firstDate"].toString()) : <any>undefined;
            this.default = _data["default"];
            this.disableDate = _data["disableDate"] ? dayjs(_data["disableDate"].toString()) : <any>undefined;
            this.disableReason = _data["disableReason"];
            this.lifetime = _data["lifetime"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.patients = _data["patients"] ? Patient.fromJS(_data["patients"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatientVascularAccess {
        data = typeof data === 'object' ? data : {};
        let result = new PatientVascularAccess();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["patientId"] = this.patientId;
        data["createDate"] = this.createDate ? this.createDate.toLocaleString() : <any>undefined;
        data["change"] = this.change;
        data["changeDate"] = this.changeDate ? this.changeDate.toLocaleString() : <any>undefined;
        data["changeCause"] = this.changeCause;
        data["changeCauseOther"] = this.changeCauseOther;
        data["location"] = this.location;
        data["type"] = this.type;
        data["position"] = this.position;
        data["way"] = this.way;
        data["remarkOther"] = this.remarkOther;
        data["firstDate"] = this.firstDate ? this.firstDate.toLocaleString() : <any>undefined;
        data["default"] = this.default;
        data["disableDate"] = this.disableDate ? this.disableDate.toLocaleString() : <any>undefined;
        data["disableReason"] = this.disableReason;
        data["lifetime"] = this.lifetime;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["patients"] = this.patients ? this.patients.toJSON() : <any>undefined;
        return data;
    }
}

/** 患者血管通路 */
export interface IPatientVascularAccess {
    /** 标识 */
    id?: string | undefined;
    /** [患者标识](患者信息) */
    patientId?: string | undefined;
    /** 建立日期 */
    createDate?: dayjs.Dayjs | undefined;
    /** 是否改变通路0,1 */
    change?: number | undefined;
    /** 改变日期 */
    changeDate?: dayjs.Dayjs | undefined;
    /** 改变原因 `DIC.VASCULAR.ACCESS.CHANGECAUSE` *可以多选,使用`;`分隔* */
    changeCause?: string | undefined;
    /** 其它改变原因 */
    changeCauseOther?: string | undefined;
    /** 位置(左-右) `DIC.VASCULAR.ACCESS.LOCATION` *左侧,右侧* */
    location?: string | undefined;
    /** 通路类型 `DIC.VASCULAR.ACCESS.TYPE` *LCVC,TCVC,AVF,AVG,OTHER* */
    type?: string | undefined;
    /** 位置 `DIC.VASCULAR.ACCESS.POSITION.CVC` `DIC.VASCULAR.ACCESS.POSITION.AVF` `DIC.VASCULAR.ACCESS.POSITION.AVG` */
    position?: string | undefined;
    /** 中心静脉置管方法 `DIC.VASCULAR.ACCESS.WAY.CVC` */
    way?: string | undefined;
    /** 其他描述 */
    remarkOther?: string | undefined;
    /** 首次启用时间 */
    firstDate?: dayjs.Dayjs | undefined;
    /** 默认在处方应用0,1 */
    default?: number | undefined;
    /** 停用时间 */
    disableDate?: dayjs.Dayjs | undefined;
    /** 停用原因 */
    disableReason?: string | undefined;
    /** 已用天数 */
    lifetime?: number | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    patients?: Patient;
}

/** 拼音五笔简码 */
export class PinyinWubiCodeView implements IPinyinWubiCodeView {
    /** 拼音简码 */
    pinyinCode?: string | undefined;
    /** 五笔简码 */
    wubiCode?: string | undefined;

    constructor(data?: IPinyinWubiCodeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
        }
    }

    static fromJS(data: any): PinyinWubiCodeView {
        data = typeof data === 'object' ? data : {};
        let result = new PinyinWubiCodeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        return data;
    }
}

/** 拼音五笔简码 */
export interface IPinyinWubiCodeView {
    /** 拼音简码 */
    pinyinCode?: string | undefined;
    /** 五笔简码 */
    wubiCode?: string | undefined;
}

/** Reponse */
export class PinyinWubiCodeViewResultEntry implements IPinyinWubiCodeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PinyinWubiCodeView;

    constructor(data?: IPinyinWubiCodeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PinyinWubiCodeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PinyinWubiCodeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PinyinWubiCodeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPinyinWubiCodeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PinyinWubiCodeView;
}

/** 转归报告分类 */
export class PrognosisFormType implements IPrognosisFormType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type?: number;
    /** 序列 */
    sequence?: number;
    /** 分类 */
    category?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPrognosisFormType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.sequence = _data["sequence"];
            this.category = _data["category"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PrognosisFormType {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisFormType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["type"] = this.type;
        data["sequence"] = this.sequence;
        data["category"] = this.category;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 转归报告分类 */
export interface IPrognosisFormType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type?: number;
    /** 序列 */
    sequence?: number;
    /** 分类 */
    category?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 转归报告分类 */
export class PrognosisFormTypeEditModel implements IPrognosisFormTypeEditModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code!: string;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type!: number;
    /** 分类 */
    category?: string | undefined;

    constructor(data?: IPrognosisFormTypeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.type = _data["type"];
            this.category = _data["category"];
        }
    }

    static fromJS(data: any): PrognosisFormTypeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisFormTypeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["type"] = this.type;
        data["category"] = this.category;
        return data;
    }
}

/** 转归报告分类 */
export interface IPrognosisFormTypeEditModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    code: string;
    /** 表单类型 0:自定义模板 1:话术模板 */
    type: number;
    /** 分类 */
    category?: string | undefined;
}

/** Reponse */
export class PrognosisFormTypeResult implements IPrognosisFormTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrognosisFormType[] | undefined;

    constructor(data?: IPrognosisFormTypeResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PrognosisFormType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PrognosisFormTypeResult {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisFormTypeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPrognosisFormTypeResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrognosisFormType[] | undefined;
}

/** Reponse */
export class PrognosisFormTypeResultEntry implements IPrognosisFormTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrognosisFormType;

    constructor(data?: IPrognosisFormTypeResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PrognosisFormType.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PrognosisFormTypeResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisFormTypeResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPrognosisFormTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrognosisFormType;
}

/** 转归报告模板 */
export class PrognosisTmplForm implements IPrognosisTmplForm {
    /** 标识 */
    id?: string | undefined;
    /** [转归报告分类标识](转归报告分类) */
    prognosisFormTypeId?: string | undefined;
    /** 表单名称 */
    name?: string | undefined;
    /** 版本 */
    version?: string | undefined;
    /** 表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 默认应用0,1 */
    default?: number;
    /** 已使用0,1 */
    used?: number;
    /** 系统内置0,1 *内置的不允许编辑/删除* */
    system?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    prognosisFormTypes?: PrognosisFormType;

    constructor(data?: IPrognosisTmplForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.prognosisFormTypeId = _data["prognosisFormTypeId"];
            this.name = _data["name"];
            this.version = _data["version"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
            this.default = _data["default"];
            this.used = _data["used"];
            this.system = _data["system"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.prognosisFormTypes = _data["prognosisFormTypes"] ? PrognosisFormType.fromJS(_data["prognosisFormTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PrognosisTmplForm {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["prognosisFormTypeId"] = this.prognosisFormTypeId;
        data["name"] = this.name;
        data["version"] = this.version;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        data["default"] = this.default;
        data["used"] = this.used;
        data["system"] = this.system;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["prognosisFormTypes"] = this.prognosisFormTypes ? this.prognosisFormTypes.toJSON() : <any>undefined;
        return data;
    }
}

/** 转归报告模板 */
export interface IPrognosisTmplForm {
    /** 标识 */
    id?: string | undefined;
    /** [转归报告分类标识](转归报告分类) */
    prognosisFormTypeId?: string | undefined;
    /** 表单名称 */
    name?: string | undefined;
    /** 版本 */
    version?: string | undefined;
    /** 表单结构 */
    data?: { [key: string]: string; } | undefined;
    /** 默认应用0,1 */
    default?: number;
    /** 已使用0,1 */
    used?: number;
    /** 系统内置0,1 *内置的不允许编辑/删除* */
    system?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    prognosisFormTypes?: PrognosisFormType;
}

export class PrognosisTmplFormDataEditModel implements IPrognosisTmplFormDataEditModel {
    /** 表单结构 */
    data!: { [key: string]: string; };

    constructor(data?: IPrognosisTmplFormDataEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = {};
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
        }
    }

    static fromJS(data: any): PrognosisTmplFormDataEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplFormDataEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        return data;
    }
}

export interface IPrognosisTmplFormDataEditModel {
    /** 表单结构 */
    data: { [key: string]: string; };
}

/** 转归报告模板 */
export class PrognosisTmplFormEditModel implements IPrognosisTmplFormEditModel {
    /** [转归报告分类标识](#转归报告分类) */
    prognosisFormTypeId!: string;
    /** 表单名称 */
    name!: string;
    /** 版本 */
    version!: string;
    /** 默认应用0,1 */
    default!: number;
    /** 启用状态0,1 */
    enabled!: number;

    constructor(data?: IPrognosisTmplFormEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prognosisFormTypeId = _data["prognosisFormTypeId"];
            this.name = _data["name"];
            this.version = _data["version"];
            this.default = _data["default"];
            this.enabled = _data["enabled"];
        }
    }

    static fromJS(data: any): PrognosisTmplFormEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplFormEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prognosisFormTypeId"] = this.prognosisFormTypeId;
        data["name"] = this.name;
        data["version"] = this.version;
        data["default"] = this.default;
        data["enabled"] = this.enabled;
        return data;
    }
}

/** 转归报告模板 */
export interface IPrognosisTmplFormEditModel {
    /** [转归报告分类标识](#转归报告分类) */
    prognosisFormTypeId: string;
    /** 表单名称 */
    name: string;
    /** 版本 */
    version: string;
    /** 默认应用0,1 */
    default: number;
    /** 启用状态0,1 */
    enabled: number;
}

/** Reponse */
export class PrognosisTmplFormResultEntry implements IPrognosisTmplFormResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrognosisTmplForm;

    constructor(data?: IPrognosisTmplFormResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PrognosisTmplForm.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PrognosisTmplFormResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplFormResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPrognosisTmplFormResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrognosisTmplForm;
}

/** 转归报告模板 */
export class PrognosisTmplFormView implements IPrognosisTmplFormView {
    /** [转归报告分类标识](#转归报告分类) */
    prognosisFormTypeId!: string;
    /** 表单名称 */
    name!: string;
    /** 版本 */
    version!: string;
    /** 默认应用0,1 */
    default!: number;
    /** 启用状态0,1 */
    enabled!: number;
    /** 标识 */
    id?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    prognosisFormTypeCode?: string | undefined;
    /** 已使用0,1 */
    used?: number;
    /** 系统内置0,1 *内置的不允许编辑/删除* */
    system?: number;
    /** 模板 */
    data?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IPrognosisTmplFormView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prognosisFormTypeId = _data["prognosisFormTypeId"];
            this.name = _data["name"];
            this.version = _data["version"];
            this.default = _data["default"];
            this.enabled = _data["enabled"];
            this.id = _data["id"];
            this.prognosisFormTypeCode = _data["prognosisFormTypeCode"];
            this.used = _data["used"];
            this.system = _data["system"];
            this.data = _data["data"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PrognosisTmplFormView {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplFormView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prognosisFormTypeId"] = this.prognosisFormTypeId;
        data["name"] = this.name;
        data["version"] = this.version;
        data["default"] = this.default;
        data["enabled"] = this.enabled;
        data["id"] = this.id;
        data["prognosisFormTypeCode"] = this.prognosisFormTypeCode;
        data["used"] = this.used;
        data["system"] = this.system;
        data["data"] = this.data;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 转归报告模板 */
export interface IPrognosisTmplFormView {
    /** [转归报告分类标识](#转归报告分类) */
    prognosisFormTypeId: string;
    /** 表单名称 */
    name: string;
    /** 版本 */
    version: string;
    /** 默认应用0,1 */
    default: number;
    /** 启用状态0,1 */
    enabled: number;
    /** 标识 */
    id?: string | undefined;
    /** 代码(用于字典检索) *○不允许重复,前缀继承父节点以点隔开* */
    prognosisFormTypeCode?: string | undefined;
    /** 已使用0,1 */
    used?: number;
    /** 系统内置0,1 *内置的不允许编辑/删除* */
    system?: number;
    /** 模板 */
    data?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class PrognosisTmplFormViewResult implements IPrognosisTmplFormViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrognosisTmplFormView[] | undefined;

    constructor(data?: IPrognosisTmplFormViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(PrognosisTmplFormView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PrognosisTmplFormViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplFormViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IPrognosisTmplFormViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: PrognosisTmplFormView[] | undefined;
}

/** Reponse */
export class PrognosisTmplFormViewResultEntry implements IPrognosisTmplFormViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrognosisTmplFormView;

    constructor(data?: IPrognosisTmplFormViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? PrognosisTmplFormView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PrognosisTmplFormViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new PrognosisTmplFormViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IPrognosisTmplFormViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: PrognosisTmplFormView;
}

/** 大屏详细信息 */
export class QueryScreentInfoDetailView implements IQueryScreentInfoDetailView {
    /** 编码 */
    code?: string | undefined;
    /** 序号 */
    sequence?: number;
    /** 屏幕名称 */
    name?: string | undefined;
    /** url地址 */
    url?: string | undefined;
    /** 归属透析室名称 */
    sysHospitalAreaName?: string | undefined;
    /** 归属透析室Id */
    sysHospitalAreaId?: string | undefined;

    constructor(data?: IQueryScreentInfoDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.sequence = _data["sequence"];
            this.name = _data["name"];
            this.url = _data["url"];
            this.sysHospitalAreaName = _data["sysHospitalAreaName"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
        }
    }

    static fromJS(data: any): QueryScreentInfoDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new QueryScreentInfoDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["sequence"] = this.sequence;
        data["name"] = this.name;
        data["url"] = this.url;
        data["sysHospitalAreaName"] = this.sysHospitalAreaName;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        return data;
    }
}

/** 大屏详细信息 */
export interface IQueryScreentInfoDetailView {
    /** 编码 */
    code?: string | undefined;
    /** 序号 */
    sequence?: number;
    /** 屏幕名称 */
    name?: string | undefined;
    /** url地址 */
    url?: string | undefined;
    /** 归属透析室名称 */
    sysHospitalAreaName?: string | undefined;
    /** 归属透析室Id */
    sysHospitalAreaId?: string | undefined;
}

/** 候诊大屏 */
export class QueryScreentInfoView implements IQueryScreentInfoView {
    /** 大屏详细信息列表 */
    lists?: QueryScreentInfoDetailView[] | undefined;
    /** 屏幕类型 */
    sysScreenTypeName?: string | undefined;

    constructor(data?: IQueryScreentInfoView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["lists"])) {
                this.lists = [] as any;
                for (let item of _data["lists"])
                    this.lists!.push(QueryScreentInfoDetailView.fromJS(item));
            }
            this.sysScreenTypeName = _data["sysScreenTypeName"];
        }
    }

    static fromJS(data: any): QueryScreentInfoView {
        data = typeof data === 'object' ? data : {};
        let result = new QueryScreentInfoView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lists)) {
            data["lists"] = [];
            for (let item of this.lists)
                data["lists"].push(item.toJSON());
        }
        data["sysScreenTypeName"] = this.sysScreenTypeName;
        return data;
    }
}

/** 候诊大屏 */
export interface IQueryScreentInfoView {
    /** 大屏详细信息列表 */
    lists?: QueryScreentInfoDetailView[] | undefined;
    /** 屏幕类型 */
    sysScreenTypeName?: string | undefined;
}

/** Reponse */
export class QueryScreentInfoViewResult implements IQueryScreentInfoViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QueryScreentInfoView[] | undefined;

    constructor(data?: IQueryScreentInfoViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(QueryScreentInfoView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QueryScreentInfoViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new QueryScreentInfoViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IQueryScreentInfoViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: QueryScreentInfoView[] | undefined;
}

/** 知识库-并发症 */
export class RepositoryComplication implements IRepositoryComplication {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryComplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.frequently = _data["frequently"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryComplication {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplication();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["frequently"] = this.frequently;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 知识库-并发症 */
export interface IRepositoryComplication {
    /** 标识 */
    id?: string | undefined;
    /** 名称 */
    name?: string | undefined;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class RepositoryComplicationCauseEditModel implements IRepositoryComplicationCauseEditModel {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId!: string;
    /** 名称 */
    name!: string;

    constructor(data?: IRepositoryComplicationCauseEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryComplicationId = _data["repositoryComplicationId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): RepositoryComplicationCauseEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationCauseEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryComplicationId"] = this.repositoryComplicationId;
        data["name"] = this.name;
        return data;
    }
}

export interface IRepositoryComplicationCauseEditModel {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId: string;
    /** 名称 */
    name: string;
}

export class RepositoryComplicationCauseView implements IRepositoryComplicationCauseView {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId!: string;
    /** 名称 */
    name!: string;
    /** 并发症名称 */
    repositoryComplicationName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryComplicationCauseView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryComplicationId = _data["repositoryComplicationId"];
            this.name = _data["name"];
            this.repositoryComplicationName = _data["repositoryComplicationName"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryComplicationCauseView {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationCauseView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryComplicationId"] = this.repositoryComplicationId;
        data["name"] = this.name;
        data["repositoryComplicationName"] = this.repositoryComplicationName;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IRepositoryComplicationCauseView {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId: string;
    /** 名称 */
    name: string;
    /** 并发症名称 */
    repositoryComplicationName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RepositoryComplicationCauseViewResult implements IRepositoryComplicationCauseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryComplicationCauseView[] | undefined;

    constructor(data?: IRepositoryComplicationCauseViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RepositoryComplicationCauseView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryComplicationCauseViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationCauseViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRepositoryComplicationCauseViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryComplicationCauseView[] | undefined;
}

/** Reponse */
export class RepositoryComplicationCauseViewResultEntry implements IRepositoryComplicationCauseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryComplicationCauseView;

    constructor(data?: IRepositoryComplicationCauseViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RepositoryComplicationCauseView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryComplicationCauseViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationCauseViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRepositoryComplicationCauseViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryComplicationCauseView;
}

export class RepositoryComplicationDisposeEditModel implements IRepositoryComplicationDisposeEditModel {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId!: string;
    /** 名称 */
    name!: string;
    /** 序列 */
    sequence?: number;

    constructor(data?: IRepositoryComplicationDisposeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryComplicationId = _data["repositoryComplicationId"];
            this.name = _data["name"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): RepositoryComplicationDisposeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationDisposeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryComplicationId"] = this.repositoryComplicationId;
        data["name"] = this.name;
        data["sequence"] = this.sequence;
        return data;
    }
}

export interface IRepositoryComplicationDisposeEditModel {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId: string;
    /** 名称 */
    name: string;
    /** 序列 */
    sequence?: number;
}

export class RepositoryComplicationDisposeView implements IRepositoryComplicationDisposeView {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId!: string;
    /** 名称 */
    name!: string;
    /** 序列 */
    sequence?: number;
    /** 并发症名称 */
    repositoryComplicationName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryComplicationDisposeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryComplicationId = _data["repositoryComplicationId"];
            this.name = _data["name"];
            this.sequence = _data["sequence"];
            this.repositoryComplicationName = _data["repositoryComplicationName"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryComplicationDisposeView {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationDisposeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryComplicationId"] = this.repositoryComplicationId;
        data["name"] = this.name;
        data["sequence"] = this.sequence;
        data["repositoryComplicationName"] = this.repositoryComplicationName;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IRepositoryComplicationDisposeView {
    /** [知识库-并发症标识](#知识库-并发症) */
    repositoryComplicationId: string;
    /** 名称 */
    name: string;
    /** 序列 */
    sequence?: number;
    /** 并发症名称 */
    repositoryComplicationName?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RepositoryComplicationDisposeViewResult implements IRepositoryComplicationDisposeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryComplicationDisposeView[] | undefined;

    constructor(data?: IRepositoryComplicationDisposeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RepositoryComplicationDisposeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryComplicationDisposeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationDisposeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRepositoryComplicationDisposeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryComplicationDisposeView[] | undefined;
}

/** Reponse */
export class RepositoryComplicationDisposeViewResultEntry implements IRepositoryComplicationDisposeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryComplicationDisposeView;

    constructor(data?: IRepositoryComplicationDisposeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RepositoryComplicationDisposeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryComplicationDisposeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationDisposeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRepositoryComplicationDisposeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryComplicationDisposeView;
}

/** Reponse */
export class RepositoryComplicationResult implements IRepositoryComplicationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryComplication[] | undefined;

    constructor(data?: IRepositoryComplicationResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RepositoryComplication.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryComplicationResult {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRepositoryComplicationResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryComplication[] | undefined;
}

/** Reponse */
export class RepositoryComplicationResultEntry implements IRepositoryComplicationResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryComplication;

    constructor(data?: IRepositoryComplicationResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RepositoryComplication.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryComplicationResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRepositoryComplicationResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryComplication;
}

/** 知识库-并发症 (ViewModel) */
export class RepositoryComplicationViewModel implements IRepositoryComplicationViewModel {
    /** 名称 */
    name!: string;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;

    constructor(data?: IRepositoryComplicationViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.frequently = _data["frequently"];
        }
    }

    static fromJS(data: any): RepositoryComplicationViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryComplicationViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["frequently"] = this.frequently;
        return data;
    }
}

/** 知识库-并发症 (ViewModel) */
export interface IRepositoryComplicationViewModel {
    /** 名称 */
    name: string;
    /** 是否常用 *0,1* */
    frequently?: number | undefined;
}

/** 宣教内容明细 */
export class RepositoryHealtheducationDetail implements IRepositoryHealtheducationDetail {
    /** 标识 */
    id?: string | undefined;
    /** [分类标识](宣教内容分类) */
    repositoryHealtheducationTypeId?: string | undefined;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name?: string | undefined;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type?: string | undefined;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    repositoryHealtheducationTypes?: RepositoryHealtheducationType;

    constructor(data?: IRepositoryHealtheducationDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.repositoryHealtheducationTypeId = _data["repositoryHealtheducationTypeId"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.duration = _data["duration"];
            this.sequence = _data["sequence"];
            this.source = _data["source"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.repositoryHealtheducationTypes = _data["repositoryHealtheducationTypes"] ? RepositoryHealtheducationType.fromJS(_data["repositoryHealtheducationTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetail {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["repositoryHealtheducationTypeId"] = this.repositoryHealtheducationTypeId;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["type"] = this.type;
        data["content"] = this.content;
        data["duration"] = this.duration;
        data["sequence"] = this.sequence;
        data["source"] = this.source;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["repositoryHealtheducationTypes"] = this.repositoryHealtheducationTypes ? this.repositoryHealtheducationTypes.toJSON() : <any>undefined;
        return data;
    }
}

/** 宣教内容明细 */
export interface IRepositoryHealtheducationDetail {
    /** 标识 */
    id?: string | undefined;
    /** [分类标识](宣教内容分类) */
    repositoryHealtheducationTypeId?: string | undefined;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name?: string | undefined;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type?: string | undefined;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    repositoryHealtheducationTypes?: RepositoryHealtheducationType;
}

export class RepositoryHealtheducationDetailEditModel implements IRepositoryHealtheducationDetailEditModel {
    /** [分类标识](#宣教内容分类) */
    repositoryHealtheducationTypeId!: string;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name!: string;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type!: string;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件路径集合 */
    urls?: RepositoryHealtheducationDetailEditModelItem[] | undefined;

    constructor(data?: IRepositoryHealtheducationDetailEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryHealtheducationTypeId = _data["repositoryHealtheducationTypeId"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.duration = _data["duration"];
            this.source = _data["source"];
            this.remark = _data["remark"];
            if (Array.isArray(_data["urls"])) {
                this.urls = [] as any;
                for (let item of _data["urls"])
                    this.urls!.push(RepositoryHealtheducationDetailEditModelItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryHealtheducationTypeId"] = this.repositoryHealtheducationTypeId;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["type"] = this.type;
        data["content"] = this.content;
        data["duration"] = this.duration;
        data["source"] = this.source;
        data["remark"] = this.remark;
        if (Array.isArray(this.urls)) {
            data["urls"] = [];
            for (let item of this.urls)
                data["urls"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRepositoryHealtheducationDetailEditModel {
    /** [分类标识](#宣教内容分类) */
    repositoryHealtheducationTypeId: string;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name: string;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type: string;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 文件路径集合 */
    urls?: RepositoryHealtheducationDetailEditModelItem[] | undefined;
}

export class RepositoryHealtheducationDetailEditModelItem implements IRepositoryHealtheducationDetailEditModelItem {
    /** url */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;

    constructor(data?: IRepositoryHealtheducationDetailEditModelItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailEditModelItem {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailEditModelItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["sequence"] = this.sequence;
        return data;
    }
}

export interface IRepositoryHealtheducationDetailEditModelItem {
    /** url */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;
}

/** 宣教内容明细附件 */
export class RepositoryHealtheducationDetailFile implements IRepositoryHealtheducationDetailFile {
    /** 标识 */
    id?: string | undefined;
    /** [宣教内容明细标识](宣教内容明细) */
    repositoryHealtheducationDetailId?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    repositoryHealtheducationDetails?: RepositoryHealtheducationDetail;

    constructor(data?: IRepositoryHealtheducationDetailFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.repositoryHealtheducationDetailId = _data["repositoryHealtheducationDetailId"];
            this.url = _data["url"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.repositoryHealtheducationDetails = _data["repositoryHealtheducationDetails"] ? RepositoryHealtheducationDetail.fromJS(_data["repositoryHealtheducationDetails"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailFile {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["repositoryHealtheducationDetailId"] = this.repositoryHealtheducationDetailId;
        data["url"] = this.url;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["repositoryHealtheducationDetails"] = this.repositoryHealtheducationDetails ? this.repositoryHealtheducationDetails.toJSON() : <any>undefined;
        return data;
    }
}

/** 宣教内容明细附件 */
export interface IRepositoryHealtheducationDetailFile {
    /** 标识 */
    id?: string | undefined;
    /** [宣教内容明细标识](宣教内容明细) */
    repositoryHealtheducationDetailId?: string | undefined;
    /** 文件路径 */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    repositoryHealtheducationDetails?: RepositoryHealtheducationDetail;
}

/** Reponse */
export class RepositoryHealtheducationDetailFileResult implements IRepositoryHealtheducationDetailFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryHealtheducationDetailFile[] | undefined;

    constructor(data?: IRepositoryHealtheducationDetailFileResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RepositoryHealtheducationDetailFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailFileResult {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailFileResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRepositoryHealtheducationDetailFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryHealtheducationDetailFile[] | undefined;
}

/** Reponse */
export class RepositoryHealtheducationDetailFileResultEntry implements IRepositoryHealtheducationDetailFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryHealtheducationDetailFile;

    constructor(data?: IRepositoryHealtheducationDetailFileResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RepositoryHealtheducationDetailFile.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailFileResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailFileResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRepositoryHealtheducationDetailFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryHealtheducationDetailFile;
}

/** 宣教内容明细附件 (ViewModel) */
export class RepositoryHealtheducationDetailFileViewModel implements IRepositoryHealtheducationDetailFileViewModel {
    /** [宣教内容明细标识](宣教内容明细Id) */
    repositoryHealtheducationDetailId!: string;
    /** 文件路径 */
    url!: string;

    constructor(data?: IRepositoryHealtheducationDetailFileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryHealtheducationDetailId = _data["repositoryHealtheducationDetailId"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailFileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailFileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryHealtheducationDetailId"] = this.repositoryHealtheducationDetailId;
        data["url"] = this.url;
        return data;
    }
}

/** 宣教内容明细附件 (ViewModel) */
export interface IRepositoryHealtheducationDetailFileViewModel {
    /** [宣教内容明细标识](宣教内容明细Id) */
    repositoryHealtheducationDetailId: string;
    /** 文件路径 */
    url: string;
}

export class RepositoryHealtheducationDetailView implements IRepositoryHealtheducationDetailView {
    /** [分类标识](#宣教内容分类) */
    repositoryHealtheducationTypeId!: string;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name!: string;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type!: string;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 宣教类型名称 */
    repositoryHealtheducationTypeName?: string | undefined;
    /** 宣教类型序列 */
    repositoryHealtheducationTypeSequence?: number;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 附件信息 */
    files?: RepositoryHealtheducationDetailViewItem[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryHealtheducationDetailView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.repositoryHealtheducationTypeId = _data["repositoryHealtheducationTypeId"];
            this.name = _data["name"];
            this.cover = _data["cover"];
            this.type = _data["type"];
            this.content = _data["content"];
            this.duration = _data["duration"];
            this.source = _data["source"];
            this.remark = _data["remark"];
            this.repositoryHealtheducationTypeName = _data["repositoryHealtheducationTypeName"];
            this.repositoryHealtheducationTypeSequence = _data["repositoryHealtheducationTypeSequence"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(RepositoryHealtheducationDetailViewItem.fromJS(item));
            }
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailView {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["repositoryHealtheducationTypeId"] = this.repositoryHealtheducationTypeId;
        data["name"] = this.name;
        data["cover"] = this.cover;
        data["type"] = this.type;
        data["content"] = this.content;
        data["duration"] = this.duration;
        data["source"] = this.source;
        data["remark"] = this.remark;
        data["repositoryHealtheducationTypeName"] = this.repositoryHealtheducationTypeName;
        data["repositoryHealtheducationTypeSequence"] = this.repositoryHealtheducationTypeSequence;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IRepositoryHealtheducationDetailView {
    /** [分类标识](#宣教内容分类) */
    repositoryHealtheducationTypeId: string;
    /** 名称 *○同一个`repository_healtheducation_type_id`下不允许重复* */
    name: string;
    /** 封面 *文件路径* */
    cover?: string | undefined;
    /** 类型 *视频,音频,PDF,图片,文本* */
    type: string;
    /** 内容 *文本类型是时使用* */
    content?: string | undefined;
    /** 时长 *单位：秒，视频/音频类型是时使用* */
    duration?: number | undefined;
    /** 来源 */
    source?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 宣教类型名称 */
    repositoryHealtheducationTypeName?: string | undefined;
    /** 宣教类型序列 */
    repositoryHealtheducationTypeSequence?: number;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 附件信息 */
    files?: RepositoryHealtheducationDetailViewItem[] | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class RepositoryHealtheducationDetailViewItem implements IRepositoryHealtheducationDetailViewItem {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;

    constructor(data?: IRepositoryHealtheducationDetailViewItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.extension = _data["extension"];
            this.length = _data["length"];
            this.path = _data["path"];
            this.url = _data["url"];
            this.sequence = _data["sequence"];
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailViewItem {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailViewItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["extension"] = this.extension;
        data["length"] = this.length;
        data["path"] = this.path;
        data["url"] = this.url;
        data["sequence"] = this.sequence;
        return data;
    }
}

export interface IRepositoryHealtheducationDetailViewItem {
    /** 标识 */
    id?: string | undefined;
    /** 原文件名 */
    name?: string | undefined;
    /** 扩展名 */
    extension?: string | undefined;
    /** 文件大小 *字节* */
    length?: number;
    /** 文件路径 */
    path?: string | undefined;
    /** url */
    url?: string | undefined;
    /** 序列 */
    sequence?: number;
}

/** Reponse */
export class RepositoryHealtheducationDetailViewResult implements IRepositoryHealtheducationDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryHealtheducationDetailView[] | undefined;

    constructor(data?: IRepositoryHealtheducationDetailViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RepositoryHealtheducationDetailView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRepositoryHealtheducationDetailViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryHealtheducationDetailView[] | undefined;
}

/** Reponse */
export class RepositoryHealtheducationDetailViewResultEntry implements IRepositoryHealtheducationDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryHealtheducationDetailView;

    constructor(data?: IRepositoryHealtheducationDetailViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RepositoryHealtheducationDetailView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationDetailViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationDetailViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRepositoryHealtheducationDetailViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryHealtheducationDetailView;
}

/** 宣教内容分类 */
export class RepositoryHealtheducationType implements IRepositoryHealtheducationType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 封面 *封面文件路径* */
    cover?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryHealtheducationType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.cover = _data["cover"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationType {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["cover"] = this.cover;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 宣教内容分类 */
export interface IRepositoryHealtheducationType {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 封面 *封面文件路径* */
    cover?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class RepositoryHealtheducationTypeEditModel implements IRepositoryHealtheducationTypeEditModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 封面 *封面文件路径* */
    cover?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRepositoryHealtheducationTypeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.cover = _data["cover"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RepositoryHealtheducationTypeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationTypeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["cover"] = this.cover;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IRepositoryHealtheducationTypeEditModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 封面 *封面文件路径* */
    cover?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

export class RepositoryHealtheducationTypeView implements IRepositoryHealtheducationTypeView {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 封面 *封面文件路径* */
    cover?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRepositoryHealtheducationTypeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.cover = _data["cover"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationTypeView {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationTypeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["cover"] = this.cover;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IRepositoryHealtheducationTypeView {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 封面 *封面文件路径* */
    cover?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RepositoryHealtheducationTypeViewResult implements IRepositoryHealtheducationTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryHealtheducationTypeView[] | undefined;

    constructor(data?: IRepositoryHealtheducationTypeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RepositoryHealtheducationTypeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RepositoryHealtheducationTypeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationTypeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRepositoryHealtheducationTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RepositoryHealtheducationTypeView[] | undefined;
}

/** Reponse */
export class RepositoryHealtheducationTypeViewResultEntry implements IRepositoryHealtheducationTypeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryHealtheducationTypeView;

    constructor(data?: IRepositoryHealtheducationTypeViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RepositoryHealtheducationTypeView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RepositoryHealtheducationTypeViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RepositoryHealtheducationTypeViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRepositoryHealtheducationTypeViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RepositoryHealtheducationTypeView;
}

/** Reponse */
export class Result implements IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.url = _data["url"];
            this.count = _data["count"];
            this.data = _data["data"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["url"] = this.url;
        data["count"] = this.count;
        data["data"] = this.data;
        return data;
    }
}

/** Reponse */
export interface IResult {
    /** 返回结果(true,false) */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 相关的链接地址 */
    url?: string | undefined;
    count?: number;
    /** 数据 */
    data?: any | undefined;
}

/** 角色菜单信息 */
export class RoleRightMenuListView implements IRoleRightMenuListView {
    /** 标识 */
    id?: string | undefined;
    /** 菜单名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 菜单编码 *示例：sys.user* *○同一个`parent_id`下不允许重复* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 访问路径 */
    url?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 显示 *0,1* */
    show?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 菜单权限 */
    rights?: MenuRightView[] | undefined;

    constructor(data?: IRoleRightMenuListView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.url = _data["url"];
            this.icon = _data["icon"];
            this.show = _data["show"];
            this.sequence = _data["sequence"];
            if (Array.isArray(_data["rights"])) {
                this.rights = [] as any;
                for (let item of _data["rights"])
                    this.rights!.push(MenuRightView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoleRightMenuListView {
        data = typeof data === 'object' ? data : {};
        let result = new RoleRightMenuListView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["url"] = this.url;
        data["icon"] = this.icon;
        data["show"] = this.show;
        data["sequence"] = this.sequence;
        if (Array.isArray(this.rights)) {
            data["rights"] = [];
            for (let item of this.rights)
                data["rights"].push(item.toJSON());
        }
        return data;
    }
}

/** 角色菜单信息 */
export interface IRoleRightMenuListView {
    /** 标识 */
    id?: string | undefined;
    /** 菜单名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 菜单编码 *示例：sys.user* *○同一个`parent_id`下不允许重复* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 访问路径 */
    url?: string | undefined;
    /** 图标 */
    icon?: string | undefined;
    /** 显示 *0,1* */
    show?: number | undefined;
    /** 序列 */
    sequence?: number;
    /** 菜单权限 */
    rights?: MenuRightView[] | undefined;
}

/** 账套分组 */
export class RoomAccountGroup implements IRoomAccountGroup {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomAccountGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomAccountGroup {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 账套分组 */
export interface IRoomAccountGroup {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 账套详细 */
export class RoomAccountGroupItem implements IRoomAccountGroupItem {
    /** 标识 */
    id?: string | undefined;
    /** [账套分组标识](账套分组) */
    roomAccountGroupId?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomAccountGroups?: RoomAccountGroup;
    roomItemLists?: RoomItemList;

    constructor(data?: IRoomAccountGroupItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.roomAccountGroupId = _data["roomAccountGroupId"];
            this.roomItemListId = _data["roomItemListId"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomAccountGroups = _data["roomAccountGroups"] ? RoomAccountGroup.fromJS(_data["roomAccountGroups"]) : <any>undefined;
            this.roomItemLists = _data["roomItemLists"] ? RoomItemList.fromJS(_data["roomItemLists"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomAccountGroupItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roomAccountGroupId"] = this.roomAccountGroupId;
        data["roomItemListId"] = this.roomItemListId;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["roomAccountGroups"] = this.roomAccountGroups ? this.roomAccountGroups.toJSON() : <any>undefined;
        data["roomItemLists"] = this.roomItemLists ? this.roomItemLists.toJSON() : <any>undefined;
        return data;
    }
}

/** 账套详细 */
export interface IRoomAccountGroupItem {
    /** 标识 */
    id?: string | undefined;
    /** [账套分组标识](账套分组) */
    roomAccountGroupId?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomAccountGroups?: RoomAccountGroup;
    roomItemLists?: RoomItemList;
}

/** Reponse */
export class RoomAccountGroupItemResult implements IRoomAccountGroupItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomAccountGroupItem[] | undefined;

    constructor(data?: IRoomAccountGroupItemResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomAccountGroupItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomAccountGroupItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomAccountGroupItemResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomAccountGroupItem[] | undefined;
}

/** Reponse */
export class RoomAccountGroupItemResultEntry implements IRoomAccountGroupItemResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomAccountGroupItem;

    constructor(data?: IRoomAccountGroupItemResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomAccountGroupItem.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomAccountGroupItemResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupItemResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomAccountGroupItemResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomAccountGroupItem;
}

/** 账套详细 (ViewModel) */
export class RoomAccountGroupItemViewModel implements IRoomAccountGroupItemViewModel {
    /** [账套分组标识](账套分组Id) */
    roomAccountGroupId!: string;
    /** [项目标识](项目清单Id) */
    roomItemListId!: string;

    constructor(data?: IRoomAccountGroupItemViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomAccountGroupId = _data["roomAccountGroupId"];
            this.roomItemListId = _data["roomItemListId"];
        }
    }

    static fromJS(data: any): RoomAccountGroupItemViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupItemViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomAccountGroupId"] = this.roomAccountGroupId;
        data["roomItemListId"] = this.roomItemListId;
        return data;
    }
}

/** 账套详细 (ViewModel) */
export interface IRoomAccountGroupItemViewModel {
    /** [账套分组标识](账套分组Id) */
    roomAccountGroupId: string;
    /** [项目标识](项目清单Id) */
    roomItemListId: string;
}

/** Reponse */
export class RoomAccountGroupResult implements IRoomAccountGroupResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomAccountGroup[] | undefined;

    constructor(data?: IRoomAccountGroupResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomAccountGroup.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomAccountGroupResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomAccountGroupResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomAccountGroup[] | undefined;
}

/** Reponse */
export class RoomAccountGroupResultEntry implements IRoomAccountGroupResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomAccountGroup;

    constructor(data?: IRoomAccountGroupResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomAccountGroup.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomAccountGroupResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomAccountGroupResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomAccountGroup;
}

/** 账套分组 (ViewModel) */
export class RoomAccountGroupViewModel implements IRoomAccountGroupViewModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRoomAccountGroupViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RoomAccountGroupViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomAccountGroupViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 账套分组 (ViewModel) */
export interface IRoomAccountGroupViewModel {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 备注 */
    remark?: string | undefined;
}

export class RoomEarlyWarningRecordView implements IRoomEarlyWarningRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 预警类型 *有效期预警,库存预警* */
    type?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 规格 *完整的项目规格* */
    fullSpec?: string | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
    /** 库存 */
    inventoryCount?: number;
    /** 库存预警标识 *0:↓,1:↑* */
    inventoryCountTag?: number;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 供应商 */
    suppler?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomEarlyWarningRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.roomItemListId = _data["roomItemListId"];
            this.roomItemListName = _data["roomItemListName"];
            this.fullSpec = _data["fullSpec"];
            this.expiryDate = _data["expiryDate"] ? dayjs(_data["expiryDate"].toString()) : <any>undefined;
            this.inventoryCount = _data["inventoryCount"];
            this.inventoryCountTag = _data["inventoryCountTag"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.batchNo = _data["batchNo"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomEarlyWarningRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomEarlyWarningRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["roomItemListId"] = this.roomItemListId;
        data["roomItemListName"] = this.roomItemListName;
        data["fullSpec"] = this.fullSpec;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toLocaleString() : <any>undefined;
        data["inventoryCount"] = this.inventoryCount;
        data["inventoryCountTag"] = this.inventoryCountTag;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["batchNo"] = this.batchNo;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IRoomEarlyWarningRecordView {
    /** 标识 */
    id?: string | undefined;
    /** 预警类型 *有效期预警,库存预警* */
    type?: string | undefined;
    /** [项目标识](项目清单) */
    roomItemListId?: string | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 规格 *完整的项目规格* */
    fullSpec?: string | undefined;
    /** 有效期 */
    expiryDate?: dayjs.Dayjs | undefined;
    /** 库存 */
    inventoryCount?: number;
    /** 库存预警标识 *0:↓,1:↑* */
    inventoryCountTag?: number;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 供应商 */
    suppler?: string | undefined;
    /** 批号 */
    batchNo?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomEarlyWarningRecordViewResult implements IRoomEarlyWarningRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomEarlyWarningRecordView[] | undefined;

    constructor(data?: IRoomEarlyWarningRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomEarlyWarningRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomEarlyWarningRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomEarlyWarningRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomEarlyWarningRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomEarlyWarningRecordView[] | undefined;
}

/** 项目清单 */
export class RoomItemList implements IRoomItemList {
    /** 标识 */
    id?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomItemTypes?: RoomItemType;

    constructor(data?: IRoomItemList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.roomItemTypeId = _data["roomItemTypeId"];
            this.name = _data["name"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.shortName = _data["shortName"];
            this.nameGoods = _data["nameGoods"];
            this.model = _data["model"];
            this.spec = _data["spec"];
            this.origin = _data["origin"];
            this.dealer = _data["dealer"];
            this.warningDay = _data["warningDay"];
            this.unitLevel1 = _data["unitLevel1"];
            this.unitBase = _data["unitBase"];
            this.conversionRate = _data["conversionRate"];
            this.sellingPrice = _data["sellingPrice"];
            this.batchManage = _data["batchManage"];
            this.afterCharge = _data["afterCharge"];
            this.inCharge = _data["inCharge"];
            this.costType = _data["costType"];
            this.deductionSource = _data["deductionSource"];
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
            this.usageMode = _data["usageMode"];
            this.manufacturer = _data["manufacturer"];
            this.suppler = _data["suppler"];
            this.inventory = _data["inventory"];
            this.enabled = _data["enabled"];
            this.commonTerms = _data["commonTerms"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemTypes = _data["roomItemTypes"] ? RoomItemType.fromJS(_data["roomItemTypes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemList {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roomItemTypeId"] = this.roomItemTypeId;
        data["name"] = this.name;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["shortName"] = this.shortName;
        data["nameGoods"] = this.nameGoods;
        data["model"] = this.model;
        data["spec"] = this.spec;
        data["origin"] = this.origin;
        data["dealer"] = this.dealer;
        data["warningDay"] = this.warningDay;
        data["unitLevel1"] = this.unitLevel1;
        data["unitBase"] = this.unitBase;
        data["conversionRate"] = this.conversionRate;
        data["sellingPrice"] = this.sellingPrice;
        data["batchManage"] = this.batchManage;
        data["afterCharge"] = this.afterCharge;
        data["inCharge"] = this.inCharge;
        data["costType"] = this.costType;
        data["deductionSource"] = this.deductionSource;
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        data["usageMode"] = this.usageMode;
        data["manufacturer"] = this.manufacturer;
        data["suppler"] = this.suppler;
        data["inventory"] = this.inventory;
        data["enabled"] = this.enabled;
        data["commonTerms"] = this.commonTerms;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["roomItemTypes"] = this.roomItemTypes ? this.roomItemTypes.toJSON() : <any>undefined;
        return data;
    }
}

/** 项目清单 */
export interface IRoomItemList {
    /** 标识 */
    id?: string | undefined;
    /** 种类 *[项目分类标识](项目分类)* */
    roomItemTypeId?: string | undefined;
    /** 项目名称 *○同一个`room_item_type_id`下不允许重复* */
    name?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 型号 */
    model?: string | undefined;
    /** 规格 *药品必填* *基本单位规格* *药品规格模板：10/ml（剂量/单位）* */
    spec?: string | undefined;
    /** 产地 */
    origin?: string | undefined;
    /** 经销商 */
    dealer?: string | undefined;
    /** 过期预警提醒(天) *0:不预警,离过期日期还有多少天* */
    warningDay?: number;
    /** 一级单位 `DIC.SYS.UNIT` *箱,盒* */
    unitLevel1?: string | undefined;
    /** 基本单位 `DIC.SYS.UNIT` *盒,支* */
    unitBase?: string | undefined;
    /** 换算率 *用于一级单位换算到基础单位，值>0* */
    conversionRate?: number;
    /** 售价 */
    sellingPrice?: number;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
    /** 是否后收费 *0:否,1:是* */
    afterCharge?: number | undefined;
    /** 是否进行收费 *0:否,1:是* */
    inCharge?: number | undefined;
    /** 收费统计分类 `DIC.COST.TYPE` */
    costType?: string | undefined;
    /** 扣减来源 *0:科室库存,1:个人药库* */
    deductionSource?: number;
    /** 库存上限预警阈值 */
    maximum?: number | undefined;
    /** 库存下限预警阈值 *0:不预警* */
    minimum?: number | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 生产厂家 `DIC.DEPT.MANUFACTURER` */
    manufacturer?: string | undefined;
    /** 供应商 `DIC.DEPT.SUPPLER` */
    suppler?: string | undefined;
    /** 是否库存扣减0,1 */
    inventory?: number;
    /** 启用状态0,1 */
    enabled?: number;
    /** 是否常用项 */
    commonTerms?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    roomItemTypes?: RoomItemType;
}

/** 项目库存 */
export class RoomItemListInventoryEditModel implements IRoomItemListInventoryEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 期初数量 */
    beginCount!: number;
    /** 库存数量 */
    inventoryCount!: number;
    /** 入库数量 */
    inCount!: number;
    /** 出库数量 */
    outCount!: number;
    /** 退库数量 */
    returnCount!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否编辑期初0,1 */
    edited!: number;
    /** 报损数量 */
    faultyCount!: number;

    constructor(data?: IRoomItemListInventoryEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.beginCount = _data["beginCount"];
            this.inventoryCount = _data["inventoryCount"];
            this.inCount = _data["inCount"];
            this.outCount = _data["outCount"];
            this.returnCount = _data["returnCount"];
            this.remark = _data["remark"];
            this.edited = _data["edited"];
            this.faultyCount = _data["faultyCount"];
        }
    }

    static fromJS(data: any): RoomItemListInventoryEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["beginCount"] = this.beginCount;
        data["inventoryCount"] = this.inventoryCount;
        data["inCount"] = this.inCount;
        data["outCount"] = this.outCount;
        data["returnCount"] = this.returnCount;
        data["remark"] = this.remark;
        data["edited"] = this.edited;
        data["faultyCount"] = this.faultyCount;
        return data;
    }
}

/** 项目库存 */
export interface IRoomItemListInventoryEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 期初数量 */
    beginCount: number;
    /** 库存数量 */
    inventoryCount: number;
    /** 入库数量 */
    inCount: number;
    /** 出库数量 */
    outCount: number;
    /** 退库数量 */
    returnCount: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否编辑期初0,1 */
    edited: number;
    /** 报损数量 */
    faultyCount: number;
}

/** 项目库存记录 */
export class RoomItemListInventoryRecordEditModel implements IRoomItemListInventoryRecordEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 库存数量 */
    inventoryCount!: number;

    constructor(data?: IRoomItemListInventoryRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.inventoryCount = _data["inventoryCount"];
        }
    }

    static fromJS(data: any): RoomItemListInventoryRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["inventoryCount"] = this.inventoryCount;
        return data;
    }
}

/** 项目库存记录 */
export interface IRoomItemListInventoryRecordEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 库存数量 */
    inventoryCount: number;
}

/** 项目库存记录 */
export class RoomItemListInventoryRecordView implements IRoomItemListInventoryRecordView {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 库存数量 */
    inventoryCount!: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomItemListInventoryRecordView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.inventoryCount = _data["inventoryCount"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemListInventoryRecordView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryRecordView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["inventoryCount"] = this.inventoryCount;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 项目库存记录 */
export interface IRoomItemListInventoryRecordView {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 日期 */
    date?: dayjs.Dayjs | undefined;
    /** 库存数量 */
    inventoryCount: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomItemListInventoryRecordViewResult implements IRoomItemListInventoryRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemListInventoryRecordView[] | undefined;

    constructor(data?: IRoomItemListInventoryRecordViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomItemListInventoryRecordView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomItemListInventoryRecordViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryRecordViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomItemListInventoryRecordViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemListInventoryRecordView[] | undefined;
}

/** Reponse */
export class RoomItemListInventoryRecordViewResultEntry implements IRoomItemListInventoryRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemListInventoryRecordView;

    constructor(data?: IRoomItemListInventoryRecordViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomItemListInventoryRecordView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemListInventoryRecordViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryRecordViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomItemListInventoryRecordViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemListInventoryRecordView;
}

/** 项目库存 */
export class RoomItemListInventoryView implements IRoomItemListInventoryView {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId!: string;
    /** 期初数量 */
    beginCount!: number;
    /** 库存数量 */
    inventoryCount!: number;
    /** 入库数量 */
    inCount!: number;
    /** 出库数量 */
    outCount!: number;
    /** 退库数量 */
    returnCount!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否编辑期初0,1 */
    edited!: number;
    /** 报损数量 */
    faultyCount!: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目规格 */
    spec?: string | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;

    constructor(data?: IRoomItemListInventoryView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.sysHospitalAreaId = _data["sysHospitalAreaId"];
            this.beginCount = _data["beginCount"];
            this.inventoryCount = _data["inventoryCount"];
            this.inCount = _data["inCount"];
            this.outCount = _data["outCount"];
            this.returnCount = _data["returnCount"];
            this.remark = _data["remark"];
            this.edited = _data["edited"];
            this.faultyCount = _data["faultyCount"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
            this.roomItemListName = _data["roomItemListName"];
            this.roomItemTypeName = _data["roomItemTypeName"];
            this.spec = _data["spec"];
            this.batchManage = _data["batchManage"];
        }
    }

    static fromJS(data: any): RoomItemListInventoryView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["sysHospitalAreaId"] = this.sysHospitalAreaId;
        data["beginCount"] = this.beginCount;
        data["inventoryCount"] = this.inventoryCount;
        data["inCount"] = this.inCount;
        data["outCount"] = this.outCount;
        data["returnCount"] = this.returnCount;
        data["remark"] = this.remark;
        data["edited"] = this.edited;
        data["faultyCount"] = this.faultyCount;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        data["roomItemListName"] = this.roomItemListName;
        data["roomItemTypeName"] = this.roomItemTypeName;
        data["spec"] = this.spec;
        data["batchManage"] = this.batchManage;
        return data;
    }
}

/** 项目库存 */
export interface IRoomItemListInventoryView {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** [使用科室](#透析室) */
    sysHospitalAreaId: string;
    /** 期初数量 */
    beginCount: number;
    /** 库存数量 */
    inventoryCount: number;
    /** 入库数量 */
    inCount: number;
    /** 出库数量 */
    outCount: number;
    /** 退库数量 */
    returnCount: number;
    /** 备注 */
    remark?: string | undefined;
    /** 是否编辑期初0,1 */
    edited: number;
    /** 报损数量 */
    faultyCount: number;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
    /** 项目名称 */
    roomItemListName?: string | undefined;
    /** 项目类型 */
    roomItemTypeName?: string | undefined;
    /** 项目规格 */
    spec?: string | undefined;
    /** 是否批号管理 *0:否,1:是* */
    batchManage?: number | undefined;
}

/** Reponse */
export class RoomItemListInventoryViewResult implements IRoomItemListInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemListInventoryView[] | undefined;

    constructor(data?: IRoomItemListInventoryViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomItemListInventoryView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomItemListInventoryViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemListInventoryViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomItemListInventoryViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemListInventoryView[] | undefined;
}

export class RoomItemPriceEditModel implements IRoomItemPriceEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 原售价 */
    sellingPriceFrom?: number | undefined;
    /** 改后售价 */
    sellingPriceTo?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRoomItemPriceEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.sellingPriceFrom = _data["sellingPriceFrom"];
            this.sellingPriceTo = _data["sellingPriceTo"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RoomItemPriceEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemPriceEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["sellingPriceFrom"] = this.sellingPriceFrom;
        data["sellingPriceTo"] = this.sellingPriceTo;
        data["remark"] = this.remark;
        return data;
    }
}

export interface IRoomItemPriceEditModel {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 原售价 */
    sellingPriceFrom?: number | undefined;
    /** 改后售价 */
    sellingPriceTo?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

export class RoomItemPriceView implements IRoomItemPriceView {
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 原售价 */
    sellingPriceFrom?: number | undefined;
    /** 改后售价 */
    sellingPriceTo?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 项目分类名称 */
    typeName?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    wubiCode?: string | undefined;

    constructor(data?: IRoomItemPriceView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemListId = _data["roomItemListId"];
            this.sellingPriceFrom = _data["sellingPriceFrom"];
            this.sellingPriceTo = _data["sellingPriceTo"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.typeName = _data["typeName"];
            this.name = _data["name"];
            this.nameGoods = _data["nameGoods"];
            this.shortName = _data["shortName"];
            this.usageMode = _data["usageMode"];
            this.usageModeLabel = _data["usageModeLabel"];
            this.spec = _data["spec"];
            this.specLabel = _data["specLabel"];
            this.manufacturer = _data["manufacturer"];
            this.manufacturerLabel = _data["manufacturerLabel"];
            this.unitBase = _data["unitBase"];
            this.unitBaseLabel = _data["unitBaseLabel"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
        }
    }

    static fromJS(data: any): RoomItemPriceView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemPriceView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemListId"] = this.roomItemListId;
        data["sellingPriceFrom"] = this.sellingPriceFrom;
        data["sellingPriceTo"] = this.sellingPriceTo;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["typeName"] = this.typeName;
        data["name"] = this.name;
        data["nameGoods"] = this.nameGoods;
        data["shortName"] = this.shortName;
        data["usageMode"] = this.usageMode;
        data["usageModeLabel"] = this.usageModeLabel;
        data["spec"] = this.spec;
        data["specLabel"] = this.specLabel;
        data["manufacturer"] = this.manufacturer;
        data["manufacturerLabel"] = this.manufacturerLabel;
        data["unitBase"] = this.unitBase;
        data["unitBaseLabel"] = this.unitBaseLabel;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        return data;
    }
}

export interface IRoomItemPriceView {
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 原售价 */
    sellingPriceFrom?: number | undefined;
    /** 改后售价 */
    sellingPriceTo?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 项目分类名称 */
    typeName?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 商品名 */
    nameGoods?: string | undefined;
    /** 简称 */
    shortName?: string | undefined;
    /** 给药方式 `DIC.DA.USAGEMODE` *静脉注射,静脉滴注,皮下注射,口服,封管* */
    usageMode?: string | undefined;
    /** 给药方式显示值 */
    usageModeLabel?: string | undefined;
    /** 规格 */
    spec?: string | undefined;
    /** 规格全称 */
    specLabel?: string | undefined;
    /** 生产厂家 */
    manufacturer?: string | undefined;
    /** 生产厂家显示值 */
    manufacturerLabel?: string | undefined;
    /** 基本单位 */
    unitBase?: string | undefined;
    /** 基本单位显示值 */
    unitBaseLabel?: string | undefined;
    /** 项目拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 项目五笔码 *首字母* */
    wubiCode?: string | undefined;
}

/** Reponse */
export class RoomItemPriceViewResult implements IRoomItemPriceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemPriceView[] | undefined;

    constructor(data?: IRoomItemPriceViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomItemPriceView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomItemPriceViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemPriceViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomItemPriceViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemPriceView[] | undefined;
}

/** Reponse */
export class RoomItemPriceViewResultEntry implements IRoomItemPriceViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemPriceView;

    constructor(data?: IRoomItemPriceViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomItemPriceView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemPriceViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemPriceViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomItemPriceViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemPriceView;
}

/** 项目分类 */
export class RoomItemType implements IRoomItemType {
    /** 标识 */
    id?: string | undefined;
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomItemType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.system = _data["system"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemType {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["system"] = this.system;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 项目分类 */
export interface IRoomItemType {
    /** 标识 */
    id?: string | undefined;
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

export class RoomItemTypeEditModel implements IRoomItemTypeEditModel {
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system!: number;

    constructor(data?: IRoomItemTypeEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.remark = _data["remark"];
            this.system = _data["system"];
        }
    }

    static fromJS(data: any): RoomItemTypeEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemTypeEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["remark"] = this.remark;
        data["system"] = this.system;
        return data;
    }
}

export interface IRoomItemTypeEditModel {
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system: number;
}

/** Reponse */
export class RoomItemTypeResultEntry implements IRoomItemTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemType;

    constructor(data?: IRoomItemTypeResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomItemType.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomItemTypeResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemTypeResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomItemTypeResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomItemType;
}

export class RoomItemTypeView implements IRoomItemTypeView {
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system!: number;
    /** 项目编码 */
    codeFull?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;

    constructor(data?: IRoomItemTypeView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.parentId = _data["parentId"];
            this.remark = _data["remark"];
            this.system = _data["system"];
            this.codeFull = _data["codeFull"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RoomItemTypeView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemTypeView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["parentId"] = this.parentId;
        data["remark"] = this.remark;
        data["system"] = this.system;
        data["codeFull"] = this.codeFull;
        data["id"] = this.id;
        return data;
    }
}

export interface IRoomItemTypeView {
    /** 项目名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 项目编码 *示例：consumable,consumable.dialyzer* *○同一个`parent_id`下不允许重复,前缀继承父节点以点隔开* */
    code: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 备注 *说明* */
    remark?: string | undefined;
    /** 系统内置0,1 */
    system: number;
    /** 项目编码 */
    codeFull?: string | undefined;
    /** 记录标识 */
    id?: string | undefined;
}

/** Reponse */
export class RoomItemTypeViewResult implements IRoomItemTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemTypeView[] | undefined;

    constructor(data?: IRoomItemTypeViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomItemTypeView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomItemTypeViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomItemTypeViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomItemTypeViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomItemTypeView[] | undefined;
}

/** 药品耗材生产厂家信息 */
export class RoomManufacturerEditModel implements IRoomManufacturerEditModel {
    /** 公司法定名称 *○不允许重复* */
    name!: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRoomManufacturerEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.address = _data["address"];
            this.linkman = _data["linkman"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RoomManufacturerEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomManufacturerEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["linkman"] = this.linkman;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        return data;
    }
}

/** 药品耗材生产厂家信息 */
export interface IRoomManufacturerEditModel {
    /** 公司法定名称 *○不允许重复* */
    name: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 药品耗材生产厂家信息 */
export class RoomManufacturerView implements IRoomManufacturerView {
    /** 公司法定名称 *○不允许重复* */
    name!: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 序列 */
    sequence!: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomManufacturerView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.address = _data["address"];
            this.linkman = _data["linkman"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomManufacturerView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomManufacturerView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["linkman"] = this.linkman;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 药品耗材生产厂家信息 */
export interface IRoomManufacturerView {
    /** 公司法定名称 *○不允许重复* */
    name: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 序列 */
    sequence: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomManufacturerViewResult implements IRoomManufacturerViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomManufacturerView[] | undefined;

    constructor(data?: IRoomManufacturerViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomManufacturerView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomManufacturerViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomManufacturerViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomManufacturerViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomManufacturerView[] | undefined;
}

/** Reponse */
export class RoomManufacturerViewResultEntry implements IRoomManufacturerViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomManufacturerView;

    constructor(data?: IRoomManufacturerViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomManufacturerView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomManufacturerViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomManufacturerViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomManufacturerViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomManufacturerView;
}

/** 盘库记录批次详细 */
export class RoomRecordInventoryItemBatchEditModel implements IRoomRecordInventoryItemBatchEditModel {
    /** [盘库记录详情标识](#盘库记录详细) */
    roomRecordInventoryItemId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 批号 */
    batchNo?: string | undefined;
    /** 数量 */
    count?: number | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRoomRecordInventoryItemBatchEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordInventoryItemId = _data["roomRecordInventoryItemId"];
            this.roomItemListId = _data["roomItemListId"];
            this.batchNo = _data["batchNo"];
            this.count = _data["count"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RoomRecordInventoryItemBatchEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInventoryItemBatchEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordInventoryItemId"] = this.roomRecordInventoryItemId;
        data["roomItemListId"] = this.roomItemListId;
        data["batchNo"] = this.batchNo;
        data["count"] = this.count;
        data["remark"] = this.remark;
        return data;
    }
}

/** 盘库记录批次详细 */
export interface IRoomRecordInventoryItemBatchEditModel {
    /** [盘库记录详情标识](#盘库记录详细) */
    roomRecordInventoryItemId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 批号 */
    batchNo?: string | undefined;
    /** 数量 */
    count?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 盘库记录批次详细 */
export class RoomRecordInventoryItemBatchView implements IRoomRecordInventoryItemBatchView {
    /** [盘库记录详情标识](#盘库记录详细) */
    roomRecordInventoryItemId!: string;
    /** [项目标识](#项目清单) */
    roomItemListId!: string;
    /** 批号 */
    batchNo?: string | undefined;
    /** 数量 */
    count?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomRecordInventoryItemBatchView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomRecordInventoryItemId = _data["roomRecordInventoryItemId"];
            this.roomItemListId = _data["roomItemListId"];
            this.batchNo = _data["batchNo"];
            this.count = _data["count"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordInventoryItemBatchView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInventoryItemBatchView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomRecordInventoryItemId"] = this.roomRecordInventoryItemId;
        data["roomItemListId"] = this.roomItemListId;
        data["batchNo"] = this.batchNo;
        data["count"] = this.count;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 盘库记录批次详细 */
export interface IRoomRecordInventoryItemBatchView {
    /** [盘库记录详情标识](#盘库记录详细) */
    roomRecordInventoryItemId: string;
    /** [项目标识](#项目清单) */
    roomItemListId: string;
    /** 批号 */
    batchNo?: string | undefined;
    /** 数量 */
    count?: number | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomRecordInventoryItemBatchViewResult implements IRoomRecordInventoryItemBatchViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordInventoryItemBatchView[] | undefined;

    constructor(data?: IRoomRecordInventoryItemBatchViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomRecordInventoryItemBatchView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordInventoryItemBatchViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInventoryItemBatchViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomRecordInventoryItemBatchViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomRecordInventoryItemBatchView[] | undefined;
}

/** Reponse */
export class RoomRecordInventoryItemBatchViewResultEntry implements IRoomRecordInventoryItemBatchViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordInventoryItemBatchView;

    constructor(data?: IRoomRecordInventoryItemBatchViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomRecordInventoryItemBatchView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomRecordInventoryItemBatchViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordInventoryItemBatchViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomRecordInventoryItemBatchViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomRecordInventoryItemBatchView;
}

/** 费用项目 */
export class RoomRecordItem implements IRoomRecordItem {
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单Id) */
    roomItemListId!: string;
    /** 耗材数量 */
    count!: number;
    /** 批号管理 */
    batchManage!: number;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 患者编号 */
    patientId?: string | undefined;
    /** 批次明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;

    constructor(data?: IRoomRecordItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roomItemTypeCode = _data["roomItemTypeCode"];
            this.roomItemListId = _data["roomItemListId"];
            this.count = _data["count"];
            this.batchManage = _data["batchManage"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.devBarCode = _data["devBarCode"];
            this.patientId = _data["patientId"];
            if (Array.isArray(_data["batchItems"])) {
                this.batchItems = [] as any;
                for (let item of _data["batchItems"])
                    this.batchItems!.push(CureRecordConsumableItemView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomRecordItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoomRecordItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomItemTypeCode"] = this.roomItemTypeCode;
        data["roomItemListId"] = this.roomItemListId;
        data["count"] = this.count;
        data["batchManage"] = this.batchManage;
        data["code"] = this.code;
        data["name"] = this.name;
        data["devBarCode"] = this.devBarCode;
        data["patientId"] = this.patientId;
        if (Array.isArray(this.batchItems)) {
            data["batchItems"] = [];
            for (let item of this.batchItems)
                data["batchItems"].push(item.toJSON());
        }
        return data;
    }
}

/** 费用项目 */
export interface IRoomRecordItem {
    /** 耗材分类代码 */
    roomItemTypeCode?: string | undefined;
    /** [耗材标识](项目清单Id) */
    roomItemListId: string;
    /** 耗材数量 */
    count: number;
    /** 批号管理 */
    batchManage: number;
    /** 编码 */
    code?: string | undefined;
    /** 项目名称 */
    name?: string | undefined;
    /** 耗材编码 */
    devBarCode?: string | undefined;
    /** 患者编号 */
    patientId?: string | undefined;
    /** 批次明细 */
    batchItems?: CureRecordConsumableItemView[] | undefined;
}

/** 供应商信息 */
export class RoomSupplierEditModel implements IRoomSupplierEditModel {
    /** 供应商名称 *○不允许重复* */
    name!: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 产品名称 */
    product?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRoomSupplierEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.address = _data["address"];
            this.product = _data["product"];
            this.linkman = _data["linkman"];
            this.positionContact = _data["positionContact"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RoomSupplierEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoomSupplierEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["product"] = this.product;
        data["linkman"] = this.linkman;
        data["positionContact"] = this.positionContact;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        return data;
    }
}

/** 供应商信息 */
export interface IRoomSupplierEditModel {
    /** 供应商名称 *○不允许重复* */
    name: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 产品名称 */
    product?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
}

/** 供应商信息 */
export class RoomSupplierView implements IRoomSupplierView {
    /** 供应商名称 *○不允许重复* */
    name!: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 产品名称 */
    product?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id!: string;
    /** 序列 */
    sequence!: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRoomSupplierView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.address = _data["address"];
            this.product = _data["product"];
            this.linkman = _data["linkman"];
            this.positionContact = _data["positionContact"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomSupplierView {
        data = typeof data === 'object' ? data : {};
        let result = new RoomSupplierView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["address"] = this.address;
        data["product"] = this.product;
        data["linkman"] = this.linkman;
        data["positionContact"] = this.positionContact;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 供应商信息 */
export interface IRoomSupplierView {
    /** 供应商名称 *○不允许重复* */
    name: string;
    /** 公司地址 */
    address?: string | undefined;
    /** 产品名称 */
    product?: string | undefined;
    /** 联系人 */
    linkman?: string | undefined;
    /** 联系人职务 */
    positionContact?: string | undefined;
    /** 联系电话 */
    phone?: string | undefined;
    /** 电子信箱 */
    email?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id: string;
    /** 序列 */
    sequence: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class RoomSupplierViewResult implements IRoomSupplierViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomSupplierView[] | undefined;

    constructor(data?: IRoomSupplierViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RoomSupplierView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomSupplierViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoomSupplierViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRoomSupplierViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RoomSupplierView[] | undefined;
}

/** Reponse */
export class RoomSupplierViewResultEntry implements IRoomSupplierViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomSupplierView;

    constructor(data?: IRoomSupplierViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RoomSupplierView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RoomSupplierViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RoomSupplierViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRoomSupplierViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RoomSupplierView;
}

/** 消息记录 */
export class RtmMessage implements IRtmMessage {
    /** 标识 */
    id?: string | undefined;
    /** sys|userId */
    from?: string | undefined;
    /** 标题 */
    title?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 消息类型 *NOTIFICATION/通知,TODO/待办,WARN/报警,WARN_EARLY/预警* */
    type?: string | undefined;
    /** 操作类型 *CHANGE_BED/换床,PRESCRIPTION_REFUSE/拒绝处方,PRESCRIPTION_AGAIN/修改处方* */
    operationType?: string | undefined;
    /** 操作参数 */
    operationParameters?: { [key: string]: string; } | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRtmMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.from = _data["from"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.type = _data["type"];
            this.operationType = _data["operationType"];
            if (_data["operationParameters"]) {
                this.operationParameters = {} as any;
                for (let key in _data["operationParameters"]) {
                    if (_data["operationParameters"].hasOwnProperty(key))
                        (<any>this.operationParameters)![key] = _data["operationParameters"][key];
                }
            }
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RtmMessage {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["from"] = this.from;
        data["title"] = this.title;
        data["content"] = this.content;
        data["type"] = this.type;
        data["operationType"] = this.operationType;
        if (this.operationParameters) {
            data["operationParameters"] = {};
            for (let key in this.operationParameters) {
                if (this.operationParameters.hasOwnProperty(key))
                    (<any>data["operationParameters"])[key] = (<any>this.operationParameters)[key];
            }
        }
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 消息记录 */
export interface IRtmMessage {
    /** 标识 */
    id?: string | undefined;
    /** sys|userId */
    from?: string | undefined;
    /** 标题 */
    title?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 消息类型 *NOTIFICATION/通知,TODO/待办,WARN/报警,WARN_EARLY/预警* */
    type?: string | undefined;
    /** 操作类型 *CHANGE_BED/换床,PRESCRIPTION_REFUSE/拒绝处方,PRESCRIPTION_AGAIN/修改处方* */
    operationType?: string | undefined;
    /** 操作参数 */
    operationParameters?: { [key: string]: string; } | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 消息附件 */
export class RtmMessageFile implements IRtmMessageFile {
    /** 标识 */
    id?: string | undefined;
    /** [消息标识](消息记录) */
    rtmMessageId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    rtmMessages?: RtmMessage;
    hfsFiless?: HfsFiles;

    constructor(data?: IRtmMessageFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.rtmMessageId = _data["rtmMessageId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.rtmMessages = _data["rtmMessages"] ? RtmMessage.fromJS(_data["rtmMessages"]) : <any>undefined;
            this.hfsFiless = _data["hfsFiless"] ? HfsFiles.fromJS(_data["hfsFiless"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RtmMessageFile {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["rtmMessageId"] = this.rtmMessageId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["rtmMessages"] = this.rtmMessages ? this.rtmMessages.toJSON() : <any>undefined;
        data["hfsFiless"] = this.hfsFiless ? this.hfsFiless.toJSON() : <any>undefined;
        return data;
    }
}

/** 消息附件 */
export interface IRtmMessageFile {
    /** 标识 */
    id?: string | undefined;
    /** [消息标识](消息记录) */
    rtmMessageId?: string | undefined;
    /** [文件标识](文件列表) */
    hfsFilesId?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    rtmMessages?: RtmMessage;
    hfsFiless?: HfsFiles;
}

/** Reponse */
export class RtmMessageFileResult implements IRtmMessageFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RtmMessageFile[] | undefined;

    constructor(data?: IRtmMessageFileResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RtmMessageFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RtmMessageFileResult {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageFileResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRtmMessageFileResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RtmMessageFile[] | undefined;
}

/** Reponse */
export class RtmMessageFileResultEntry implements IRtmMessageFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RtmMessageFile;

    constructor(data?: IRtmMessageFileResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RtmMessageFile.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RtmMessageFileResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageFileResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRtmMessageFileResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RtmMessageFile;
}

/** 消息附件 (ViewModel) */
export class RtmMessageFileViewModel implements IRtmMessageFileViewModel {
    /** [消息标识](消息记录Id) */
    rtmMessageId!: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId!: string;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: IRtmMessageFileViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rtmMessageId = _data["rtmMessageId"];
            this.hfsFilesId = _data["hfsFilesId"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): RtmMessageFileViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageFileViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtmMessageId"] = this.rtmMessageId;
        data["hfsFilesId"] = this.hfsFilesId;
        data["remark"] = this.remark;
        return data;
    }
}

/** 消息附件 (ViewModel) */
export interface IRtmMessageFileViewModel {
    /** [消息标识](消息记录Id) */
    rtmMessageId: string;
    /** [文件标识](文件列表Id) */
    hfsFilesId: string;
    /** 备注 */
    remark?: string | undefined;
}

export class RtmMessageView implements IRtmMessageView {
    /** 消息Id */
    id?: string | undefined;
    /** 发送者 */
    from?: string | undefined;
    /** 消息类型 NOTIFICATION/通知,TODO/待办,WARN/报警 */
    type?: string | undefined;
    /** 消息类型 NOTIFICATION/通知,TODO/待办,WARN/报警 */
    typeLabel?: string | undefined;
    /** 消息标题 */
    title?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 操作类型 *CHANGE_BED/换床,PRESCRIPTION_REFUSE/拒绝处方,PRESCRIPTION_AGAIN/修改处方* */
    operationType?: string | undefined;
    /** 操作参数 */
    operationParameters?: { [key: string]: string; } | undefined;
    /** 是否已读0,1 */
    hasRead?: number;
    /** 是否关注0,1 */
    focus?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: IRtmMessageView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.from = _data["from"];
            this.type = _data["type"];
            this.typeLabel = _data["typeLabel"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.operationType = _data["operationType"];
            if (_data["operationParameters"]) {
                this.operationParameters = {} as any;
                for (let key in _data["operationParameters"]) {
                    if (_data["operationParameters"].hasOwnProperty(key))
                        (<any>this.operationParameters)![key] = _data["operationParameters"][key];
                }
            }
            this.hasRead = _data["hasRead"];
            this.focus = _data["focus"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RtmMessageView {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["from"] = this.from;
        data["type"] = this.type;
        data["typeLabel"] = this.typeLabel;
        data["title"] = this.title;
        data["content"] = this.content;
        data["operationType"] = this.operationType;
        if (this.operationParameters) {
            data["operationParameters"] = {};
            for (let key in this.operationParameters) {
                if (this.operationParameters.hasOwnProperty(key))
                    (<any>data["operationParameters"])[key] = (<any>this.operationParameters)[key];
            }
        }
        data["hasRead"] = this.hasRead;
        data["focus"] = this.focus;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IRtmMessageView {
    /** 消息Id */
    id?: string | undefined;
    /** 发送者 */
    from?: string | undefined;
    /** 消息类型 NOTIFICATION/通知,TODO/待办,WARN/报警 */
    type?: string | undefined;
    /** 消息类型 NOTIFICATION/通知,TODO/待办,WARN/报警 */
    typeLabel?: string | undefined;
    /** 消息标题 */
    title?: string | undefined;
    /** 内容 */
    content?: string | undefined;
    /** 操作类型 *CHANGE_BED/换床,PRESCRIPTION_REFUSE/拒绝处方,PRESCRIPTION_AGAIN/修改处方* */
    operationType?: string | undefined;
    /** 操作参数 */
    operationParameters?: { [key: string]: string; } | undefined;
    /** 是否已读0,1 */
    hasRead?: number;
    /** 是否关注0,1 */
    focus?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 消息记录 (ViewModel) */
export class RtmMessageViewModel implements IRtmMessageViewModel {
    /** sys|userId */
    from!: string;
    /** 标题 */
    title!: string;
    /** 内容 */
    content!: string;
    /** 消息类型 *NOTIFICATION/通知,TODO/待办,WARN/报警,WARN_EARLY/预警* */
    type!: string;
    /** 操作类型 *CHANGE_BED/换床,PRESCRIPTION_REFUSE/拒绝处方,PRESCRIPTION_AGAIN/修改处方* */
    operationType?: string | undefined;
    /** 操作参数 */
    operationParameters?: { [key: string]: string; } | undefined;

    constructor(data?: IRtmMessageViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from = _data["from"];
            this.title = _data["title"];
            this.content = _data["content"];
            this.type = _data["type"];
            this.operationType = _data["operationType"];
            if (_data["operationParameters"]) {
                this.operationParameters = {} as any;
                for (let key in _data["operationParameters"]) {
                    if (_data["operationParameters"].hasOwnProperty(key))
                        (<any>this.operationParameters)![key] = _data["operationParameters"][key];
                }
            }
        }
    }

    static fromJS(data: any): RtmMessageViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from;
        data["title"] = this.title;
        data["content"] = this.content;
        data["type"] = this.type;
        data["operationType"] = this.operationType;
        if (this.operationParameters) {
            data["operationParameters"] = {};
            for (let key in this.operationParameters) {
                if (this.operationParameters.hasOwnProperty(key))
                    (<any>data["operationParameters"])[key] = (<any>this.operationParameters)[key];
            }
        }
        return data;
    }
}

/** 消息记录 (ViewModel) */
export interface IRtmMessageViewModel {
    /** sys|userId */
    from: string;
    /** 标题 */
    title: string;
    /** 内容 */
    content: string;
    /** 消息类型 *NOTIFICATION/通知,TODO/待办,WARN/报警,WARN_EARLY/预警* */
    type: string;
    /** 操作类型 *CHANGE_BED/换床,PRESCRIPTION_REFUSE/拒绝处方,PRESCRIPTION_AGAIN/修改处方* */
    operationType?: string | undefined;
    /** 操作参数 */
    operationParameters?: { [key: string]: string; } | undefined;
}

/** Reponse */
export class RtmMessageViewResult implements IRtmMessageViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RtmMessageView[] | undefined;

    constructor(data?: IRtmMessageViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RtmMessageView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RtmMessageViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface IRtmMessageViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: RtmMessageView[] | undefined;
}

/** Reponse */
export class RtmMessageViewResultEntry implements IRtmMessageViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RtmMessageView;

    constructor(data?: IRtmMessageViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? RtmMessageView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RtmMessageViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new RtmMessageViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface IRtmMessageViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: RtmMessageView;
}

export class ScheduleCopyEditModel implements IScheduleCopyEditModel {
    from!: ScheduleCopyItem;
    to!: ScheduleCopyItem;

    constructor(data?: IScheduleCopyEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.from = new ScheduleCopyItem();
            this.to = new ScheduleCopyItem();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from = _data["from"] ? ScheduleCopyItem.fromJS(_data["from"]) : new ScheduleCopyItem();
            this.to = _data["to"] ? ScheduleCopyItem.fromJS(_data["to"]) : new ScheduleCopyItem();
        }
    }

    static fromJS(data: any): ScheduleCopyEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleCopyEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from ? this.from.toJSON() : <any>undefined;
        data["to"] = this.to ? this.to.toJSON() : <any>undefined;
        return data;
    }
}

export interface IScheduleCopyEditModel {
    from: ScheduleCopyItem;
    to: ScheduleCopyItem;
}

export class ScheduleCopyItem implements IScheduleCopyItem {
    /** 用户ID */
    userId!: string;
    /** 日期 */
    date!: dayjs.Dayjs;

    constructor(data?: IScheduleCopyItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ScheduleCopyItem {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleCopyItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        return data;
    }
}

export interface IScheduleCopyItem {
    /** 用户ID */
    userId: string;
    /** 日期 */
    date: dayjs.Dayjs;
}

export class ScheduleSyncEditModel implements IScheduleSyncEditModel {
    /** From (eg. 2018/11/26~2018/12/02) */
    from!: string;
    /** To (eg. 2018/11/26~2018/12/02) */
    to!: string;

    constructor(data?: IScheduleSyncEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from = _data["from"];
            this.to = _data["to"];
        }
    }

    static fromJS(data: any): ScheduleSyncEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleSyncEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from;
        data["to"] = this.to;
        return data;
    }
}

export interface IScheduleSyncEditModel {
    /** From (eg. 2018/11/26~2018/12/02) */
    from: string;
    /** To (eg. 2018/11/26~2018/12/02) */
    to: string;
}

/** Reponse */
export class StringResult implements IStringResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: string[] | undefined;

    constructor(data?: IStringResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
        }
    }

    static fromJS(data: any): StringResult {
        data = typeof data === 'object' ? data : {};
        let result = new StringResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        return data;
    }
}

/** Reponse */
export interface IStringResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: string[] | undefined;
}

/** 自定义表单数据 */
export class SysFormValueView implements ISysFormValueView {
    /** 名称 */
    name?: string | undefined;
    /** 键 */
    key?: string | undefined;
    /** 值 */
    value?: any | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 是否在透析记录单显示0,1 *只在透析记录单中评估内容自动生成场景下生效* */
    cureRecordShow?: number;

    constructor(data?: ISysFormValueView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.key = _data["key"];
            this.value = _data["value"];
            this.unit = _data["unit"];
            this.cureRecordShow = _data["cureRecordShow"];
        }
    }

    static fromJS(data: any): SysFormValueView {
        data = typeof data === 'object' ? data : {};
        let result = new SysFormValueView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["key"] = this.key;
        data["value"] = this.value;
        data["unit"] = this.unit;
        data["cureRecordShow"] = this.cureRecordShow;
        return data;
    }
}

/** 自定义表单数据 */
export interface ISysFormValueView {
    /** 名称 */
    name?: string | undefined;
    /** 键 */
    key?: string | undefined;
    /** 值 */
    value?: any | undefined;
    /** 单位 */
    unit?: string | undefined;
    /** 是否在透析记录单显示0,1 *只在透析记录单中评估内容自动生成场景下生效* */
    cureRecordShow?: number;
}

/** 透析室 */
export class SysHospitalArea implements ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospitalArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.sequence = _data["sequence"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalArea {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["sequence"] = this.sequence;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 透析室 */
export interface ISysHospitalArea {
    /** 标识 */
    id?: string | undefined;
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name?: string | undefined;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId?: string | undefined;
    /** 序列 */
    sequence?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 院区 */
export class SysHospitalAreaView implements ISysHospitalAreaView {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name!: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId!: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled!: number;
    /** 标识 */
    id!: string;
    /** 序列 */
    sequence!: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysHospitalAreaView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.remark = _data["remark"];
            this.enabled = _data["enabled"];
            this.id = _data["id"];
            this.sequence = _data["sequence"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysHospitalAreaView {
        data = typeof data === 'object' ? data : {};
        let result = new SysHospitalAreaView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["remark"] = this.remark;
        data["enabled"] = this.enabled;
        data["id"] = this.id;
        data["sequence"] = this.sequence;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 院区 */
export interface ISysHospitalAreaView {
    /** 名称 *○同一个`parent_id`下不允许重复* */
    name: string;
    /** 父节点 *根节点填 0 ,否则为父节点ID* */
    parentId: string;
    /** 备注 */
    remark?: string | undefined;
    /** 启用状态0,1 */
    enabled: number;
    /** 标识 */
    id: string;
    /** 序列 */
    sequence: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 菜单外链 */
export class SysMenuExternalLinkEditModel implements ISysMenuExternalLinkEditModel {
    /** 名称 *不允许重复* */
    name!: string;
    /** 编码 *不允许重复* */
    code!: string;
    /** 链接地址 */
    link?: string | undefined;
    /** 描述 */
    description?: string | undefined;
    /** 备注 */
    remark?: string | undefined;

    constructor(data?: ISysMenuExternalLinkEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.link = _data["link"];
            this.description = _data["description"];
            this.remark = _data["remark"];
        }
    }

    static fromJS(data: any): SysMenuExternalLinkEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new SysMenuExternalLinkEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["link"] = this.link;
        data["description"] = this.description;
        data["remark"] = this.remark;
        return data;
    }
}

/** 菜单外链 */
export interface ISysMenuExternalLinkEditModel {
    /** 名称 *不允许重复* */
    name: string;
    /** 编码 *不允许重复* */
    code: string;
    /** 链接地址 */
    link?: string | undefined;
    /** 描述 */
    description?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
}

/** 菜单外链 */
export class SysMenuExternalLinkView implements ISysMenuExternalLinkView {
    /** 名称 *不允许重复* */
    name!: string;
    /** 编码 *不允许重复* */
    code!: string;
    /** 链接地址 */
    link?: string | undefined;
    /** 描述 */
    description?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysMenuExternalLinkView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.link = _data["link"];
            this.description = _data["description"];
            this.remark = _data["remark"];
            this.id = _data["id"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysMenuExternalLinkView {
        data = typeof data === 'object' ? data : {};
        let result = new SysMenuExternalLinkView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["link"] = this.link;
        data["description"] = this.description;
        data["remark"] = this.remark;
        data["id"] = this.id;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 菜单外链 */
export interface ISysMenuExternalLinkView {
    /** 名称 *不允许重复* */
    name: string;
    /** 编码 *不允许重复* */
    code: string;
    /** 链接地址 */
    link?: string | undefined;
    /** 描述 */
    description?: string | undefined;
    /** 备注 */
    remark?: string | undefined;
    /** 标识 */
    id?: string | undefined;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** Reponse */
export class SysMenuExternalLinkViewResult implements ISysMenuExternalLinkViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysMenuExternalLinkView[] | undefined;

    constructor(data?: ISysMenuExternalLinkViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SysMenuExternalLinkView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SysMenuExternalLinkViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new SysMenuExternalLinkViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ISysMenuExternalLinkViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: SysMenuExternalLinkView[] | undefined;
}

/** Reponse */
export class SysMenuExternalLinkViewResultEntry implements ISysMenuExternalLinkViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysMenuExternalLinkView;

    constructor(data?: ISysMenuExternalLinkViewResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? SysMenuExternalLinkView.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysMenuExternalLinkViewResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new SysMenuExternalLinkViewResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ISysMenuExternalLinkViewResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: SysMenuExternalLinkView;
}

/** 用户信息 */
export class SysUser implements ISysUser {
    /** 标识 */
    id?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 密码 */
    pwd?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;

    constructor(data?: ISysUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobNumber = _data["jobNumber"];
            this.loginName = _data["loginName"];
            this.pwd = _data["pwd"];
            this.name = _data["name"];
            this.name2 = _data["name2"];
            this.pinyinCode = _data["pinyinCode"];
            this.wubiCode = _data["wubiCode"];
            this.tel = _data["tel"];
            this.enabled = _data["enabled"];
            this.remark = _data["remark"];
            this.deleted = _data["deleted"];
            this.creater = _data["creater"];
            this.createId = _data["createId"];
            this.createTime = _data["createTime"] ? dayjs(_data["createTime"].toString()) : <any>undefined;
            this.updater = _data["updater"];
            this.updateId = _data["updateId"];
            this.updateTime = _data["updateTime"] ? dayjs(_data["updateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SysUser {
        data = typeof data === 'object' ? data : {};
        let result = new SysUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobNumber"] = this.jobNumber;
        data["loginName"] = this.loginName;
        data["pwd"] = this.pwd;
        data["name"] = this.name;
        data["name2"] = this.name2;
        data["pinyinCode"] = this.pinyinCode;
        data["wubiCode"] = this.wubiCode;
        data["tel"] = this.tel;
        data["enabled"] = this.enabled;
        data["remark"] = this.remark;
        data["deleted"] = this.deleted;
        data["creater"] = this.creater;
        data["createId"] = this.createId;
        data["createTime"] = this.createTime ? this.createTime.toLocaleString() : <any>undefined;
        data["updater"] = this.updater;
        data["updateId"] = this.updateId;
        data["updateTime"] = this.updateTime ? this.updateTime.toLocaleString() : <any>undefined;
        return data;
    }
}

/** 用户信息 */
export interface ISysUser {
    /** 标识 */
    id?: string | undefined;
    /** 工号 *○不等于空时不允许重复* */
    jobNumber?: string | undefined;
    /** 登录名 *可以与工号同时使用* *○不允许重复* */
    loginName?: string | undefined;
    /** 密码 */
    pwd?: string | undefined;
    /** 姓名 *○如果有重名需要填写别名* */
    name?: string | undefined;
    /** 别名 */
    name2?: string | undefined;
    /** 拼音码 *首字母* */
    pinyinCode?: string | undefined;
    /** 五笔码 *首字母* */
    wubiCode?: string | undefined;
    /** 电话 */
    tel?: string | undefined;
    /** 启用0,1 */
    enabled?: number;
    /** 备注 */
    remark?: string | undefined;
    /** 删除状态0,1 */
    deleted?: number;
    /** 创建者 */
    creater?: string | undefined;
    /** 创建者标识 */
    createId?: string | undefined;
    /** 创建时间 */
    createTime?: dayjs.Dayjs | undefined;
    /** 最近更新者 */
    updater?: string | undefined;
    /** 最近更新者标识 */
    updateId?: string | undefined;
    /** 最近更新时间 */
    updateTime?: dayjs.Dayjs | undefined;
}

/** 用户配置 */
export class SysUserSettingResultView implements ISysUserSettingResultView {
    /** 代码 */
    code?: string | undefined;
    /** 值 */
    value?: string | undefined;

    constructor(data?: ISysUserSettingResultView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): SysUserSettingResultView {
        data = typeof data === 'object' ? data : {};
        let result = new SysUserSettingResultView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["value"] = this.value;
        return data;
    }
}

/** 用户配置 */
export interface ISysUserSettingResultView {
    /** 代码 */
    code?: string | undefined;
    /** 值 */
    value?: string | undefined;
}

/** 前端展示数据结构 */
export class TempDisplayCureScheduleValidate implements ITempDisplayCureScheduleValidate {
    /** 透析区间ID */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析床位名称 */
    bedName?: string | undefined;
    /** 透析床位Id */
    bedId?: string | undefined;
    /** 数据子项 */
    items?: TempDisplayCureScheduleValidateItem[] | undefined;

    constructor(data?: ITempDisplayCureScheduleValidate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dialysisAreaId = _data["dialysisAreaId"];
            this.dialysisAreaName = _data["dialysisAreaName"];
            this.bedName = _data["bedName"];
            this.bedId = _data["bedId"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TempDisplayCureScheduleValidateItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TempDisplayCureScheduleValidate {
        data = typeof data === 'object' ? data : {};
        let result = new TempDisplayCureScheduleValidate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dialysisAreaId"] = this.dialysisAreaId;
        data["dialysisAreaName"] = this.dialysisAreaName;
        data["bedName"] = this.bedName;
        data["bedId"] = this.bedId;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** 前端展示数据结构 */
export interface ITempDisplayCureScheduleValidate {
    /** 透析区间ID */
    dialysisAreaId?: string | undefined;
    /** 透析区间名称 */
    dialysisAreaName?: string | undefined;
    /** 透析床位名称 */
    bedName?: string | undefined;
    /** 透析床位Id */
    bedId?: string | undefined;
    /** 数据子项 */
    items?: TempDisplayCureScheduleValidateItem[] | undefined;
}

/** 前端展示数据结构子项 */
export class TempDisplayCureScheduleValidateItem implements ITempDisplayCureScheduleValidateItem {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者ID */
    patientId?: string | undefined;
    /** 透析方式名称 */
    dialysisTypeLabel?: string | undefined;
    /** 透析方式值 */
    dialysisType?: string | undefined;
    /** 透析日期 */
    dislysisDate?: dayjs.Dayjs;
    /** 透析班次名称 */
    shiftName?: string | undefined;
    /** 班次Id */
    shiftId?: string | undefined;
    /** 数据是否合法 */
    isCorrect?: boolean;
    /** 错误消息 */
    errorInfo?: string | undefined;
    /** Excel中患者位置 */
    position?: string | undefined;
    /** 单元格是否是空的 */
    isEmptyCell?: boolean;
    /** 列 */
    col?: number;
    /** 行 */
    row?: number;

    constructor(data?: ITempDisplayCureScheduleValidateItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.patientName = _data["patientName"];
            this.patientId = _data["patientId"];
            this.dialysisTypeLabel = _data["dialysisTypeLabel"];
            this.dialysisType = _data["dialysisType"];
            this.dislysisDate = _data["dislysisDate"] ? dayjs(_data["dislysisDate"].toString()) : <any>undefined;
            this.shiftName = _data["shiftName"];
            this.shiftId = _data["shiftId"];
            this.isCorrect = _data["isCorrect"];
            this.errorInfo = _data["errorInfo"];
            this.position = _data["position"];
            this.isEmptyCell = _data["isEmptyCell"];
            this.col = _data["col"];
            this.row = _data["row"];
        }
    }

    static fromJS(data: any): TempDisplayCureScheduleValidateItem {
        data = typeof data === 'object' ? data : {};
        let result = new TempDisplayCureScheduleValidateItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["patientName"] = this.patientName;
        data["patientId"] = this.patientId;
        data["dialysisTypeLabel"] = this.dialysisTypeLabel;
        data["dialysisType"] = this.dialysisType;
        data["dislysisDate"] = this.dislysisDate ? this.dislysisDate.toLocaleString() : <any>undefined;
        data["shiftName"] = this.shiftName;
        data["shiftId"] = this.shiftId;
        data["isCorrect"] = this.isCorrect;
        data["errorInfo"] = this.errorInfo;
        data["position"] = this.position;
        data["isEmptyCell"] = this.isEmptyCell;
        data["col"] = this.col;
        data["row"] = this.row;
        return data;
    }
}

/** 前端展示数据结构子项 */
export interface ITempDisplayCureScheduleValidateItem {
    /** 患者姓名 */
    patientName?: string | undefined;
    /** 患者ID */
    patientId?: string | undefined;
    /** 透析方式名称 */
    dialysisTypeLabel?: string | undefined;
    /** 透析方式值 */
    dialysisType?: string | undefined;
    /** 透析日期 */
    dislysisDate?: dayjs.Dayjs;
    /** 透析班次名称 */
    shiftName?: string | undefined;
    /** 班次Id */
    shiftId?: string | undefined;
    /** 数据是否合法 */
    isCorrect?: boolean;
    /** 错误消息 */
    errorInfo?: string | undefined;
    /** Excel中患者位置 */
    position?: string | undefined;
    /** 单元格是否是空的 */
    isEmptyCell?: boolean;
    /** 列 */
    col?: number;
    /** 行 */
    row?: number;
}

/** 透析记录单模板 */
export class TmplCureRecordEditModel implements ITmplCureRecordEditModel {
    /** 表头行数 */
    row?: number | undefined;
    /** 模板内容 */
    content!: string;

    constructor(data?: ITmplCureRecordEditModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.row = _data["row"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): TmplCureRecordEditModel {
        data = typeof data === 'object' ? data : {};
        let result = new TmplCureRecordEditModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["row"] = this.row;
        data["content"] = this.content;
        return data;
    }
}

/** 透析记录单模板 */
export interface ITmplCureRecordEditModel {
    /** 表头行数 */
    row?: number | undefined;
    /** 模板内容 */
    content: string;
}

export class TmplFormDataView implements ITmplFormDataView {
    /** 模板标识 */
    tmplFormId?: string | undefined;
    /** 模板名称 */
    tmplFormName?: string | undefined;
    /** 模板内容 */
    content?: string | undefined;

    constructor(data?: ITmplFormDataView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tmplFormId = _data["tmplFormId"];
            this.tmplFormName = _data["tmplFormName"];
            this.content = _data["content"];
        }
    }

    static fromJS(data: any): TmplFormDataView {
        data = typeof data === 'object' ? data : {};
        let result = new TmplFormDataView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tmplFormId"] = this.tmplFormId;
        data["tmplFormName"] = this.tmplFormName;
        data["content"] = this.content;
        return data;
    }
}

export interface ITmplFormDataView {
    /** 模板标识 */
    tmplFormId?: string | undefined;
    /** 模板名称 */
    tmplFormName?: string | undefined;
    /** 模板内容 */
    content?: string | undefined;
}

/** Reponse */
export class TmplFormDataViewResult implements ITmplFormDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TmplFormDataView[] | undefined;

    constructor(data?: ITmplFormDataViewResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TmplFormDataView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TmplFormDataViewResult {
        data = typeof data === 'object' ? data : {};
        let result = new TmplFormDataViewResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

/** Reponse */
export interface ITmplFormDataViewResult {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    /** 返回数据封装 */
    data?: TmplFormDataView[] | undefined;
}

/** 扩展注册信息 */
export class TokenViewExt implements ITokenViewExt {
    /** session id */
    sid?: string | undefined;
    /** 用户Id */
    uid?: string | undefined;
    /** 用户名称 */
    uname?: string | undefined;
    /** Token有效期 */
    expity?: number;
    /** 用户标签 */
    tags?: string[] | undefined;
    /** 用户菜单权限 */
    menus?: RoleRightMenuListView[] | undefined;
    authorizeInfo?: AuthorizeInfo;
    /** 院区Id */
    hid?: string | undefined;
    /** IP */
    ip?: string | undefined;
    /** 用户院区 */
    sysUserAreas?: SysHospitalAreaView[] | undefined;
    /** 用户自定义配置 */
    sysUserSetting?: SysUserSettingResultView[] | undefined;

    constructor(data?: ITokenViewExt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sid = _data["sid"];
            this.uid = _data["uid"];
            this.uname = _data["uname"];
            this.expity = _data["expity"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            if (Array.isArray(_data["menus"])) {
                this.menus = [] as any;
                for (let item of _data["menus"])
                    this.menus!.push(RoleRightMenuListView.fromJS(item));
            }
            this.authorizeInfo = _data["authorizeInfo"] ? AuthorizeInfo.fromJS(_data["authorizeInfo"]) : <any>undefined;
            this.hid = _data["hid"];
            this.ip = _data["ip"];
            if (Array.isArray(_data["sysUserAreas"])) {
                this.sysUserAreas = [] as any;
                for (let item of _data["sysUserAreas"])
                    this.sysUserAreas!.push(SysHospitalAreaView.fromJS(item));
            }
            if (Array.isArray(_data["sysUserSetting"])) {
                this.sysUserSetting = [] as any;
                for (let item of _data["sysUserSetting"])
                    this.sysUserSetting!.push(SysUserSettingResultView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TokenViewExt {
        data = typeof data === 'object' ? data : {};
        let result = new TokenViewExt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sid"] = this.sid;
        data["uid"] = this.uid;
        data["uname"] = this.uname;
        data["expity"] = this.expity;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        if (Array.isArray(this.menus)) {
            data["menus"] = [];
            for (let item of this.menus)
                data["menus"].push(item.toJSON());
        }
        data["authorizeInfo"] = this.authorizeInfo ? this.authorizeInfo.toJSON() : <any>undefined;
        data["hid"] = this.hid;
        data["ip"] = this.ip;
        if (Array.isArray(this.sysUserAreas)) {
            data["sysUserAreas"] = [];
            for (let item of this.sysUserAreas)
                data["sysUserAreas"].push(item.toJSON());
        }
        if (Array.isArray(this.sysUserSetting)) {
            data["sysUserSetting"] = [];
            for (let item of this.sysUserSetting)
                data["sysUserSetting"].push(item.toJSON());
        }
        return data;
    }
}

/** 扩展注册信息 */
export interface ITokenViewExt {
    /** session id */
    sid?: string | undefined;
    /** 用户Id */
    uid?: string | undefined;
    /** 用户名称 */
    uname?: string | undefined;
    /** Token有效期 */
    expity?: number;
    /** 用户标签 */
    tags?: string[] | undefined;
    /** 用户菜单权限 */
    menus?: RoleRightMenuListView[] | undefined;
    authorizeInfo?: AuthorizeInfo;
    /** 院区Id */
    hid?: string | undefined;
    /** IP */
    ip?: string | undefined;
    /** 用户院区 */
    sysUserAreas?: SysHospitalAreaView[] | undefined;
    /** 用户自定义配置 */
    sysUserSetting?: SysUserSettingResultView[] | undefined;
}

/** Reponse */
export class TokenViewExtResultEntry implements ITokenViewExtResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: TokenViewExt;

    constructor(data?: ITokenViewExtResultEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.code = _data["code"];
            this.message = _data["message"];
            this.count = _data["count"];
            this.url = _data["url"];
            this.data = _data["data"] ? TokenViewExt.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TokenViewExtResultEntry {
        data = typeof data === 'object' ? data : {};
        let result = new TokenViewExtResultEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["code"] = this.code;
        data["message"] = this.message;
        data["count"] = this.count;
        data["url"] = this.url;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

/** Reponse */
export interface ITokenViewExtResultEntry {
    /** 请求是否成功 */
    success?: boolean;
    /** 错误码 */
    code?: string | undefined;
    /** 消息 */
    message?: string | undefined;
    /** 数据量 */
    count?: number;
    /** 相关的链接地址 */
    url?: string | undefined;
    data?: TokenViewExt;
}

/** 排班详情 */
export class WeekItem implements IWeekItem {
    /** 排班日期 */
    date?: dayjs.Dayjs | undefined;
    /** 星期 */
    weekDay?: number;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析方式 */
    modeLabel?: string | undefined;

    constructor(data?: IWeekItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? dayjs(_data["date"].toString()) : <any>undefined;
            this.weekDay = _data["weekDay"];
            this.shiftName = _data["shiftName"];
            this.modeLabel = _data["modeLabel"];
        }
    }

    static fromJS(data: any): WeekItem {
        data = typeof data === 'object' ? data : {};
        let result = new WeekItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toLocaleString() : <any>undefined;
        data["weekDay"] = this.weekDay;
        data["shiftName"] = this.shiftName;
        data["modeLabel"] = this.modeLabel;
        return data;
    }
}

/** 排班详情 */
export interface IWeekItem {
    /** 排班日期 */
    date?: dayjs.Dayjs | undefined;
    /** 星期 */
    weekDay?: number;
    /** 班次 */
    shiftName?: string | undefined;
    /** 透析方式 */
    modeLabel?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}
